import fs from 'fs';
import path from 'path';
import process from 'process';
import * as url from 'url';

// TODO: throw some warnings if id lines aren't translated

const __filename = url.fileURLToPath(new URL('.', import.meta.url));
const __dirname = path.basename(__filename);
const root = path.join(__dirname, '../');

const scriptName = 'ts-node util/sync_files.ts';

const blockComment = [
  `// This file was autogenerated from running ${scriptName}.`,
  '// DO NOT EDIT THIS FILE DIRECTLY.',
  '',
];

export type ReplaceDict = { [key: string]: string };

export type ZoneReplace = {
  fileMap: ReplaceDict;
  prefix: ReplaceDict;
  other: ReplaceDict;
  id: ReplaceDict;
};

const zoneReplace: ZoneReplace[] = [
  {
    fileMap: {
      'ui/raidboss/data/06-ew/dungeon/another_sildihn_subterrane.ts':
        'ui/raidboss/data/06-ew/dungeon/another_sildihn_subterrane-savage.ts',
    },
    prefix: { 'ASS': 'ASSS' },
    other: {
      'zoneId: ZoneId.AnotherSildihnSubterrane,': 'zoneId: ZoneId.AnotherSildihnSubterraneSavage,',
      'another_sildihn_subterrane.txt': 'another_sildihn_subterrane-savage.txt',
    },
    id: {
      '7960': '7978',
      '7961': '7979',
      '7962': '797A',
      '7964': '797C',
      '7963': '797B',
      '7965': '797D',
      '795B': '7973',
      '795C': '7974',
      '795D': '7975',
      '7957': '796F',
      '775A': '777D',
      '776C': '778F',
      '776D': '7790',
      '7766': '7789',
      '7751': '7774',
      '7752': '7775',
      '775E': '7781',
      '774F': '7772',
      '7767': '778A',
      '7750': '7773',
      '765D': '779F',
      '765E': '77A0',
      '765F': '77A1',
      '7660': '77A2',
      '7661': '77A3',
      '7662': '77A4',
      '776E': '7791',
      '776F': '7792',
      '7659': '779B',
      '7658': '779A',
      '765A': '779C',
      '7969': '7981',
      '7966': '797E',
      '7968': '7980',
      '796C': '7984',
      '796B': '7983',
      '796A': '7982',
      '7671': '77B3',
      '765B': '779D',
      '765C': '779E',
      '7672': '77B4',
      '768C': '77BC',
      '766F': '77B1',
      '7670': '77B2',
      '7666': '77A8',
      '74AF': '76C5',
      '74AD': '76C4',
      '74B7': '76CA',
      '74BB': '76CD',

      '6854': '6854', // unnamed ability before sculptor's passion is the same
      '7491': '7491', // infern brand is the same
    },
  },
];

const processFile = (zone: ZoneReplace, inputText: string): string => {
  const output = [...blockComment];

  const lines = inputText.split('\n');
  const prefixes = Object.entries(zone.prefix);
  const others = Object.entries(zone.other);
  const ids = Object.entries(zone.id);

  for (const inputLine of lines) {
    let line = inputLine;

    for (const [inputId, outputId] of prefixes)
      line = line.replace(`id: '${inputId} `, `id: '${outputId} `);
    for (const [input, output] of others)
      line = line.replace(input, output);
    for (const [inputId, outputId] of ids)
      line = line.replace(`${inputId}`, `${outputId}`);

    output.push(line);
  }

  return output.join('\n');
};

const processAllFiles = async (root: string) => {
  for (const zone of zoneReplace) {
    for (const [input, output] of Object.entries(zone.fileMap)) {
      const inputFile = await fs.promises.readFile(path.join(root, input));
      const outputText = processFile(zone, inputFile.toString());
      await fs.promises.writeFile(output, outputText);
    }
  }

  process.exit(0);
};

void processAllFiles(root);
