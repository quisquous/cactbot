/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 446:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// For consistency with Responses, Conditions
// are also functions.

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  targetIsYou() {
    return (data, matches) => data.me === matches?.target;
  },
  targetIsNotYou() {
    return (data, matches) => data.me !== matches?.target;
  },
  caresAboutAOE() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },
  caresAboutMagical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
  },
  caresAboutPhysical() {
    return data => data.role === 'tank' || data.role === 'healer' || data.CanFeint() || data.job === 'BLU';
  }
});

/***/ }),

/***/ 873:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY

const data = {
  'Companions': 12,
  'CustomDeliveries': 25,
  'DeepDungeons': 21,
  'DisciplesOfTheHand': 17,
  'DisciplesOfTheLand': 16,
  'Dungeons': 2,
  'DutyRoulette': 1,
  'Eureka': 26,
  'Fates': 8,
  'GoldSaucer': 19,
  'GrandCompany': 11,
  'Guildhests': 3,
  'Levequests': 10,
  'MaskedCarnivale': 27,
  'OverallCompletion': 14,
  'PlayerCommendation': 15,
  'Pvp': 6,
  'QuestBattles': 7,
  'Raids': 5,
  'RetainerVentures': 18,
  'TreasureHunt': 9,
  'Trials': 4,
  'TribalQuests': 13,
  'UltimateRaids': 28,
  'VCDungeonFinder': 30,
  'WondrousTails': 24
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 619:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Go": () => (/* binding */ langToLocale),
/* harmony export */   "jd": () => (/* binding */ isLang)
/* harmony export */ });
/* unused harmony exports languages, langMap, browserLanguagesToLang */
const languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
const langMap = {
  en: {
    en: 'English',
    de: 'German',
    fr: 'French',
    ja: 'Japanese',
    cn: 'Chinese',
    ko: 'Korean'
  },
  de: {
    en: 'Englisch',
    de: 'Deutsch',
    fr: 'Französisch',
    ja: 'Japanisch',
    cn: 'Chinesisch',
    ko: 'Koreanisch'
  },
  fr: {
    en: 'Anglais',
    de: 'Allemand',
    fr: 'Français',
    ja: 'Japonais',
    cn: 'Chinois',
    ko: 'Coréen'
  },
  ja: {
    en: '英語',
    de: 'ドイツ語',
    fr: 'フランス語',
    ja: '日本語',
    cn: '中国語',
    ko: '韓国語'
  },
  cn: {
    en: '英文',
    de: '德文',
    fr: '法文',
    ja: '日文',
    cn: '中文',
    ko: '韩文'
  },
  ko: {
    en: '영어',
    de: '독일어',
    fr: '프랑스어',
    ja: '일본어',
    cn: '중국어',
    ko: '한국어'
  }
};
const isLang = lang => {
  const langStrs = languages;
  if (lang === undefined) return false;
  return langStrs.includes(lang);
};
const langToLocale = lang => {
  return {
    en: 'en',
    de: 'de',
    fr: 'fr',
    ja: 'ja',
    cn: 'zh-CN',
    ko: 'ko'
  }[lang];
};
const browserLanguagesToLang = languages => {
  const lang = [...navigator.languages, 'en'].map(l => l.slice(0, 2))
  // Remap `zh` to `cn` to match cactbot languages
  .map(l => l === 'zh' ? 'cn' : l).filter(l => languages.includes(l))[0];
  return isLang(lang) ? lang : 'en';
};

/***/ }),

/***/ 21:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": () => (/* binding */ logDefinitionsVersions),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// TODO: Maybe bring in a helper library that can compile-time extract these keys instead?
const combatantMemoryKeys = ['CurrentWorldID', 'WorldID', 'WorldName', 'BNpcID', 'BNpcNameID', 'PartyType', 'ID', 'OwnerID', 'WeaponId', 'Type', 'Job', 'Level', 'Name', 'CurrentHP', 'MaxHP', 'CurrentMP', 'MaxMP', 'PosX', 'PosY', 'PosZ', 'Heading', 'MonsterType', 'Status', 'ModelStatus', 'AggressionStatus', 'TargetID', 'IsTargetable', 'Radius', 'Distance', 'EffectiveDistance', 'NPCTargetID', 'CurrentGP', 'MaxGP', 'CurrentCP', 'MaxCP', 'PCTargetID', 'IsCasting1', 'IsCasting2', 'CastBuffID', 'CastTargetID', 'CastDurationCurrent', 'CastDurationMax', 'TransformationId'];
const latestLogDefinitions = {
  GameLog: {
    type: '00',
    name: 'GameLog',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ChatLog',
    fields: {
      type: 0,
      timestamp: 1,
      code: 2,
      name: 3,
      line: 4
    },
    subFields: {
      code: {
        '0039': {
          name: 'message',
          canAnonymize: true
        },
        '0038': {
          name: 'echo',
          canAnonymize: true
        },
        '0044': {
          name: 'dialog',
          canAnonymize: true
        },
        '0839': {
          name: 'message',
          canAnonymize: true
        }
      }
    },
    firstOptionalField: undefined
  },
  ChangeZone: {
    type: '01',
    name: 'ChangeZone',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Territory',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ChangedPlayer: {
    type: '02',
    name: 'ChangedPlayer',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ChangePrimaryPlayer',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
    },
    playerIds: {
      2: 3
    },
    lastInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  AddedCombatant: {
    type: '03',
    name: 'AddedCombatant',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'AddCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      ownerId: 6,
      worldId: 7,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      currentHp: 11,
      hp: 12,
      currentMp: 13,
      mp: 14,
      // maxTp: 15,
      // tp: 16,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  RemovedCombatant: {
    type: '04',
    name: 'RemovedCombatant',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'RemoveCombatant',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      job: 4,
      level: 5,
      owner: 6,
      world: 8,
      npcNameId: 9,
      npcBaseId: 10,
      hp: 12,
      x: 17,
      y: 18,
      z: 19,
      heading: 20
    },
    playerIds: {
      2: 3,
      6: null
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  PartyList: {
    type: '11',
    name: 'PartyList',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'PartyList',
    fields: {
      type: 0,
      timestamp: 1,
      partyCount: 2,
      id0: 3,
      id1: 4,
      id2: 5,
      id3: 6,
      id4: 7,
      id5: 8,
      id6: 9,
      id7: 10,
      id8: 11,
      id9: 12,
      id10: 13,
      id11: 14,
      id12: 15,
      id13: 16,
      id14: 17,
      id15: 18,
      id16: 19,
      id17: 20,
      id18: 21,
      id19: 22,
      id20: 23,
      id21: 24,
      id22: 25,
      id23: 26
    },
    playerIds: {
      3: null,
      4: null,
      5: null,
      6: null,
      7: null,
      8: null,
      9: null,
      10: null,
      11: null,
      12: null,
      13: null,
      14: null,
      15: null,
      16: null,
      17: null,
      18: null,
      19: null,
      20: null,
      21: null,
      22: null,
      23: null,
      24: null,
      25: null,
      26: null
    },
    firstOptionalField: 3,
    canAnonymize: true,
    lastInclude: true
  },
  PlayerStats: {
    type: '12',
    name: 'PlayerStats',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'PlayerStats',
    fields: {
      type: 0,
      timestamp: 1,
      job: 2,
      strength: 3,
      dexterity: 4,
      vitality: 5,
      intelligence: 6,
      mind: 7,
      piety: 8,
      attackPower: 9,
      directHit: 10,
      criticalHit: 11,
      attackMagicPotency: 12,
      healMagicPotency: 13,
      determination: 14,
      skillSpeed: 15,
      spellSpeed: 16,
      tenacity: 18,
      localContentId: 19
    },
    canAnonymize: true,
    lastInclude: true,
    firstOptionalField: undefined
  },
  StartsUsing: {
    type: '20',
    name: 'StartsUsing',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StartsCasting',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      castTime: 8,
      x: 9,
      y: 10,
      z: 11,
      heading: 12
    },
    possibleRsvFields: [5],
    blankFields: [6],
    playerIds: {
      2: 3,
      6: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Ability: {
    type: '21',
    name: 'Ability',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    possibleRsvFields: [5],
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkAOEAbility: {
    type: '22',
    name: 'NetworkAOEAbility',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'AOEActionEffect',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      ability: 5,
      targetId: 6,
      target: 7,
      flags: 8,
      damage: 9,
      targetCurrentHp: 24,
      targetMaxHp: 25,
      targetCurrentMp: 26,
      targetMaxMp: 27,
      // targetCurrentTp: 28,
      // targetMaxTp: 29,
      targetX: 30,
      targetY: 31,
      targetZ: 32,
      targetHeading: 33,
      currentHp: 34,
      maxHp: 35,
      currentMp: 36,
      maxMp: 37,
      // currentTp: 38;
      // maxTp: 39;
      x: 40,
      y: 41,
      z: 42,
      heading: 43,
      sequence: 44,
      targetIndex: 45,
      targetCount: 46
    },
    possibleRsvFields: [5],
    playerIds: {
      2: 3,
      6: 7
    },
    blankFields: [6],
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkCancelAbility: {
    type: '23',
    name: 'NetworkCancelAbility',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'CancelAction',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      id: 4,
      name: 5,
      reason: 6
    },
    possibleRsvFields: [5],
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkDoT: {
    type: '24',
    name: 'NetworkDoT',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'DoTHoT',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      which: 4,
      effectId: 5,
      damage: 6,
      currentHp: 7,
      maxHp: 8,
      currentMp: 9,
      maxMp: 10,
      // currentTp: 11,
      // maxTp: 12,
      x: 13,
      y: 14,
      z: 15,
      heading: 16,
      sourceId: 17,
      source: 18,
      // An id number lookup into the AttackType table
      damageType: 19,
      sourceCurrentHp: 20,
      sourceMaxHp: 21,
      sourceCurrentMp: 22,
      sourceMaxMp: 23,
      // sourceCurrentTp: 24,
      // sourceMaxTp: 25,
      sourceX: 26,
      sourceY: 27,
      sourceZ: 28,
      sourceHeading: 29
    },
    playerIds: {
      2: 3,
      17: 18
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  WasDefeated: {
    type: '25',
    name: 'WasDefeated',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Death',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      sourceId: 4,
      source: 5
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  GainsEffect: {
    type: '26',
    name: 'GainsEffect',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusAdd',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      duration: 4,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9,
      targetMaxHp: 10,
      sourceMaxHp: 11
    },
    possibleRsvFields: [3],
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  HeadMarker: {
    type: '27',
    name: 'HeadMarker',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'TargetIcon',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      id: 6
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkRaidMarker: {
    type: '28',
    name: 'NetworkRaidMarker',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'WaymarkMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      waymark: 3,
      id: 4,
      name: 5,
      x: 6,
      y: 7,
      z: 8
    },
    playerIds: {
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkTargetMarker: {
    type: '29',
    name: 'NetworkTargetMarker',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'SignMarker',
    fields: {
      type: 0,
      timestamp: 1,
      operation: 2,
      // Add, Update, Delete
      waymark: 3,
      id: 4,
      name: 5,
      targetId: 6,
      targetName: 7
    },
    playerIds: {
      4: 5,
      6: 7
    },
    firstOptionalField: undefined
  },
  LosesEffect: {
    type: '30',
    name: 'LosesEffect',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusRemove',
    fields: {
      type: 0,
      timestamp: 1,
      effectId: 2,
      effect: 3,
      sourceId: 5,
      source: 6,
      targetId: 7,
      target: 8,
      count: 9
    },
    possibleRsvFields: [3],
    playerIds: {
      5: 6,
      7: 8
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkGauge: {
    type: '31',
    name: 'NetworkGauge',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Gauge',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      data0: 3,
      data1: 4,
      data2: 5,
      data3: 6
    },
    playerIds: {
      2: null
    },
    // Sometimes this last field looks like a player id.
    // For safety, anonymize all of the gauge data.
    firstUnknownField: 3,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkWorld: {
    type: '32',
    name: 'NetworkWorld',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'World',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  },
  ActorControl: {
    type: '33',
    name: 'ActorControl',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Director',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      command: 3,
      data0: 4,
      data1: 5,
      data2: 6,
      data3: 7
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NameToggle: {
    type: '34',
    name: 'NameToggle',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'NameToggle',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      targetId: 4,
      targetName: 5,
      toggle: 6
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Tether: {
    type: '35',
    name: 'Tether',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Tether',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      source: 3,
      targetId: 4,
      target: 5,
      id: 8
    },
    playerIds: {
      2: 3,
      4: 5
    },
    canAnonymize: true,
    firstUnknownField: 9,
    firstOptionalField: undefined
  },
  LimitBreak: {
    type: '36',
    name: 'LimitBreak',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'LimitBreak',
    fields: {
      type: 0,
      timestamp: 1,
      valueHex: 2,
      bars: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  NetworkEffectResult: {
    type: '37',
    name: 'NetworkEffectResult',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'EffectResult',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      sequenceId: 4,
      currentHp: 5,
      maxHp: 6,
      currentMp: 7,
      maxMp: 8,
      currentShield: 9,
      // Field index 10 is always `0`
      x: 11,
      y: 12,
      z: 13,
      heading: 14
    },
    playerIds: {
      2: 3
    },
    firstUnknownField: 22,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusEffect: {
    type: '38',
    name: 'StatusEffect',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusList',
    fields: {
      type: 0,
      timestamp: 1,
      targetId: 2,
      target: 3,
      jobLevelData: 4,
      hp: 5,
      maxHp: 6,
      mp: 7,
      maxMp: 8,
      currentShield: 9,
      // Field index 10 is always `0`
      x: 11,
      y: 12,
      z: 13,
      heading: 14,
      data0: 15,
      data1: 16,
      data2: 17,
      data3: 18,
      data4: 19,
      data5: 20
      // Variable number of triplets here, but at least one.
    },

    playerIds: {
      2: 3
    },
    firstUnknownField: 18,
    canAnonymize: true,
    firstOptionalField: 18
  },
  NetworkUpdateHP: {
    type: '39',
    name: 'NetworkUpdateHP',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'UpdateHp',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3,
      currentHp: 4,
      maxHp: 5,
      currentMp: 6,
      maxMp: 7,
      // currentTp: 8,
      // maxTp: 9,
      x: 10,
      y: 11,
      z: 12,
      heading: 13
    },
    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Map: {
    type: '40',
    name: 'Map',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'ChangeMap',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      regionName: 3,
      placeName: 4,
      placeNameSub: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined,
    lastInclude: true
  },
  SystemLogMessage: {
    type: '41',
    name: 'SystemLogMessage',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'SystemLogMessage',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      id: 3,
      param0: 4,
      param1: 5,
      param2: 6
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StatusList3: {
    type: '42',
    name: 'StatusList3',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'StatusList3',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      name: 3
      // triplets of fields from here (effectId, data, playerId)?
    },

    playerIds: {
      2: 3
    },
    canAnonymize: true,
    firstOptionalField: 4,
    firstUnknownField: 4
  },
  ParserInfo: {
    type: '249',
    name: 'ParserInfo',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Settings',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  ProcessInfo: {
    type: '250',
    name: 'ProcessInfo',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Process',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Debug: {
    type: '251',
    name: 'Debug',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Debug',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: false,
    firstOptionalField: undefined
  },
  PacketDump: {
    type: '252',
    name: 'PacketDump',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'PacketDump',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  Version: {
    type: '253',
    name: 'Version',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Version',
    fields: {
      type: 0,
      timestamp: 1
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  Error: {
    type: '254',
    name: 'Error',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'Error',
    fields: {
      type: 0,
      timestamp: 1
    },
    canAnonymize: false,
    firstOptionalField: undefined
  },
  None: {
    type: '[0-9]+',
    name: 'None',
    source: 'FFXIV_ACT_Plugin',
    messageType: 'None',
    fields: {
      type: 0,
      timestamp: 1
    },
    isUnknown: true,
    firstOptionalField: undefined
  },
  // OverlayPlugin log lines
  LineRegistration: {
    type: '256',
    name: 'LineRegistration',
    source: 'OverlayPlugin',
    messageType: '256',
    fields: {
      type: 0,
      timestamp: 1,
      id: 2,
      source: 3,
      version: 4
    },
    globalInclude: true,
    canAnonymize: true,
    firstOptionalField: undefined
  },
  MapEffect: {
    type: '257',
    name: 'MapEffect',
    source: 'OverlayPlugin',
    messageType: '257',
    fields: {
      type: 0,
      timestamp: 1,
      instance: 2,
      flags: 3,
      // values for the location field seem to vary between instances
      // (e.g. a location of '08' in P5S does not appear to be the same location in P5S as in P6S)
      // but this field does appear to consistently contain position info for the effect rendering
      location: 4,
      data0: 5,
      data1: 6
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  FateDirector: {
    type: '258',
    name: 'FateDirector',
    source: 'OverlayPlugin',
    messageType: '258',
    // fateId and progress are in hex.
    fields: {
      type: 0,
      timestamp: 1,
      category: 2,
      // padding0: 3,
      fateId: 4,
      progress: 5
      // param3: 6,
      // param4: 7,
      // param5: 8,
      // param6: 9,
      // padding1: 10,
    },

    canAnonymize: true,
    firstOptionalField: undefined
  },
  CEDirector: {
    type: '259',
    name: 'CEDirector',
    source: 'OverlayPlugin',
    messageType: '259',
    // all fields are in hex
    fields: {
      type: 0,
      timestamp: 1,
      popTime: 2,
      timeRemaining: 3,
      // unknown0: 4,
      ceKey: 5,
      numPlayers: 6,
      status: 7,
      // unknown1: 8,
      progress: 9
      // unknown2: 10,
      // unknown3: 11,
      // unknown4: 12,
    },

    canAnonymize: true,
    firstOptionalField: undefined
  },
  InCombat: {
    type: '260',
    name: 'InCombat',
    source: 'OverlayPlugin',
    messageType: '260',
    fields: {
      type: 0,
      timestamp: 1,
      inACTCombat: 2,
      inGameCombat: 3,
      isACTChanged: 4,
      isGameChanged: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  CombatantMemory: {
    type: '261',
    name: 'CombatantMemory',
    source: 'OverlayPlugin',
    messageType: '261',
    fields: {
      type: 0,
      timestamp: 1,
      change: 2,
      id: 3
      // from here, pairs of field name/values
    },

    canAnonymize: true,
    firstOptionalField: 5,
    // TODO: fix this data structure and anonymizer to be able to handle repeatingFields.
    // At the very least, Name and PCTargetID need to be anonymized as well.
    firstUnknownField: 4,
    playerIds: {
      3: null
    },
    repeatingFields: {
      startingIndex: 4,
      label: 'pair',
      names: ['key', 'value'],
      sortKeys: true,
      primaryKey: 'key',
      possibleKeys: combatantMemoryKeys
    }
  },
  RSVData: {
    type: '262',
    name: 'RSVData',
    source: 'OverlayPlugin',
    messageType: '262',
    fields: {
      type: 0,
      timestamp: 1,
      locale: 2,
      // unknown0: 3,
      key: 4,
      value: 5
    },
    canAnonymize: true,
    firstOptionalField: undefined
  },
  StartsUsingExtra: {
    type: '263',
    name: 'StartsUsingExtra',
    source: 'OverlayPlugin',
    messageType: '263',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      id: 3,
      x: 4,
      y: 5,
      z: 6,
      heading: 7
    },
    playerIds: {
      2: null
    },
    canAnonymize: true,
    firstOptionalField: 7
  },
  AbilityExtra: {
    type: '264',
    name: 'AbilityExtra',
    source: 'OverlayPlugin',
    messageType: '264',
    fields: {
      type: 0,
      timestamp: 1,
      sourceId: 2,
      id: 3,
      globalEffectCounter: 4,
      dataFlag: 5,
      x: 6,
      y: 7,
      z: 8,
      heading: 9
    },
    blankFields: [6],
    playerIds: {
      2: null
    },
    canAnonymize: true,
    firstOptionalField: 9
  }
};
const logDefinitionsVersions = {
  'latest': latestLogDefinitions
};

// Verify that this has the right type, but export `as const`.
const assertLogDefinitions = logDefinitionsVersions;
console.assert(assertLogDefinitions);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logDefinitionsVersions['latest']);

/***/ }),

/***/ 622:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BW": () => (/* binding */ buildNetRegexForTrigger),
/* harmony export */   "ZP": () => (/* binding */ NetRegexes),
/* harmony export */   "_1": () => (/* binding */ keysThatRequireTranslation),
/* harmony export */   "k3": () => (/* binding */ gameLogCodes),
/* harmony export */   "sL": () => (/* binding */ commonNetRegex)
/* harmony export */ });
/* unused harmony export buildRegex */
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(402);



const separator = '\\|';
const matchDefault = '[^|]*';

// If NetRegexes.setFlagTranslationsNeeded is set to true, then any
// regex created that requires a translation will begin with this string
// and match the magicStringRegex.  This is maybe a bit goofy, but is
// a pretty straightforward way to mark regexes for translations.
// If issue #1306 is ever resolved, we can remove this.
const magicTranslationString = `^^`;
const magicStringRegex = /^\^\^/;

// can't simply export this, see https://github.com/quisquous/cactbot/pull/4957#discussion_r1002590589
const keysThatRequireTranslationAsConst = ['ability', 'name', 'source', 'target', 'line'];
const keysThatRequireTranslation = keysThatRequireTranslationAsConst;
const gameLogCodes = {
  echo: '0038',
  dialog: '0044',
  message: '0839'
};
const defaultParams = (type, version, include) => {
  const logType = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type];
  if (include === undefined) {
    include = Object.keys(logType.fields);
    if ('repeatingFields' in logType) {
      include.push(logType.repeatingFields.label);
    }
  }
  const params = {};
  const firstOptionalField = logType.firstOptionalField;
  for (const [prop, index] of Object.entries(logType.fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = logType.type;
    params[index] = param;
  }
  if ('repeatingFields' in logType && include.includes(logType.repeatingFields.label)) {
    params[logType.repeatingFields.startingIndex] = {
      field: logType.repeatingFields.label,
      optional: firstOptionalField !== undefined && logType.repeatingFields.startingIndex >= firstOptionalField,
      repeating: true,
      repeatingKeys: [...logType.repeatingFields.names],
      sortKeys: logType.repeatingFields.sortKeys,
      primaryKey: logType.repeatingFields.primaryKey,
      possibleKeys: [...logType.repeatingFields.possibleKeys]
    };
  }
  return params;
};
const isRepeatingField = (repeating, value) => {
  if (repeating !== true) return false;
  // Allow excluding the field to match for extraction
  if (value === undefined) return true;
  if (!Array.isArray(value)) return false;
  for (const e of value) {
    if (typeof e !== 'object') return false;
  }
  return true;
};
const parseHelper = (params, funcName, fields) => {
  params = params ?? {};
  const validFields = [];
  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }
  _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, funcName, ['capture', ...validFields]);

  // Find the last key we care about, so we can shorten the regex if needed.
  const capture = _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].trueIfUndefined */ .Z.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;
  if (capture) {
    const keys = [];
    for (const key in fields) keys.push(key);
    let tmpKey = keys.pop();
    if (tmpKey === undefined) {
      maxKeyStr = fieldKeys[fieldKeys.length - 1] ?? '0';
    } else {
      while (fields[tmpKey]?.optional && !((fields[tmpKey]?.field ?? '') in params)) tmpKey = keys.pop();
      maxKeyStr = tmpKey ?? '0';
    }
  } else {
    maxKeyStr = '0';
    for (const key in fields) {
      const value = fields[key] ?? {};
      if (typeof value !== 'object') continue;
      const fieldName = fields[key]?.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }
  const maxKey = parseInt(maxKeyStr);

  // For testing, it's useful to know if this is a regex that requires
  // translation.  We test this by seeing if there are any specified
  // fields, and if so, inserting a magic string that we can detect.
  // This lets us differentiate between "regex that should be translated"
  // e.g. a regex with `target` specified, and "regex that shouldn't"
  // e.g. a gains effect with just effectId specified.
  const transParams = Object.keys(params).filter(k => keysThatRequireTranslation.includes(k));
  const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0;

  // Build the regex from the fields.
  let str = needsTranslations ? magicTranslationString : '^';
  let lastKey = -1;
  for (const keyStr in fields) {
    const key = parseInt(keyStr);
    // Fill in blanks.
    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += '\\y{NetField}';else if (missingFields > 1) str += `\\y{NetField}{${missingFields}}`;
    lastKey = key;
    const value = fields[keyStr];
    if (typeof value !== 'object') throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);
    const fieldName = value.field;
    const defaultFieldValue = value.value?.toString() ?? matchDefault;
    const fieldValue = params[fieldName];
    if (isRepeatingField(fields[keyStr]?.repeating, fieldValue)) {
      let repeatingArray = fieldValue;
      const sortKeys = fields[keyStr]?.sortKeys;
      const primaryKey = fields[keyStr]?.primaryKey;
      const possibleKeys = fields[keyStr]?.possibleKeys;

      // primaryKey is required if this is a repeating field per typedef in netlog_defs.ts
      // Same with possibleKeys
      if (primaryKey === undefined || possibleKeys === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();

      // Allow sorting if needed
      if (sortKeys) {
        // Also sort our valid keys list
        possibleKeys.sort((left, right) => left.toLowerCase().localeCompare(right.toLowerCase()));
        if (repeatingArray !== undefined) {
          repeatingArray = [...repeatingArray].sort((left, right) => {
            // We check the validity of left/right because they're user-supplied
            if (typeof left !== 'object' || left[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            const leftValue = left[primaryKey];
            if (typeof leftValue !== 'string' || !possibleKeys?.includes(leftValue)) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            if (typeof right !== 'object' || right[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            const rightValue = right[primaryKey];
            if (typeof rightValue !== 'string' || !possibleKeys?.includes(rightValue)) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            return leftValue.toLowerCase().localeCompare(rightValue.toLowerCase());
          });
        }
      }
      const anonReps = repeatingArray;
      // Loop over our possible keys
      // Build a regex that can match any possible key with required values substituted in
      possibleKeys.forEach(possibleKey => {
        const rep = anonReps?.find(rep => primaryKey in rep && rep[primaryKey] === possibleKey);
        let fieldRegex = '';
        // Rather than looping over the keys defined on the object,
        // loop over the base type def's keys. This enforces the correct order.
        fields[keyStr]?.repeatingKeys?.forEach(key => {
          let val = rep?.[key];
          if (rep === undefined || !(key in rep)) {
            // If we don't have a value for this key
            // insert a placeholder, unless it's the primary key
            if (key === primaryKey) val = possibleKey;else val = matchDefault;
          }
          if (typeof val !== 'string') {
            if (!Array.isArray(val)) val = matchDefault;else if (val.length < 1) val = matchDefault;else if (val.some(v => typeof v !== 'string')) val = matchDefault;
          }
          fieldRegex += _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maybeCapture */ .Z.maybeCapture(key === primaryKey ? false : capture,
          // All capturing groups are `fieldName` + `possibleKey`, e.g. `pairIsCasting1`
          fieldName + possibleKey, val, defaultFieldValue) + separator;
        });
        if (fieldRegex.length > 0) {
          str += `(?:${fieldRegex})${rep !== undefined ? '' : '?'}`;
        }
      });
    } else if (fields[keyStr]?.repeating) {
      // If this is a repeating field but the actual value is empty or otherwise invalid,
      // don't process further. We can't use `continue` in the above block because that
      // would skip the early-out break at the end of the loop.
    } else {
      if (fieldName !== undefined) {
        str += _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].maybeCapture */ .Z.maybeCapture(
        // more accurate type instead of `as` cast
        // maybe this function needs a refactoring
        capture, fieldName, fieldValue, defaultFieldValue) + separator;
      } else {
        str += defaultFieldValue + separator;
      }
    }

    // Stop if we're not capturing and don't care about future fields.
    if (key >= maxKey) break;
  }
  return _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].parse */ .Z.parse(str);
};
const buildRegex = (type, params) => {
  return parseHelper(params, type, defaultParams(type, NetRegexes.logVersion));
};
class NetRegexes {
  static logVersion = 'latest';
  static flagTranslationsNeeded = false;
  static setFlagTranslationsNeeded(value) {
    NetRegexes.flagTranslationsNeeded = value;
  }
  static doesNetRegexNeedTranslation(regex) {
    // Need to `setFlagTranslationsNeeded` before calling this function.
    console.assert(NetRegexes.flagTranslationsNeeded);
    const str = typeof regex === 'string' ? regex : regex.source;
    return !!magicStringRegex.exec(str);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */
  static startsUsing(params) {
    return buildRegex('StartsUsing', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */
  static ability(params) {
    return parseHelper(params, 'Ability', {
      ...defaultParams('Ability', NetRegexes.logVersion),
      // Override type
      0: {
        field: 'type',
        value: '2[12]',
        optional: false
      }
    });
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */
  static abilityFull(params) {
    return this.ability(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */
  static headMarker(params) {
    return buildRegex('HeadMarker', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */
  static addedCombatant(params) {
    return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', NetRegexes.logVersion));
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   * @deprecated Use `addedCombatant` instead
   */
  static addedCombatantFull(params) {
    return NetRegexes.addedCombatant(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */
  static removingCombatant(params) {
    return buildRegex('RemovedCombatant', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */
  static gainsEffect(params) {
    return buildRegex('GainsEffect', params);
  }

  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */
  static statusEffectExplicit(params) {
    return buildRegex('StatusEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */
  static losesEffect(params) {
    return buildRegex('LosesEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */
  static tether(params) {
    return buildRegex('Tether', params);
  }

  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */
  static wasDefeated(params) {
    return buildRegex('WasDefeated', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
   */
  static networkDoT(params) {
    return buildRegex('NetworkDoT', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static echo(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, 'Echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    return NetRegexes.gameLog({
      ...params,
      code: gameLogCodes.echo
    });
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, 'Dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    return NetRegexes.gameLog({
      ...params,
      code: gameLogCodes.dialog
    });
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static message(params) {
    if (typeof params === 'undefined') params = {};
    _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"].validateParams */ .Z.validateParams(params, 'Message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    return NetRegexes.gameLog({
      ...params,
      code: gameLogCodes.message
    });
  }

  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameLog(params) {
    return buildRegex('GameLog', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameNameLog(params) {
    // Backwards compatability.
    return NetRegexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */
  static statChange(params) {
    return buildRegex('PlayerStats', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */
  static changeZone(params) {
    return buildRegex('ChangeZone', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */
  static network6d(params) {
    return buildRegex('ActorControl', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */
  static nameToggle(params) {
    return buildRegex('NameToggle', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */
  static map(params) {
    return buildRegex('Map', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */
  static systemLogMessage(params) {
    return buildRegex('SystemLogMessage', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-257-0x101-mapeffect
   */
  static mapEffect(params) {
    return buildRegex('MapEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-258-0x102-fatedirector
   */
  static fateDirector(params) {
    return buildRegex('FateDirector', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-259-0x103-cedirector
   */
  static ceDirector(params) {
    return buildRegex('CEDirector', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-261-0x105-combatantmemory
   */
  static combatantMemory(params) {
    return buildRegex('CombatantMemory', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-263-0x107-startsusingextra
   */
  static startsUsingExtra(params) {
    return buildRegex('StartsUsingExtra', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-264-0x108-abilityextra
   */
  static abilityExtra(params) {
    return buildRegex('AbilityExtra', params);
  }
}
const commonNetRegex = {
  // TODO(6.2): remove 40000010 after everybody is on 6.2.
  // TODO: or maybe keep around for playing old log files??
  wipe: NetRegexes.network6d({
    command: ['40000010', '4000000F']
  }),
  cactbotWipeEcho: NetRegexes.echo({
    line: 'cactbot wipe.*?'
  }),
  userWipeEcho: NetRegexes.echo({
    line: 'end'
  })
};
const buildNetRegexForTrigger = (type, params) => {
  if (type === 'Ability')
    // ts can't narrow T to `Ability` here, need casting.
    return NetRegexes.ability(params);
  return buildRegex(type, params);
};

/***/ }),

/***/ 62:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ UnreachableCode)
/* harmony export */ });
// Helper Error for TypeScript situations where the programmer thinks they
// know better than TypeScript that some situation will never occur.

// The intention here is that the programmer does not expect a particular
// bit of code to happen, and so has not written careful error handling.
// If it does occur, at least there will be an error and we can figure out why.
// This is preferable to casting or disabling TypeScript altogether in order to
// avoid syntax errors.

// One common example is a regex, where if the regex matches then all of the
// (non-optional) regex groups will also be valid, but TypeScript doesn't know.
class UnreachableCode extends Error {
  constructor() {
    super('This code shouldn\'t be reached');
  }
}

/***/ }),

/***/ 81:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Output strings for now require a field for every language, so this is a
// helper function to generate one for literal numbers.
const numberToOutputString = function (n) {
  const str = n.toString();
  return {
    en: str,
    de: str,
    fr: str,
    ja: str,
    cn: str,
    ko: str
  };
};

// General guidelines:
// * property names should closely match English text
// * use OnPlayer suffix for things with `${player}`
// * use OnTarget suffix for things with `${name}`
// * any other parameters (of which there are none, currently) should use consistent suffixes.
// * the value of each property should be a single object with localized keys
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  aoe: {
    en: 'aoe',
    de: 'AoE',
    fr: 'AoE',
    ja: '全体攻撃',
    cn: 'AoE',
    ko: '전체 공격'
  },
  bigAoe: {
    en: 'big aoe!',
    de: 'Große AoE!',
    fr: 'Grosse AoE !',
    ja: '強力な全体攻撃',
    cn: '大AoE伤害！',
    ko: '강한 전체 공격!'
  },
  bleedAoe: {
    en: 'AoE + Bleed',
    de: 'AoE + Blutung',
    fr: 'AoE + Saignement',
    ja: '全体攻撃 + DoT',
    cn: 'AOE + 流血',
    ko: '전체 공격 + 도트'
  },
  tankBuster: {
    en: 'Tank Buster',
    de: 'Tank buster',
    fr: 'Tank buster',
    ja: 'タンク強攻撃',
    cn: '坦克死刑',
    ko: '탱버'
  },
  miniBuster: {
    en: 'Mini Buster',
    de: 'Kleiner Tankbuster',
    fr: 'Mini Buster',
    ja: 'タンク攻撃',
    cn: '小死刑',
    ko: '약한 탱버'
  },
  tankBusterOnPlayer: {
    en: 'Tank Buster on ${player}',
    de: 'Tank buster auf ${player}',
    fr: 'Tank buster sur ${player}',
    ja: '${player}に強攻撃',
    cn: '死刑 点 ${player}',
    ko: '"${player}" 탱버'
  },
  tankBusterOnYou: {
    en: 'Tank Buster on YOU',
    de: 'Tank buster auf DIR',
    fr: 'Tank buster sur VOUS',
    ja: '自分に強攻撃',
    cn: '死刑点名',
    ko: '탱버 대상자'
  },
  // when there are multiple tankbusters going out
  tankBusters: {
    en: 'Tank Busters',
    de: 'Tank busters',
    fr: 'Tank busters',
    ja: 'タンク強攻撃',
    cn: '坦克死刑',
    ko: '탱버'
  },
  tankCleave: {
    en: 'Tank cleave',
    de: 'Tank Cleave',
    fr: 'Tank cleave',
    ja: 'タンク範囲攻撃',
    cn: '顺劈',
    ko: '광역 탱버'
  },
  tankBusterCleaves: {
    en: 'Tank Buster Cleaves',
    de: 'Tankbuster Cleaves',
    fr: 'Tankbuster cleaves',
    ja: 'MT・ST同時範囲攻撃',
    cn: '双T扇形死刑',
    ko: '동시 광역 탱버'
  },
  tankBusterCleavesOnYou: {
    en: 'Tank Cleaves on YOU',
    de: 'Tank Cleaves auf DIR',
    fr: 'Tank cleaves sur VOUS',
    ja: 'MT・ST同時範囲攻撃(自分対象)',
    cn: '坦克顺劈点名',
    ko: '광역 탱버 대상자'
  },
  avoidTankCleave: {
    en: 'Avoid tank cleave',
    de: 'Tank Cleave ausweichen',
    fr: 'Évitez le tank cleave',
    ja: 'タンク範囲攻撃を避ける',
    cn: '远离顺劈',
    ko: '광역 탱버 피하기'
  },
  avoidTankCleaves: {
    en: 'Avoid Tank Cleaves',
    de: 'Tankbuster Cleaves ausweichen',
    fr: 'Évitez les cleaves (tankbusters)',
    ja: '範囲攻撃を避けて',
    cn: '躲避双T扇形死刑',
    ko: '광역 탱버 피하기'
  },
  tankCleaveOnYou: {
    en: 'Tank cleave on YOU',
    de: 'Tank Cleave aud DIR',
    fr: 'Tank cleave sur VOUS',
    ja: '自分に範囲攻撃',
    cn: '顺劈点名',
    ko: '나에게 광역 탱버'
  },
  sharedTankbuster: {
    en: 'Shared Tank Buster',
    de: 'Geteilter Tankbuster',
    fr: 'Partagez le Tank buster',
    ja: 'タンク頭割り',
    cn: '分摊死刑',
    ko: '쉐어 탱버'
  },
  sharedTankbusterOnYou: {
    en: 'Shared Tank Buster on YOU',
    de: 'geteilter Tankbuster auf DIR',
    fr: 'Tank buster à partager sur VOUS',
    ja: '自分にタンク頭割り',
    cn: '分摊死刑点名',
    ko: '쉐어 탱버 대상자'
  },
  sharedTankbusterOnPlayer: {
    en: 'Shared Tank Buster on ${player}',
    de: 'geteilter Tankbuster on ${player}',
    fr: 'Tank buster à partager sur ${player}',
    ja: '${player} にタンク頭割り',
    cn: '分摊死刑点 ${player}',
    ko: '"${player}" 쉐어 탱버'
  },
  tankSwap: {
    en: 'Tank Swap!',
    de: 'Tankwechsel!',
    fr: 'Tank swap !',
    ja: 'タンクスイッチ!',
    cn: '换T！',
    ko: '탱 교대'
  },
  spread: {
    en: 'Spread',
    de: 'Verteilen',
    fr: 'Dispersez-vous',
    ja: '散開',
    cn: '分散',
    ko: '산개'
  },
  stackMarker: {
    // for stack marker situations
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '頭割り',
    cn: '分摊',
    ko: '쉐어뎀'
  },
  getTogether: {
    // for getting together without stack marker
    en: 'Stack',
    de: 'Sammeln',
    fr: 'Packez-vous',
    ja: '集合',
    cn: '集合',
    ko: '모이기'
  },
  healerGroups: {
    en: 'Healer Groups',
    de: 'Heiler-Gruppen',
    fr: 'Groupes sur les heals',
    ja: 'ヒラに頭割り',
    cn: '治疗分摊组',
    ko: '힐러 그룹 쉐어'
  },
  stackOnYou: {
    en: 'Stack on YOU',
    de: 'Auf DIR sammeln',
    fr: 'Package sur VOUS',
    ja: '自分に頭割り',
    cn: '集合点名',
    ko: '쉐어징 대상자'
  },
  stackOnPlayer: {
    en: 'Stack on ${player}',
    de: 'Auf ${player} sammeln',
    fr: 'Packez-vous sur ${player}',
    ja: '${player}に頭割り',
    cn: '靠近 ${player}集合',
    ko: '"${player}" 쉐어징'
  },
  stackMiddle: {
    en: 'Stack in middle',
    de: 'In der Mitte sammeln',
    fr: 'Packez-vous au milieu',
    ja: '中央で頭割り',
    cn: '中间集合',
    ko: '중앙에서 모이기'
  },
  doritoStack: {
    en: 'Dorito Stack',
    de: 'Mit Marker sammeln',
    fr: 'Packez les marques',
    ja: 'マーカー同士で頭割り',
    cn: '点名集合',
    ko: '징끼리 모이기'
  },
  spreadThenStack: {
    en: 'Spread => Stack',
    de: 'Verteilen => Sammeln',
    fr: 'Dispersion => Package',
    ja: '散開 => 頭割り',
    cn: '分散 => 集合',
    ko: '산개 => 집합'
  },
  stackThenSpread: {
    en: 'Stack => Spread',
    de: 'Sammeln => Verteilen',
    fr: 'Package => Dispersion',
    ja: '頭割り => 散開',
    cn: '集合 => 分散',
    ko: '집합 => 산개'
  },
  drawIn: {
    // Opposite of a knockback.
    en: 'Draw In',
    de: 'Einzug',
    fr: 'Attraction',
    ja: '吸込み',
    cn: '吸引',
    ko: '끌어당김'
  },
  knockback: {
    en: 'Knockback',
    de: 'Rückstoß',
    fr: 'Poussée',
    ja: 'ノックバック',
    cn: '击退',
    ko: '넉백'
  },
  knockbackOnYou: {
    en: 'Knockback on YOU',
    de: 'Rückstoß auf DIR',
    fr: 'Poussée sur VOUS',
    ja: '自分にノックバック',
    cn: '击退点名',
    ko: '넉백징 대상자'
  },
  knockbackOnPlayer: {
    en: 'Knockback on ${player}',
    de: 'Rückstoß auf ${player}',
    fr: 'Poussée sur ${player}',
    ja: '${player}にノックバック',
    cn: '击退点名${player}',
    ko: '"${player}" 넉백징'
  },
  lookTowardsBoss: {
    en: 'Look Towards Boss',
    de: 'Anschauen Boss',
    fr: 'Regardez le boss',
    ja: 'ボスを見る',
    cn: '面向Boss',
    ko: '쳐다보기'
  },
  lookAway: {
    en: 'Look Away',
    de: 'Wegschauen',
    fr: 'Regardez ailleurs',
    ja: 'ボスを見ない',
    cn: '背对Boss',
    ko: '뒤돌기'
  },
  lookAwayFromPlayer: {
    en: 'Look Away from ${player}',
    de: 'Schau weg von ${player}',
    fr: 'Ne regardez pas ${player}',
    ja: '${player}を見ない',
    cn: '背对${player}',
    ko: '${player}에게서 뒤돌기'
  },
  lookAwayFromTarget: {
    en: 'Look Away from ${name}',
    de: 'Schau weg von ${name}',
    fr: 'Ne regardez pas ${name}',
    ja: '${name}を見ない',
    cn: '背对${name}',
    ko: '${name}에게서 뒤돌기'
  },
  getBehind: {
    en: 'Get Behind',
    de: 'Hinter ihn',
    fr: 'Passez derrière',
    ja: '背面へ',
    cn: '去背后',
    ko: '보스 뒤로'
  },
  goFrontOrSides: {
    en: 'Go Front / Sides',
    de: 'Gehe nach Vorne/ zu den Seiten',
    fr: 'Allez Devant / Côtés',
    ja: '前／横へ',
    cn: '去前侧方',
    ko: '보스 후방 피하기'
  },
  goFront: {
    en: 'Go Front',
    de: 'Geh nach vorn',
    fr: 'Allez Devant',
    ja: '前へ',
    cn: '去前面',
    ko: '앞으로'
  },
  // getUnder is used when you have to get into the bosses hitbox
  getUnder: {
    en: 'Get Under',
    de: 'Unter ihn',
    fr: 'En dessous',
    ja: 'ボスに貼り付く',
    cn: '去脚下',
    ko: '보스 아래로'
  },
  // in is more like "get close but maybe even melee range is fine"
  in: {
    en: 'In',
    de: 'Rein',
    fr: 'Intérieur',
    ja: '中へ',
    cn: '靠近',
    ko: '안으로'
  },
  // out means get far away
  out: {
    en: 'Out',
    de: 'Raus',
    fr: 'Extérieur',
    ja: '外へ',
    cn: '远离',
    ko: '밖으로'
  },
  outOfMelee: {
    en: 'Out of melee',
    de: 'Raus aus Nahkampf',
    fr: 'Sortez de la mêlée',
    ja: '近接の範囲から離れる',
    cn: '离开近战距离',
    ko: '근접범위 밖으로'
  },
  inThenOut: {
    en: 'In => out',
    de: 'Rein, dann raus',
    fr: 'Intérieur, puis extérieur',
    ja: '中 => 外',
    cn: '先靠近，再远离',
    ko: '안으로 => 밖으로'
  },
  outThenIn: {
    en: 'Out => in',
    de: 'Raus, dann rein',
    fr: 'Extérieur, puis intérieur',
    ja: '外 => 中',
    cn: '先远离，再靠近',
    ko: '밖으로 => 안으로'
  },
  backThenFront: {
    en: 'Back => Front',
    de: 'Nach Hinten, danach nach Vorne',
    fr: 'Derrière puis devant',
    ja: '後ろ => 前',
    cn: '后 => 前',
    ko: '뒤로 => 앞으로'
  },
  frontThenBack: {
    en: 'Front => Back',
    de: 'Nach Vorne, danach nach Hinten',
    fr: 'Devant puis derrière',
    ja: '前 => 後ろ',
    cn: '前 => 后',
    ko: '앞으로 => 뒤로'
  },
  goIntoMiddle: {
    en: 'Get Middle',
    de: 'in die Mitte gehen',
    fr: 'Allez au milieu',
    ja: '中へ',
    cn: '去中间',
    ko: '중앙으로'
  },
  front: {
    en: 'Front',
    de: 'Vorne',
    fr: 'Devant',
    ja: '前',
    cn: '前',
    ko: '앞'
  },
  back: {
    en: 'Back',
    de: 'Hinten',
    fr: 'Derrière',
    ja: '後ろ',
    cn: '后',
    ko: '뒤'
  },
  right: {
    en: 'Right',
    de: 'Rechts',
    fr: 'À droite',
    ja: '右へ',
    cn: '右',
    ko: '오른쪽'
  },
  left: {
    en: 'Left',
    de: 'Links',
    fr: 'À gauche',
    ja: '左へ',
    cn: '左',
    ko: '왼쪽'
  },
  getLeftAndWest: {
    en: '<= Get Left/West',
    de: '<= Nach Links/Westen',
    fr: '<= Allez à Gauche/Ouest',
    ja: '<= 左/西へ',
    cn: '<= 去左/西边',
    ko: '<= 왼쪽으로'
  },
  getRightAndEast: {
    en: 'Get Right/East =>',
    de: 'Nach Rechts/Osten =>',
    fr: 'Allez à Droite/Est =>',
    ja: '右/東へ =>',
    cn: '去右/东边 =>',
    ko: '오른쪽으로 =>'
  },
  leftThenRight: {
    en: 'Left => Right',
    de: 'Links => Rechts',
    fr: 'À gauche => À droite',
    ja: '左 => 右',
    cn: '左 => 右',
    ko: '왼쪽 => 오른쪽'
  },
  rightThenLeft: {
    en: 'Right => Left',
    de: 'Rechts => Links',
    fr: 'À droite => À gauche',
    ja: '右 => 左',
    cn: '右 => 左',
    ko: '오른쪽 => 왼쪽'
  },
  goFrontBack: {
    en: 'Go Front/Back',
    de: 'Geh nach Vorne/Hinten',
    fr: 'Allez Devant/Derrière',
    ja: '縦へ',
    cn: '去前后',
    ko: '앞/뒤로'
  },
  sides: {
    en: 'Sides',
    de: 'Seiten',
    fr: 'Côtés',
    ja: '横へ',
    cn: '去侧面',
    ko: '양옆으로'
  },
  middle: {
    en: 'Middle',
    de: 'Mitte',
    fr: 'Milieu',
    ja: '中へ',
    cn: '中间',
    ko: '중앙'
  },
  clockwise: {
    en: 'Clockwise',
    de: 'Im Uhrzeigersinn',
    fr: 'Sens horaire',
    ja: '時針回り',
    cn: '顺时针',
    ko: '시계방향'
  },
  counterclockwise: {
    en: 'Counter-clock',
    de: 'Gegen den Uhrzeigersinn',
    fr: 'Anti-horaire',
    ja: '反時針回り',
    cn: '逆时针',
    ko: '반시계방향'
  },
  // killAdds is used for adds that will always be available
  killAdds: {
    en: 'Kill adds',
    de: 'Adds besiegen',
    fr: 'Tuez les adds',
    ja: '雑魚から倒して',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  // killExtraAdd is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: {
    en: 'Kill Extra Add',
    de: 'Add besiegen',
    fr: 'Tuez l\'add',
    ja: '雑魚から倒して',
    cn: '击杀小怪',
    ko: '쫄 잡기'
  },
  awayFromFront: {
    en: 'Away From Front',
    de: 'Weg von Vorne',
    fr: 'Éloignez-vous du devant',
    ja: '前方から離れる',
    cn: '远离正面',
    ko: '보스 전방 피하기'
  },
  sleepTarget: {
    en: 'Sleep ${name}',
    de: 'Schlaf auf ${name}',
    fr: 'Sommeil sur ${name}',
    ja: '${name} にスリプル',
    cn: '催眠 ${name}',
    ko: '${name} 슬리플'
  },
  stunTarget: {
    en: 'Stun ${name}',
    de: 'Betäubung auf ${name}',
    fr: 'Étourdissez ${name}',
    ja: '${name} にスタン',
    cn: '眩晕 ${name}',
    ko: '${name}기절'
  },
  interruptTarget: {
    en: 'interrupt ${name}',
    de: 'unterbreche ${name}',
    fr: 'Interrompez ${name}',
    ja: '${name} に沈黙',
    cn: '打断${name}',
    ko: '${name}기술 시전 끊기'
  },
  preyOnYou: {
    en: 'Prey on YOU',
    de: 'Marker auf DIR',
    fr: 'Marquage sur VOUS',
    ja: '自分に捕食',
    cn: '掠食点名',
    ko: '홍옥징 대상자'
  },
  preyOnPlayer: {
    en: 'Prey on ${player}',
    de: 'Marker auf ${player}',
    fr: 'Marquage sur ${player}',
    ja: '${player}に捕食',
    cn: '掠食点名${player}',
    ko: '"${player}" 홍옥징'
  },
  awayFromGroup: {
    en: 'Away from Group',
    de: 'Weg von der Gruppe',
    fr: 'Éloignez-vous du groupe',
    ja: '外へ',
    cn: '远离人群',
    ko: '다른 사람들과 떨어지기'
  },
  awayFromPlayer: {
    en: 'Away from ${player}',
    de: 'Weg von ${player}',
    fr: 'Éloignez-vous de ${player}',
    ja: '${player}から離れる',
    cn: '远离${player}',
    ko: '"${player}"에게서 멀어지기'
  },
  meteorOnYou: {
    en: 'Meteor on YOU',
    de: 'Meteor auf DIR',
    fr: 'Météore sur VOUS',
    ja: '自分にメテオ',
    cn: '陨石点名',
    ko: '나에게 메테오징'
  },
  stopMoving: {
    en: 'Stop Moving!',
    de: 'Bewegung stoppen!',
    fr: 'Ne bougez pas !',
    ja: '移動禁止！',
    cn: '停止移动！',
    ko: '이동 멈추기!'
  },
  stopEverything: {
    en: 'Stop Everything!',
    de: 'Stoppe Alles!',
    fr: 'Arrêtez tout !',
    ja: '行動禁止！',
    cn: '停止行动！',
    ko: '행동 멈추기!'
  },
  moveAway: {
    // move away to dodge aoes
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '避けて！',
    cn: '快躲开！',
    ko: '이동하기!'
  },
  moveAround: {
    // move around (e.g. jumping) to avoid being frozen
    en: 'Move!',
    de: 'Bewegen!',
    fr: 'Bougez !',
    ja: '動く！',
    cn: '快动！',
    ko: '움직이기!'
  },
  breakChains: {
    en: 'Break chains',
    de: 'Kette zerbrechen',
    fr: 'Brisez les chaines',
    ja: '線を切る',
    cn: '切断连线',
    ko: '선 끊기'
  },
  moveChainsTogether: {
    en: 'Move chains together',
    de: 'Ketten zusammen bewegen',
    fr: 'Bougez les chaines ensemble',
    ja: '線同士で一緒に移動',
    cn: '连线一起移动',
    ko: '선 붙어서 같이 움직이기'
  },
  earthshakerOnYou: {
    en: 'Earth Shaker on YOU',
    de: 'Erdstoß auf DIR',
    fr: 'Marque de terre sur VOUS',
    ja: '自分にアースシェイカー',
    cn: '大地摇动点名',
    ko: '어스징 대상자'
  },
  wakeUp: {
    en: 'WAKE UP',
    de: 'AUFWACHEN',
    fr: 'RÉVEILLE-TOI',
    ja: '目を覚まして！',
    cn: '醒醒！动一动！！',
    ko: '일어나세요!'
  },
  closeTethersWithPlayer: {
    en: 'Close Tethers (${player})',
    de: 'Nahe Verbindungen (${player})',
    fr: 'Liens proches avec (${player})',
    ja: '${player}に近づく',
    cn: '靠近连线 (${player})',
    ko: '상대와 가까이 붙기 (${player})'
  },
  farTethersWithPlayer: {
    en: 'Far Tethers (${player})',
    de: 'Entfernte Verbindungen (${player})',
    fr: 'Liens éloignés avec (${player})',
    ja: ' (${player})から離れる',
    cn: '远离连线 (${player})',
    ko: '상대와 떨어지기 (${player})'
  },
  getTowers: {
    en: 'Get Towers',
    de: 'Türme nehmen',
    fr: 'Allez dans les tours',
    ja: '塔を踏む',
    cn: '踩塔',
    ko: '기둥 들어가기'
  },
  unknown: {
    en: '???',
    de: '???',
    fr: '???',
    ja: '???',
    cn: '???',
    ko: '???'
  },
  north: {
    en: 'North',
    de: 'Norden',
    fr: 'Nord',
    ja: '北',
    cn: '上(北)',
    ko: '북쪽'
  },
  south: {
    en: 'South',
    de: 'Süden',
    fr: 'Sud',
    ja: '南',
    cn: '下(南)',
    ko: '남쪽'
  },
  east: {
    en: 'East',
    de: 'Osten',
    fr: 'Est',
    ja: '東',
    cn: '右(东)',
    ko: '동쪽'
  },
  west: {
    en: 'West',
    de: 'Westen',
    fr: 'Ouest',
    ja: '西',
    cn: '左(西)',
    ko: '서쪽'
  },
  northwest: {
    en: 'Northwest',
    de: 'Nordwesten',
    fr: 'Nord-Ouest',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서쪽'
  },
  northeast: {
    en: 'Northeast',
    de: 'Nordosten',
    fr: 'Nord-Est',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동쪽'
  },
  southwest: {
    en: 'Southwest',
    de: 'Südwesten',
    fr: 'Sud-Ouest',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서쪽'
  },
  southeast: {
    en: 'Southeast',
    de: 'Südosten',
    fr: 'Sud-Est',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동쪽'
  },
  dirN: {
    en: 'N',
    de: 'N',
    fr: 'N',
    ja: '北',
    cn: '上(北)',
    ko: '북'
  },
  dirS: {
    en: 'S',
    de: 'S',
    fr: 'S',
    ja: '南',
    cn: '下(南)',
    ko: '남'
  },
  dirE: {
    en: 'E',
    de: 'O',
    fr: 'E',
    ja: '東',
    cn: '右(东)',
    ko: '동'
  },
  dirW: {
    en: 'W',
    de: 'W',
    fr: 'O',
    ja: '西',
    cn: '左(西)',
    ko: '서'
  },
  dirNW: {
    en: 'NW',
    de: 'NW',
    fr: 'NO',
    ja: '北西',
    cn: '左上(西北)',
    ko: '북서'
  },
  dirNE: {
    en: 'NE',
    de: 'NO',
    fr: 'NE',
    ja: '北東',
    cn: '右上(东北)',
    ko: '북동'
  },
  dirSW: {
    en: 'SW',
    de: 'SW',
    fr: 'SO',
    ja: '南西',
    cn: '左下(西南)',
    ko: '남서'
  },
  dirSE: {
    en: 'SE',
    de: 'SO',
    fr: 'SE',
    ja: '南東',
    cn: '右下(东南)',
    ko: '남동'
  },
  dirNNE: {
    en: 'NNE',
    de: 'NNO',
    fr: 'NNE',
    ja: '北北東(1時)',
    cn: '上偏右(北偏东)',
    ko: '1시'
  },
  dirENE: {
    en: 'ENE',
    de: 'ONO',
    fr: 'ENE',
    ja: '東北東(2時)',
    cn: '右偏上(东偏北)',
    ko: '2시'
  },
  dirESE: {
    en: 'ESE',
    de: 'OSO',
    fr: 'ESE',
    ja: '東南東(4時)',
    cn: '右偏下(东偏南)',
    ko: '4시'
  },
  dirSSE: {
    en: 'SSE',
    de: 'SSO',
    fr: 'SSE',
    ja: '南南東(5時)',
    cn: '下偏右(南偏东)',
    ko: '5시'
  },
  dirSSW: {
    en: 'SSW',
    de: 'SSW',
    fr: 'SSO',
    ja: '南南西(7時)',
    cn: '下偏左(南偏西)',
    ko: '7시'
  },
  dirWSW: {
    en: 'WSW',
    de: 'WSW',
    fr: 'OSO',
    ja: '西南西(8時)',
    cn: '左偏下(西偏南)',
    ko: '8시'
  },
  dirWNW: {
    en: 'WNW',
    de: 'WNW',
    fr: 'ONO',
    ja: '西北西(10時)',
    cn: '左偏上(西偏北)',
    ko: '10시'
  },
  dirNNW: {
    en: 'NNW',
    de: 'NNW',
    fr: 'NNO',
    ja: '北北西(11時)',
    cn: '上偏左(北偏西)',
    ko: '11시'
  },
  tank: {
    en: 'Tank',
    de: 'Tank',
    fr: 'Tank',
    ja: 'タンク',
    cn: '坦克',
    ko: '탱'
  },
  healer: {
    en: 'Healer',
    de: 'Heiler',
    fr: 'Healer',
    ja: 'ヒーラー',
    cn: '治疗',
    ko: '힐'
  },
  dps: {
    en: 'DPS',
    de: 'DPS',
    fr: 'DPS',
    ja: 'DPS',
    cn: 'DPS',
    ko: '딜러'
  },
  // Literal numbers.
  num0: numberToOutputString(0),
  num1: numberToOutputString(1),
  num2: numberToOutputString(2),
  num3: numberToOutputString(3),
  num4: numberToOutputString(4),
  num5: numberToOutputString(5),
  num6: numberToOutputString(6),
  num7: numberToOutputString(7),
  num8: numberToOutputString(8),
  num9: numberToOutputString(9)
});

/***/ }),

/***/ 959:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PS": () => (/* binding */ addOverlayListener),
/* harmony export */   "ae": () => (/* binding */ callOverlayHandler)
/* harmony export */ });
/* unused harmony exports dispatchOverlayEvent, removeOverlayListener, setOverlayHandlerOverride, init */
// OverlayPlugin API setup

let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};
const sendMessage = (msg, cb) => {
  if (ws) {
    if (queue) queue.push(msg);else ws.send(JSON.stringify(msg));
  } else {
    if (queue) queue.push([msg, cb]);else window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
  }
};
const processEvent = msg => {
  init();
  const subs = subscribers[msg.type];
  subs?.forEach(sub => {
    try {
      sub(msg);
    } catch (e) {
      console.error(e);
    }
  });
};
const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
  init();
  if (!subscribers[event]) {
    subscribers[event] = [];
    if (!queue) {
      sendMessage({
        call: 'subscribe',
        events: [event]
      });
    }
  }
  subscribers[event]?.push(cb);
};
const removeOverlayListener = (event, cb) => {
  init();
  if (subscribers[event]) {
    const list = subscribers[event];
    const pos = list?.indexOf(cb);
    if (pos !== undefined && pos > -1) list?.splice(pos, 1);
  }
};
const callOverlayHandlerInternal = (_msg
// eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();
  const msg = {
    ..._msg,
    rseq: 0
  };
  let p;
  if (ws) {
    msg.rseq = rseqCounter++;
    p = new Promise((resolve, reject) => {
      responsePromises[msg.rseq] = {
        resolve: resolve,
        reject: reject
      };
    });
    sendMessage(msg);
  } else {
    p = new Promise((resolve, reject) => {
      sendMessage(msg, data => {
        if (data === null) {
          resolve(data);
          return;
        }
        const parsed = JSON.parse(data);
        if (parsed['$error']) reject(parsed);else resolve(parsed);
      });
    });
  }
  return p;
};
const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = (_msg
// eslint-disable-next-line @typescript-eslint/no-explicit-any
) => {
  init();

  // If this `as` is incorrect, then it will not find an override.
  // TODO: we could also replace this with a type guard.
  const type = _msg.call;
  const callFunc = callOverlayHandlerOverrideMap[type] ?? callOverlayHandlerInternal;

  // The `IOverlayHandler` type guarantees that parameters/return type match
  // one of the overlay handlers.  The OverrideMap also only stores functions
  // that match by the discriminating `call` field, and so any overrides
  // should be correct here.
  // eslint-disable-next-line max-len
  // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
  return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
  if (!override) {
    delete callOverlayHandlerOverrideMap[type];
    return;
  }
  callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
  if (inited) return;
  if (typeof window !== 'undefined') {
    wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');
    if (wsUrl !== null) {
      const connectWs = function (wsUrl) {
        ws = new WebSocket(wsUrl);
        ws.addEventListener('error', e => {
          console.error(e);
        });
        ws.addEventListener('open', () => {
          console.log('Connected!');
          const q = queue ?? [];
          queue = null;
          sendMessage({
            call: 'subscribe',
            events: Object.keys(subscribers)
          });
          for (const msg of q) {
            if (!Array.isArray(msg)) sendMessage(msg);
          }
        });
        ws.addEventListener('message', _msg => {
          try {
            if (typeof _msg.data !== 'string') {
              console.error('Invalid message data received: ', _msg);
              return;
            }
            const msg = JSON.parse(_msg.data);
            const promiseFuncs = msg?.rseq !== undefined ? responsePromises[msg.rseq] : undefined;
            if (msg.rseq !== undefined && promiseFuncs) {
              if (msg['$error']) promiseFuncs.reject(msg);else promiseFuncs.resolve(msg);
              delete responsePromises[msg.rseq];
            } else {
              processEvent(msg);
            }
          } catch (e) {
            console.error('Invalid message received: ', _msg);
            return;
          }
        });
        ws.addEventListener('close', () => {
          queue = null;
          console.log('Trying to reconnect...');
          // Don't spam the server with retries.
          window.setTimeout(() => {
            connectWs(wsUrl);
          }, 300);
        });
      };
      connectWs(wsUrl);
    } else {
      const waitForApi = function () {
        if (!window.OverlayPluginApi?.ready) {
          window.setTimeout(waitForApi, 300);
          return;
        }
        const q = queue ?? [];
        queue = null;
        window.__OverlayCallback = processEvent;
        sendMessage({
          call: 'subscribe',
          events: Object.keys(subscribers)
        });
        for (const item of q) {
          if (Array.isArray(item)) sendMessage(item[0], item[1]);
        }
      };
      waitForApi();
    }

    // Here the OverlayPlugin API is registered to the window object,
    // but this is mainly for backwards compatibility. For cactbot's built-in files,
    // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.

    /* eslint-disable deprecation/deprecation */
    window.addOverlayListener = addOverlayListener;
    window.removeOverlayListener = removeOverlayListener;
    window.callOverlayHandler = callOverlayHandler;
    window.dispatchOverlayEvent = dispatchOverlayEvent;
    /* eslint-enable deprecation/deprecation */
  }

  inited = true;
};

/***/ }),

/***/ 402:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (/* binding */ Regexes)
/* harmony export */ });
/* unused harmony export buildRegex */
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);


const separator = ':';
const matchDefault = '[^:]*';
const matchWithColonsDefault = '(?:[^:]|: )*?';
const fieldsWithPotentialColons = ['effect', 'ability'];
const defaultParams = (type, version, include) => {
  const logType = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .W[version][type];
  if (include === undefined) {
    include = Object.keys(logType.fields);
    if ('repeatingFields' in logType) {
      include.push(logType.repeatingFields.label);
    }
  }
  const params = {};
  const firstOptionalField = logType.firstOptionalField;
  for (const [prop, index] of Object.entries(logType.fields)) {
    if (!include.includes(prop)) continue;
    const param = {
      field: prop,
      optional: firstOptionalField !== undefined && index >= firstOptionalField
    };
    if (prop === 'type') param.value = logType.type;
    params[index] = param;
  }
  if ('repeatingFields' in logType && include.includes(logType.repeatingFields.label)) {
    params[logType.repeatingFields.startingIndex] = {
      field: logType.repeatingFields.label,
      optional: firstOptionalField !== undefined && logType.repeatingFields.startingIndex >= firstOptionalField,
      repeating: true,
      repeatingKeys: [...logType.repeatingFields.names],
      sortKeys: logType.repeatingFields.sortKeys,
      primaryKey: logType.repeatingFields.primaryKey,
      possibleKeys: [...logType.repeatingFields.possibleKeys]
    };
  }
  return params;
};
const isRepeatingField = (repeating, value) => {
  if (repeating !== true) return false;
  // Allow excluding the field to match for extraction
  if (value === undefined) return true;
  if (!Array.isArray(value)) return false;
  for (const e of value) {
    if (typeof e !== 'object') return false;
  }
  return true;
};
const parseHelper = (params, defKey, fields) => {
  params = params ?? {};
  const validFields = [];
  for (const index in fields) {
    const field = fields[index];
    if (field) validFields.push(field.field);
  }
  Regexes.validateParams(params, defKey, ['capture', ...validFields]);

  // Find the last key we care about, so we can shorten the regex if needed.
  const capture = Regexes.trueIfUndefined(params.capture);
  const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
  let maxKeyStr;
  if (capture) {
    const keys = [];
    for (const key in fields) keys.push(key);
    let tmpKey = keys.pop();
    if (tmpKey === undefined) {
      maxKeyStr = fieldKeys[fieldKeys.length - 1] ?? '0';
    } else {
      while (fields[tmpKey]?.optional && !((fields[tmpKey]?.field ?? '') in params)) tmpKey = keys.pop();
      maxKeyStr = tmpKey ?? '0';
    }
  } else {
    maxKeyStr = '0';
    for (const key in fields) {
      const value = fields[key] ?? {};
      if (typeof value !== 'object') continue;
      const fieldName = fields[key]?.field;
      if (fieldName !== undefined && fieldName in params) maxKeyStr = key;
    }
  }
  const maxKey = parseInt(maxKeyStr);

  // Special case for Ability to handle aoe and non-aoe.
  const abilityMessageType = `(?:${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].Ability.messageType */ .Z.Ability.messageType}|${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].NetworkAOEAbility.messageType */ .Z.NetworkAOEAbility.messageType})`;
  const abilityHexCode = '(?:15|16)';

  // Build the regex from the fields.
  const prefix = defKey !== 'Ability' ? _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].messageType : abilityMessageType;

  // Hex codes are a minimum of two characters.  Abilities are special because
  // they need to support both 0x15 and 0x16.
  const typeAsHex = parseInt(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z[defKey].type).toString(16).toUpperCase();
  const defaultHexCode = typeAsHex.length < 2 ? `00${typeAsHex}`.slice(-2) : typeAsHex;
  const hexCode = defKey !== 'Ability' ? defaultHexCode : abilityHexCode;
  let str = '';
  if (capture) str += `(?<timestamp>\\y{Timestamp}) ${prefix} (?<type>${hexCode})`;else str += `\\y{Timestamp} ${prefix} ${hexCode}`;
  let lastKey = 1;
  for (const keyStr in fields) {
    const parseField = fields[keyStr];
    if (parseField === undefined) continue;
    const fieldName = parseField.field;

    // Regex handles these manually above in the `str` initialization.
    if (fieldName === 'timestamp' || fieldName === 'type') continue;
    const key = parseInt(keyStr);
    // Fill in blanks.
    const missingFields = key - lastKey - 1;
    if (missingFields === 1) str += `${separator}${matchDefault}`;else if (missingFields > 1) str += `(?:${separator}${matchDefault}){${missingFields}}`;
    lastKey = key;
    str += separator;
    if (typeof parseField !== 'object') throw new Error(`${defKey}: invalid value: ${JSON.stringify(parseField)}`);
    const fieldDefault = fieldName !== undefined && fieldsWithPotentialColons.includes(fieldName) ? matchWithColonsDefault : matchDefault;
    const defaultFieldValue = parseField.value?.toString() ?? fieldDefault;
    const fieldValue = params[fieldName];
    if (isRepeatingField(fields[keyStr]?.repeating, fieldValue)) {
      const repeatingFieldsSeparator = '(?:$|:)';
      let repeatingArray = fieldValue;
      const sortKeys = fields[keyStr]?.sortKeys;
      const primaryKey = fields[keyStr]?.primaryKey;
      const possibleKeys = fields[keyStr]?.possibleKeys;

      // primaryKey is required if this is a repeating field per typedef in netlog_defs.ts
      // Same with possibleKeys
      if (primaryKey === undefined || possibleKeys === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();

      // Allow sorting if needed
      if (sortKeys) {
        // Also sort our valid keys list
        possibleKeys.sort((left, right) => left.toLowerCase().localeCompare(right.toLowerCase()));
        if (repeatingArray !== undefined) {
          repeatingArray = [...repeatingArray].sort((left, right) => {
            // We check the validity of left/right because they're user-supplied
            if (typeof left !== 'object' || left[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            const leftValue = left[primaryKey];
            if (typeof leftValue !== 'string' || !possibleKeys?.includes(leftValue)) {
              console.warn('Invalid argument passed to trigger:', left);
              return 0;
            }
            if (typeof right !== 'object' || right[primaryKey] === undefined) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            const rightValue = right[primaryKey];
            if (typeof rightValue !== 'string' || !possibleKeys?.includes(rightValue)) {
              console.warn('Invalid argument passed to trigger:', right);
              return 0;
            }
            return leftValue.toLowerCase().localeCompare(rightValue.toLowerCase());
          });
        }
      }
      const anonReps = repeatingArray;
      // Loop over our possible keys
      // Build a regex that can match any possible key with required values substituted in
      possibleKeys.forEach(possibleKey => {
        const rep = anonReps?.find(rep => primaryKey in rep && rep[primaryKey] === possibleKey);
        let fieldRegex = '';
        // Rather than looping over the keys defined on the object,
        // loop over the base type def's keys. This enforces the correct order.
        fields[keyStr]?.repeatingKeys?.forEach(key => {
          let val = rep?.[key];
          if (rep === undefined || !(key in rep)) {
            // If we don't have a value for this key
            // insert a placeholder, unless it's the primary key
            if (key === primaryKey) val = possibleKey;else val = matchDefault;
          }
          if (typeof val !== 'string') {
            if (!Array.isArray(val)) val = matchDefault;else if (val.length < 1) val = matchDefault;else if (val.some(v => typeof v !== 'string')) val = matchDefault;
          }
          fieldRegex += Regexes.maybeCapture(key === primaryKey ? false : capture,
          // All capturing groups are `fieldName` + `possibleKey`, e.g. `pairIsCasting1`
          fieldName + possibleKey, val, defaultFieldValue) + repeatingFieldsSeparator;
        });
        if (fieldRegex.length > 0) {
          str += `(?:${fieldRegex})${rep !== undefined ? '' : '?'}`;
        }
      });
    } else if (fields[keyStr]?.repeating) {
      // If this is a repeating field but the actual value is empty or otherwise invalid,
      // don't process further. We can't use `continue` in the above block because that
      // would skip the early-out break at the end of the loop.
    } else {
      if (fieldName !== undefined) {
        str += Regexes.maybeCapture(
        // more accurate type instead of `as` cast
        // maybe this function needs a refactoring
        capture, fieldName, fieldValue, defaultFieldValue);
      } else {
        str += fieldValue;
      }
    }

    // Stop if we're not capturing and don't care about future fields.
    if (key >= maxKey) break;
  }
  str += '(?:$|:)';
  return Regexes.parse(str);
};
const buildRegex = (type, params) => {
  return parseHelper(params, type, defaultParams(type, Regexes.logVersion));
};
class Regexes {
  static logVersion = 'latest';

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
   */
  static startsUsing(params) {
    return buildRegex('StartsUsing', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   */
  static ability(params) {
    return buildRegex('Ability', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
   *
   * @deprecated Use `ability` instead
   */
  static abilityFull(params) {
    return this.ability(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
   */
  static headMarker(params) {
    return buildRegex('HeadMarker', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */
  static addedCombatant(params) {
    return buildRegex('AddedCombatant', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
   */
  static addedCombatantFull(params) {
    return this.addedCombatant(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
   */
  static removingCombatant(params) {
    return buildRegex('RemovedCombatant', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
   */
  static gainsEffect(params) {
    return buildRegex('GainsEffect', params);
  }

  /**
   * Prefer gainsEffect over this function unless you really need extra data.
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
   */
  static statusEffectExplicit(params) {
    return buildRegex('StatusEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
   */
  static losesEffect(params) {
    return buildRegex('LosesEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
   */
  static tether(params) {
    return buildRegex('Tether', params);
  }

  /**
   * 'target' was defeated by 'source'
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
   */
  static wasDefeated(params) {
    return buildRegex('WasDefeated', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
   */
  static networkDoT(params) {
    return buildRegex('NetworkDoT', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static echo(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0038';
    return Regexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static dialog(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0044';
    return Regexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static message(params) {
    if (typeof params === 'undefined') params = {};
    Regexes.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
    params.code = '0839';
    return Regexes.gameLog(params);
  }

  /**
   * fields: code, name, line, capture
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameLog(params) {
    return buildRegex('GameLog', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
   */
  static gameNameLog(params) {
    // Backwards compatability.
    return Regexes.gameLog(params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
   */
  static statChange(params) {
    return buildRegex('PlayerStats', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
   */
  static changeZone(params) {
    return buildRegex('ChangeZone', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
   */
  static network6d(params) {
    return buildRegex('ActorControl', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
   */
  static nameToggle(params) {
    return buildRegex('NameToggle', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
   */
  static map(params) {
    return buildRegex('Map', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
   */
  static systemLogMessage(params) {
    return buildRegex('SystemLogMessage', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-257-0x101-mapeffect
   */
  static mapEffect(params) {
    return buildRegex('MapEffect', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-261-0x105-combatantmemory
   */
  static combatantMemory(params) {
    return buildRegex('CombatantMemory', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-263-0x107-startsusingextra
   */
  static startsUsingExtra(params) {
    return buildRegex('StartsUsingExtra', params);
  }

  /**
   * matches: https://github.com/quisquous/cactbot/blob/main/docs/LogGuide.md#line-264-0x108-abilityextra
   */
  static abilityExtra(params) {
    return buildRegex('AbilityExtra', params);
  }

  /**
   * Helper function for building named capture group
   */
  static maybeCapture(capture, name, value, defaultValue) {
    if (value === undefined) value = defaultValue ?? matchDefault;
    value = Regexes.anyOf(value);
    return capture ? Regexes.namedCapture(name, value) : value;
  }
  static optional(str) {
    return `(?:${str})?`;
  }

  // Creates a named regex capture group named |name| for the match |value|.
  static namedCapture(name, value) {
    if (name.includes('>')) console.error(`"${name}" contains ">".`);
    if (name.includes('<')) console.error(`"${name}" contains ">".`);
    return `(?<${name}>${value})`;
  }

  /**
   * Convenience for turning multiple args into a unioned regular expression.
   * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).
   * anyOf(x) or anyOf(x) on its own simplifies to just x.
   * args may be strings or RegExp, although any additional markers to RegExp
   * like /insensitive/i are dropped.
   */
  static anyOf(...args) {
    const anyOfArray = array => {
      const [elem] = array;
      if (elem !== undefined && array.length === 1) return `${elem instanceof RegExp ? elem.source : elem}`;
      return `(?:${array.map(elem => elem instanceof RegExp ? elem.source : elem).join('|')})`;
    };
    let array = [];
    const [firstArg] = args;
    if (args.length === 1) {
      if (typeof firstArg === 'string' || firstArg instanceof RegExp) array = [firstArg];else if (Array.isArray(firstArg)) array = firstArg;else array = [];
    } else {
      // TODO: more accurate type instead of `as` cast
      array = args;
    }
    return anyOfArray(array);
  }
  static parse(regexpString) {
    const kCactbotCategories = {
      Timestamp: '^.{14}',
      NetTimestamp: '.{33}',
      NetField: '(?:[^|]*\\|)',
      LogType: '[0-9A-Fa-f]{2}',
      AbilityCode: '[0-9A-Fa-f]{1,8}',
      ObjectId: '[0-9A-F]{8}',
      // Matches any character name (including empty strings which the FFXIV
      // ACT plugin can generate when unknown).
      Name: '(?:[^\\s:|]+(?: [^\\s:|]+)?|)',
      // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137
      Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?'
    };

    // All regexes in cactbot are case insensitive.
    // This avoids headaches as things like `Vice and Vanity` turns into
    // `Vice And Vanity`, especially for French and German.  It appears to
    // have a ~20% regex parsing overhead, but at least they work.
    let modifiers = 'i';
    if (regexpString instanceof RegExp) {
      modifiers += (regexpString.global ? 'g' : '') + (regexpString.multiline ? 'm' : '');
      regexpString = regexpString.source;
    }
    regexpString = regexpString.replace(/\\y\{(.*?)\}/g, (match, group) => {
      return kCactbotCategories[group] || match;
    });
    return new RegExp(regexpString, modifiers);
  }

  // Like Regex.Regexes.parse, but force global flag.
  static parseGlobal(regexpString) {
    const regex = Regexes.parse(regexpString);
    let modifiers = 'gi';
    if (regexpString instanceof RegExp) modifiers += regexpString.multiline ? 'm' : '';
    return new RegExp(regex.source, modifiers);
  }
  static trueIfUndefined(value) {
    if (typeof value === 'undefined') return true;
    return !!value;
  }
  static validateParams(f, funcName, params) {
    if (f === null) return;
    if (typeof f !== 'object') return;
    const keys = Object.keys(f);
    for (const key of keys) {
      if (!params.includes(key)) {
        throw new Error(`${funcName}: invalid parameter '${key}'.  ` + `Valid params: ${JSON.stringify(params)}`);
      }
    }
  }
}

/***/ }),

/***/ 469:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n3": () => (/* binding */ Responses),
/* harmony export */   "ug": () => (/* binding */ triggerOutputFunctions)
/* harmony export */ });
/* unused harmony exports severityList, builtInResponseStr, triggerFunctions, triggerTextOutputFunctions, severityMap */
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81);
// This is meant to be used in a trigger as such:
// {
//   id: 'Some tankbuster',
//   regex: Regexes.startsUsing({source: 'Ye Olde Bosse', id: '666'}),
//   condition: Conditions.caresAboutMagical(data),
//   response: Responses.tankbuster(),
// },
//
// Note: Breaking out the condition like this lets people override it if they
// always (or never) want to know about it, rather than hiding the logic inside
// the tankbuster callback with a "is healer" check.
//
// If data.role is used, it should be only to differentiate between alert levels,
// and not whether a message is sent at all.
//
// Although this is not true of `response: ` fields on triggers in general,
// all responses in this file should either return an object or a single
// function that sets outputStrings and returns an object without doing
// anything with data or matches.  See `responses_test.js`.


const severityList = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const builtInResponseStr = 'cactbot-builtin-response';

// All valid trigger fields.
const triggerFunctions = (/* unused pure expression or super */ null && (['alarmText', 'alertText', 'condition', 'delaySeconds', 'disabled', 'durationSeconds', 'id', 'type', 'infoText', 'preRun', 'promise', 'response', 'run', 'sound', 'soundVolume', 'suppressSeconds', 'tts', 'outputStrings']));

// Trigger fields that can produce text output.
const triggerTextOutputFunctions = ['alarmText', 'alertText', 'infoText', 'response', 'tts'];

// If a trigger has any of these, then it has a visible/audio effect.
const triggerOutputFunctions = [...triggerTextOutputFunctions, 'sound'];
const severityMap = {
  'info': 'infoText',
  'alert': 'alertText',
  'alarm': 'alarmText'
};
const getText = sev => {
  if (!(sev in severityMap)) throw new Error(`Invalid severity: ${sev}.`);
  return severityMap[sev];
};
const defaultInfoText = sev => {
  if (!sev) return 'infoText';
  return getText(sev);
};
const defaultAlertText = sev => {
  if (!sev) return 'alertText';
  return getText(sev);
};
const defaultAlarmText = sev => {
  if (!sev) return 'alarmText';
  return getText(sev);
};
const getTarget = matches => {
  // Often tankbusters can be casted by the boss on the boss.
  // Consider this as "not having a target".
  if (matches.target === matches.source) return;
  // In hunts, sometimes there are too many people for the target
  // to have a name.  Treat this as "no target".
  if (matches.target === '') return;
  return matches.target;
};
const getSource = matches => {
  return matches?.source;
};

// FIXME: make this work for any number of pairs of params
const combineFuncs = function (text1, func1, text2, func2) {
  const obj = {};
  if (text1 !== text2) {
    obj[text1] = func1;
    obj[text2] = func2;
  } else {
    obj[text1] = (data, matches, output) => {
      return func1(data, matches, output) ?? func2(data, matches, output);
    };
  }
  return obj;
};
const isPlayerId = id => {
  return id !== undefined && !id.startsWith('4');
};

// For responses that unconditionally return static text.
const staticResponse = (field, text) => {
  return (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      text: text
    };
    return {
      [field]: (_data, _matches, output) => output.text?.()
    };
  };
};
const Responses = {
  tankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBuster */ .Z.tankBuster,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role !== 'tank' && data.role !== 'healer') return;
        return output.noTarget?.();
      }
      if (target === data.me) return output.busterOnYou?.();
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role === 'tank' || data.role === 'healer') return;
        return output.noTarget?.();
      }
      if (target === data.me) return;
      return output.busterOnTarget?.({
        player: data.party.member(target)
      });
    };
    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankBusterSwap: (busterSev, swapSev) => {
    const outputStrings = {
      noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBuster */ .Z.tankBuster,
      tankSwap: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankSwap */ .Z.tankSwap,
      busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnYou */ .Z.tankBusterOnYou,
      busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankBusterOnPlayer */ .Z.tankBusterOnPlayer
    };

    // Note: busterSev and swapSev can be the same priority.
    const tankSwapFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return output.tankSwap?.();
    };
    const busterFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (data.role === 'tank' && target !== data.me) return;
      if (target === data.me) return output.busterOnYou?.();
      if (target === undefined) return output.noTarget?.();
      return output.busterOnTarget?.({
        player: data.party.member(target)
      });
    };
    const combined = combineFuncs(defaultAlarmText(swapSev), tankSwapFunc, defaultAlertText(busterSev), busterFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  tankCleave: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      cleaveOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleaveOnYou */ .Z.tankCleaveOnYou,
      cleaveNoTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].tankCleave */ .Z.tankCleave,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };
    return {
      [defaultInfoText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target === data.me) return output.cleaveOnYou?.();
        if (data.role === 'tank' || data.job === 'BLU') {
          // targetless tank cleave
          // BLU players should always get this generic cleave message.
          // We have no robust way to determine whether they have tank Mimicry on,
          // and it's really annoying for a BLU tank to be told to avoid cleaves when they can't.
          return output.cleaveNoTarget?.();
        }
        return output.avoidCleave?.();
      }
    };
  },
  sharedTankBuster: (targetSev, otherSev) => {
    const outputStrings = {
      sharedTankbusterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnYou */ .Z.sharedTankbusterOnYou,
      sharedTankbusterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbusterOnPlayer */ .Z.sharedTankbusterOnPlayer,
      sharedTankbuster: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sharedTankbuster */ .Z.sharedTankbuster,
      avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].avoidTankCleave */ .Z.avoidTankCleave
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role !== 'tank' && data.role !== 'healer') return;
        return output.sharedTankbuster?.();
      }
      if (target === data.me) return output.sharedTankbusterOnYou?.();
      if (data.role === 'tank' || data.role === 'healer') return output.sharedTankbusterOnTarget?.({
        player: data.party.member(target)
      });
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) {
        if (data.role === 'tank' || data.role === 'healer') return;
        return output.avoidCleave?.();
      }
      if (target === data.me || data.role === 'tank' || data.role === 'healer') return;
      return output.avoidCleave?.();
    };
    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  miniBuster: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].miniBuster */ .Z.miniBuster),
  aoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].aoe */ .Z.aoe),
  bigAoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].bigAoe */ .Z.bigAoe),
  bleedAoe: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].bleedAoe */ .Z.bleedAoe),
  spread: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spread */ .Z.spread),
  // for stack marker situations.
  stackMarker: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMarker */ .Z.stackMarker),
  // for getting together without stack marker
  getTogether: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getTogether */ .Z.getTogether),
  stackMarkerOn: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnYou */ .Z.stackOnYou,
      stackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackOnPlayer */ .Z.stackOnPlayer,
      stackMarker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMarker */ .Z.stackMarker
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target === data.me) return output.stackOnYou?.();
        if (target === undefined) return output.stackMarker?.();
        return output.stackOnTarget?.({
          player: data.party.member(target)
        });
      }
    };
  },
  stackMiddle: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackMiddle */ .Z.stackMiddle),
  doritoStack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].doritoStack */ .Z.doritoStack),
  spreadThenStack: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].spreadThenStack */ .Z.spreadThenStack);
  },
  stackThenSpread: sev => {
    return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stackThenSpread */ .Z.stackThenSpread);
  },
  knockback: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockback */ .Z.knockback),
  knockbackOn: (targetSev, otherSev) => {
    const outputStrings = {
      knockback: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockback */ .Z.knockback,
      knockbackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnYou */ .Z.knockbackOnYou,
      knockbackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].knockbackOnPlayer */ .Z.knockbackOnPlayer
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === data.me) return output.knockbackOnYou?.();
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (target === undefined) return output.knockback?.();
      if (target !== data.me) return output.knockbackOnTarget?.({
        player: data.party.member(target)
      });
    };
    const combined = combineFuncs(defaultInfoText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  drawIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].drawIn */ .Z.drawIn),
  lookTowards: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookTowardsBoss */ .Z.lookTowardsBoss),
  lookAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAway */ .Z.lookAway),
  lookAwayFromTarget: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAway: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAway */ .Z.lookAway,
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target === data.me) return;
        if (target === undefined) return output.lookAway?.();
        const name = isPlayerId(matches?.targetId) ? data.party.member(target) : target;
        return output.lookAwayFrom?.({
          name: name
        });
      }
    };
  },
  lookAwayFromSource: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].lookAwayFromTarget */ .Z.lookAwayFromTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const source = getSource(matches);
        if (source === data.me) return;
        const name = isPlayerId(matches?.sourceId) ? data.party.member(source) : source;
        return output.lookAwayFrom?.({
          name: name
        });
      }
    };
  },
  getBehind: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getBehind */ .Z.getBehind),
  goFrontOrSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontOrSides */ .Z.goFrontOrSides),
  // .getUnder() is used when you have to get into the bosses hitbox
  getUnder: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getUnder */ .Z.getUnder),
  // .getIn() is more like "get close but maybe even melee range is fine"
  getIn: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"]["in"] */ .Z["in"]),
  // .getOut() means get far away
  getOut: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].out */ .Z.out),
  outOfMelee: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outOfMelee */ .Z.outOfMelee),
  getInThenOut: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].inThenOut */ .Z.inThenOut),
  getOutThenIn: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].outThenIn */ .Z.outThenIn),
  getBackThenFront: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].backThenFront */ .Z.backThenFront),
  getFrontThenBack: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].frontThenBack */ .Z.frontThenBack),
  goFront: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFront */ .Z.goFront),
  goMiddle: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goIntoMiddle */ .Z.goIntoMiddle),
  goRight: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].right */ .Z.right),
  goLeft: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].left */ .Z.left),
  goWest: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getLeftAndWest */ .Z.getLeftAndWest),
  goEast: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getRightAndEast */ .Z.getRightAndEast),
  goLeftThenRight: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].leftThenRight */ .Z.leftThenRight),
  goRightThenLeft: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].rightThenLeft */ .Z.rightThenLeft),
  goFrontBack: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].goFrontBack */ .Z.goFrontBack),
  goSides: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sides */ .Z.sides),
  // .killAdds() is used for adds that will always be available
  killAdds: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killAdds */ .Z.killAdds),
  // .killExtraAdd() is used for adds that appear if a mechanic was not played correctly
  killExtraAdd: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].killExtraAdd */ .Z.killExtraAdd),
  awayFromFront: sev => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromFront */ .Z.awayFromFront),
  sleep: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      sleep: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].sleepTarget */ .Z.sleepTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        const source = getSource(matches);
        return output.sleep?.({
          name: source
        });
      }
    };
  },
  stunOrInterruptIfPossible: sev => {
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = {
        stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget,
        interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
      };
      return {
        [defaultAlertText(sev)]: (data, matches, output) => {
          const source = getSource(matches);
          if (data.CanSilence()) return output.interrupt?.({
            name: source
          });else if (data.CanStun()) return output.stun?.({
            name: source
          });
        }
      };
    };
  },
  stun: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        const source = getSource(matches);
        return output.stun?.({
          name: source
        });
      }
    };
  },
  stunIfPossible: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stunTarget */ .Z.stunTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const source = getSource(matches);
        if (data.CanStun()) return output.stun?.({
          name: source
        });
      }
    };
  },
  interrupt: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
    };
    return {
      [defaultAlertText(sev)]: (_data, matches, output) => {
        const source = getSource(matches);
        return output.interrupt?.({
          name: source
        });
      }
    };
  },
  interruptIfPossible: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].interruptTarget */ .Z.interruptTarget
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const source = getSource(matches);
        if (data.CanSilence()) return output.interrupt?.({
          name: source
        });
      }
    };
  },
  preyOn: (targetSev, otherSev) => {
    const outputStrings = {
      preyOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnYou */ .Z.preyOnYou,
      preyOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].preyOnPlayer */ .Z.preyOnPlayer
    };
    const targetFunc = (data, matches, output) => {
      const target = getTarget(matches);
      if (data.me === target) return output.preyOnYou?.();
    };
    const otherFunc = (data, matches, output) => {
      const target = getTarget(matches);
      const player = target === undefined ? output.unknown?.() : data.party.member(target);
      if (target !== data.me) return output.preyOnTarget?.({
        player: player
      });
    };
    const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
    return (_data, _matches, output) => {
      // cactbot-builtin-response
      output.responseOutputStrings = outputStrings;
      return combined;
    };
  },
  awayFrom: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      awayFromGroup: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromGroup */ .Z.awayFromGroup,
      awayFromTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].awayFromPlayer */ .Z.awayFromPlayer,
      unknown: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].unknown */ .Z.unknown
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (data.me === target) return output.awayFromGroup?.();
        const player = target === undefined ? output.unknown?.() : data.party.member(target);
        return output.awayFromTarget?.({
          player: player
        });
      }
    };
  },
  meteorOnYou: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].meteorOnYou */ .Z.meteorOnYou),
  stopMoving: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopMoving */ .Z.stopMoving),
  stopEverything: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].stopEverything */ .Z.stopEverything),
  // move away to dodge aoes
  moveAway: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAway */ .Z.moveAway),
  // move around (e.g. jumping) to avoid being frozen
  moveAround: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveAround */ .Z.moveAround),
  breakChains: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].breakChains */ .Z.breakChains),
  moveChainsTogether: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].moveChainsTogether */ .Z.moveChainsTogether),
  earthshaker: sev => (_data, _matches, output) => {
    // cactbot-builtin-response
    output.responseOutputStrings = {
      earthshaker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].earthshakerOnYou */ .Z.earthshakerOnYou
    };
    return {
      [defaultAlertText(sev)]: (data, matches, output) => {
        const target = getTarget(matches);
        if (target !== data.me) return;
        return output.earthshaker?.();
      }
    };
  },
  wakeUp: sev => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].wakeUp */ .Z.wakeUp),
  getTowers: sev => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"].getTowers */ .Z.getTowers)
};

// Don't give `Responses` a type in its declaration so that it can be treated as more strict
// than `ResponsesMap`, but do assert that its type is correct.  This allows callers to know
// which properties are defined in Responses without having to conditionally check for undefined.
const responseMapTypeAssertion = Responses;
// Suppress unused variable warning.
console.assert(responseMapTypeAssertion);

/***/ }),

/***/ 456:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _languages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(619);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(959);
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(446);
/* harmony import */ var _content_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(873);
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(622);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(402);
/* harmony import */ var _responses__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(469);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(81);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(509);
/* harmony import */ var _zone_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(588);
/* harmony import */ var _zone_info__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(902);
// TODO: Fix import/order
/* eslint-disable import/order */





// TODO:
// The convention of "import X as _X; const X = _X;" is currently
// being used as a method to workaround for downstream code
// that is running via eval(). Because importing statements do not
// create a variable of the same name, the eval()'d code does not know
// about the import, and thus throws ReferenceErrors.
// Used by downstream eval

const Conditions = _conditions__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z;

const ContentType = _content_type__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Z;

const NetRegexes = _netregexes__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .ZP;

const Regexes = _regexes__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z;

const Responses = _responses__WEBPACK_IMPORTED_MODULE_7__/* .Responses */ .n3;

const Outputs = _outputs__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z;

const Util = _util__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .Z;
const Directions = _util__WEBPACK_IMPORTED_MODULE_9__/* .Directions */ .N;

const ZoneId = _zone_id__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Z;

const ZoneInfo = _zone_info__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .Z;

// Convince TypeScript and eslint that these are used.  TypeScript doesn't have a great way
// to disable individual rules, so this is safer than disabling all rules.
console.assert(Conditions);
console.assert(ContentType);
console.assert(NetRegexes);
console.assert(Regexes);
console.assert(Responses);
console.assert(Outputs);
console.assert(Util);
console.assert(Directions);
console.assert(ZoneId);
console.assert(ZoneInfo);

// TODO: move all of these to config.js?

class UserConfig {
  optionTemplates = {};
  userFileCallbacks = {};
  savedConfig = {};
  getDefaultBaseOptions() {
    return {
      ParserLanguage: 'en',
      ShortLocale: 'en',
      DisplayLanguage: 'en',
      TextAlertsEnabled: true,
      SoundAlertsEnabled: true,
      SpokenAlertsEnabled: false,
      GroupSpokenAlertsEnabled: false,
      SystemInfo: {
        cactbotVersion: '0.0.0.0',
        overlayPluginVersion: '0.0.0.0',
        ffxivPluginVersion: '0.0.0.0',
        actVersion: '0.0.0.0',
        gameRegion: 'International'
      },
      Debug: false
    };
  }
  evalUserFile(content, options) {
    const Options = options;
    console.assert(Options); // Used by eval.

    // This is the one eval cactbot should ever need, which is for handling user files.
    // Because user files can be located anywhere on disk and there's backwards compat
    // issues, it's unlikely that these will be able to be anything but eval forever.
    //
    /* eslint-disable no-eval */
    eval(content);
    /* eslint-enable no-eval */
  }

  registerOptions(overlayName, optionTemplate, userFileCallback) {
    this.optionTemplates[overlayName] = optionTemplate;
    if (userFileCallback) this.userFileCallbacks[overlayName] = userFileCallback;
  }
  sortUserFiles(keys) {
    // Helper data structure for subdirectories.
    const splitKeyMap = {};
    for (const key of keys) splitKeyMap[key] = key.toUpperCase().split(/[/\\]/);

    // Sort paths as a depth-first case-insensitive alphabetical subdirectory walk, followed by
    // all files sorted case-insensitive alphabetically once a subdir has been processed, e.g.
    //  * a/some.js
    //  * b/subdir1/z/z/z/nested_file.js
    //  * b/subdir1/file.js
    //  * b/subdir2/first.js
    //  * b/subdir2/second.js
    //  * b/some_file.js
    //  * root_file1.js
    //  * root_file2.js
    return keys.sort((keyA, keyB) => {
      const listA = splitKeyMap[keyA];
      const listB = splitKeyMap[keyB];
      if (listA === undefined || listB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();
      const maxLen = Math.max(listA.length, listB.length);
      for (let idx = 0; idx < maxLen; ++idx) {
        const entryA = listA[idx];
        const entryB = listB[idx];
        // In practice, there's always at least one entry.
        if (entryA === undefined || entryB === undefined) throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .$();

        // If both subdirectories or both files, then compare names.
        const isLastA = listA.length - 1 === idx;
        const isLastB = listB.length - 1 === idx;
        if (isLastA && isLastB) {
          // If both last, then this is a filename comparison.

          // First, compare filename without extension.
          const fileA = entryA.replace(/\.[^\.]*$/, '');
          const fileB = entryB.replace(/\.[^\.]*$/, '');
          const filenameOnlyDiff = fileA.localeCompare(fileB);
          if (filenameOnlyDiff) return filenameOnlyDiff;

          // Second, compare including the extension.
          // Always return something here, see note below.
          return entryA.localeCompare(entryB);
        } else if (!isLastA && !isLastB) {
          // If both not last, this is a subdirectory comparison.
          const diff = entryA.localeCompare(entryB);
          if (diff) return diff;
        }

        // At this point, if idx is the final for each, we would have returned above.
        // So, check if either a or b is at the final entry in splitKeyMap.
        // If so, then there's a mismatch in number of directories, and we know one
        // the one with a filename should be sorted last.

        if (listA.length - 1 <= idx) {
          // a has fewer subdirectories, so should be sorted last.
          return 1;
        }
        if (listB.length - 1 <= idx) {
          // a has more subdirectories, so should be sorted first.
          return -1;
        }
      }
      return 0;
    });
  }

  // Given a set of paths, an overlayName, and an extension, return all paths with
  // that extension that have `overlayName` either as their entire filename (no subdir)
  // or are inside a root-level subdirectory named `overlayName`/  The extension should
  // include the period separator, e.g. ".js".  All comparisons are case insensitive.
  filterUserFiles(paths, origOverlayName, origExtension) {
    const extension = origExtension.toLowerCase();
    const overlayName = origOverlayName.toLowerCase();
    return paths.filter(origPath => {
      const path = origPath.toLowerCase();
      if (!path.endsWith(extension)) return false;
      if (path === `${overlayName}${extension}`) return true;
      if (path.startsWith(`${overlayName}/`) || path.startsWith(`${overlayName}\\`)) return true;
      return false;
    });
  }
  getUserConfigLocation(overlayName, options, callback) {
    let currentlyReloading = false;
    const reloadOnce = () => {
      if (currentlyReloading) return;
      currentlyReloading = true;
      window.location.reload();
    };
    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .addOverlayListener */ .PS)('onUserFileChanged', () => {
      reloadOnce();
    });
    (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .addOverlayListener */ .PS)('onForceReload', () => {
      reloadOnce();
    });
    this.loadUserFiles(overlayName, options, callback);
  }
  loadUserFiles(overlayName, options, callback, loadCss = true) {
    const readOptions = (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadData',
      overlay: 'options'
    });
    const loadUser = async e => {
      // The basePath isn't using for anything other than cosmetic printing of full paths,
      // so replace any slashes here for uniformity.  In case anybody is using cactbot on
      // Linux (?!?), support any style of slashes elsewhere.
      const basePath = `${e.detail.userLocation.replace(/[/\\]*$/, '')}\\`;
      const localFiles = e.detail.localUserFiles;
      options.SystemInfo = {
        cactbotVersion: e.detail.cactbotVersion,
        overlayPluginVersion: e.detail.overlayPluginVersion,
        ffxivPluginVersion: e.detail.ffxivPluginVersion,
        actVersion: e.detail.actVersion,
        gameRegion: e.detail.gameRegion
      };

      // The plugin auto-detects the language, so set this first.
      // If options files want to override it, they can for testing.

      // Backward compatibility (language is now separated to three types.)
      /* eslint-disable deprecation/deprecation */
      if (e.detail.language) {
        options.ParserLanguage = e.detail.language;
        options.ShortLocale = e.detail.language;
        options.DisplayLanguage = e.detail.language;
      }
      /* eslint-enable deprecation/deprecation */

      // Parser Language
      if (e.detail.parserLanguage) {
        options.ParserLanguage = e.detail.parserLanguage;
        // Backward compatibility, everything "Language" should be changed to "ParserLanguage"
        options.Language = e.detail.parserLanguage;
      }
      // System Language
      if (e.detail.systemLocale) {
        options.SystemLocale = e.detail.systemLocale;
        let shortLocale = e.detail.systemLocale.slice(0, 2);
        if (shortLocale === 'zh') shortLocale = 'cn';
        if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(shortLocale)) options.ShortLocale = shortLocale;else options.ShortLocale = options.ParserLanguage;
      }
      // User's setting Language
      const displayLang = e.detail.displayLanguage;
      if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .jd)(displayLang)) options.DisplayLanguage = displayLang;else options.DisplayLanguage = options.ParserLanguage || 'en';

      // TODO: left for now as backwards compatibility with user css.  Remove this later??
      document.documentElement.classList.add(`lang-${options.DisplayLanguage}`);
      document.documentElement.lang = (0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .langToLocale */ .Go)(options.DisplayLanguage);
      this.addUnlockText(options.DisplayLanguage);

      // Handle processOptions after default language selection above,
      // but before css below which may load skin files.
      // processOptions needs to be called whether or not there are
      // any userOptions saved, as it sets up the defaults.
      this.savedConfig = (await readOptions)?.data ?? {};
      const template = this.optionTemplates[overlayName];
      if (template !== undefined) {
        const savedConfig = this.savedConfig[overlayName] ?? {};
        this.processOptions(options, options, savedConfig, template.options);

        // For things like raidboss that build extra UI, also give them a chance
        // to handle anything that has been set on that UI.
        if (template.processExtraOptions) template.processExtraOptions(options, savedConfig);
      }

      // If the overlay has a "Debug" setting, set to true via the config tool,
      // then also print out user files that have been loaded.
      const debug = options.Debug !== undefined && options.Debug !== false;
      const printUserFile = debug ? x => console.log(x) : () => {/* noop */};

      // With user files being arbitrary javascript, and having multiple files
      // in user folders, it's possible for later files to accidentally remove
      // things that previous files have added.  Warn about this, since most
      // users are not programmers.
      const warnOnVariableResetMap = {
        raidboss: ['Triggers']
      };
      warnOnVariableResetMap[overlayName] = warnOnVariableResetMap[overlayName] || [];

      // The values of each `warnOnVariableResetMap` field are initially set
      // after the first file, so that if there is only one file, there are
      // not any warnings.

      // The fields that a user file sets in Options can be anything (pun not intended)
      // and so we use `any` here.  The only operation done on this field is a !==
      // for change detection to see if the the user file has modified it.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const variableTracker = {};
      if (localFiles) {
        // localFiles may be null if there is no valid user directory.
        const sortedFiles = this.sortUserFiles(Object.keys(localFiles));
        const jsFiles = this.filterUserFiles(sortedFiles, overlayName, '.js');
        const cssFiles = loadCss ? this.filterUserFiles(sortedFiles, overlayName, '.css') : [];
        for (const jsFile of jsFiles) {
          try {
            printUserFile(`local user file: ${basePath}${jsFile}`);
            this.evalUserFile(localFiles[jsFile] ?? '', options);
            for (const field of warnOnVariableResetMap[overlayName] ?? []) {
              const value = variableTracker[field];
              if (value !== null && value !== undefined && value !== options[field]) {
                // Ideally users should do something like `Options.Triggers.push([etc]);`
                // instead of `Options.Triggers = [etc];`
                console.log(`*** WARNING: ${basePath}${jsFile} overwrites Options.${field} from previous files.`);
              }
              variableTracker[field] = options[field];
            }
            this.userFileCallbacks[overlayName]?.(jsFile, localFiles, options, basePath);
          } catch (e) {
            // Be very visible for users.
            console.log('*** ERROR IN USER FILE ***');
            console.log(e);
          }
        }

        // This is a bit awkward to handle skin settings here, but
        // doing it after user config files and before user css files
        // allows user css to override skin-specific css as well.
        if (options.Skin !== undefined) this.handleSkin(options.Skin);
        for (const cssFile of cssFiles) {
          printUserFile(`local user file: ${basePath}${cssFile}`);
          const userCssText = document.createElement('style');
          const contents = localFiles[cssFile];
          if (contents !== undefined) userCssText.innerText = contents;
          const head = document.getElementsByTagName('head')[0];
          if (head) head.appendChild(userCssText);
        }
      }

      // Post this callback so that the js and css can be executed first.
      callback();
      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)({
        call: 'cactbotRequestState'
      });
    };
    void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)({
      call: 'cactbotLoadUser',
      source: location.href,
      overlayName: overlayName
    }).then(e => {
      // Wait for DOMContentLoaded if needed.
      if (document.readyState !== 'loading') {
        void loadUser(e);
        return;
      }
      document.addEventListener('DOMContentLoaded', () => {
        void loadUser(e);
      });
    });
  }
  handleSkin(skinName) {
    if (!skinName || skinName === 'default') return;
    const skinCSSRelativeHref = `skins/${skinName}/${skinName}.css`;
    this.appendCSSLink(skinCSSRelativeHref);
  }
  appendJSLink(src) {
    const userJS = document.createElement('script');
    userJS.setAttribute('type', 'text/javascript');
    userJS.setAttribute('src', src);
    userJS.setAttribute('async', 'false');
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userJS);
  }
  appendCSSLink(href) {
    const userCSS = document.createElement('link');
    userCSS.setAttribute('rel', 'stylesheet');
    userCSS.setAttribute('type', 'text/css');
    userCSS.setAttribute('href', href);
    const head = document.getElementsByTagName('head')[0];
    if (head) head.appendChild(userCSS);
  }
  processOptions(options, output, savedConfig, templateOptions) {
    // Take options from the template, find them in savedConfig,
    // and apply them to options. This also handles setting
    // defaults for anything in the template, even if it does not
    // exist in savedConfig.

    // Not all overlays have option templates.
    if (templateOptions === undefined) return;
    for (const opt of templateOptions) {
      // Grab the saved value or the default to set in options.

      let value;
      if (typeof opt.default === 'function') value = opt.default(options);else value = opt.default;
      let isDefault = true;
      if (typeof savedConfig === 'object' && !Array.isArray(savedConfig)) {
        if (opt.id in savedConfig) {
          const newValue = savedConfig[opt.id];
          // Empty strings are always treated as default values.
          // This means that the user has entered something and then cleared it.
          if (newValue !== undefined && newValue !== '') {
            value = newValue;
            isDefault = false;
          }
        }
      }

      // Options can provide custom logic to turn a value into options settings.
      // If this doesn't exist, just set the value directly.
      // Option template ids are identical to field names on Options.
      if (opt.setterFunc) {
        const setValue = opt.setterFunc(value, options, isDefault);
        if (setValue !== undefined) output[opt.id] = setValue;
      } else if (opt.type === 'integer') {
        if (typeof value === 'number') output[opt.id] = Math.floor(value);else if (typeof value === 'string') output[opt.id] = parseInt(value);
      } else if (opt.type === 'float') {
        if (typeof value === 'number') output[opt.id] = value;else if (typeof value === 'string') output[opt.id] = parseFloat(value);
      } else {
        output[opt.id] = value;
      }
    }
  }
  addUnlockText(lang) {
    const unlockText = {
      en: '🔓 Unlocked (lock overlay before using)',
      de: '🔓 Entsperrt (Sperre das Overlay vor der Nutzung)',
      fr: '🔓 Débloqué (Bloquez l\'overlay avant utilisation)',
      ja: '🔓 ロック解除 (オーバーレイを使用する前にロックしてください)',
      cn: '🔓 已解除锁定 (你需要将此悬浮窗锁定后方可使用)',
      ko: '🔓 위치 잠금 해제됨 (사용하기 전에 위치 잠금을 설정하세요)'
    };
    const id = 'cactbot-unlocked-text';
    let textElem = document.getElementById(id);
    if (!textElem) {
      textElem = document.createElement('div');
      textElem.id = id;
      textElem.classList.add('text');
      // Set element display to none in case the page has not included defaults.css.
      textElem.style.display = 'none';
      document.body.append(textElem);
    }
    textElem.innerHTML = unlockText[lang] || unlockText['en'];
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new UserConfig());
if (typeof document !== 'undefined') {
  // This event comes early and is not cached, so set up event listener immediately.
  document.addEventListener('onOverlayStateUpdate', e => {
    const docClassList = document.documentElement.classList;
    if (e.detail.isLocked) docClassList.remove('resize-handle', 'unlocked');else docClassList.add('resize-handle', 'unlocked');
  });
}

/***/ }),

/***/ 509:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": () => (/* binding */ Directions),
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(622);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(959);




// TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.
const nameToJobEnum = {
  NONE: 0,
  GLA: 1,
  PGL: 2,
  MRD: 3,
  LNC: 4,
  ARC: 5,
  CNJ: 6,
  THM: 7,
  CRP: 8,
  BSM: 9,
  ARM: 10,
  GSM: 11,
  LTW: 12,
  WVR: 13,
  ALC: 14,
  CUL: 15,
  MIN: 16,
  BTN: 17,
  FSH: 18,
  PLD: 19,
  MNK: 20,
  WAR: 21,
  DRG: 22,
  BRD: 23,
  WHM: 24,
  BLM: 25,
  ACN: 26,
  SMN: 27,
  SCH: 28,
  ROG: 29,
  NIN: 30,
  MCH: 31,
  DRK: 32,
  AST: 33,
  SAM: 34,
  RDM: 35,
  BLU: 36,
  GNB: 37,
  DNC: 38,
  RPR: 39,
  SGE: 40
};
const allJobs = Object.keys(nameToJobEnum);
const allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];
const tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];
const healerJobs = ['CNJ', 'WHM', 'SCH', 'AST', 'SGE'];
const meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM', 'RPR'];
const rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];
const casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM'];
const dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];
const craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];
const gatheringJobs = ['MIN', 'BTN', 'FSH'];
const stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];
const silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];
const sleepJobs = [...casterDpsJobs, ...healerJobs];
const feintJobs = [...meleeDpsJobs];
const addleJobs = [...casterDpsJobs];
const cleanseJobs = ['BLU', 'BRD', ...healerJobs];
const jobToRoleMap = (() => {
  const addToMap = (map, jobs, role) => {
    jobs.forEach(job => map.set(job, role));
  };
  const map = new Map([['NONE', 'none']]);
  addToMap(map, tankJobs, 'tank');
  addToMap(map, healerJobs, 'healer');
  addToMap(map, dpsJobs, 'dps');
  addToMap(map, craftingJobs, 'crafter');
  addToMap(map, gatheringJobs, 'gatherer');
  return map;
})();
const watchCombatantMap = [];
const shouldCancelWatch = (params, entry) => {
  if (entry.cancel) return true;
  if (params.maxDuration !== undefined && Date.now() - entry.start > params.maxDuration) return true;
  return false;
};
const defaultWatchCombatant = (params, func) => {
  return new Promise((res, rej) => {
    const delay = params.delay ?? 1000;
    const call = {
      call: 'getCombatants'
    };
    if (params.ids) call.ids = params.ids;
    if (params.names) call.names = params.names;
    if (params.props) call.props = params.props;
    const entry = {
      cancel: false,
      start: Date.now()
    };
    watchCombatantMap.push(entry);
    const checkFunc = () => {
      if (shouldCancelWatch(params, entry)) {
        rej(new Error('cancelled'));
        return;
      }
      void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .ae)(call).then(response => {
        if (entry.cancel) {
          rej(new Error('was cancelled'));
          return;
        }
        if (func(response)) res();else window.setTimeout(checkFunc, delay);
      });
    };
    window.setTimeout(checkFunc, delay);
  });
};
let watchCombatantOverride;
let clearCombatantsOverride;
const defaultClearCombatants = () => {
  while (watchCombatantMap.length > 0) {
    const watch = watchCombatantMap.pop();
    if (watch) watch.cancel = true;
  }
};
const watchCombatant = (params, func) => {
  if (watchCombatantOverride) return watchCombatantOverride(params, func);
  return defaultWatchCombatant(params, func);
};
const output8Dir = ['dirN', 'dirNE', 'dirE', 'dirSE', 'dirS', 'dirSW', 'dirW', 'dirNW'];
const output16Dir = ['dirN', 'dirNNE', 'dirNE', 'dirENE', 'dirE', 'dirESE', 'dirSE', 'dirSSE', 'dirS', 'dirSSW', 'dirSW', 'dirWSW', 'dirW', 'dirWNW', 'dirNW', 'dirNNW'];
const outputCardinalDir = ['dirN', 'dirE', 'dirS', 'dirW'];
const outputIntercardDir = ['dirNE', 'dirSE', 'dirSW', 'dirNW'];
const outputStrings16Dir = {
  dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirN */ .Z.dirN,
  dirNNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNNE */ .Z.dirNNE,
  dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNE */ .Z.dirNE,
  dirENE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirENE */ .Z.dirENE,
  dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirE */ .Z.dirE,
  dirESE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirESE */ .Z.dirESE,
  dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSE */ .Z.dirSE,
  dirSSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSSE */ .Z.dirSSE,
  dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirS */ .Z.dirS,
  dirSSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSSW */ .Z.dirSSW,
  dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSW */ .Z.dirSW,
  dirWSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirWSW */ .Z.dirWSW,
  dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirW */ .Z.dirW,
  dirWNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirWNW */ .Z.dirWNW,
  dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNW */ .Z.dirNW,
  dirNNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNNW */ .Z.dirNNW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};
const outputStrings8Dir = {
  dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirN */ .Z.dirN,
  dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNE */ .Z.dirNE,
  dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirE */ .Z.dirE,
  dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSE */ .Z.dirSE,
  dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirS */ .Z.dirS,
  dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSW */ .Z.dirSW,
  dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirW */ .Z.dirW,
  dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNW */ .Z.dirNW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};
const outputStringsCardinalDir = {
  dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirN */ .Z.dirN,
  dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirE */ .Z.dirE,
  dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirS */ .Z.dirS,
  dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirW */ .Z.dirW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};
const outputStringsIntercardDir = {
  dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNE */ .Z.dirNE,
  dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSE */ .Z.dirSE,
  dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirSW */ .Z.dirSW,
  dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].dirNW */ .Z.dirNW,
  unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"].unknown */ .Z.unknown
};

// TODO: Accept 'north' as a function input and adjust output accordingly.
// E.g. Math.round((north + 4) - 4 * Math.atan2(x, y) / Math.PI) % 8;
// Will need to adjust the output arrays as well though.

const xyTo16DirNum = (x, y, centerX, centerY) => {
  // N = 0, NNE = 1, ..., NNW = 15
  x = x - centerX;
  y = y - centerY;
  return Math.round(8 - 8 * Math.atan2(x, y) / Math.PI) % 16;
};
const xyTo8DirNum = (x, y, centerX, centerY) => {
  // N = 0, NE = 1, ..., NW = 7
  x = x - centerX;
  y = y - centerY;
  return Math.round(4 - 4 * Math.atan2(x, y) / Math.PI) % 8;
};
const xyTo4DirNum = (x, y, centerX, centerY) => {
  // N = 0, E = 1, S = 2, W = 3
  x = x - centerX;
  y = y - centerY;
  return Math.round(2 - 2 * Math.atan2(x, y) / Math.PI) % 4;
};
const hdgTo8DirNum = heading => {
  // N = 0, NE = 1, ..., NW = 7
  return (Math.round(4 - 4 * heading / Math.PI) % 8 + 8) % 8;
};
const hdgTo4DirNum = heading => {
  // N = 0, E = 1, S = 2, W = 3
  return (Math.round(2 - heading * 2 / Math.PI) % 4 + 4) % 4;
};
const outputFrom8DirNum = dirNum => {
  return output8Dir[dirNum] ?? 'unknown';
};
const Directions = {
  output8Dir: output8Dir,
  output16Dir: output16Dir,
  outputCardinalDir: outputCardinalDir,
  outputIntercardDir: outputIntercardDir,
  outputStrings16Dir: outputStrings16Dir,
  outputStrings8Dir: outputStrings8Dir,
  outputStringsCardinalDir: outputStringsCardinalDir,
  outputStringsIntercardDir: outputStringsIntercardDir,
  xyTo16DirNum: xyTo16DirNum,
  xyTo8DirNum: xyTo8DirNum,
  xyTo4DirNum: xyTo4DirNum,
  hdgTo8DirNum: hdgTo8DirNum,
  hdgTo4DirNum: hdgTo4DirNum,
  outputFrom8DirNum: outputFrom8DirNum,
  combatantStatePosTo8Dir: (combatant, centerX, centerY) => {
    return xyTo8DirNum(combatant.PosX, combatant.PosY, centerX, centerY);
  },
  combatantStatePosTo8DirOutput: (combatant, centerX, centerY) => {
    const dirNum = xyTo8DirNum(combatant.PosX, combatant.PosY, centerX, centerY);
    return outputFrom8DirNum(dirNum);
  },
  combatantStateHdgTo8Dir: combatant => {
    return hdgTo8DirNum(combatant.Heading);
  },
  combatantStateHdgTo8DirOutput: combatant => {
    const dirNum = hdgTo8DirNum(combatant.Heading);
    return outputFrom8DirNum(dirNum);
  },
  addedCombatantPosTo8Dir: (combatant, centerX, centerY) => {
    const x = parseFloat(combatant.x);
    const y = parseFloat(combatant.y);
    return xyTo8DirNum(x, y, centerX, centerY);
  },
  addedCombatantPosTo8DirOutput: (combatant, centerX, centerY) => {
    const x = parseFloat(combatant.x);
    const y = parseFloat(combatant.y);
    const dirNum = xyTo8DirNum(x, y, centerX, centerY);
    return outputFrom8DirNum(dirNum);
  },
  addedCombatantHdgTo8Dir: combatant => {
    const heading = parseFloat(combatant.heading);
    return hdgTo8DirNum(heading);
  },
  addedCombatantHdgTo8DirOutput: combatant => {
    const heading = parseFloat(combatant.heading);
    const dirNum = hdgTo8DirNum(heading);
    return outputFrom8DirNum(dirNum);
  },
  xyTo8DirOutput: (x, y, centerX, centerY) => {
    const dirNum = xyTo8DirNum(x, y, centerX, centerY);
    return outputFrom8DirNum(dirNum);
  }
};
const Util = {
  jobEnumToJob: id => {
    const job = allJobs.find(job => nameToJobEnum[job] === id);
    return job ?? 'NONE';
  },
  jobToJobEnum: job => nameToJobEnum[job],
  jobToRole: job => {
    const role = jobToRoleMap.get(job);
    return role ?? 'none';
  },
  getAllRoles: () => allRoles,
  isTankJob: job => tankJobs.includes(job),
  isHealerJob: job => healerJobs.includes(job),
  isMeleeDpsJob: job => meleeDpsJobs.includes(job),
  isRangedDpsJob: job => rangedDpsJobs.includes(job),
  isCasterDpsJob: job => casterDpsJobs.includes(job),
  isDpsJob: job => dpsJobs.includes(job),
  isCraftingJob: job => craftingJobs.includes(job),
  isGatheringJob: job => gatheringJobs.includes(job),
  isCombatJob: job => {
    return !craftingJobs.includes(job) && !gatheringJobs.includes(job);
  },
  canStun: job => stunJobs.includes(job),
  canSilence: job => silenceJobs.includes(job),
  canSleep: job => sleepJobs.includes(job),
  canCleanse: job => cleanseJobs.includes(job),
  canFeint: job => feintJobs.includes(job),
  canAddle: job => addleJobs.includes(job),
  watchCombatant: watchCombatant,
  clearWatchCombatants: () => {
    if (clearCombatantsOverride !== undefined) clearCombatantsOverride();else defaultClearCombatants();
  },
  setWatchCombatantOverride: (watchFunc, clearFunc) => {
    watchCombatantOverride = watchFunc;
    clearCombatantsOverride = clearFunc;
  },
  gameLogCodes: _netregexes__WEBPACK_IMPORTED_MODULE_0__/* .gameLogCodes */ .k3,
  shortName: (name, playerNicks) => {
    // TODO: make this unique among the party in case of first name collisions.
    if (typeof name !== 'string') {
      if (typeof name !== 'undefined') console.error('called ShortNamify with non-string');
      return '???';
    }
    const nick = playerNicks[name];
    if (nick !== undefined) return nick;
    const idx = name.indexOf(' ');
    return idx < 0 ? name : name.slice(0, idx);
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);

/***/ }),

/***/ 588:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY

const data = {
  'ABloodyReunion': 560,
  'AFrostyReception': 1010,
  'APathUnveiled': 1015,
  'ARelicRebornTheChimera': 368,
  'ARelicRebornTheHydra': 369,
  'ARequiemForHeroes': 830,
  'ASleepDisturbed': 914,
  'ASpectacleForTheAges': 533,
  'AbyssosTheEighthCircle': 1087,
  'AbyssosTheEighthCircleSavage': 1088,
  'AbyssosTheFifthCircle': 1081,
  'AbyssosTheFifthCircleSavage': 1082,
  'AbyssosTheSeventhCircle': 1085,
  'AbyssosTheSeventhCircleSavage': 1086,
  'AbyssosTheSixthCircle': 1083,
  'AbyssosTheSixthCircleSavage': 1084,
  'AccrueEnmityFromMultipleTargets': 540,
  'Aglaia': 1054,
  'AirForceOne': 832,
  'AkadaemiaAnyder': 841,
  'AlaMhigo': 1146,
  'AlaMhigo63': 689,
  'AlexanderTheArmOfTheFather': 444,
  'AlexanderTheArmOfTheFatherSavage': 451,
  'AlexanderTheArmOfTheSon': 522,
  'AlexanderTheArmOfTheSonSavage': 531,
  'AlexanderTheBreathOfTheCreator': 581,
  'AlexanderTheBreathOfTheCreatorSavage': 585,
  'AlexanderTheBurdenOfTheFather': 445,
  'AlexanderTheBurdenOfTheFatherSavage': 452,
  'AlexanderTheBurdenOfTheSon': 523,
  'AlexanderTheBurdenOfTheSonSavage': 532,
  'AlexanderTheCuffOfTheFather': 443,
  'AlexanderTheCuffOfTheFatherSavage': 450,
  'AlexanderTheCuffOfTheSon': 521,
  'AlexanderTheCuffOfTheSonSavage': 530,
  'AlexanderTheEyesOfTheCreator': 580,
  'AlexanderTheEyesOfTheCreatorSavage': 584,
  'AlexanderTheFistOfTheFather': 442,
  'AlexanderTheFistOfTheFatherSavage': 449,
  'AlexanderTheFistOfTheSon': 520,
  'AlexanderTheFistOfTheSonSavage': 529,
  'AlexanderTheHeartOfTheCreator': 582,
  'AlexanderTheHeartOfTheCreatorSavage': 586,
  'AlexanderTheSoulOfTheCreator': 583,
  'AlexanderTheSoulOfTheCreatorSavage': 587,
  'AllsWellThatEndsInTheWell': 220,
  'AloaloIsland': 1176,
  'AlphascapeV10': 798,
  'AlphascapeV10Savage': 802,
  'AlphascapeV20': 799,
  'AlphascapeV20Savage': 803,
  'AlphascapeV30': 800,
  'AlphascapeV30Savage': 804,
  'AlphascapeV40': 801,
  'AlphascapeV40Savage': 805,
  'AlzadaalsLegacy': 1050,
  'Amaurot': 838,
  'AmdaporKeep': 167,
  'AmdaporKeepHard': 189,
  'AmhAraeng': 815,
  'AnUnforeseenBargain': 1120,
  'AnabaseiosTheEleventhCircle': 1151,
  'AnabaseiosTheEleventhCircleSavage': 1152,
  'AnabaseiosTheNinthCircle': 1147,
  'AnabaseiosTheNinthCircleSavage': 1148,
  'AnabaseiosTheTenthCircle': 1149,
  'AnabaseiosTheTenthCircleSavage': 1150,
  'AnabaseiosTheTwelfthCircle': 1153,
  'AnabaseiosTheTwelfthCircleSavage': 1154,
  'AnamnesisAnyder': 898,
  'AnnoyTheVoid': 222,
  'AnotherAloaloIsland': 1179,
  'AnotherAloaloIslandSavage': 1180,
  'AnotherMountRokkon': 1155,
  'AnotherMountRokkonSavage': 1156,
  'AnotherSildihnSubterrane': 1075,
  'AnotherSildihnSubterraneSavage': 1076,
  'AsTheHeartBids': 894,
  'AsTheHeavensBurn': 1012,
  'AsphodelosTheFirstCircle': 1002,
  'AsphodelosTheFirstCircleSavage': 1003,
  'AsphodelosTheFourthCircle': 1008,
  'AsphodelosTheFourthCircleSavage': 1009,
  'AsphodelosTheSecondCircle': 1004,
  'AsphodelosTheSecondCircleSavage': 1005,
  'AsphodelosTheThirdCircle': 1006,
  'AsphodelosTheThirdCircleSavage': 1007,
  'AssistAlliesInDefeatingATarget': 544,
  'Astragalos': 729,
  'AvoidAreaOfEffectAttacks': 537,
  'AzysLla': 402,
  'BaelsarsWall': 1114,
  'BaelsarsWall62': 615,
  'BardamsMettle': 1143,
  'BardamsMettle63': 623,
  'BasicTrainingEnemyParties': 214,
  'BasicTrainingEnemyStrongholds': 215,
  'BattleInTheBigKeep': 396,
  'BattleOnTheBigBridge': 366,
  'BloodOnTheDeck': 708,
  'Blunderville': 1165,
  'BrayfloxsLongstop': 1041,
  'BrayfloxsLongstopHard': 362,
  'CapeWestwind': 1049,
  'CastrumAbania': 1145,
  'CastrumAbania63': 661,
  'CastrumFluminis': 778,
  'CastrumMarinum': 934,
  'CastrumMarinumExtreme': 935,
  'CastrumMeridianum': 1043,
  'CentralShroud': 148,
  'CentralThanalan': 141,
  'ChocoboRaceCostaDelSol': 389,
  'ChocoboRaceSagoliiRoad': 390,
  'ChocoboRaceTranquilPaths': 391,
  'ChocoboRaceTutorial': 417,
  'CinderDrift': 897,
  'CinderDriftExtreme': 912,
  'CoerthasCentralHighlands': 155,
  'CoerthasWesternHighlands': 397,
  'ComingClean': 860,
  'ContainmentBayP1T6': 576,
  'ContainmentBayP1T6Extreme': 577,
  'ContainmentBayP1T6Unreal': 1121,
  'ContainmentBayS1T7': 517,
  'ContainmentBayS1T7Extreme': 524,
  'ContainmentBayS1T7Unreal': 1090,
  'ContainmentBayZ1T9': 637,
  'ContainmentBayZ1T9Extreme': 638,
  'ContainmentBayZ1T9Unreal': 1157,
  'CopperbellMines': 1038,
  'CopperbellMinesHard': 349,
  'CrystallineConflictCustomMatchCloudNine': 1060,
  'CrystallineConflictCustomMatchTheClockworkCastletown': 1117,
  'CrystallineConflictCustomMatchThePalaistra': 1058,
  'CrystallineConflictCustomMatchTheRedSands': 1139,
  'CrystallineConflictCustomMatchTheVolcanicHeart': 1059,
  'CuriousGorgeMeetsHisMatch': 717,
  'CuttersCry': 170,
  'DarkAsTheNightSky': 713,
  'DeathUntoDawn': 977,
  'DefeatAnOccupiedTarget': 545,
  'DeltascapeV10': 691,
  'DeltascapeV10Savage': 695,
  'DeltascapeV20': 692,
  'DeltascapeV20Savage': 696,
  'DeltascapeV30': 693,
  'DeltascapeV30Savage': 697,
  'DeltascapeV40': 694,
  'DeltascapeV40Savage': 698,
  'DelubrumReginae': 936,
  'DelubrumReginaeSavage': 937,
  'Devastation': 1052,
  'DohnMheg': 821,
  'DomaCastle': 1144,
  'DomaCastle63': 660,
  'DragonSound': 714,
  'DragonsongsRepriseUltimate': 968,
  'DunScaith': 627,
  'DzemaelDarkhold': 171,
  'EastShroud': 152,
  'EasternLaNoscea': 137,
  'EasternThanalan': 145,
  'EdensGateDescent': 850,
  'EdensGateDescentSavage': 854,
  'EdensGateInundation': 851,
  'EdensGateInundationSavage': 855,
  'EdensGateResurrection': 849,
  'EdensGateResurrectionSavage': 853,
  'EdensGateSepulture': 852,
  'EdensGateSepultureSavage': 856,
  'EdensPromiseAnamorphosis': 944,
  'EdensPromiseAnamorphosisSavage': 948,
  'EdensPromiseEternity': 945,
  'EdensPromiseEternitySavage': 949,
  'EdensPromiseLitany': 943,
  'EdensPromiseLitanySavage': 947,
  'EdensPromiseUmbra': 942,
  'EdensPromiseUmbraSavage': 946,
  'EdensVerseFulmination': 902,
  'EdensVerseFulminationSavage': 906,
  'EdensVerseFuror': 903,
  'EdensVerseFurorSavage': 907,
  'EdensVerseIconoclasm': 904,
  'EdensVerseIconoclasmSavage': 908,
  'EdensVerseRefulgence': 905,
  'EdensVerseRefulgenceSavage': 909,
  'Elpis': 961,
  'Emanation': 719,
  'EmanationExtreme': 720,
  'EmissaryOfTheDawn': 769,
  'Endwalker': 1013,
  'EngageMultipleTargets': 541,
  'Eulmore': 820,
  'Euphrosyne': 1118,
  'EurekaOrthosFloors11_20': 1100,
  'EurekaOrthosFloors1_10': 1099,
  'EurekaOrthosFloors21_30': 1101,
  'EurekaOrthosFloors31_40': 1102,
  'EurekaOrthosFloors41_50': 1103,
  'EurekaOrthosFloors51_60': 1104,
  'EurekaOrthosFloors61_70': 1105,
  'EurekaOrthosFloors71_80': 1106,
  'EurekaOrthosFloors81_90': 1107,
  'EurekaOrthosFloors91_100': 1108,
  'EverMarchHeavensward': 1018,
  'ExecuteAComboInBattle': 539,
  'ExecuteAComboToIncreaseEnmity': 538,
  'ExecuteARangedAttackToIncreaseEnmity': 542,
  'FadedMemories': 932,
  'FinalExercise': 552,
  'FitForAQueen': 955,
  'FlickingSticksAndTakingNames': 219,
  'ForlornGlory': 1051,
  'Foundation': 418,
  'FourPlayerMahjongQuickMatchKuitanDisabled': 831,
  'Garlemald': 958,
  'GenerationalBonding': 1115,
  'Halatali': 162,
  'HalataliHard': 360,
  'HaukkeManor': 1040,
  'HaukkeManorHard': 350,
  'HealAnAlly': 549,
  'HealMultipleAllies': 550,
  'HeavenOnHighFloors11_20': 771,
  'HeavenOnHighFloors1_10': 770,
  'HeavenOnHighFloors21_30': 772,
  'HeavenOnHighFloors31_40': 782,
  'HeavenOnHighFloors41_50': 773,
  'HeavenOnHighFloors51_60': 783,
  'HeavenOnHighFloors61_70': 774,
  'HeavenOnHighFloors71_80': 784,
  'HeavenOnHighFloors81_90': 775,
  'HeavenOnHighFloors91_100': 785,
  'HellsKier': 810,
  'HellsKierExtreme': 811,
  'HellsLid': 742,
  'HeroOnTheHalfShell': 216,
  'HiddenGorge': 791,
  'HolminsterSwitch': 837,
  'HullbreakerIsle': 361,
  'HullbreakerIsleHard': 557,
  'Idyllshire': 478,
  'IlMheg': 816,
  'InFromTheCold': 1011,
  'InThalsName': 705,
  'InteractWithTheBattlefield': 548,
  'InterdimensionalRift': 690,
  'ItsProbablyATrap': 665,
  'Kholusia': 814,
  'KtisisHyperboreia': 974,
  'Kugane': 628,
  'KuganeCastle': 662,
  'KuganeOhashi': 806,
  'Labyrinthos': 956,
  'LaidToRest': 1017,
  'Lakeland': 813,
  'LapisManalis': 1097,
  'LegendOfTheNotSoHiddenTemple': 859,
  'LifeEphemeralPathEternal': 1023,
  'LimsaLominsaLowerDecks': 129,
  'LimsaLominsaUpperDecks': 128,
  'LongLiveTheQueen': 298,
  'LovmMasterTournament': 506,
  'LovmPlayerBattleNonRp': 591,
  'LovmPlayerBattleRp': 589,
  'LovmTournament': 590,
  'LowerLaNoscea': 135,
  'MalikahsWell': 836,
  'MareLamentorum': 959,
  'MatchAll': null,
  'MatoyasRelict': 933,
  'MatsubaMayhem': 710,
  'MemoriaMiseraExtreme': 913,
  'MessengerOfTheWinds': 834,
  'MiddleLaNoscea': 134,
  'Mist': 136,
  'MorDhona': 156,
  'MoreThanAFeeler': 221,
  'MountOrdeals': 1095,
  'MountOrdealsExtreme': 1096,
  'MountRokkon': 1137,
  'MtGulg': 822,
  'Naadam': 688,
  'Neverreap': 420,
  'NewGridania': 132,
  'NorthShroud': 154,
  'NorthernThanalan': 147,
  'NyelbertsLament': 876,
  'OldGridania': 133,
  'OldSharlayan': 962,
  'OneLifeForOneWorld': 592,
  'OnsalHakairDanshigNaadam': 888,
  'OurCompromise': 716,
  'OurUnsungHeroes': 722,
  'OuterLaNoscea': 180,
  'Paglthan': 938,
  'PharosSirius': 160,
  'PharosSiriusHard': 510,
  'PullingPoisonPosies': 191,
  'RadzAtHan': 963,
  'RaisingTheSword': 706,
  'ReturnOfTheBull': 403,
  'RhalgrsReach': 635,
  'SagesFocus': 1022,
  'SaintMociannesArboretum': 511,
  'SaintMociannesArboretumHard': 788,
  'Sastasha': 1036,
  'SastashaHard': 387,
  'SealRockSeize': 431,
  'ShadowAndClaw': 223,
  'ShisuiOfTheVioletTides': 616,
  'SigmascapeV10': 748,
  'SigmascapeV10Savage': 752,
  'SigmascapeV20': 749,
  'SigmascapeV20Savage': 753,
  'SigmascapeV30': 750,
  'SigmascapeV30Savage': 754,
  'SigmascapeV40': 751,
  'SigmascapeV40Savage': 755,
  'Smileton': 976,
  'Snowcloak': 1062,
  'Snowcloak61': 371,
  'SohmAl': 1064,
  'SohmAl61': 441,
  'SohmAlHard': 617,
  'SohrKhai': 1112,
  'SohrKhai62': 555,
  'SolemnTrinity': 300,
  'SouthShroud': 153,
  'SouthernThanalan': 146,
  'SpecialEventI': 353,
  'SpecialEventIi': 354,
  'StingingBack': 192,
  'StormsCrown': 1071,
  'StormsCrownExtreme': 1072,
  'SyrcusTower': 372,
  'Thaleia': 1178,
  'Thavnair': 957,
  'TheAbyssalFracture': 1168,
  'TheAbyssalFractureExtreme': 1169,
  'TheAery': 1065,
  'TheAery61': 435,
  'TheAetherfont': 1126,
  'TheAetherochemicalResearchFacility': 1110,
  'TheAetherochemicalResearchFacility62': 438,
  'TheAitiascope': 978,
  'TheAkhAfahAmphitheatreExtreme': 378,
  'TheAkhAfahAmphitheatreHard': 377,
  'TheAkhAfahAmphitheatreUnreal': 930,
  'TheAntitower': 1111,
  'TheAntitower62': 516,
  'TheAquapolis': 558,
  'TheAurumVale': 172,
  'TheAzimSteppe': 622,
  'TheBattleOnBekko': 711,
  'TheBindingCoilOfBahamutTurn1': 241,
  'TheBindingCoilOfBahamutTurn2': 242,
  'TheBindingCoilOfBahamutTurn3': 243,
  'TheBindingCoilOfBahamutTurn4': 244,
  'TheBindingCoilOfBahamutTurn5': 245,
  'TheBorderlandRuinsSecure': 376,
  'TheBowlOfEmbers': 1045,
  'TheBowlOfEmbersExtreme': 295,
  'TheBowlOfEmbersHard': 292,
  'TheBozjaIncident': 911,
  'TheBozjanSouthernFront': 920,
  'TheBurn': 1173,
  'TheBurn64': 789,
  'TheCalamityRetold': 790,
  'TheCarteneauFlatsHeliodrome': 633,
  'TheChrysalis': 426,
  'TheChurningMists': 400,
  'TheClockworkCastletown': 1116,
  'TheCloudDeck': 950,
  'TheCloudDeckExtreme': 951,
  'TheCopiedFactory': 882,
  'TheCrownOfTheImmaculate': 846,
  'TheCrownOfTheImmaculateExtreme': 848,
  'TheCrystarium': 819,
  'TheDancingPlague': 845,
  'TheDancingPlagueExtreme': 858,
  'TheDarkInside': 992,
  'TheDeadEnds': 973,
  'TheDiadem': 929,
  'TheDiademEasy': 512,
  'TheDiademHard': 515,
  'TheDiademHuntingGrounds': 625,
  'TheDiademHuntingGroundsEasy': 624,
  'TheDiademTrialsOfTheFury': 630,
  'TheDiademTrialsOfTheMatron': 656,
  'TheDomanEnclave': 759,
  'TheDragonsNeck': 142,
  'TheDravanianForelands': 398,
  'TheDravanianHinterlands': 399,
  'TheDrownedCityOfSkalla': 731,
  'TheDungeonsOfLyheGhiah': 879,
  'TheDuskVigil': 434,
  'TheDyingGasp': 847,
  'TheEpicOfAlexanderUltimate': 887,
  'TheExcitatron6000': 1000,
  'TheFaceOfTrueEvil': 709,
  'TheFellCourtOfTroia': 1070,
  'TheFieldsOfGloryShatter': 554,
  'TheFinalCoilOfBahamutTurn1': 193,
  'TheFinalCoilOfBahamutTurn2': 194,
  'TheFinalCoilOfBahamutTurn3': 195,
  'TheFinalCoilOfBahamutTurn4': 196,
  'TheFinalDay': 997,
  'TheFinalStepsOfFaith': 559,
  'TheForbiddenLandEurekaAnemos': 732,
  'TheForbiddenLandEurekaHydatos': 827,
  'TheForbiddenLandEurekaPagos': 763,
  'TheForbiddenLandEurekaPyros': 795,
  'TheFractalContinuum': 430,
  'TheFractalContinuumHard': 743,
  'TheFringes': 612,
  'TheGhimlytDark': 1174,
  'TheGhimlytDark64': 793,
  'TheGiftOfMercy': 1019,
  'TheGrandCosmos': 884,
  'TheGreatGubalLibrary': 1109,
  'TheGreatGubalLibrary62': 416,
  'TheGreatGubalLibraryHard': 578,
  'TheGreatHunt': 761,
  'TheGreatHuntExtreme': 762,
  'TheGreatShipVylbrand': 954,
  'TheHardenedHeart': 873,
  'TheHarvestBegins': 1020,
  'TheHauntedManor': 571,
  'TheHeartOfTheProblem': 718,
  'TheHeroesGauntlet': 916,
  'TheHiddenCanalsOfUznair': 725,
  'TheHowlingEye': 1047,
  'TheHowlingEyeExtreme': 297,
  'TheHowlingEyeHard': 294,
  'TheHuntersLegacy': 875,
  'TheJadeStoa': 746,
  'TheJadeStoaExtreme': 758,
  'TheKeeperOfTheLake': 1063,
  'TheKeeperOfTheLake61': 150,
  'TheKillingArt': 1021,
  'TheLabyrinthOfTheAncients': 174,
  'TheLimitlessBlueExtreme': 447,
  'TheLimitlessBlueHard': 436,
  'TheLochs': 621,
  'TheLostAndTheFound': 874,
  'TheLostCanalsOfUznair': 712,
  'TheLostCityOfAmdapor': 363,
  'TheLostCityOfAmdaporHard': 519,
  'TheLunarSubterrane': 1164,
  'TheMaskedCarnivale': 796,
  'TheMinstrelsBalladEndsingersAria': 998,
  'TheMinstrelsBalladHadessElegy': 885,
  'TheMinstrelsBalladHydaelynsCall': 996,
  'TheMinstrelsBalladNidhoggsRage': 566,
  'TheMinstrelsBalladShinryusDomain': 730,
  'TheMinstrelsBalladThordansReign': 448,
  'TheMinstrelsBalladTsukuyomisPain': 779,
  'TheMinstrelsBalladUltimasBane': 348,
  'TheMinstrelsBalladZodiarksFall': 993,
  'TheMothercrystal': 995,
  'TheNavel': 1046,
  'TheNavelExtreme': 296,
  'TheNavelHard': 293,
  'TheNavelUnreal': 953,
  'TheOmegaProtocolUltimate': 1122,
  'TheOrbonneMonastery': 826,
  'TheOrphansAndTheBrokenBlade': 715,
  'ThePalaceOfTheDeadFloors101_110': 598,
  'ThePalaceOfTheDeadFloors111_120': 599,
  'ThePalaceOfTheDeadFloors11_20': 562,
  'ThePalaceOfTheDeadFloors121_130': 600,
  'ThePalaceOfTheDeadFloors131_140': 601,
  'ThePalaceOfTheDeadFloors141_150': 602,
  'ThePalaceOfTheDeadFloors151_160': 603,
  'ThePalaceOfTheDeadFloors161_170': 604,
  'ThePalaceOfTheDeadFloors171_180': 605,
  'ThePalaceOfTheDeadFloors181_190': 606,
  'ThePalaceOfTheDeadFloors191_200': 607,
  'ThePalaceOfTheDeadFloors1_10': 561,
  'ThePalaceOfTheDeadFloors21_30': 563,
  'ThePalaceOfTheDeadFloors31_40': 564,
  'ThePalaceOfTheDeadFloors41_50': 565,
  'ThePalaceOfTheDeadFloors51_60': 593,
  'ThePalaceOfTheDeadFloors61_70': 594,
  'ThePalaceOfTheDeadFloors71_80': 595,
  'ThePalaceOfTheDeadFloors81_90': 596,
  'ThePalaceOfTheDeadFloors91_100': 597,
  'ThePeaks': 620,
  'ThePhantomsFeast': 994,
  'ThePillars': 419,
  'ThePoolOfTribute': 674,
  'ThePoolOfTributeExtreme': 677,
  'ThePortaDecumana': 1048,
  'ThePraetorium': 1044,
  'ThePuppetsBunker': 917,
  'TheQitanaRavel': 823,
  'TheRaktikaGreatwood': 817,
  'TheRedSands': 1138,
  'TheResonant': 684,
  'TheRidoranaLighthouse': 776,
  'TheRoyalCityOfRabanastre': 734,
  'TheRoyalMenagerie': 679,
  'TheRubySea': 613,
  'TheSeaOfClouds': 401,
  'TheSeatOfSacrifice': 922,
  'TheSeatOfSacrificeExtreme': 923,
  'TheSecondCoilOfBahamutSavageTurn1': 380,
  'TheSecondCoilOfBahamutSavageTurn2': 381,
  'TheSecondCoilOfBahamutSavageTurn3': 382,
  'TheSecondCoilOfBahamutSavageTurn4': 383,
  'TheSecondCoilOfBahamutTurn1': 355,
  'TheSecondCoilOfBahamutTurn2': 356,
  'TheSecondCoilOfBahamutTurn3': 357,
  'TheSecondCoilOfBahamutTurn4': 358,
  'TheShiftingAltarsOfUznair': 794,
  'TheShiftingGymnasionAgonon': 1123,
  'TheShiftingOubliettesOfLyheGhiah': 924,
  'TheSildihnSubterrane': 1069,
  'TheSingularityReactor': 437,
  'TheSingularityReactorUnreal': 1175,
  'TheSirensongSea': 1142,
  'TheSirensongSea63': 626,
  'TheStepsOfFaith': 1068,
  'TheStepsOfFaith61': 143,
  'TheStigmaDreamscape': 986,
  'TheStoneVigil': 1042,
  'TheStoneVigilHard': 365,
  'TheStrikingTreeExtreme': 375,
  'TheStrikingTreeHard': 374,
  'TheSunkenTempleOfQarn': 163,
  'TheSunkenTempleOfQarnHard': 367,
  'TheSwallowsCompass': 768,
  'TheTamTaraDeepcroft': 1037,
  'TheTamTaraDeepcroftHard': 373,
  'TheTempest': 818,
  'TheTempleOfTheFist': 663,
  'TheThousandMawsOfTotoRak': 1039,
  'TheTowerAtParadigmsBreach': 966,
  'TheTowerOfBabil': 969,
  'TheTowerOfZot': 952,
  'TheTripleTriadBattlehall': 579,
  'TheTwinning': 840,
  'TheUnendingCoilOfBahamutUltimate': 733,
  'TheValentionesCeremony': 741,
  'TheVault': 1066,
  'TheVault61': 421,
  'TheVoidArk': 508,
  'TheVoidcastDais': 1140,
  'TheVoidcastDaisExtreme': 1141,
  'TheWanderersPalace': 159,
  'TheWanderersPalaceHard': 188,
  'TheWeaponsRefrainUltimate': 777,
  'TheWeepingCityOfMhach': 556,
  'TheWhorleaterExtreme': 359,
  'TheWhorleaterHard': 281,
  'TheWhorleaterUnreal': 972,
  'TheWillOfTheMoon': 797,
  'TheWorldOfDarkness': 151,
  'TheWreathOfSnakes': 824,
  'TheWreathOfSnakesExtreme': 825,
  'ThokAstThokExtreme': 446,
  'ThokAstThokHard': 432,
  'ThornmarchExtreme': 364,
  'ThornmarchHard': 1067,
  'ThornmarchHard61': 207,
  'ToCalmerSeas': 1016,
  'TripleTriadInvitationalParlor': 941,
  'TripleTriadOpenTournament': 940,
  'UldahStepsOfNald': 130,
  'UldahStepsOfThal': 131,
  'UltimaThule': 960,
  'UltimasBaneUnreal': 1035,
  'UnderTheArmor': 190,
  'UpperLaNoscea': 139,
  'UrthsFount': 394,
  'Vanaspati': 970,
  'VowsOfVirtueDeedsOfCruelty': 893,
  'WardUp': 299,
  'WesternLaNoscea': 138,
  'WesternThanalan': 140,
  'WhenClansCollide': 723,
  'WhereEverythingBegins': 1091,
  'WithHeartAndSteel': 707,
  'WolvesDenPier': 250,
  'WorthyOfHisBack': 1014,
  'Xelphatol': 1113,
  'Xelphatol62': 572,
  'Yanxia': 614,
  'Zadnor': 975
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 902:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.py
// DO NOT EDIT THIS FILE DIRECTLY

const data = {
  1000: {
    'contentType': 9,
    'exVersion': 4,
    'name': {
      'cn': '惊奇百宝城',
      'de': 'Euphoratron',
      'en': 'The Excitatron 6000',
      'fr': 'Le Ludodrome',
      'ja': '宝物庫 エキサイトロン',
      'ko': '보물고 익사이트론'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1002: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis',
      'en': 'Asphodelos: The First Circle',
      'fr': 'Les Limbes du Pandæmonium - Parvis',
      'ja': '万魔殿パンデモニウム：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1003: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱1',
      'de': 'Asphodelos - Erster Kreis (episch)',
      'en': 'Asphodelos: The First Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Parvis (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編1',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1004: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis',
      'en': 'Asphodelos: The Second Circle',
      'fr': 'Les Limbes du Pandæmonium - Cloaque',
      'ja': '万魔殿パンデモニウム：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1005: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱2',
      'de': 'Asphodelos - Zweiter Kreis (episch)',
      'en': 'Asphodelos: The Second Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Cloaque (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編2',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1006: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis',
      'en': 'Asphodelos: The Third Circle',
      'fr': 'Les Limbes du Pandæmonium - Fournaise',
      'ja': '万魔殿パンデモニウム：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1007: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱3',
      'de': 'Asphodelos - Dritter Kreis (episch)',
      'en': 'Asphodelos: The Third Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Fournaise (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編3',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1008: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis',
      'en': 'Asphodelos: The Fourth Circle',
      'fr': 'Les Limbes du Pandæmonium - Abîme',
      'ja': '万魔殿パンデモニウム：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1009: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 边境之狱4',
      'de': 'Asphodelos - Vierter Kreis (episch)',
      'en': 'Asphodelos: The Fourth Circle (Savage)',
      'fr': 'Les Limbes du Pandæmonium - Abîme (sadique)',
      'ja': '万魔殿パンデモニウム零式：辺獄編4',
      'ko': '마의 전당 판데모니움: 변옥편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1010: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '踏破风雪',
      'de': 'Ein frostiger Empfang',
      'en': 'A Frosty Reception',
      'fr': 'Un accueil glacial',
      'ja': '霜雪を踏みしめて',
      'ko': '눈서리를 밟고'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1011: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '无尽寒夜',
      'de': 'In fremder Haut',
      'en': 'In from the Cold',
      'fr': 'Le voleur de corps',
      'ja': '寒夜のこと',
      'ko': '어느 추운 밤에'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 27
  },
  1012: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '扩散的末日',
      'de': 'Rote Himmel, roter Schnee',
      'en': 'As the Heavens Burn',
      'fr': 'L\'arène des neiges',
      'ja': '拡がる終末',
      'ko': '퍼져가는 종말'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 141
  },
  1013: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '晓月之终途',
      'de': 'Endschreiter',
      'en': 'Endwalker',
      'fr': 'Arpenteur des finitudes',
      'ja': '暁月のフィナーレ',
      'ko': '효월의 종언'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 100,
    'weatherRate': 143
  },
  1014: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '上一任阿谢姆的教导',
      'de': ' Es reimt sich auf Gebell',
      'en': 'Worthy of His Back',
      'fr': 'Le défi de l\'ancienne Azem',
      'ja': '前代アゼムの手ほどき',
      'ko': '선대 아젬과의 대련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  1015: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '未来之路',
      'de': 'Offen für neue Wege',
      'en': 'A Path Unveiled',
      'fr': 'Des esprits et des hommes',
      'ja': '開かれた道の先へ',
      'ko': '열린 길 저편으로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  1016: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '驶向融合的巨轮',
      'de': 'Im Hafen des Friedens',
      'en': 'To Calmer Seas',
      'fr': 'Cap sur la paix',
      'ja': '融和への船出',
      'ko': '화합을 향한 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1017: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '英魂安息',
      'de': 'Domanisches Begräbnis',
      'en': 'Laid to Rest',
      'fr': 'Des adieux domiens',
      'ja': 'ドマの弔い',
      'ko': '도마의 추도'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1018: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '仰望苍穹，不断迈进',
      'de': 'Der Weg zur Erneuerung',
      'en': 'Ever March Heavensward',
      'fr': 'La voie du renouveau',
      'ja': '蒼天を仰ぎ、歩み続ける',
      'ko': '창천을 보며 나아가자'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 114
  },
  1019: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '目送生者前行',
      'de': 'Trauer und Hoffnung',
      'en': 'The Gift of Mercy',
      'fr': 'Acceptation',
      'ja': '僕たちは還り、君を見送ろう',
      'ko': '우리는 돌아가 그대를 보내리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1020: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '大镰的意义',
      'de': 'Die Bedeutung der Sense',
      'en': 'The Harvest Begins',
      'fr': 'La vraie puissance de la faux',
      'ja': '大鎌の意味',
      'ko': '큰낫의 의미'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1021: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '暗杀道',
      'de': 'Die Kunst des Tötens',
      'en': 'The Killing Art',
      'fr': 'La voie du néant',
      'ja': '暗殺道',
      'ko': '암살의 길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1022: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '贤者的短杖',
      'de': 'Des Weisen wundersames Werkzeug',
      'en': 'Sage\'s Focus',
      'fr': 'Les armes du sage',
      'ja': '賢者の短杖',
      'ko': '현자의 짧은 지팡이'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1023: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '生命瞬逝，术道恒久',
      'de': 'Das Leben ist kurz, die Kunst ist lang',
      'en': 'Life Ephemeral, Path Eternal',
      'fr': 'Existences éphémères et savoir éternel',
      'ja': '人命は儚く、術のみちは永久に',
      'ko': '생명은 덧없으나 기술은 영원하리'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  1035: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '究极神兵幻巧战',
      'de': 'Traumprüfung - Ultima',
      'en': 'Ultima\'s Bane (Unreal)',
      'fr': 'Le fléau d\'Ultima (irréel)',
      'ja': '幻アルテマウェポン破壊作戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  1036: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '天然要害沙斯塔夏溶洞',
      'de': 'Sastasha',
      'en': 'Sastasha',
      'fr': 'Sastasha',
      'ja': '天然要害 サスタシャ浸食洞',
      'ko': '사스타샤 침식 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1037: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '地下灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara',
      'en': 'The Tam–Tara Deepcroft',
      'fr': 'L\'Hypogée de Tam-Tara',
      'ja': '地下霊殿 タムタラの墓所',
      'ko': '탐타라 묘소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  1038: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '封锁坑道铜铃铜山',
      'de': 'Kupferglocken-Mine',
      'en': 'Copperbell Mines',
      'fr': 'Les Mines de Clochecuivre',
      'ja': '封鎖坑道 カッパーベル銅山',
      'ko': '구리종 광산'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1039: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '监狱废墟托托·拉克千狱',
      'de': 'Tausend Löcher von Toto-Rak',
      'en': 'The Thousand Maws of Toto–Rak',
      'fr': 'Les Mille Gueules de Toto-Rak',
      'ja': '監獄廃墟 トトラクの千獄',
      'ko': '토토라크 감옥'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1040: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '名门府邸静语庄园',
      'de': 'Haukke-Herrenhaus',
      'en': 'Haukke Manor',
      'fr': 'Le Manoir des Haukke',
      'ja': '名門屋敷 ハウケタ御用邸',
      'ko': '하우케타 별궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1041: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '休养胜地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast',
      'en': 'Brayflox\'s Longstop',
      'fr': 'Le Bivouac de Brayflox',
      'ja': '奪還支援 ブレイフロクスの野営地',
      'ko': '브레이플록스의 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1042: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '对龙城塞石卫塔',
      'de': 'Steinerne Wacht',
      'en': 'The Stone Vigil',
      'fr': 'Le Vigile de Pierre',
      'ja': '城塞攻略 ストーンヴィジル',
      'ko': '돌방패 경계초소'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 27
  },
  1043: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '神兵要塞帝国南方堡',
      'de': 'Castrum Meridianum - Außenbereich',
      'en': 'Castrum Meridianum',
      'fr': 'Castrum Meridianum',
      'ja': '外郭攻略 カストルム・メリディアヌム',
      'ko': '카스트룸 메리디아눔'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1044: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '最终决战天幕魔导城',
      'de': 'Castrum Meridianum - Praetorium',
      'en': 'The Praetorium',
      'fr': 'Le Praetorium',
      'ja': '最終決戦 魔導城プラエトリウム',
      'ko': '마도성 프라이토리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1045: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特讨伐战',
      'de': 'Das Grab der Lohe',
      'en': 'The Bowl of Embers',
      'fr': 'Le Cratère des tisons',
      'ja': 'イフリート討伐戦',
      'ko': '이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  1046: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦讨伐战',
      'de': 'Der Nabel',
      'en': 'The Navel',
      'fr': 'Le Nombril',
      'ja': 'タイタン討伐戦',
      'ko': '타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  1047: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗讨伐战',
      'de': 'Das Tosende Auge',
      'en': 'The Howling Eye',
      'fr': 'Hurlœil',
      'ja': 'ガルーダ討伐戦',
      'ko': '가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  1048: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '究极神兵破坏作战',
      'de': 'Porta Decumana',
      'en': 'The Porta Decumana',
      'fr': 'Porta Decumana',
      'ja': 'アルテマウェポン破壊作戦',
      'ko': '알테마 웨폰 파괴작전'
    },
    'offsetX': 772,
    'offsetY': 600,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1049: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '里塔提恩强攻战',
      'de': 'Kap Westwind',
      'en': 'Cape Westwind',
      'fr': 'Le Cap Vendouest',
      'ja': 'リットアティン強襲戦',
      'ko': '리트아틴 강습전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1050: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '近东秘宝阿尔扎达尔海底遗迹群',
      'de': 'Alzadaals Vermächtnis',
      'en': 'Alzadaal\'s Legacy',
      'fr': 'Le legs d\'Alzadaal',
      'ja': '近東秘宝 アルザダール海底遺跡群',
      'ko': '알자달 해저 유적'
    },
    'offsetX': 15,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1051: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '涅尔瓦的帝国',
      'de': 'Nervas Reich',
      'en': 'Forlorn Glory',
      'fr': 'Nerva, le patriote',
      'ja': 'ネルウァの帝国',
      'ko': '네르바의 제국'
    },
    'offsetX': -230,
    'offsetY': -250,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1052: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '拉哈布雷亚讨伐战',
      'de': 'Das Antlitz der Kaltblütigkeit',
      'en': 'Devastation',
      'fr': 'Le Praetorium en flammes',
      'ja': 'アシエン・ラハブレア討伐戦',
      'ko': '아씨엔 라하브레아 토벌전'
    },
    'offsetX': 704,
    'offsetY': -480,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1054: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '灿烂神域阿格莱亚',
      'de': 'Aglaia',
      'en': 'Aglaia',
      'fr': 'Domaine divin - Aglaé',
      'ja': '輝ける神域 アグライア',
      'ko': '찬란한 신역 아글라이아'
    },
    'offsetX': -80,
    'offsetY': -550,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  1058: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（角力学校：自定赛）',
      'de': 'Crystalline Conflict: Die Palästra (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Palaistra)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Palestre)',
      'ja': 'クリスタルコンフリクト(パライストラ：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(팔라이스트라: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1059: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（火山之心：自定赛）',
      'de': 'Crystalline Conflict: Das Herz des Vulkans (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Volcanic Heart)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Cœur volcanique)',
      'ja': 'クリスタルコンフリクト(ヴォルカニック・ハート：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(화산심장: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1060: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（九霄云上：自定赛）',
      'de': 'Crystalline Conflict: Wolke Sieben (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - Cloud Nine)',
      'fr': 'Crystalline Conflict (partie personnalisée - Le Petit Nuage)',
      'ja': 'クリスタルコンフリクト(クラウドナイン：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(절정의 구름: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1062: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '凛冽洞天披雪大冰壁',
      'de': 'Das Schneekleid',
      'en': 'Snowcloak',
      'fr': 'Manteneige',
      'ja': '氷結潜窟 スノークローク大氷壁',
      'ko': '얼음외투 대빙벽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1063: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '幻龙残骸密约之塔',
      'de': 'Hüter des Sees',
      'en': 'The Keeper of the Lake',
      'fr': 'Le Gardien du lac',
      'ja': '幻龍残骸 黙約の塔',
      'ko': '묵약의 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  1064: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山绝顶索姆阿尔灵峰',
      'de': 'Sohm Al',
      'en': 'Sohm Al',
      'fr': 'Sohm Al',
      'ja': '霊峰踏破 ソーム・アル',
      'ko': '솜 알'
    },
    'offsetX': 185,
    'offsetY': 51,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1065: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '邪龙王座龙巢神殿',
      'de': 'Nest des Drachen',
      'en': 'The Aery',
      'fr': 'L\'Aire',
      'ja': '邪竜血戦 ドラゴンズエアリー',
      'ko': '용의 둥지'
    },
    'offsetX': -40,
    'offsetY': 55,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1066: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '圣教中枢伊修加德教皇厅',
      'de': 'Erzbasilika',
      'en': 'The Vault',
      'fr': 'La Voûte',
      'ja': '強硬突入 イシュガルド教皇庁',
      'ko': '이슈가르드 교황청'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1067: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼灭战',
      'de': 'Königliche Konfrontation (schwer)',
      'en': 'Thornmarch (Hard)',
      'fr': 'La Lisière de ronces (brutal)',
      'ja': '善王モグル・モグXII世討滅戦',
      'ko': '선왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  1068: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '皇都伊修加德保卫战',
      'de': 'Der Schicksalsweg',
      'en': 'The Steps of Faith',
      'fr': 'Le Siège de la sainte Cité d\'Ishgard',
      'ja': '皇都イシュガルド防衛戦',
      'ko': '성도 이슈가르드 방어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1069: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '多变迷宫 希拉狄哈水道',
      'de': 'Die Unterstadt von Sil\'dih',
      'en': 'The Sil\'dihn Subterrane',
      'fr': 'Les canalisations sildiennes - Donjon à embranchements',
      'ja': 'ヴァリアントダンジョン シラディハ水道',
      'ko': '변형 던전: 실디하 지하수도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1070: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '异界孤城特罗亚宫廷',
      'de': 'Der Schwarze Hof von Troia',
      'en': 'The Fell Court of Troia',
      'fr': 'Le Château de Troïa',
      'ja': '異界孤城 トロイアコート',
      'ko': '트로이아 궁정'
    },
    'offsetX': -76,
    'offsetY': -180,
    'sizeFactor': 200,
    'weatherRate': 149
  },
  1071: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '巴尔巴莉希娅歼灭战',
      'de': 'Prophetie - Barbarizia',
      'en': 'Storm\'s Crown',
      'fr': 'La Toison des tempêtes',
      'ja': 'バルバリシア討滅戦',
      'ko': '바르바리차 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1072: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '巴尔巴莉希娅歼殛战',
      'de': 'Eschatos - Barbarizia',
      'en': 'Storm\'s Crown (Extreme)',
      'fr': 'La Toison des tempêtes (extrême)',
      'ja': '極バルバリシア討滅戦',
      'ko': '극 바르바리차 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1075: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '异闻迷宫 异闻希拉狄哈水道',
      'de': 'Die kuriose Unterstadt von Sil\'dih',
      'en': 'Another Sil\'dihn Subterrane',
      'fr': 'Les canalisations sildiennes annexes - Donjon alternatif',
      'ja': 'アナザーダンジョン 異聞シラディハ水道',
      'ko': '파생 던전: 번외 실디하 지하수도'
    },
    'offsetX': 335,
    'offsetY': 100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1076: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '异闻迷宫 零式异闻希拉狄哈水道',
      'de': 'Die kuriose Unterstadt von Sil\'dih (episch)',
      'en': 'Another Sil\'dihn Subterrane (Savage)',
      'fr': 'Les canalisations sildiennes annexes - Donjon alternatif (sadique)',
      'ja': 'アナザーダンジョン 異聞シラディハ水道 零式',
      'ko': '파생 던전: 번외 실디하 지하수도(영웅)'
    },
    'offsetX': 335,
    'offsetY': 100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1081: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱1',
      'de': 'Abyssos - Fünfter Kreis',
      'en': 'Abyssos: The Fifth Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Cages',
      'ja': '万魔殿パンデモニウム：煉獄編1',
      'ko': '마의 전당 판데모니움: 연옥편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1082: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱1',
      'de': 'Abyssos - Fünfter Kreis (episch)',
      'en': 'Abyssos: The Fifth Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Cages (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編1',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1083: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱2',
      'de': 'Abyssos - Sechster Kreis',
      'en': 'Abyssos: The Sixth Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Croisements',
      'ja': '万魔殿パンデモニウム：煉獄編2',
      'ko': '마의 전당 판데모니움: 연옥편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1084: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱2',
      'de': 'Abyssos - Sechster Kreis (episch)',
      'en': 'Abyssos: The Sixth Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Croisements (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編2',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1085: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱3',
      'de': 'Abyssos - Siebter Kreis',
      'en': 'Abyssos: The Seventh Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Racines',
      'ja': '万魔殿パンデモニウム：煉獄編3',
      'ko': '마의 전당 판데모니움: 연옥편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1086: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱3',
      'de': 'Abyssos - Siebter Kreis (episch)',
      'en': 'Abyssos: The Seventh Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Racines (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編3',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1087: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 炼净之狱4',
      'de': 'Abyssos - Achter Kreis',
      'en': 'Abyssos: The Eighth Circle',
      'fr': 'Le Purgatoire du Pandæmonium - Hérédité',
      'ja': '万魔殿パンデモニウム：煉獄編4',
      'ko': '마의 전당 판데모니움: 연옥편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1088: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 炼净之狱4',
      'de': 'Abyssos - Achter Kreis (episch)',
      'en': 'Abyssos: The Eighth Circle (Savage)',
      'fr': 'Le Purgatoire du Pandæmonium - Hérédité (sadique)',
      'ja': '万魔殿パンデモニウム零式：煉獄編4',
      'ko': '마의 전당 판데모니움: 연옥편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1090: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '萨菲洛特幻巧战',
      'de': 'Traumprüfung - Sephirot',
      'en': 'Containment Bay S1T7 (Unreal)',
      'fr': 'Unité de contention S1P7 (irréel)',
      'ja': '幻魔神セフィロト討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  1091: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '失传的力量',
      'de': 'Wo alles seinen Anfang nimmt',
      'en': 'Where Everything Begins',
      'fr': 'Au commencement était Zero',
      'ja': '失われた力',
      'ko': '잃어버린 힘'
    },
    'offsetX': 143,
    'offsetY': -64,
    'sizeFactor': 200,
    'weatherRate': 149
  },
  1095: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '卢比坎特歼灭战',
      'de': 'Prophetie - Rubicante',
      'en': 'Mount Ordeals',
      'fr': 'Le Mont du Supplice',
      'ja': 'ルビカンテ討滅戦',
      'ko': '루비칸테 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1096: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '卢比坎特歼殛战',
      'de': 'Eschatos - Rubicante',
      'en': 'Mount Ordeals (Extreme)',
      'fr': 'Le Mont du Supplice (extrême)',
      'ja': '極ルビカンテ討滅戦',
      'ko': '극 루비칸테 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1097: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '雪山奥窟冥魂石洞',
      'de': 'Lapis Manalis',
      'en': 'Lapis Manalis',
      'fr': 'Lapis Manalis',
      'ja': '雪山冥洞 ラピス・マナリス',
      'ko': '라피스 마날리스'
    },
    'offsetX': -46,
    'offsetY': 570,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  1099: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下1～10层',
      'de': 'Eureka Orthos (Ebenen 1-10)',
      'en': 'Eureka Orthos (Floors 1-10)',
      'fr': 'Eurêka Orthos (sous-sols 1-10)',
      'ja': 'オルト・エウレカ B1～B10',
      'ko': '에우레카 오르토스 B1~B10'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1100: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下11～20层',
      'de': 'Eureka Orthos (Ebenen 11-20)',
      'en': 'Eureka Orthos (Floors 11-20)',
      'fr': 'Eurêka Orthos (sous-sols 11-20)',
      'ja': 'オルト・エウレカ B11～B20',
      'ko': '에우레카 오르토스 B11~B20'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1101: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下21～30层',
      'de': 'Eureka Orthos (Ebenen 21-30)',
      'en': 'Eureka Orthos (Floors 21-30)',
      'fr': 'Eurêka Orthos (sous-sols 21-30)',
      'ja': 'オルト・エウレカ B21～B30',
      'ko': '에우레카 오르토스 B21~B30'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1102: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下31～40层',
      'de': 'Eureka Orthos (Ebenen 31-40)',
      'en': 'Eureka Orthos (Floors 31-40)',
      'fr': 'Eurêka Orthos (sous-sols 31-40)',
      'ja': 'オルト・エウレカ B31～B40',
      'ko': '에우레카 오르토스 B31~B40'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1103: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下41～50层',
      'de': 'Eureka Orthos (Ebenen 41-50)',
      'en': 'Eureka Orthos (Floors 41-50)',
      'fr': 'Eurêka Orthos (sous-sols 41-50)',
      'ja': 'オルト・エウレカ B41～B50',
      'ko': '에우레카 오르토스 B41~B50'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1104: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下51～60层',
      'de': 'Eureka Orthos (Ebenen 51-60)',
      'en': 'Eureka Orthos (Floors 51-60)',
      'fr': 'Eurêka Orthos (sous-sols 51-60)',
      'ja': 'オルト・エウレカ B51～B60',
      'ko': '에우레카 오르토스 B51~B60'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1105: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下61～70层',
      'de': 'Eureka Orthos (Ebenen 61-70)',
      'en': 'Eureka Orthos (Floors 61-70)',
      'fr': 'Eurêka Orthos (sous-sols 61-70)',
      'ja': 'オルト・エウレカ B61～B70',
      'ko': '에우레카 오르토스 B61~B70'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1106: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下71～80层',
      'de': 'Eureka Orthos (Ebenen 71-80)',
      'en': 'Eureka Orthos (Floors 71-80)',
      'fr': 'Eurêka Orthos (sous-sols 71-80)',
      'ja': 'オルト・エウレカ B71～B80',
      'ko': '에우레카 오르토스 B71~B80'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1107: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下81～90层',
      'de': 'Eureka Orthos (Ebenen 81-90)',
      'en': 'Eureka Orthos (Floors 81-90)',
      'fr': 'Eurêka Orthos (sous-sols 81-90)',
      'ja': 'オルト・エウレカ B81～B90',
      'ko': '에우레카 오르토스 B81~B90'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1108: {
    'contentType': 21,
    'exVersion': 4,
    'name': {
      'cn': '正统优雷卡 地下91～100层',
      'de': 'Eureka Orthos (Ebenen 91-100)',
      'en': 'Eureka Orthos (Floors 91-100)',
      'fr': 'Eurêka Orthos (sous-sols 91-100)',
      'ja': 'オルト・エウレカ B91～B100',
      'ko': '에우레카 오르토스 B91~B100'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  1109: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '学识宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek',
      'en': 'The Great Gubal Library',
      'fr': 'La Grande bibliothèque de Gubal',
      'ja': '禁書回収 グブラ幻想図書館',
      'ko': '구브라 환상도서관'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1110: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '血战苍穹魔科学研究所',
      'de': 'Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
      'en': 'The Aetherochemical Research Facility',
      'fr': 'Le Laboratoire de magismologie',
      'ja': '蒼天聖戦 魔科学研究所',
      'ko': '마과학 연구소'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1111: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '星海空间颠倒塔',
      'de': 'Antiturm',
      'en': 'The Antitower',
      'fr': 'L\'Antitour',
      'ja': '星海観測 逆さの塔',
      'ko': '거꾸로 선 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1112: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天龙宫殿忆罪宫',
      'de': 'Sohr Khai',
      'en': 'Sohr Khai',
      'fr': 'Sohr Khai',
      'ja': '天竜宮殿 ソール・カイ',
      'ko': '소르 카이'
    },
    'offsetX': 370,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1113: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '险峻峡谷塞尔法特尔溪谷',
      'de': 'Xelphatol',
      'en': 'Xelphatol',
      'fr': 'Xelphatol',
      'ja': '峻厳渓谷 ゼルファトル',
      'ko': '젤파톨'
    },
    'offsetX': -148,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  1114: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '坚牢铁壁巴埃萨长城',
      'de': 'Baelsar-Wall',
      'en': 'Baelsar\'s Wall',
      'fr': 'La Muraille de Baelsar',
      'ja': '巨大防壁 バエサルの長城',
      'ko': '바일사르 장성'
    },
    'offsetX': 182,
    'offsetY': 32,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  1115: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '充满活力的父子',
      'de': 'Väterliche Liebe',
      'en': 'Generational Bonding',
      'fr': 'Tel gentilhomme, tel gentilhomme',
      'ja': 'はつらつとした親子',
      'ko': '은밀한 음모'
    },
    'offsetX': -230,
    'offsetY': -250,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  1116: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '机关大殿',
      'de': 'Die Mechanische Menagerie',
      'en': 'The Clockwork Castletown',
      'fr': 'Le Traquenard oriental',
      'ja': '東方絡繰御殿',
      'ko': '동방 꼭두각시 어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1117: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '水晶冲突（机关大殿：自定赛）',
      'de': 'Crystalline Conflict: Die Mechanische Menagerie (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Clockwork Castletown)',
      'fr': 'Crys. Conflict (partie perso. - Le Traquenard oriental)',
      'ja': 'クリスタルコンフリクト(東方絡繰御殿：カスタムマッチ)',
      'ko': '크리스탈라인 컨플릭트(동방 꼭두각시 어전: 친선 경기)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1118: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '喜悦神域欧芙洛绪涅',
      'de': 'Euphrosyne',
      'en': 'Euphrosyne',
      'fr': 'Domaine divin - Euphrosyne',
      'ja': '喜びの神域 エウプロシュネ',
      'ko': '환희의 신역 에우프로시네'
    },
    'offsetX': 0,
    'offsetY': 480,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  1120: {
    'contentType': 7,
    'exVersion': 4,
    'name': {
      'cn': '未料想过的交易',
      'de': 'Der Wert einer Buuds',
      'en': 'An Unforeseen Bargain',
      'fr': 'Pour une bouchée de pain',
      'ja': 'パンひとつと引き換えに',
      'ko': '빵 하나와 바꾸어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 58
  },
  1121: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '索菲娅幻巧战',
      'de': 'Traumprüfung - Sophia',
      'en': 'Containment Bay P1T6 (Unreal)',
      'fr': 'Unité de contention P1P6 (irréel)',
      'ja': '幻女神ソフィア討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  1122: {
    'contentType': 28,
    'exVersion': 4,
    'name': {
      'cn': '欧米茄绝境验证战',
      'de': 'Omega (fatal)',
      'en': 'The Omega Protocol (Ultimate)',
      'fr': 'Le Protocole Oméga (fatal)',
      'ja': '絶オメガ検証戦',
      'ko': '절 오메가 검증전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 150
  },
  1123: {
    'contentType': 9,
    'exVersion': 4,
    'name': {
      'cn': '厄尔庇斯育体宝殿',
      'de': 'Gymnasion Agonon',
      'en': 'The Shifting Gymnasion Agonon',
      'fr': 'Elpis Gymnasion',
      'ja': '宝物庫 エルピス・ギュムナシオン祭殿',
      'ko': '보물고 엘피스 김나시온 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1126: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '间歇灵泉哈姆岛',
      'de': 'Ätherborn',
      'en': 'The Aetherfont',
      'fr': 'L\'île de Haam',
      'ja': '星霊間欠 ハーム島',
      'ko': '함 섬'
    },
    'offsetX': 368,
    'offsetY': -277,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1137: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '多变迷宫 六根山',
      'de': 'Der Rokkon',
      'en': 'Mount Rokkon',
      'fr': 'Le mont Rokkon - Donjon à embranchements',
      'ja': 'ヴァリアントダンジョン 六根山'
    },
    'offsetX': -145,
    'offsetY': -820,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1138: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Die Roten Sande',
      'en': 'The Red Sands',
      'fr': 'Les Sables sanglants',
      'ja': 'レッド・サンズ'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1139: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'de': 'Crystalline Conflict: Die Roten Sande (Schaukampf)',
      'en': 'Crystalline Conflict (Custom Match - The Red Sands)',
      'fr': 'Crystalline Conflict (partie personnalisée - Les Sables sanglants)',
      'ja': 'クリスタルコンフリクト(レッド・サンズ：カスタムマッチ)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1140: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '高贝扎歼灭战',
      'de': 'Prophetie - Golbez',
      'en': 'The Voidcast Dais',
      'fr': 'La Chaire de l\'Exilée',
      'ja': 'ゴルベーザ討滅戦',
      'ko': '골베자 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1141: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '高贝扎歼殛战',
      'de': 'Eschatos - Golbez',
      'en': 'The Voidcast Dais (Extreme)',
      'fr': 'La Chaire de l\'Exilée (extrême)',
      'ja': '極ゴルベーザ討滅戦',
      'ko': '극 골베자 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1142: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '漂流海域妖歌海',
      'de': 'Sirenen-See',
      'en': 'The Sirensong Sea',
      'fr': 'La Mer du Chant des sirènes',
      'ja': '漂流海域 セイレーン海',
      'ko': '세이렌 해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 36
  },
  1143: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '试炼行路巴儿达木霸道',
      'de': 'Bardams Probe',
      'en': 'Bardam\'s Mettle',
      'fr': 'La Force de Bardam',
      'ja': '伝統試練 バルダム覇道',
      'ko': '바르담 패도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1144: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '解放决战多玛王城',
      'de': 'Burg Doma',
      'en': 'Doma Castle',
      'fr': 'Le Château de Doma',
      'ja': '解放決戦 ドマ城',
      'ko': '도마 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1145: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '巨炮要塞帝国白山堡',
      'de': 'Castrum Abania',
      'en': 'Castrum Abania',
      'fr': 'Castrum Abania',
      'ja': '巨砲要塞 カストルム・アバニア',
      'ko': '카스트룸 아바니아'
    },
    'offsetX': 72,
    'offsetY': -186,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1146: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '鏖战红莲阿拉米格',
      'de': 'Ala Mhigo',
      'en': 'Ala Mhigo',
      'fr': 'Ala Mhigo',
      'ja': '紅蓮決戦 アラミゴ',
      'ko': '알라미고'
    },
    'offsetX': 292,
    'offsetY': -163,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1147: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱1',
      'de': 'Anabaseios - Neunter Kreis',
      'en': 'Anabaseios: The Ninth Circle',
      'fr': 'Le Paradis du Pandæmonium - Métempsycose',
      'ja': '万魔殿パンデモニウム：天獄編1',
      'ko': '마의 전당 판데모니움: 천옥편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1148: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱1',
      'de': 'Anabaseios - Neunter Kreis (episch)',
      'en': 'Anabaseios: The Ninth Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Métempsycose (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編1',
      'ko': '마의 전당 판데모니움: 천옥편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  1149: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱2',
      'de': 'Anabaseios - Zehnter Kreis',
      'en': 'Anabaseios: The Tenth Circle',
      'fr': 'Le Paradis du Pandæmonium - Monochrome',
      'ja': '万魔殿パンデモニウム：天獄編2',
      'ko': '마의 전당 판데모니움: 천옥편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1150: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱2',
      'de': 'Anabaseios - Zehnter Kreis (episch)',
      'en': 'Anabaseios: The Tenth Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Monochrome (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編2',
      'ko': '마의 전당 판데모니움: 천옥편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1151: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱3',
      'de': 'Anabaseios - Elfter Kreis',
      'en': 'Anabaseios: The Eleventh Circle',
      'fr': 'Le Paradis du Pandæmonium - Tribunal',
      'ja': '万魔殿パンデモニウム：天獄編3',
      'ko': '마의 전당 판데모니움: 천옥편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1152: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱3',
      'de': 'Anabaseios - Elfter Kreis (episch)',
      'en': 'Anabaseios: The Eleventh Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Tribunal (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編3',
      'ko': '마의 전당 판데모니움: 천옥편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1153: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '万魔殿 荒天之狱4',
      'de': 'Anabaseios - Zwölfter Kreis',
      'en': 'Anabaseios: The Twelfth Circle',
      'fr': 'Le Paradis du Pandæmonium - Apothéose',
      'ja': '万魔殿パンデモニウム：天獄編4',
      'ko': '마의 전당 판데모니움: 천옥편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1154: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'cn': '零式万魔殿 荒天之狱4',
      'de': 'Anabaseios - Zwölfter Kreis (episch)',
      'en': 'Anabaseios: The Twelfth Circle (Savage)',
      'fr': 'Le Paradis du Pandæmonium - Apothéose (sadique)',
      'ja': '万魔殿パンデモニウム零式：天獄編4',
      'ko': '마의 전당 판데모니움: 천옥편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 145
  },
  1155: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '异闻迷宫 异闻六根山',
      'de': 'Der kuriose Rokkon',
      'en': 'Another Mount Rokkon',
      'fr': 'Le mont Rokkon annexe - Donjon alternatif',
      'ja': 'アナザーダンジョン 異聞六根山'
    },
    'offsetX': 0,
    'offsetY': 40,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  1156: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'cn': '异闻迷宫 零式异闻六根山',
      'de': 'Der kuriose Rokkon (episch)',
      'en': 'Another Mount Rokkon (Savage)',
      'fr': 'Le mont Rokkon annexe - Donjon alternatif (sadique)',
      'ja': 'アナザーダンジョン 異聞六根山 零式'
    },
    'offsetX': 0,
    'offsetY': 40,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  1157: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '祖尔宛幻巧战',
      'de': 'Traumprüfung - Zurvan',
      'en': 'Containment Bay Z1T9 (Unreal)',
      'fr': 'Unité de contention Z1P9 (irréel)',
      'ja': '幻鬼神ズルワーン討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  1164: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'de': 'Monduntergrund',
      'en': 'The Lunar Subterrane',
      'fr': 'Le Souterrain lunaire',
      'ja': '深淵潜行 月の地下渓谷'
    },
    'offsetX': 440,
    'offsetY': 130,
    'sizeFactor': 200,
    'weatherRate': 149
  },
  1165: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'de': 'Stolperville',
      'en': 'Blunderville',
      'fr': 'Blunderville',
      'ja': 'ブランダーヴィル'
    },
    'offsetX': -200,
    'offsetY': -133,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1168: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Prophetie - Zeromus',
      'en': 'The Abyssal Fracture',
      'fr': 'La Fracture abyssale',
      'ja': 'ゼロムス討滅戦'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1169: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Eschatos - Zeromus',
      'en': 'The Abyssal Fracture (Extreme)',
      'fr': 'La Fracture abyssale (extrême)',
      'ja': '極ゼロムス討滅戦'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 149
  },
  1173: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '死亡大地终末焦土',
      'de': 'Das Kargland',
      'en': 'The Burn',
      'fr': 'L\'Escarre',
      'ja': '永久焦土 ザ・バーン',
      'ko': '영구 초토지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 97
  },
  1174: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '国境防线基姆利特暗区',
      'de': 'Die Ghimlyt-Finsternis',
      'en': 'The Ghimlyt Dark',
      'fr': 'Les Ténèbres de Ghimlyt',
      'ja': '境界戦線 ギムリトダーク',
      'ko': '김리트 황야'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1175: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'de': 'Traumprüfung - Singularitäts-Reaktor',
      'en': 'The Singularity Reactor (Unreal)',
      'fr': 'Le Réacteur de singularité (irréel)',
      'ja': '幻ナイツ・オブ・ラウンド討滅戦'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  1176: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'de': 'Aloalo',
      'en': 'Aloalo Island',
      'fr': 'L\'île d\'Aloalo - Donjon à embranchements',
      'ja': 'ヴァリアントダンジョン アロアロ島'
    },
    'offsetX': 0,
    'offsetY': -785,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1178: {
    'contentType': 5,
    'exVersion': 4,
    'name': {
      'de': 'Thaleia',
      'en': 'Thaleia',
      'fr': 'Domaine divin - Thalie',
      'ja': '華めく神域 タレイア'
    },
    'offsetX': 800,
    'offsetY': 783,
    'sizeFactor': 200,
    'weatherRate': 147
  },
  1179: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'de': 'Kurioses Aloalo',
      'en': 'Another Aloalo Island',
      'fr': 'L\'île d\'Aloalo annexe - Donjon alternatif',
      'ja': 'アナザーダンジョン 異聞アロアロ島'
    },
    'offsetX': 0,
    'offsetY': -60,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  1180: {
    'contentType': 30,
    'exVersion': 4,
    'name': {
      'de': 'Kurioses Aloalo (episch)',
      'en': 'Another Aloalo Island (Savage)',
      'fr': 'L\'île d\'Aloalo annexe - Donjon alternatif (sadique)',
      'ja': 'アナザーダンジョン 異聞アロアロ島 零式'
    },
    'offsetX': 0,
    'offsetY': -60,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  128: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨上层甲板',
      'de': 'Obere Decks',
      'en': 'Limsa Lominsa Upper Decks',
      'fr': 'Limsa Lominsa - Le Tillac',
      'ja': 'リムサ・ロミンサ：上甲板層',
      'ko': '림사 로민사 상층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  129: {
    'exVersion': 0,
    'name': {
      'cn': '利姆萨·罗敏萨下层甲板',
      'de': 'Untere Decks',
      'en': 'Limsa Lominsa Lower Decks',
      'fr': 'Limsa Lominsa - L\'Entrepont',
      'ja': 'リムサ・ロミンサ：下甲板層',
      'ko': '림사 로민사 하층 갑판'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 15
  },
  130: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈现世回廊',
      'de': 'Nald-Kreuzgang',
      'en': 'Ul\'dah - Steps of Nald',
      'fr': 'Ul\'dah - Faubourg de Nald',
      'ja': 'ウルダハ：ナル回廊',
      'ko': '울다하 날 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 7
  },
  131: {
    'exVersion': 0,
    'name': {
      'cn': '乌尔达哈来生回廊',
      'de': 'Thal-Kreuzgang',
      'en': 'Ul\'dah - Steps of Thal',
      'fr': 'Ul\'dah - Faubourg de Thal',
      'ja': 'ウルダハ：ザル回廊',
      'ko': '울다하 달 회랑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  132: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚新街',
      'de': 'Neu-Gridania',
      'en': 'New Gridania',
      'fr': 'Nouvelle Gridania',
      'ja': 'グリダニア：新市街',
      'ko': '그리다니아 신시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 1
  },
  133: {
    'exVersion': 0,
    'name': {
      'cn': '格里达尼亚旧街',
      'de': 'Alt-Gridania',
      'en': 'Old Gridania',
      'fr': 'Vieille Gridania',
      'ja': 'グリダニア：旧市街',
      'ko': '그리다니아 구시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 2
  },
  134: {
    'exVersion': 0,
    'name': {
      'cn': '中拉诺西亚',
      'de': 'Zentrales La Noscea',
      'en': 'Middle La Noscea',
      'fr': 'Noscea centrale',
      'ja': '中央ラノシア',
      'ko': '중부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  135: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚低地',
      'de': 'Unteres La Noscea',
      'en': 'Lower La Noscea',
      'fr': 'Basse-Noscea',
      'ja': '低地ラノシア',
      'ko': '저지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  136: {
    'exVersion': 0,
    'name': {
      'cn': '海雾村',
      'de': 'Dorf des Nebels',
      'en': 'Mist',
      'fr': 'Brumée',
      'ja': 'ミスト・ヴィレッジ',
      'ko': '안갯빛 마을'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 14
  },
  137: {
    'exVersion': 0,
    'name': {
      'cn': '东拉诺西亚',
      'de': 'Östliches La Noscea',
      'en': 'Eastern La Noscea',
      'fr': 'Noscea orientale',
      'ja': '東ラノシア',
      'ko': '동부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 18
  },
  138: {
    'exVersion': 0,
    'name': {
      'cn': '西拉诺西亚',
      'de': 'Westliches La Noscea',
      'en': 'Western La Noscea',
      'fr': 'Noscea occidentale',
      'ja': '西ラノシア',
      'ko': '서부 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 19
  },
  139: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚高地',
      'de': 'Oberes La Noscea',
      'en': 'Upper La Noscea',
      'fr': 'Haute-Noscea',
      'ja': '高地ラノシア',
      'ko': '고지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  140: {
    'exVersion': 0,
    'name': {
      'cn': '西萨纳兰',
      'de': 'Westliches Thanalan',
      'en': 'Western Thanalan',
      'fr': 'Thanalan occidental',
      'ja': '西ザナラーン',
      'ko': '서부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  141: {
    'exVersion': 0,
    'name': {
      'cn': '中萨纳兰',
      'de': 'Zentrales Thanalan',
      'en': 'Central Thanalan',
      'fr': 'Thanalan central',
      'ja': '中央ザナラーン',
      'ko': '중부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  142: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '艾玛吉娜杯斗技大会决赛',
      'de': 'Das Drachenhals-Kolosseum',
      'en': 'The Dragon\'s Neck',
      'fr': 'Le Col du dragon',
      'ja': 'アマジナ杯闘技会決勝戦',
      'ko': '아마지나배 투기대회 결승전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  143: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)皇都伊修加德保卫战',
      'de': '(6.1)Der Schicksalsweg',
      'en': '(6.1)The Steps of Faith',
      'fr': '(6.1)Le Siège de la sainte Cité d\'Ishgard',
      'ja': '(6.1)皇都イシュガルド防衛戦',
      'ko': '(6.1)성도 이슈가르드 방어전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  145: {
    'exVersion': 0,
    'name': {
      'cn': '东萨纳兰',
      'de': 'Östliches Thanalan',
      'en': 'Eastern Thanalan',
      'fr': 'Thanalan oriental',
      'ja': '東ザナラーン',
      'ko': '동부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 11
  },
  146: {
    'exVersion': 0,
    'name': {
      'cn': '南萨纳兰',
      'de': 'Südliches Thanalan',
      'en': 'Southern Thanalan',
      'fr': 'Thanalan méridional',
      'ja': '南ザナラーン',
      'ko': '남부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 12
  },
  147: {
    'exVersion': 0,
    'name': {
      'cn': '北萨纳兰',
      'de': 'Nördliches Thanalan',
      'en': 'Northern Thanalan',
      'fr': 'Thanalan septentrional',
      'ja': '北ザナラーン',
      'ko': '북부 다날란'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 13
  },
  148: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林中央林区',
      'de': 'Tiefer Wald',
      'en': 'Central Shroud',
      'fr': 'Forêt centrale',
      'ja': '黒衣森：中央森林',
      'ko': '검은장막 숲 중부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  150: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)幻龙残骸密约之塔',
      'de': '(6.1)Hüter des Sees',
      'en': '(6.1)The Keeper of the Lake',
      'fr': '(6.1)Le Gardien du lac',
      'ja': '(6.1)幻龍残骸 黙約の塔',
      'ko': '(6.1)묵약의 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 74
  },
  151: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 暗之世界',
      'de': 'Die Welt der Dunkelheit',
      'en': 'The World of Darkness',
      'fr': 'La Tour de Cristal - Monde des Ténèbres',
      'ja': 'クリスタルタワー：闇の世界',
      'ko': '크리스탈 타워: 어둠의 세계'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  152: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林东部林区',
      'de': 'Ostwald',
      'en': 'East Shroud',
      'fr': 'Forêt de l\'est',
      'ja': '黒衣森：東部森林',
      'ko': '검은장막 숲 동부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  153: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林南部林区',
      'de': 'Südwald',
      'en': 'South Shroud',
      'fr': 'Forêt du sud',
      'ja': '黒衣森：南部森林',
      'ko': '검은장막 숲 남부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  154: {
    'exVersion': 0,
    'name': {
      'cn': '黑衣森林北部林区',
      'de': 'Nordwald',
      'en': 'North Shroud',
      'fr': 'Forêt du nord',
      'ja': '黒衣森：北部森林',
      'ko': '검은장막 숲 북부삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 6
  },
  155: {
    'exVersion': 0,
    'name': {
      'cn': '库尔札斯中央高地',
      'de': 'Zentrales Hochland von Coerthas',
      'en': 'Coerthas Central Highlands',
      'fr': 'Hautes terres du Coerthas central',
      'ja': 'クルザス中央高地',
      'ko': '커르다스 중앙고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  156: {
    'exVersion': 0,
    'name': {
      'cn': '摩杜纳',
      'de': 'Mor Dhona',
      'en': 'Mor Dhona',
      'fr': 'Mor Dhona',
      'ja': 'モードゥナ',
      'ko': '모르도나'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  159: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '神灵圣域放浪神古神殿',
      'de': 'Palast des Wanderers',
      'en': 'The Wanderer\'s Palace',
      'fr': 'Le Palais du Vagabond',
      'ja': '旅神聖域 ワンダラーパレス',
      'ko': '방랑자의 궁전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  160: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '领航明灯天狼星灯塔',
      'de': 'Pharos Sirius',
      'en': 'Pharos Sirius',
      'fr': 'Le Phare de Sirius',
      'ja': '怪鳥巨塔 シリウス大灯台',
      'ko': '시리우스 대등대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  162: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '魔兽领域日影地修炼所',
      'de': 'Halatali',
      'en': 'Halatali',
      'fr': 'Halatali',
      'ja': '魔獣領域 ハラタリ修練所',
      'ko': '할라탈리 수련장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  163: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '古代遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn',
      'en': 'The Sunken Temple of Qarn',
      'fr': 'Le Temple enseveli de Qarn',
      'ja': '遺跡探索 カルン埋没寺院',
      'ko': '카른의 무너진 사원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  167: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪教驻地无限城古堡',
      'de': 'Die Ruinen von Amdapor',
      'en': 'Amdapor Keep',
      'fr': 'Le Château d\'Amdapor',
      'ja': '邪教排撃 古城アムダプール',
      'ko': '옛 암다포르 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  170: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '流沙迷宫樵鸣洞',
      'de': 'Sägerschrei',
      'en': 'Cutter\'s Cry',
      'fr': 'Le Gouffre hurlant',
      'ja': '流砂迷宮 カッターズクライ',
      'ko': '나무꾼의 비명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  171: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '山中战线泽梅尔要塞',
      'de': 'Die Feste Dzemael',
      'en': 'Dzemael Darkhold',
      'fr': 'La Forteresse de Dzemael',
      'ja': '掃討作戦 ゼーメル要塞',
      'ko': '제멜 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  172: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '毒雾洞窟黄金谷',
      'de': 'Goldklamm',
      'en': 'The Aurum Vale',
      'fr': 'Le Val d\'Aurum',
      'ja': '霧中行軍 オーラムヴェイル',
      'ko': '금빛 골짜기'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  174: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 古代人迷宫',
      'de': 'Kristallturm - Das Labyrinth der Alten',
      'en': 'The Labyrinth of the Ancients',
      'fr': 'La Tour de Cristal - Dédale antique',
      'ja': 'クリスタルタワー：古代の民の迷宮',
      'ko': '크리스탈 타워: 고대인의 미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  180: {
    'exVersion': 0,
    'name': {
      'cn': '拉诺西亚外地',
      'de': 'Äußeres La Noscea',
      'en': 'Outer La Noscea',
      'fr': 'Noscea extérieure',
      'ja': '外地ラノシア',
      'ko': '외지 라노시아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 24
  },
  188: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '武装圣域放浪神古神殿',
      'de': 'Palast des Wanderers (schwer)',
      'en': 'The Wanderer\'s Palace (Hard)',
      'fr': 'Le Palais du Vagabond (brutal)',
      'ja': '武装聖域 ワンダラーパレス (Hard)',
      'ko': '방랑자의 궁전(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  189: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '邪念妖地无限城古堡',
      'de': 'Die Ruinen von Amdapor (schwer)',
      'en': 'Amdapor Keep (Hard)',
      'fr': 'Le Château d\'Amdapor (brutal)',
      'ja': '邪念排撃 古城アムダプール (Hard)',
      'ko': '옛 암다포르 성(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  190: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐彷徨死灵！',
      'de': 'Bockmanns Gefolge',
      'en': 'Under the Armor',
      'fr': 'Chasse au fantôme fantoche',
      'ja': '彷徨う死霊を討て！',
      'ko': '방황하는 사령을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  191: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '驱除剧毒妖花！',
      'de': 'Unkraut jäten',
      'en': 'Pulling Poison Posies',
      'fr': 'Opération fleurs du mal',
      'ja': '有毒妖花を駆除せよ！',
      'ko': '독성 요괴꽃을 제거하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 4
  },
  192: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '消灭恶徒团伙寄生蜂团！',
      'de': 'Ins Wespennest stechen',
      'en': 'Stinging Back',
      'fr': 'Expédition punitive contre les Ventrerouge',
      'ja': '無法者「似我蜂団」を撃滅せよ！',
      'ko': '무법자 집단 \'나나니단\'을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  193: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章1',
      'de': 'Verschlungene Schatten 3 - 1',
      'en': 'The Final Coil of Bahamut - Turn 1',
      'fr': 'L\'Abîme de Bahamut I',
      'ja': '大迷宮バハムート：真成編1',
      'ko': '대미궁 바하무트: 진성편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  194: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章2',
      'de': 'Verschlungene Schatten 3 - 2',
      'en': 'The Final Coil of Bahamut - Turn 2',
      'fr': 'L\'Abîme de Bahamut II',
      'ja': '大迷宮バハムート：真成編2',
      'ko': '대미궁 바하무트: 진성편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  195: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章3',
      'de': 'Verschlungene Schatten 3 - 3',
      'en': 'The Final Coil of Bahamut - Turn 3',
      'fr': 'L\'Abîme de Bahamut III',
      'ja': '大迷宮バハムート：真成編3',
      'ko': '대미궁 바하무트: 진성편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  196: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 真源之章4',
      'de': 'Verschlungene Schatten 3 - 4',
      'en': 'The Final Coil of Bahamut - Turn 4',
      'fr': 'L\'Abîme de Bahamut IV',
      'ja': '大迷宮バハムート：真成編4',
      'ko': '대미궁 바하무트: 진성편 4'
    },
    'offsetX': -448,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 44
  },
  207: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)莫古力贤王歼灭战',
      'de': '(6.1)Königliche Konfrontation (schwer)',
      'en': '(6.1)Thornmarch (Hard)',
      'fr': '(6.1)La Lisière de ronces (brutal)',
      'ja': '(6.1)善王モグル・モグXII世討滅戦',
      'ko': '(6.1)선왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  214: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '完成集团战训练！',
      'de': 'Einer für alle, alle für einen',
      'en': 'Basic Training: Enemy Parties',
      'fr': 'Entraînement<Indent/>: groupes d\'ennemis',
      'ja': '集団戦訓練をくぐり抜けろ！',
      'ko': '집단전 훈련을 완수하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 16
  },
  215: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '突破所有关门，讨伐最深处的敌人！',
      'de': 'Sturmkommando',
      'en': 'Basic Training: Enemy Strongholds',
      'fr': 'Entraînement<Indent/>: in<SoftHyphen/>fil<SoftHyphen/>tra<SoftHyphen/>tion en base ennemie',
      'ja': '全関門を突破し、最深部の敵を討て！',
      'ko': '관문을 돌파하고 최심부의 적을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 9
  },
  216: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '捕获金币龟！',
      'de': 'Gil oder Leben',
      'en': 'Hero on the Half Shell',
      'fr': 'Reconquête d\'une carapace escamotée',
      'ja': 'ギルガメを捕獲せよ！',
      'ko': '길거북을 사로잡아라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 10
  },
  219: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '击溃哥布林炸弹军团！',
      'de': 'Bombige Goblins',
      'en': 'Flicking Sticks and Taking Names',
      'fr': 'Les Gobelins bombardiers',
      'ja': '爆弾魔ゴブリン軍団を撃滅せよ！',
      'ko': '폭탄광 고블린 군단을 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 3
  },
  220: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐梦幻之布拉奇希奥！',
      'de': 'Briaxio ausschalten',
      'en': 'All\'s Well that Ends in the Well',
      'fr': 'Briaxio à bras raccourcis',
      'ja': '夢幻のブラキシオを討て！',
      'ko': '몽환의 브라크시오를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 5
  },
  221: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐污染源头魔界花！',
      'de': 'Tödliches Rankenspiel',
      'en': 'More than a Feeler',
      'fr': 'Sus au morbol pollueur',
      'ja': '汚染源モルボルを討て！',
      'ko': '오염원 몰볼을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 20
  },
  222: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐坑道中出现的妖异！',
      'de': 'Gefahr aus dem Nichts',
      'en': 'Annoy the Void',
      'fr': 'Buso l\'immolateur',
      'ja': '坑道に現れた妖異ブソを討て！',
      'ko': '갱도에 나타난 요마 부소를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 17
  },
  223: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '注意无敌的眷属，讨伐大型妖异！',
      'de': 'Kampf gegen Schatten',
      'en': 'Shadow and Claw',
      'fr': 'Ombres et griffes',
      'ja': '無敵の眷属を従えし、大型妖異を討て！',
      'ko': '무적의 부하를 조종하는 요마를 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  241: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章1',
      'de': 'Verschlungene Schatten 1',
      'en': 'The Binding Coil of Bahamut - Turn 1',
      'fr': 'Le Labyrinthe de Bahamut I',
      'ja': '大迷宮バハムート：邂逅編1',
      'ko': '대미궁 바하무트: 해후편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  242: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章2',
      'de': 'Verschlungene Schatten 2',
      'en': 'The Binding Coil of Bahamut - Turn 2',
      'fr': 'Le Labyrinthe de Bahamut II',
      'ja': '大迷宮バハムート：邂逅編2',
      'ko': '대미궁 바하무트: 해후편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  243: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章3',
      'de': 'Verschlungene Schatten 3',
      'en': 'The Binding Coil of Bahamut - Turn 3',
      'fr': 'Le Labyrinthe de Bahamut III',
      'ja': '大迷宮バハムート：邂逅編3',
      'ko': '대미궁 바하무트: 해후편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  244: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章4',
      'de': 'Verschlungene Schatten 4',
      'en': 'The Binding Coil of Bahamut - Turn 4',
      'fr': 'Le Labyrinthe de Bahamut IV',
      'ja': '大迷宮バハムート：邂逅編4',
      'ko': '대미궁 바하무트: 해후편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  245: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 邂逅之章5',
      'de': 'Verschlungene Schatten 5',
      'en': 'The Binding Coil of Bahamut - Turn 5',
      'fr': 'Le Labyrinthe de Bahamut V',
      'ja': '大迷宮バハムート：邂逅編5',
      'ko': '대미궁 바하무트: 해후편 5'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  250: {
    'exVersion': 0,
    'name': {
      'cn': '狼狱停船场',
      'de': 'Wolfshöhlen-Pier',
      'en': 'Wolves\' Den Pier',
      'fr': 'Jetée de l\'Antre des loups',
      'ja': 'ウルヴズジェイル係船場',
      'ko': '늑대우리 부두'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 29
  },
  281: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼灭战',
      'de': 'Götterdämmerung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Hard)',
      'fr': 'Le Briseur de marées (brutal)',
      'ja': '真リヴァイアサン討滅戦',
      'ko': '진 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  292: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼灭战',
      'de': 'Götterdämmerung - Ifrit',
      'en': 'The Bowl of Embers (Hard)',
      'fr': 'Le Cratère des tisons (brutal)',
      'ja': '真イフリート討滅戦',
      'ko': '진 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  293: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼灭战',
      'de': 'Götterdämmerung - Titan',
      'en': 'The Navel (Hard)',
      'fr': 'Le Nombril (brutal)',
      'ja': '真タイタン討滅戦',
      'ko': '진 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  294: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼灭战',
      'de': 'Götterdämmerung - Garuda',
      'en': 'The Howling Eye (Hard)',
      'fr': 'Hurlœil (brutal)',
      'ja': '真ガルーダ討滅戦',
      'ko': '진 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  295: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '伊弗利特歼殛战',
      'de': 'Zenit der Götter - Ifrit',
      'en': 'The Bowl of Embers (Extreme)',
      'fr': 'Le Cratère des tisons (extrême)',
      'ja': '極イフリート討滅戦',
      'ko': '극 이프리트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 25
  },
  296: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '泰坦歼殛战',
      'de': 'Zenit der Götter - Titan',
      'en': 'The Navel (Extreme)',
      'fr': 'Le Nombril (extrême)',
      'ja': '極タイタン討滅戦',
      'ko': '극 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  297: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '迦楼罗歼殛战',
      'de': 'Zenit der Götter - Garuda',
      'en': 'The Howling Eye (Extreme)',
      'fr': 'Hurlœil (extrême)',
      'ja': '極ガルーダ討滅戦',
      'ko': '극 가루다 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  298: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '讨伐爆弹怪的女王！',
      'de': 'Miss Bombastic',
      'en': 'Long Live the Queen',
      'fr': 'Longue vie à la Reine',
      'ja': 'ボムを率いる「ボムクイーン」を討て！',
      'ko': '봄을 거느린 \'봄 여왕\'을 쓰러뜨려라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  299: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '歼灭特殊阵型的妖异！',
      'de': 'Unzertrennlich',
      'en': 'Ward Up',
      'fr': 'Quintettes infernaux',
      'ja': '不気味な陣形を組む妖異をせん滅せよ！',
      'ko': '불길한 진형을 짜는 요마를 섬멸하라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  300: {
    'contentType': 3,
    'exVersion': 0,
    'name': {
      'cn': '制止三方混战的巨人族，守住遗物！',
      'de': 'Wuchtige Dreifaltigkeit',
      'en': 'Solemn Trinity',
      'fr': 'Trinité sinistre',
      'ja': '三つ巴の巨人族を制し、遺物を守れ！',
      'ko': '세 거인족을 제압하여 유물을 지켜내라!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 22
  },
  348: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '究极神兵假想作战',
      'de': 'Heldenlied von Ultima',
      'en': 'The Minstrel\'s Ballad: Ultima\'s Bane',
      'fr': 'Le fléau d\'Ultima',
      'ja': '究極幻想 アルテマウェポン破壊作戦',
      'ko': '궁극의 환상 알테마 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 31
  },
  349: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '骚乱坑道铜铃铜山',
      'de': 'Kupferglocken-Mine (schwer)',
      'en': 'Copperbell Mines (Hard)',
      'fr': 'Les Mines de Clochecuivre (brutal)',
      'ja': '騒乱坑道 カッパーベル銅山 (Hard)',
      'ko': '구리종 광산(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  350: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '恶灵府邸静语庄园',
      'de': 'Haukke-Herrenhaus (schwer)',
      'en': 'Haukke Manor (Hard)',
      'fr': 'Le Manoir des Haukke (brutal)',
      'ja': '妖異屋敷 ハウケタ御用邸 (Hard)',
      'ko': '하우케타 별궁(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  353: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '活动挑战2',
      'de': 'Event-Inhalt 1',
      'en': 'Special Event I',
      'fr': 'Défi spécial I',
      'ja': 'イベント用コンテンツ：1',
      'ko': '이벤트용 임무: 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  354: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '活动挑战3',
      'de': 'Event-Inhalt 2',
      'en': 'Special Event II',
      'fr': 'Défi spécial II',
      'ja': 'イベント用コンテンツ：2',
      'ko': '이벤트용 임무: 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  355: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1',
      'en': 'The Second Coil of Bahamut - Turn 1',
      'fr': 'Les Méandres de Bahamut I',
      'ja': '大迷宮バハムート：侵攻編1',
      'ko': '대미궁 바하무트: 침공편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  356: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2',
      'en': 'The Second Coil of Bahamut - Turn 2',
      'fr': 'Les Méandres de Bahamut II',
      'ja': '大迷宮バハムート：侵攻編2',
      'ko': '대미궁 바하무트: 침공편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  357: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3',
      'en': 'The Second Coil of Bahamut - Turn 3',
      'fr': 'Les Méandres de Bahamut III',
      'ja': '大迷宮バハムート：侵攻編3',
      'ko': '대미궁 바하무트: 침공편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  358: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4',
      'en': 'The Second Coil of Bahamut - Turn 4',
      'fr': 'Les Méandres de Bahamut IV',
      'ja': '大迷宮バハムート：侵攻編4',
      'ko': '대미궁 바하무트: 침공편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  359: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '利维亚桑歼殛战',
      'de': 'Zenit der Götter - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Extreme)',
      'fr': 'Le Briseur de marées (extrême)',
      'ja': '極リヴァイアサン討滅戦',
      'ko': '극 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  360: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '剑斗领域日影地修炼所',
      'de': 'Halatali (schwer)',
      'en': 'Halatali (Hard)',
      'fr': 'Halatali (brutal)',
      'ja': '剣闘領域 ハラタリ修練所 (Hard)',
      'ko': '할라탈리 수련장(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  361: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '财宝传说破舰岛',
      'de': 'Schiffbrecher-Insel',
      'en': 'Hullbreaker Isle',
      'fr': 'L\'Île de Crèvecarène',
      'ja': '財宝伝説 ハルブレーカー・アイル',
      'ko': '난파선의 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  362: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '纷争要地布雷福洛克斯野营地',
      'de': 'Brüllvolx\' Langrast (schwer)',
      'en': 'Brayflox\'s Longstop (Hard)',
      'fr': 'Le Bivouac de Brayflox (brutal)',
      'ja': '盟友支援 ブレイフロクスの野営地 (Hard)',
      'ko': '브레이플록스의 야영지(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  363: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '腐坏遗迹无限城市街古迹',
      'de': 'Historisches Amdapor',
      'en': 'The Lost City of Amdapor',
      'fr': 'Les Vestiges de la cité d\'Amdapor',
      'ja': '腐敗遺跡 古アムダプール市街',
      'ko': '옛 암다포르 시가지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  364: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '莫古力贤王歼殛战',
      'de': 'Königliche Konfrontation (extrem)',
      'en': 'Thornmarch (Extreme)',
      'fr': 'La Lisière de ronces (extrême)',
      'ja': '極王モグル・モグXII世討滅戦',
      'ko': '극왕 모그루 모그 XII세 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 30
  },
  365: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '激战城塞石卫塔',
      'de': 'Steinerne Wacht (schwer)',
      'en': 'The Stone Vigil (Hard)',
      'fr': 'Le Vigile de Pierre (brutal)',
      'ja': '城塞奪回 ストーンヴィジル (Hard)',
      'ko': '돌방패 경계초소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  366: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '大桥上的决斗',
      'de': 'Duell auf der großen Brücke',
      'en': 'Battle on the Big Bridge',
      'fr': 'Affrontement sur le grand pont',
      'ja': 'ギルガメッシュ討伐戦',
      'ko': '길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  367: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '苏醒遗迹喀恩埋没圣堂',
      'de': 'Versunkener Tempel von Qarn (schwer)',
      'en': 'The Sunken Temple of Qarn (Hard)',
      'fr': 'Le Temple enseveli de Qarn (brutal)',
      'ja': '遺跡救援 カルン埋没寺院 (Hard)',
      'ko': '카른의 무너진 사원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 41
  },
  368: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '死化奇美拉讨伐战',
      'de': 'Kampf gegen die Dhorme-Chimära',
      'en': 'A Relic Reborn: the Chimera',
      'fr': 'La chimère dhorme du Coerthas',
      'ja': 'ドルムキマイラ討伐戦',
      'ko': '도름 키마이라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 21
  },
  369: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '海德拉讨伐战',
      'de': 'Kampf gegen die Hydra',
      'en': 'A Relic Reborn: the Hydra',
      'fr': 'L\'hydre d\'Halatali',
      'ja': 'ハイドラ討伐戦',
      'ko': '하이드라 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  371: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '(6.1)凛冽洞天披雪大冰壁',
      'de': '(6.1)Das Schneekleid',
      'en': '(6.1)Snowcloak',
      'fr': '(6.1)Manteneige',
      'ja': '(6.1)氷結潜窟 スノークローク大氷壁',
      'ko': '(6.1)얼음외투 대빙벽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  372: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '水晶塔 希尔科斯塔',
      'de': 'Kristallturm - Der Syrcus-Turm',
      'en': 'Syrcus Tower',
      'fr': 'La Tour de Cristal - Tour de Syrcus',
      'ja': 'クリスタルタワー：シルクスの塔',
      'ko': '크리스탈 타워: 시르쿠스 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  373: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '惨剧灵殿塔姆·塔拉墓园',
      'de': 'Totenacker Tam-Tara (schwer)',
      'en': 'The Tam–Tara Deepcroft (Hard)',
      'fr': 'L\'Hypogée de Tam-Tara (brutal)',
      'ja': '惨劇霊殿 タムタラの墓所 (Hard)',
      'ko': '탐타라 묘소(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 300,
    'weatherRate': 0
  },
  374: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼灭战',
      'de': 'Götterdämmerung - Ramuh',
      'en': 'The Striking Tree (Hard)',
      'fr': 'L\'Arbre du jugement (brutal)',
      'ja': '真ラムウ討滅戦',
      'ko': '진 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  375: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '拉姆歼殛战',
      'de': 'Zenit der Götter - Ramuh',
      'en': 'The Striking Tree (Extreme)',
      'fr': 'L\'Arbre du jugement (extrême)',
      'ja': '極ラムウ討滅戦',
      'ko': '극 라무 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 43
  },
  376: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '周边遗迹群（阵地战）',
      'de': 'Äußere Ruinen (Sicherung)',
      'en': 'The Borderland Ruins (Secure)',
      'fr': 'Les Ruines frontalières (annexion)',
      'ja': '外縁遺跡群 (制圧戦)',
      'ko': '외곽 유적지대(제압전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  377: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼灭战',
      'de': 'Götterdämmerung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Hard)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (brutal)',
      'ja': '真シヴァ討滅戦',
      'ko': '진 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  378: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '希瓦歼殛战',
      'de': 'Zenit der Götter - Shiva',
      'en': 'The Akh Afah Amphitheatre (Extreme)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (extrême)',
      'ja': '極シヴァ討滅戦',
      'ko': '극 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  380: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章1',
      'de': 'Verschlungene Schatten 2 - 1 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 1',
      'fr': 'Les Méandres de Bahamut I (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編1',
      'ko': '대미궁 바하무트: 침공편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  381: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章2',
      'de': 'Verschlungene Schatten 2 - 2 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 2',
      'fr': 'Les Méandres de Bahamut II (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編2',
      'ko': '대미궁 바하무트: 침공편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  382: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章3',
      'de': 'Verschlungene Schatten 2 - 3 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 3',
      'fr': 'Les Méandres de Bahamut III (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編3',
      'ko': '대미궁 바하무트: 침공편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  383: {
    'contentType': 5,
    'exVersion': 0,
    'name': {
      'cn': '巴哈姆特零式大迷宫 入侵之章4',
      'de': 'Verschlungene Schatten 2 - 4 (episch)',
      'en': 'The Second Coil of Bahamut (Savage) - Turn 4',
      'fr': 'Les Méandres de Bahamut IV (sadique)',
      'ja': '大迷宮バハムート零式：侵攻編4',
      'ko': '대미궁 바하무트: 침공편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  387: {
    'contentType': 2,
    'exVersion': 0,
    'name': {
      'cn': '逆转要害沙斯塔夏溶洞',
      'de': 'Sastasha (schwer)',
      'en': 'Sastasha (Hard)',
      'fr': 'Sastasha (brutal)',
      'ja': '逆襲要害 サスタシャ浸食洞 (Hard)',
      'ko': '사스타샤 침식 동굴(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  389: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：太阳海岸',
      'de': 'Chocobo-Rennen: Sonnenküste',
      'en': 'Chocobo Race: Costa del Sol',
      'fr': 'Course de chocobos<Indent/>: Costa del Sol',
      'ja': 'チョコボレース：コスタ・デル・ソル',
      'ko': '초코보 경주: 코스타 델 솔'
    },
    'offsetX': -472,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  390: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：荒野大道',
      'de': 'Chocobo-Rennen: Sagolii-Straße',
      'en': 'Chocobo Race: Sagolii Road',
      'fr': 'Course de chocobos<Indent/>: Route de Sagolii',
      'ja': 'チョコボレース：サゴリーロード',
      'ko': '초코보 경주: 사골리 사막'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  391: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：恬静小路',
      'de': 'Chocobo-Rennen: Pfad der Seelenruhe',
      'en': 'Chocobo Race: Tranquil Paths',
      'fr': 'Course de chocobos<Indent/>: Sentes tranquilles',
      'ja': 'チョコボレース：トランキルパス',
      'ko': '초코보 경주: 고요한 야영지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  394: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '奥丁歼灭战',
      'de': 'Jenseits Urths Quelle',
      'en': 'Urth\'s Fount',
      'fr': 'La Fontaine d\'Urth',
      'ja': '闘神オーディン討滅戦',
      'ko': '투신 오딘 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 45
  },
  396: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '无限城的死斗',
      'de': 'Revanche in den Ruinen',
      'en': 'Battle in the Big Keep',
      'fr': 'Revanche au vieux château',
      'ja': '真ギルガメッシュ討滅戦',
      'ko': '진 길가메시 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  397: {
    'exVersion': 1,
    'name': {
      'cn': '库尔札斯西部高地',
      'de': 'Westliches Hochland von Coerthas',
      'en': 'Coerthas Western Highlands',
      'fr': 'Hautes terres du Coerthas occidental',
      'ja': 'クルザス西部高地',
      'ko': '커르다스 서부고지'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  398: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡参天高地',
      'de': 'Dravanisches Vorland',
      'en': 'The Dravanian Forelands',
      'fr': 'Avant-pays dravanien',
      'ja': '高地ドラヴァニア',
      'ko': '고지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 50
  },
  399: {
    'exVersion': 1,
    'name': {
      'cn': '龙堡内陆低地',
      'de': 'Dravanisches Hinterland',
      'en': 'The Dravanian Hinterlands',
      'fr': 'Arrière-pays dravanien',
      'ja': '低地ドラヴァニア',
      'ko': '저지 드라바니아'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 51
  },
  400: {
    'exVersion': 1,
    'name': {
      'cn': '翻云雾海',
      'de': 'Wallende Nebel',
      'en': 'The Churning Mists',
      'fr': 'L\'Écume des cieux de Dravania',
      'ja': 'ドラヴァニア雲海',
      'ko': '드라바니아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 52
  },
  401: {
    'exVersion': 1,
    'name': {
      'cn': '阿巴拉提亚云海',
      'de': 'Abalathisches Wolkenmeer',
      'en': 'The Sea of Clouds',
      'fr': 'L\'Écume des cieux d\'Abalathia',
      'ja': 'アバラシア雲海',
      'ko': '아발라시아 구름바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 53
  },
  402: {
    'exVersion': 1,
    'name': {
      'cn': '魔大陆阿济兹拉',
      'de': 'Azys Lla',
      'en': 'Azys Lla',
      'fr': 'Azys Lla',
      'ja': 'アジス・ラー',
      'ko': '아지스 라'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 54
  },
  403: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄归来',
      'de': 'Verrat der Qalyana',
      'en': 'Return of the Bull',
      'fr': 'Retour au bercail',
      'ja': '英雄の帰還',
      'ko': '영웅의 귀환'
    },
    'offsetX': -250,
    'offsetY': 128,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  416: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '学识宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek',
      'en': 'The Great Gubal Library',
      'fr': 'La Grande bibliothèque de Gubal',
      'ja': '禁書回収 グブラ幻想図書館',
      'ko': '구브라 환상도서관'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  417: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '陆行鸟竞赛：竞赛教学',
      'de': 'Chocobo-Rennen: Übungsbahn',
      'en': 'Chocobo Race: Tutorial',
      'fr': 'Course d\'appentissage',
      'ja': 'チョコボレース：チュートリアル',
      'ko': '초코보 경주: 튜토리얼'
    },
    'offsetX': 0,
    'offsetY': -690,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  418: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德基础层',
      'de': 'Fundamente',
      'en': 'Foundation',
      'fr': 'Ishgard - L\'Assise',
      'ja': 'イシュガルド：下層',
      'ko': '이슈가르드 하층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 47
  },
  419: {
    'exVersion': 1,
    'name': {
      'cn': '伊修加德砥柱层',
      'de': 'Strebewerk',
      'en': 'The Pillars',
      'fr': 'Ishgard - Les Contreforts',
      'ja': 'イシュガルド：上層',
      'ko': '이슈가르드 상층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 48
  },
  420: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '空中神域不获岛',
      'de': 'Nimmerreich',
      'en': 'Neverreap',
      'fr': 'Nalloncques',
      'ja': '神域浮島 ネバーリープ',
      'ko': '거두지 않는 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  421: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '(6.1)圣教中枢伊修加德教皇厅',
      'de': '(6.1)Erzbasilika',
      'en': '(6.1)The Vault',
      'fr': '(6.1)La Voûte',
      'ja': '(6.1)強硬突入 イシュガルド教皇庁',
      'ko': '(6.1)이슈가르드 교황청'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  426: {
    'contentType': 4,
    'exVersion': 0,
    'name': {
      'cn': '那布里亚勒斯讨伐战',
      'de': 'Chrysalis',
      'en': 'The Chrysalis',
      'fr': 'La Chrysalide',
      'ja': 'アシエン・ナプリアレス討伐戦',
      'ko': '아씨엔 나브리알레스 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  430: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '博物战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum',
      'en': 'The Fractal Continuum',
      'fr': 'Le Continuum fractal',
      'ja': '博物戦艦 フラクタル・コンティニアム',
      'ko': '무한연속 박물함'
    },
    'offsetX': 0,
    'offsetY': -213,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  431: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '尘封秘岩（争夺战）',
      'de': 'Robbenholm (Eroberung)',
      'en': 'Seal Rock (Seize)',
      'fr': 'Le Rocher des tréfonds (invasion)',
      'ja': 'シールロック (争奪戦)',
      'ko': '봉인된 바위섬(쟁탈전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 59
  },
  432: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼灭战',
      'de': 'Götterdämmerung - Ravana',
      'en': 'Thok ast Thok (Hard)',
      'fr': 'Thok ast Thok (brutal)',
      'ja': '真ラーヴァナ討滅戦',
      'ko': '진 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  434: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '冰雪废堡暮卫塔',
      'de': 'Abendrot-Wacht',
      'en': 'The Dusk Vigil',
      'fr': 'Le Vigile du Crépuscule',
      'ja': '廃砦捜索 ダスクヴィジル',
      'ko': '어스름 요새'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 42
  },
  435: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '(6.1)邪龙王座龙巢神殿',
      'de': '(6.1)Nest des Drachen',
      'en': '(6.1)The Aery',
      'fr': '(6.1)L\'Aire',
      'ja': '(6.1)邪竜血戦 ドラゴンズエアリー',
      'ko': '(6.1)용의 둥지'
    },
    'offsetX': -40,
    'offsetY': 55,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  436: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼灭战',
      'de': 'Götterdämmerung - Bismarck',
      'en': 'The Limitless Blue (Hard)',
      'fr': 'L\'Immensité bleue (brutal)',
      'ja': '真ビスマルク討滅戦',
      'ko': '진 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  437: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士歼灭战',
      'de': 'Singularitäts-Reaktor',
      'en': 'The Singularity Reactor',
      'fr': 'Le Réacteur de singularité',
      'ja': 'ナイツ・オブ・ラウンド討滅戦',
      'ko': '나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  438: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '血战苍穹魔科学研究所',
      'de': 'Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
      'en': 'The Aetherochemical Research Facility',
      'fr': 'Le Laboratoire de magismologie',
      'ja': '蒼天聖戦 魔科学研究所',
      'ko': '마과학 연구소'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  441: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '(6.1)天山绝顶索姆阿尔灵峰',
      'de': '(6.1)Sohm Al',
      'en': '(6.1)Sohm Al',
      'fr': '(6.1)Sohm Al',
      'ja': '(6.1)霊峰踏破 ソーム・アル',
      'ko': '(6.1)솜 알'
    },
    'offsetX': 185,
    'offsetY': 51,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  442: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters',
      'en': 'Alexander - The Fist of the Father',
      'fr': 'Alexander - Le Poing du Père',
      'ja': '機工城アレキサンダー：起動編1',
      'ko': '기공성 알렉산더: 기동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  443: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters',
      'en': 'Alexander - The Cuff of the Father',
      'fr': 'Alexander - Le Poignet du Père',
      'ja': '機工城アレキサンダー：起動編2',
      'ko': '기공성 알렉산더: 기동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  444: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters',
      'en': 'Alexander - The Arm of the Father',
      'fr': 'Alexander - Le Bras du Père',
      'ja': '機工城アレキサンダー：起動編3',
      'ko': '기공성 알렉산더: 기동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  445: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 启动之章4',
      'de': 'Alexander - Last des Vaters',
      'en': 'Alexander - The Burden of the Father',
      'fr': 'Alexander - Le Fardeau du Père',
      'ja': '機工城アレキサンダー：起動編4',
      'ko': '기공성 알렉산더: 기동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  446: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '罗波那歼殛战',
      'de': 'Zenit der Götter - Ravana',
      'en': 'Thok ast Thok (Extreme)',
      'fr': 'Thok ast Thok (extrême)',
      'ja': '極ラーヴァナ討滅戦',
      'ko': '극 라바나 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 57
  },
  447: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '俾斯麦歼殛战',
      'de': 'Zenit der Götter - Bismarck',
      'en': 'The Limitless Blue (Extreme)',
      'fr': 'L\'Immensité bleue (extrême)',
      'ja': '極ビスマルク討滅戦',
      'ko': '극 비스마르크 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  448: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '圆桌骑士幻想歼灭战',
      'de': 'Heldenlied von Thordans Fall',
      'en': 'The Minstrel\'s Ballad: Thordan\'s Reign',
      'fr': 'Le règne de Thordan',
      'ja': '蒼天幻想 ナイツ・オブ・ラウンド討滅戦',
      'ko': '극 나이츠 오브 라운드 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 56
  },
  449: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章1',
      'de': 'Alexander - Faust des Vaters (episch)',
      'en': 'Alexander - The Fist of the Father (Savage)',
      'fr': 'Alexander - Le Poing du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編1',
      'ko': '기공성 알렉산더: 기동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  450: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章2',
      'de': 'Alexander - Elle des Vaters (episch)',
      'en': 'Alexander - The Cuff of the Father (Savage)',
      'fr': 'Alexander - Le Poignet du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編2',
      'ko': '기공성 알렉산더: 기동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  451: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章3',
      'de': 'Alexander - Arm des Vaters (episch)',
      'en': 'Alexander - The Arm of the Father (Savage)',
      'fr': 'Alexander - Le Bras du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編3',
      'ko': '기공성 알렉산더: 기동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  452: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 启动之章4',
      'de': 'Alexander - Last des Vaters (episch)',
      'en': 'Alexander - The Burden of the Father (Savage)',
      'fr': 'Alexander - Le Fardeau du Père (sadique)',
      'ja': '機工城アレキサンダー零式：起動編4',
      'ko': '기공성 알렉산더: 기동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  478: {
    'exVersion': 1,
    'name': {
      'cn': '田园郡',
      'de': 'Frohehalde',
      'en': 'Idyllshire',
      'fr': 'Idyllée',
      'ja': 'イディルシャイア',
      'ko': '이딜샤이어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 55
  },
  506: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（人机对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Arenameister)',
      'en': 'LoVM: Master Tournament',
      'fr': 'Bataille de tournoi contre l\'ordinateur',
      'ja': 'LoVM：大会対戦 (CPU対戦)',
      'ko': '꼬마 친구 공방전: 대회 대결(인공 지능 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  508: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '魔航船虚无方舟',
      'de': 'Die Nichts-Arche',
      'en': 'The Void Ark',
      'fr': 'L\'Arche du néant',
      'ja': '魔航船ヴォイドアーク',
      'ko': '보이드의 방주'
    },
    'offsetX': 289,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  510: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '地脉灵灯天狼星灯塔',
      'de': 'Pharos Sirius (schwer)',
      'en': 'Pharos Sirius (Hard)',
      'fr': 'Le Phare de Sirius (brutal)',
      'ja': '制圧巨塔 シリウス大灯台 (Hard)',
      'ko': '시리우스 대등대(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  511: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '草木庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum',
      'en': 'Saint Mocianne\'s Arboretum',
      'fr': 'L\'Arboretum Sainte-Mocianne',
      'ja': '草木庭園 聖モシャーヌ植物園',
      'ko': '성 모샨 식물원'
    },
    'offsetX': 40,
    'offsetY': 6,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  512: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索',
      'de': 'Das Diadem (leicht)',
      'en': 'The Diadem (Easy)',
      'fr': 'Le Diadème (facile)',
      'ja': '雲海探索 ディアデム諸島 (Easy)',
      'ko': '디아뎀 제도(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  515: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛夜晚探索',
      'de': 'Das Diadem (schwer)',
      'en': 'The Diadem (Hard)',
      'fr': 'Le Diadème (brutal)',
      'ja': '雲海探索 ディアデム諸島 (Hard)',
      'ko': '디아뎀 제도(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 62
  },
  516: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '星海空间颠倒塔',
      'de': 'Antiturm',
      'en': 'The Antitower',
      'fr': 'L\'Antitour',
      'ja': '星海観測 逆さの塔',
      'ko': '거꾸로 선 탑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  517: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼灭战',
      'de': 'Götterdämmerung - Sephirot',
      'en': 'Containment Bay S1T7',
      'fr': 'Unité de contention S1P7',
      'ja': '魔神セフィロト討滅戦',
      'ko': '마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  519: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '神圣遗迹无限城市街古迹',
      'de': 'Historisches Amdapor (schwer)',
      'en': 'The Lost City of Amdapor (Hard)',
      'fr': 'Les Vestiges de la cité d\'Amdapor (brutal)',
      'ja': '神聖遺跡 古アムダプール市街 (Hard)',
      'ko': '옛 암다포르 시가지(어려움)'
    },
    'offsetX': 64,
    'offsetY': 315,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  520: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes',
      'en': 'Alexander - The Fist of the Son',
      'fr': 'Alexander - Le Poing du Fils',
      'ja': '機工城アレキサンダー：律動編1',
      'ko': '기공성 알렉산더: 율동편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  521: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes',
      'en': 'Alexander - The Cuff of the Son',
      'fr': 'Alexander - Le Poignet du Fils',
      'ja': '機工城アレキサンダー：律動編2',
      'ko': '기공성 알렉산더: 율동편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  522: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes',
      'en': 'Alexander - The Arm of the Son',
      'fr': 'Alexander - Le Bras du Fils',
      'ja': '機工城アレキサンダー：律動編3',
      'ko': '기공성 알렉산더: 율동편 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  523: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes',
      'en': 'Alexander - The Burden of the Son',
      'fr': 'Alexander - Le Fardeau du Fils',
      'ja': '機工城アレキサンダー：律動編4',
      'ko': '기공성 알렉산더: 율동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  524: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '萨菲洛特歼殛战',
      'de': 'Zenit der Götter - Sephirot',
      'en': 'Containment Bay S1T7 (Extreme)',
      'fr': 'Unité de contention S1P7 (extrême)',
      'ja': '極魔神セフィロト討滅戦',
      'ko': '극 마신 세피로트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 66
  },
  529: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章1',
      'de': 'Alexander - Faust des Sohnes (episch)',
      'en': 'Alexander - The Fist of the Son (Savage)',
      'fr': 'Alexander - Le Poing du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編1',
      'ko': '기공성 알렉산더: 율동편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  530: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章2',
      'de': 'Alexander - Elle des Sohnes (episch)',
      'en': 'Alexander - The Cuff of the Son (Savage)',
      'fr': 'Alexander - Le Poignet du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編2',
      'ko': '기공성 알렉산더: 율동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  531: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章3',
      'de': 'Alexander - Arm des Sohnes (episch)',
      'en': 'Alexander - The Arm of the Son (Savage)',
      'fr': 'Alexander - Le Bras du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編3',
      'ko': '기공성 알렉산더: 율동편(영웅) 3'
    },
    'offsetX': -110,
    'offsetY': -170,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  532: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 律动之章4',
      'de': 'Alexander - Last des Sohnes (episch)',
      'en': 'Alexander - The Burden of the Son (Savage)',
      'fr': 'Alexander - Le Fardeau du Fils (sadique)',
      'ja': '機工城アレキサンダー零式：律動編4',
      'ko': '기공성 알렉산더: 율동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  533: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '四国联合军演',
      'de': 'Truppenübung der Eorzäischen Allianz',
      'en': 'A Spectacle for the Ages',
      'fr': 'La grande manœuvre éorzéenne',
      'ja': '四国合同演習',
      'ko': '4개국 합동 훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  537: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击',
      'de': 'Flächenangriffen ausweichen',
      'en': 'Avoid Area of Effect Attacks',
      'fr': 'Éviter les attaques à aire d\'effet',
      'ja': '範囲攻撃を避けよう！',
      'ko': '범위 공격을 피하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  538: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '掌握仇恨连击',
      'de': 'Mit Kombos Feindseligkeit auf sich ziehen',
      'en': 'Execute a Combo to Increase Enmity',
      'fr': 'Générer de l\'inimitié avec un combo',
      'ja': 'コンボで敵視を集めよう！',
      'ko': '콤보를 이어 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  539: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制敌人的仇恨',
      'de': 'Kombos im Kampf einsetzen',
      'en': 'Execute a Combo in Battle',
      'fr': 'Effectuer le combo en combat',
      'ja': '実戦でコンボに挑戦しよう！',
      'ko': '실전에서 콤보를 사용해보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  540: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制多个敌人的仇恨',
      'de': 'Feindseligkeit mehrerer Gegner auf sich ziehen',
      'en': 'Accrue Enmity from Multiple Targets',
      'fr': 'Attirer l\'inimitié de plusieurs ennemis sur soi',
      'ja': '複数の敵から敵視を集めよう！',
      'ko': '다수의 적에게서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  541: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '实战控制多个敌人的仇恨',
      'de': 'Gegen mehrere Gegner auf einmal kämpfen',
      'en': 'Engage Multiple Targets',
      'fr': 'Affronter plusieurs ennemis',
      'ja': '実戦で複数の敵と戦ってみよう！',
      'ko': '실전에서 다수의 적과 싸워보자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  542: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '控制远处敌人的仇恨',
      'de': 'Aus der Ferne Feindseligkeit auf sich ziehen',
      'en': 'Execute a Ranged Attack to Increase Enmity',
      'fr': 'Générer de l\'inimitié à distance',
      'ja': '遠距離から敵視を集めよう！',
      'ko': '멀리서 적개심을 끌자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  543: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '留心增援的敌人',
      'de': 'Feindliche Verstärkung aufhalten',
      'en': 'Engage Enemy Reinforcements',
      'fr': 'Faire face à des renforts ennemis',
      'ja': '敵の増援に対応しよう！',
      'ko': '적 지원군에 대처하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  544: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒单个敌人',
      'de': 'Gegner gemeinsam besiegen',
      'en': 'Assist Allies in Defeating a Target',
      'fr': 'Vaincre un ennemi en assistant des alliés',
      'ja': '味方と協力して敵を倒そう！',
      'ko': '파티원과 협력하여 적을 물리치자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  545: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '配合防护职业打倒多个敌人',
      'de': 'Den Gegner eines Verbündeten besiegen',
      'en': 'Defeat an Occupied Target',
      'fr': 'Vaincre un ennemi occupé par un allié',
      'ja': '味方が引きつけている敵を倒そう！',
      'ko': '파티원과 같은 적을 공격하자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  546: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '躲避范围攻击的同时进行战斗',
      'de': 'Angriffen ausweichen',
      'en': 'Avoid Engaged Targets',
      'fr': 'Combattre en évitant les attaques ennemies',
      'ja': '敵の攻撃を避けながら戦おう！',
      'ko': '적의 공격을 피하면서 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  548: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '灵活运用场地机关',
      'de': 'Mit dem Gelände interagieren',
      'en': 'Interact with the Battlefield',
      'fr': 'Interagir avec le décor en combat',
      'ja': 'ギミックを活用して戦おう！',
      'ko': '특수 장치를 활용하며 싸우자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  549: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗防护职业',
      'de': 'Verbündete heilen',
      'en': 'Heal an Ally',
      'fr': 'Soigner un allié',
      'ja': '味方を回復しよう！',
      'ko': '파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  550: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '治疗小队队员',
      'de': 'Mehrere Verbündete heilen',
      'en': 'Heal Multiple Allies',
      'fr': 'Soigner plusieurs alliés',
      'ja': '複数の味方を回復しよう！',
      'ko': '다수의 파티원을 회복시키자!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  552: {
    'contentType': 20,
    'exVersion': 0,
    'name': {
      'cn': '最终训练',
      'de': 'Letzte Übung',
      'en': 'Final Exercise',
      'fr': 'Exercice final',
      'ja': '最終訓練！',
      'ko': '마지막 훈련!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  554: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '荣誉野（碎冰战）',
      'de': 'Feld der Ehre (Zersplitterung)',
      'en': 'The Fields of Glory (Shatter)',
      'fr': 'Les Champs de la Gloire (brise-glace)',
      'ja': 'フィールド・オブ・グローリー (砕氷戦)',
      'ko': '영광의 평원(쇄빙전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 67
  },
  555: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天龙宫殿忆罪宫',
      'de': 'Sohr Khai',
      'en': 'Sohr Khai',
      'fr': 'Sohr Khai',
      'ja': '天竜宮殿 ソール・カイ',
      'ko': '소르 카이'
    },
    'offsetX': 370,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  556: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '禁忌城邦玛哈',
      'de': 'Die Stadt der Tränen',
      'en': 'The Weeping City of Mhach',
      'fr': 'La Cité défendue de Mhach',
      'ja': '禁忌都市マハ',
      'ko': '금기도시 마하'
    },
    'offsetX': -40,
    'offsetY': -40,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  557: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '黑涡传说破舰岛',
      'de': 'Schiffbrecher-Insel (schwer)',
      'en': 'Hullbreaker Isle (Hard)',
      'fr': 'L\'Île de Crèvecarène (brutal)',
      'ja': '黒渦伝説 ハルブレーカー・アイル (Hard)',
      'ko': '난파선의 섬(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 68
  },
  558: {
    'contentType': 9,
    'exVersion': 0,
    'name': {
      'cn': '水城宝物库',
      'de': 'Aquapolis',
      'en': 'The Aquapolis',
      'fr': 'L\'Aquapole',
      'ja': '宝物庫 アクアポリス',
      'ko': '보물고 아쿠아폴리스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  559: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格征龙战',
      'de': 'Der letzte Schicksalsweg',
      'en': 'The Final Steps of Faith',
      'fr': 'La Dernière avancée de la Foi',
      'ja': 'ニーズヘッグ征竜戦',
      'ko': '니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  560: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '雷古拉·范·休著斯追击战',
      'de': 'Blutiges Wieder<SoftHyphen/>sehen',
      'en': 'A Bloody Reunion',
      'fr': 'Course-poursuite dans le laboratoire',
      'ja': 'レグラ・ヴァン・ヒュドルス追撃戦',
      'ko': '레굴라 반 히드루스 추격전'
    },
    'offsetX': -18,
    'offsetY': 149,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  561: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下1～10层',
      'de': 'Palast der Toten (Ebenen 1-10)',
      'en': 'The Palace of the Dead (Floors 1-10)',
      'fr': 'Le Palais des morts (sous-sols 1-10)',
      'ja': '死者の宮殿 B1～B10',
      'ko': '망자의 궁전 B1~B10'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  562: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下11～20层',
      'de': 'Palast der Toten (Ebenen 11-20)',
      'en': 'The Palace of the Dead (Floors 11-20)',
      'fr': 'Le Palais des morts (sous-sols 11-20)',
      'ja': '死者の宮殿 B11～B20',
      'ko': '망자의 궁전 B11~B20'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  563: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下21～30层',
      'de': 'Palast der Toten (Ebenen 21-30)',
      'en': 'The Palace of the Dead (Floors 21-30)',
      'fr': 'Le Palais des morts (sous-sols 21-30)',
      'ja': '死者の宮殿 B21～B30',
      'ko': '망자의 궁전 B21~B30'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  564: {
    'contentType': 21,
    'exVersion': 0,
    'name': {
      'cn': '死者宫殿 地下31～40层',
      'de': 'Palast der Toten (Ebenen 31-40)',
      'en': 'The Palace of the Dead (Floors 31-40)',
      'fr': 'Le Palais des morts (sous-sols 31-40)',
      'ja': '死者の宮殿 B31～B40',
      'ko': '망자의 궁전 B31~B40'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  565: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下41～50层',
      'de': 'Palast der Toten (Ebenen 41-50)',
      'en': 'The Palace of the Dead (Floors 41-50)',
      'fr': 'Le Palais des morts (sous-sols 41-50)',
      'ja': '死者の宮殿 B41～B50',
      'ko': '망자의 궁전 B41~B50'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  566: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '尼德霍格传奇征龙战',
      'de': 'Das Lied von Nidhoggs letztem Ruf',
      'en': 'The Minstrel\'s Ballad: Nidhogg\'s Rage',
      'fr': 'L\'ire de Nidhogg',
      'ja': '極ニーズヘッグ征竜戦',
      'ko': '극 니드호그 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  571: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '亡灵府邸闹鬼庄园',
      'de': 'Das Geisterschloss',
      'en': 'The Haunted Manor',
      'fr': 'Le Manoir hanté',
      'ja': '亡霊屋敷 ホーンテッドマナー',
      'ko': '유령의 집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  572: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '险峻峡谷塞尔法特尔溪谷',
      'de': 'Xelphatol',
      'en': 'Xelphatol',
      'fr': 'Xelphatol',
      'ja': '峻厳渓谷 ゼルファトル',
      'ko': '젤파톨'
    },
    'offsetX': -148,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  576: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼灭战',
      'de': 'Götterdämmerung - Sophia',
      'en': 'Containment Bay P1T6',
      'fr': 'Unité de contention P1P6',
      'ja': '女神ソフィア討滅戦',
      'ko': '여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  577: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '索菲娅歼殛战',
      'de': 'Zenit der Götter - Sophia',
      'en': 'Containment Bay P1T6 (Extreme)',
      'fr': 'Unité de contention P1P6 (extrême)',
      'ja': '極女神ソフィア討滅戦',
      'ko': '극 여신 소피아 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 69
  },
  578: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '秘本宝库迦巴勒幻想图书馆',
      'de': 'Große Gubal-Bibliothek (schwer)',
      'en': 'The Great Gubal Library (Hard)',
      'fr': 'La Grande bibliothèque de Gubal (brutal)',
      'ja': '稀書回収 グブラ幻想図書館 (Hard)',
      'ko': '구브라 환상도서관(어려움)'
    },
    'offsetX': 116,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  579: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：幻卡对局室',
      'de': 'Triple Triad: Weltensalon',
      'en': 'The Triple Triad Battlehall',
      'fr': 'Arène Triple Triade',
      'ja': 'トリプルトライアド：カードバトルルーム',
      'ko': '트리플 트라이어드: 카드 대결장'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  580: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers',
      'en': 'Alexander - The Eyes of the Creator',
      'fr': 'Alexander - Les Yeux du Créateur',
      'ja': '機工城アレキサンダー：天動編1',
      'ko': '기공성 알렉산더: 천동편 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  581: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers',
      'en': 'Alexander - The Breath of the Creator',
      'fr': 'Alexander - Le Souffle du Créateur',
      'ja': '機工城アレキサンダー：天動編2',
      'ko': '기공성 알렉산더: 천동편 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  582: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers',
      'en': 'Alexander - The Heart of the Creator',
      'fr': 'Alexander - Le Cœur du Créateur',
      'ja': '機工城アレキサンダー：天動編3',
      'ko': '기공성 알렉산더: 천동편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  583: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers',
      'en': 'Alexander - The Soul of the Creator',
      'fr': 'Alexander - L\'Âme du Créateur',
      'ja': '機工城アレキサンダー：天動編4',
      'ko': '기공성 알렉산더: 천동편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  584: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章1',
      'de': 'Alexander - Augen des Schöpfers (episch)',
      'en': 'Alexander - The Eyes of the Creator (Savage)',
      'fr': 'Alexander - Les Yeux du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編1',
      'ko': '기공성 알렉산더: 천동편(영웅) 1'
    },
    'offsetX': 75,
    'offsetY': 14,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  585: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章2',
      'de': 'Alexander - Atem des Schöpfers (episch)',
      'en': 'Alexander - The Breath of the Creator (Savage)',
      'fr': 'Alexander - Le Souffle du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編2',
      'ko': '기공성 알렉산더: 천동편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': -80,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  586: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章3',
      'de': 'Alexander - Herz des Schöpfers (episch)',
      'en': 'Alexander - The Heart of the Creator (Savage)',
      'fr': 'Alexander - Le Cœur du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編3',
      'ko': '기공성 알렉산더: 천동편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  587: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '亚历山大零式机神城 天动之章4',
      'de': 'Alexander - Seele des Schöpfers (episch)',
      'en': 'Alexander - The Soul of the Creator (Savage)',
      'fr': 'Alexander - L\'Âme du Créateur (sadique)',
      'ja': '機工城アレキサンダー零式：天動編4',
      'ko': '기공성 알렉산더: 천동편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  589: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (um RP)',
      'en': 'LoVM: Player Battle (RP)',
      'fr': 'Bataille simple contre un joueur (avec PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動あり)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 있음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  590: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：大赛对战（玩家对战）',
      'de': 'Kampf der Trabanten: Turnier (gegen Spieler)',
      'en': 'LoVM: Tournament',
      'fr': 'Bataille de tournoi contre des joueurs',
      'ja': 'LoVM：大会対戦 (プレイヤー対戦）',
      'ko': '꼬마 친구 공방전: 대회 대결(플레이어 대결)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  591: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '萌宠之王：玩家对战（无绩点赛）',
      'de': 'Kampf der Trabanten: Gegen Spieler (ohne RP)',
      'en': 'LoVM: Player Battle (Non-RP)',
      'fr': 'Bataille simple contre un joueur (sans PR)',
      'ja': 'LoVM：プレイヤー対戦 (RP変動なし)',
      'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  592: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '纠缠不清的宿命',
      'de': 'Weltenübergreifendes Schicksal',
      'en': 'One Life for One World',
      'fr': 'Destins entrecroisés',
      'ja': '絡み合う宿命',
      'ko': '뒤얽히는 숙명'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 28
  },
  593: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下51～60层',
      'de': 'Palast der Toten (Ebenen 51 - 60)',
      'en': 'The Palace of the Dead (Floors 51-60)',
      'fr': 'Le Palais des morts (sous-sols 51-60)',
      'ja': '死者の宮殿 B51～B60',
      'ko': '망자의 궁전 B51~B60'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  594: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下61～70层',
      'de': 'Palast der Toten (Ebenen 61 - 70)',
      'en': 'The Palace of the Dead (Floors 61-70)',
      'fr': 'Le Palais des morts (sous-sols 61-70)',
      'ja': '死者の宮殿 B61～B70',
      'ko': '망자의 궁전 B61~B70'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  595: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下71～80层',
      'de': 'Palast der Toten (Ebenen 71 - 80)',
      'en': 'The Palace of the Dead (Floors 71-80)',
      'fr': 'Le Palais des morts (sous-sols 71-80)',
      'ja': '死者の宮殿 B71～B80',
      'ko': '망자의 궁전 B71~B80'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  596: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下81～90层',
      'de': 'Palast der Toten (Ebenen 81 - 90)',
      'en': 'The Palace of the Dead (Floors 81-90)',
      'fr': 'Le Palais des morts (sous-sols 81-90)',
      'ja': '死者の宮殿 B81～B90',
      'ko': '망자의 궁전 B81~B90'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  597: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下91～100层',
      'de': 'Palast der Toten (Ebenen 91 - 100)',
      'en': 'The Palace of the Dead (Floors 91-100)',
      'fr': 'Le Palais des morts (sous-sols 91-100)',
      'ja': '死者の宮殿 B91～B100',
      'ko': '망자의 궁전 B91~B100'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  598: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下101～110层',
      'de': 'Palast der Toten (Ebenen 101 - 110)',
      'en': 'The Palace of the Dead (Floors 101-110)',
      'fr': 'Le Palais des morts (sous-sols 101-110)',
      'ja': '死者の宮殿 B101～B110',
      'ko': '망자의 궁전 B101~B110'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  599: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下111～120层',
      'de': 'Palast der Toten (Ebenen 111 - 120)',
      'en': 'The Palace of the Dead (Floors 111-120)',
      'fr': 'Le Palais des morts (sous-sols 111-120)',
      'ja': '死者の宮殿 B111～B120',
      'ko': '망자의 궁전 B111~B120'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  600: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下121～130层',
      'de': 'Palast der Toten (Ebenen 121 - 130)',
      'en': 'The Palace of the Dead (Floors 121-130)',
      'fr': 'Le Palais des morts (sous-sols 121-130)',
      'ja': '死者の宮殿 B121～B130',
      'ko': '망자의 궁전 B121~B130'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  601: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下131～140层',
      'de': 'Palast der Toten (Ebenen 131 - 140)',
      'en': 'The Palace of the Dead (Floors 131-140)',
      'fr': 'Le Palais des morts (sous-sols 131-140)',
      'ja': '死者の宮殿 B131～B140',
      'ko': '망자의 궁전 B131~B140'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  602: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下141～150层',
      'de': 'Palast der Toten (Ebenen 141 - 150)',
      'en': 'The Palace of the Dead (Floors 141-150)',
      'fr': 'Le Palais des morts (sous-sols 141-150)',
      'ja': '死者の宮殿 B141～B150',
      'ko': '망자의 궁전 B141~B150'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  603: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下151～160层',
      'de': 'Palast der Toten (Ebenen 151 - 160)',
      'en': 'The Palace of the Dead (Floors 151-160)',
      'fr': 'Le Palais des morts (sous-sols 151-160)',
      'ja': '死者の宮殿 B151～B160',
      'ko': '망자의 궁전 B151~B160'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  604: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下161～170层',
      'de': 'Palast der Toten (Ebenen 161 - 170)',
      'en': 'The Palace of the Dead (Floors 161-170)',
      'fr': 'Le Palais des morts (sous-sols 161-170)',
      'ja': '死者の宮殿 B161～B170',
      'ko': '망자의 궁전 B161~B170'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  605: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下171～180层',
      'de': 'Palast der Toten (Ebenen 171 - 180)',
      'en': 'The Palace of the Dead (Floors 171-180)',
      'fr': 'Le Palais des morts (sous-sols 171-180)',
      'ja': '死者の宮殿 B171～B180',
      'ko': '망자의 궁전 B171~B180'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  606: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下181～190层',
      'de': 'Palast der Toten (Ebenen 181 - 190)',
      'en': 'The Palace of the Dead (Floors 181-190)',
      'fr': 'Le Palais des morts (sous-sols 181-190)',
      'ja': '死者の宮殿 B181～B190',
      'ko': '망자의 궁전 B181~B190'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  607: {
    'contentType': 21,
    'exVersion': 1,
    'name': {
      'cn': '死者宫殿 地下191～200层',
      'de': 'Palast der Toten (Ebenen 191 - 200)',
      'en': 'The Palace of the Dead (Floors 191-200)',
      'fr': 'Le Palais des morts (sous-sols 191-200)',
      'ja': '死者の宮殿 B191～B200',
      'ko': '망자의 궁전 B191~B200'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  612: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚边区',
      'de': 'Abanisches Grenzland',
      'en': 'The Fringes',
      'fr': 'Les Marges',
      'ja': 'ギラバニア辺境地帯',
      'ko': '기라바니아 변방지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 79
  },
  613: {
    'exVersion': 2,
    'name': {
      'cn': '红玉海',
      'de': 'Rubinsee',
      'en': 'The Ruby Sea',
      'fr': 'Mer de Rubis',
      'ja': '紅玉海',
      'ko': '홍옥해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  614: {
    'exVersion': 2,
    'name': {
      'cn': '延夏',
      'de': 'Yanxia',
      'en': 'Yanxia',
      'fr': 'Yanxia',
      'ja': 'ヤンサ',
      'ko': '얀샤'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 84
  },
  615: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '坚牢铁壁巴埃萨长城',
      'de': 'Baelsar-Wall',
      'en': 'Baelsar\'s Wall',
      'fr': 'La Muraille de Baelsar',
      'ja': '巨大防壁 バエサルの長城',
      'ko': '바일사르 장성'
    },
    'offsetX': 182,
    'offsetY': 32,
    'sizeFactor': 200,
    'weatherRate': 40
  },
  616: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '海底宫殿紫水宫',
      'de': 'Shisui',
      'en': 'Shisui of the Violet Tides',
      'fr': 'Le Palais aux Marées violettes',
      'ja': '海底宮殿 紫水宮',
      'ko': '시스이 궁'
    },
    'offsetX': 0,
    'offsetY': 35,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  617: {
    'contentType': 2,
    'exVersion': 1,
    'name': {
      'cn': '天山深境索姆阿尔灵峰',
      'de': 'Sohm Al (schwer)',
      'en': 'Sohm Al (Hard)',
      'fr': 'Sohm Al (brutal)',
      'ja': '霊峰浄化 ソーム・アル (Hard)',
      'ko': '솜 알(어려움)'
    },
    'offsetX': 128,
    'offsetY': -32,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  620: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚山区',
      'de': 'Die Zinnen',
      'en': 'The Peaks',
      'fr': 'Les Pics',
      'ja': 'ギラバニア山岳地帯',
      'ko': '기라바니아 산악지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 80
  },
  621: {
    'exVersion': 2,
    'name': {
      'cn': '基拉巴尼亚湖区',
      'de': 'Das Fenn',
      'en': 'The Lochs',
      'fr': 'Les Lacs',
      'ja': 'ギラバニア湖畔地帯',
      'ko': '기라바니아 호반지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 81
  },
  622: {
    'exVersion': 2,
    'name': {
      'cn': '太阳神草原',
      'de': 'Azim-Steppe',
      'en': 'The Azim Steppe',
      'fr': 'Steppe d\'Azim',
      'ja': 'アジムステップ',
      'ko': '아짐 대초원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  623: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '试炼行路巴儿达木霸道',
      'de': 'Bardams Probe',
      'en': 'Bardam\'s Mettle',
      'fr': 'La Force de Bardam',
      'ja': '伝統試練 バルダム覇道',
      'ko': '바르담 패도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  624: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛白昼探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe (leicht)',
      'en': 'The Diadem Hunting Grounds (Easy)',
      'fr': 'Le Diadème<Indent/>: terrains de chasse (facile)',
      'ja': '雲海探索 ディアデム諸島：狩猟限定 (Easy)',
      'ko': '디아뎀 제도: 전투 한정(쉬움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 60
  },
  625: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛黄昏探索（狩猎专用）',
      'de': 'Das Diadem - Jagdgründe',
      'en': 'The Diadem Hunting Grounds',
      'fr': 'Le Diadème<Indent/>: terrains de chasse',
      'ja': '雲海探索 ディアデム諸島：狩猟限定',
      'ko': '디아뎀 제도: 전투 한정'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 61
  },
  626: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '漂流海域妖歌海',
      'de': 'Sirenen-See',
      'en': 'The Sirensong Sea',
      'fr': 'La Mer du Chant des sirènes',
      'ja': '漂流海域 セイレーン海',
      'ko': '세이렌 해'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 36
  },
  627: {
    'contentType': 5,
    'exVersion': 1,
    'name': {
      'cn': '影之国',
      'de': 'Dun Scaith',
      'en': 'Dun Scaith',
      'fr': 'Dun Scaith',
      'ja': '影の国ダン・スカー',
      'ko': '둔 스카'
    },
    'offsetX': -350,
    'offsetY': -400,
    'sizeFactor': 200,
    'weatherRate': 58
  },
  628: {
    'exVersion': 2,
    'name': {
      'cn': '黄金港',
      'de': 'Kugane',
      'en': 'Kugane',
      'fr': 'Kugane',
      'ja': 'クガネ',
      'ko': '쿠가네'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  630: {
    'contentType': 23,
    'exVersion': 0,
    'name': {
      'cn': '云冠群岛战争神猎场',
      'de': 'Das Diadem - Halones Prüfung',
      'en': 'The Diadem - Trials of the Fury',
      'fr': 'Le Diadème - Épreuves de Halone',
      'ja': '雲海探索 ディアデム諸島 (狩猟)',
      'ko': '디아뎀 제도: 전투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  633: {
    'contentType': 7,
    'exVersion': 1,
    'name': {
      'cn': '加尔提诺平原遭遇战',
      'de': 'Heliodrom',
      'en': 'The Carteneau Flats: Heliodrome',
      'fr': 'Rixe à l\'Héliodrome',
      'ja': 'カルテノー平原遭遇戦',
      'ko': '카르테노 평원 조우전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  635: {
    'exVersion': 2,
    'name': {
      'cn': '神拳痕',
      'de': 'Rhalgrs Wacht',
      'en': 'Rhalgr\'s Reach',
      'fr': 'L\'Étendue de Rhalgr',
      'ja': 'ラールガーズリーチ',
      'ko': '랄거의 손길'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 78
  },
  637: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼灭战',
      'de': 'Götterdämmerung - Zurvan',
      'en': 'Containment Bay Z1T9',
      'fr': 'Unité de contention Z1P9',
      'ja': '鬼神ズルワーン討滅戦',
      'ko': '귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  638: {
    'contentType': 4,
    'exVersion': 1,
    'name': {
      'cn': '祖尔宛歼殛战',
      'de': 'Zenit der Götter - Zurvan',
      'en': 'Containment Bay Z1T9 (Extreme)',
      'fr': 'Unité de contention Z1P9 (extrême)',
      'ja': '極鬼神ズルワーン討滅戦',
      'ko': '극 귀신 주르반 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 75
  },
  656: {
    'contentType': 23,
    'exVersion': 1,
    'name': {
      'cn': '云冠群岛丰饶神福地',
      'de': 'Das Diadem - Nophicas Prüfung',
      'en': 'The Diadem - Trials of the Matron',
      'fr': 'Le Diadème - Épreuves de Nophica',
      'ja': '雲海探索 ディアデム諸島 (採集)',
      'ko': '디아뎀 제도: 채집'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 71
  },
  660: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '解放决战多玛王城',
      'de': 'Burg Doma',
      'en': 'Doma Castle',
      'fr': 'Le Château de Doma',
      'ja': '解放決戦 ドマ城',
      'ko': '도마 성'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  661: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '巨炮要塞帝国白山堡',
      'de': 'Castrum Abania',
      'en': 'Castrum Abania',
      'fr': 'Castrum Abania',
      'ja': '巨砲要塞 カストルム・アバニア',
      'ko': '카스트룸 아바니아'
    },
    'offsetX': 72,
    'offsetY': -186,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  662: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '恶党孤城黄金阁',
      'de': 'Schloss Kugane',
      'en': 'Kugane Castle',
      'fr': 'Le Château de Kugane',
      'ja': '悪党成敗 クガネ城',
      'ko': '쿠가네 성'
    },
    'offsetX': 70,
    'offsetY': 33,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  663: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '修行古刹星导寺',
      'de': 'Tempel der Faust',
      'en': 'The Temple of the Fist',
      'fr': 'Le Temple du Poing',
      'ja': '壊神修行 星導山寺院',
      'ko': '성도산 사원'
    },
    'offsetX': -427,
    'offsetY': -314,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  665: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '鱼道现身！',
      'de': 'Ein zweifelhaftes Angebot',
      'en': 'It\'s Probably a Trap',
      'fr': 'Un drôle de Namazu',
      'ja': 'ギョドウ現る！',
      'ko': '교도 등장!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  674: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼灭战',
      'de': 'Götterdämmerung - Susano',
      'en': 'The Pool of Tribute',
      'fr': 'La Crique aux tributs',
      'ja': 'スサノオ討滅戦',
      'ko': '스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  677: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '须佐之男歼殛战',
      'de': 'Zenit der Götter - Susano',
      'en': 'The Pool of Tribute (Extreme)',
      'fr': 'La Crique aux tributs (extrême)',
      'ja': '極スサノオ討滅戦',
      'ko': '극 스사노오 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 77
  },
  679: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙歼灭战',
      'de': 'Königliche Menagerie',
      'en': 'The Royal Menagerie',
      'fr': 'La Ménagerie royale',
      'ja': '神龍討滅戦',
      'ko': '신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  684: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '于里昂热的秘策',
      'de': 'Wege zur Transzendenz',
      'en': 'The Resonant',
      'fr': 'La ruse d\'Urianger',
      'ja': 'ウリエンジェの秘策',
      'ko': '위리앙제의 비책'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  688: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '那达慕',
      'de': 'Naadam',
      'en': 'Naadam',
      'fr': 'La grande bataille du Naadam',
      'ja': '終節の合戦',
      'ko': '계절끝 합전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  689: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '鏖战红莲阿拉米格',
      'de': 'Ala Mhigo',
      'en': 'Ala Mhigo',
      'fr': 'Ala Mhigo',
      'ja': '紅蓮決戦 アラミゴ',
      'ko': '알라미고'
    },
    'offsetX': 292,
    'offsetY': -163,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  690: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '时空狭缝外缘',
      'de': 'Interdimensionaler Riss',
      'en': 'Interdimensional Rift',
      'fr': 'Fissure interdimensionnelle',
      'ja': '次元の狭間：外縁',
      'ko': '차원의 틈: 외곽'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 88
  },
  691: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0',
      'en': 'Deltascape V1.0',
      'fr': 'Deltastice v1.0',
      'ja': '次元の狭間オメガ：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  692: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0',
      'en': 'Deltascape V2.0',
      'fr': 'Deltastice v2.0',
      'ja': '次元の狭間オメガ：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  693: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0',
      'en': 'Deltascape V3.0',
      'fr': 'Deltastice v3.0',
      'ja': '次元の狭間オメガ：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  694: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0',
      'en': 'Deltascape V4.0',
      'fr': 'Deltastice v4.0',
      'ja': '次元の狭間オメガ：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  695: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境1',
      'de': 'Deltametrie 1.0 (episch)',
      'en': 'Deltascape V1.0 (Savage)',
      'fr': 'Deltastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編1',
      'ko': '차원의 틈 오메가: 델타편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  696: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境2',
      'de': 'Deltametrie 2.0 (episch)',
      'en': 'Deltascape V2.0 (Savage)',
      'fr': 'Deltastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編2',
      'ko': '차원의 틈 오메가: 델타편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  697: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境3',
      'de': 'Deltametrie 3.0 (episch)',
      'en': 'Deltascape V3.0 (Savage)',
      'fr': 'Deltastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編3',
      'ko': '차원의 틈 오메가: 델타편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  698: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 德尔塔幻境4',
      'de': 'Deltametrie 4.0 (episch)',
      'en': 'Deltascape V4.0 (Savage)',
      'fr': 'Deltastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：デルタ編4',
      'ko': '차원의 틈 오메가: 델타편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 88
  },
  705: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '大会开始',
      'de': 'Thal zu Ehren',
      'en': 'In Thal\'s Name',
      'fr': 'Le tournoi commémoratif du sultanat',
      'ja': 'ウル王杯闘技会の始まり',
      'ko': '울다하 왕실배 투기대회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  706: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '为了更强',
      'de': 'Die hohe Kunst des Schwertkampfs',
      'en': 'Raising the Sword',
      'fr': 'La finale des champions',
      'ja': 'さらなる剣術の高みへ',
      'ko': '더 높은 검술의 경지로'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 8
  },
  707: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '抗争之力',
      'de': 'Die Kraft des Widerstands',
      'en': 'With Heart and Steel',
      'fr': 'Transmigration démoniaque',
      'ja': '抗う力',
      'ko': '맞서는 힘'
    },
    'offsetX': 298,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 37
  },
  708: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '海都路人身首异',
      'de': 'Mord ist sein Hobby',
      'en': 'Blood on the Deck',
      'fr': 'La légende de Musosai<Indent/>: l\'assassin de Limsa Lominsa',
      'ja': '海都を震わす人斬りの宴！',
      'ko': '해양도시를 흔드는 살인자의 연회!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  709: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '极恶之人木枯',
      'de': 'Der Inbegriff des Bösen',
      'en': 'The Face of True Evil',
      'fr': 'L\'abominable Kogarashi',
      'ja': '極悪人コガラシ',
      'ko': '극악무도한 코가라시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 49
  },
  710: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '松叶门外之变',
      'de': 'Vorfall auf dem Matsuba-Platz',
      'en': 'Matsuba Mayhem',
      'fr': 'Règlement de compte au square Matsuba',
      'ja': '松葉門外の変',
      'ko': '마츠바 사변'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 82
  },
  711: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '决战龟甲岛',
      'de': 'Ent<SoftHyphen/>schei<SoftHyphen/>dungs<SoftHyphen/>schlacht auf Bekko',
      'en': 'The Battle on Bekko',
      'fr': 'L\'af<SoftHyphen/>fron<SoftHyphen/>te<SoftHyphen/>ment de deux justices',
      'ja': 'ベッコウ島の決闘',
      'ko': '베코우 섬의 결투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 83
  },
  712: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库',
      'de': 'Kanäle von Uznair',
      'en': 'The Lost Canals of Uznair',
      'fr': 'Les Canaux perdus d\'Uznair',
      'ja': '宝物庫 ウズネアカナル',
      'ko': '보물고 우즈네어 운하'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  713: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '漆黑的巨龙',
      'de': 'Der tobende Drache',
      'en': 'Dark as the Night Sky',
      'fr': 'Aussi sombre que la nuit',
      'ja': '漆黒の巨竜',
      'ko': '칠흑의 거룡'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  714: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '红血之龙骑士',
      'de': 'Der Rubin-Drachenreiter',
      'en': 'Dragon Sound',
      'fr': 'Le Dragon écarlate',
      'ja': '紅の竜騎士',
      'ko': '붉은 용기사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  715: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '遥远的憧憬',
      'de': 'Probe des Meisters',
      'en': 'The Orphans and the Broken Blade',
      'fr': 'L\'aspiration refoulée',
      'ja': 'あと三度、遥かな憧憬',
      'ko': '앞으로 세 번, 아득한 동경'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 95,
    'weatherRate': 86
  },
  716: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '再次相见',
      'de': 'Aus der Tiefe des Herzens',
      'en': 'Our Compromise',
      'fr': 'La dernière séparation',
      'ja': 'あと一度、君に会えたら',
      'ko': '앞으로 한 번, 너와 만날 수 있다면'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  717: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '原初的战士',
      'de': 'Die Urkraft in ihr',
      'en': 'Curious Gorge Meets His Match',
      'fr': 'L\'épreuve de force',
      'ja': '原初的な彼女',
      'ko': '원초적 그녀'
    },
    'offsetX': -77,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  718: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '燃烧吧高吉',
      'de': 'Kriegerische Leidenschaft',
      'en': 'The Heart of the Problem',
      'fr': 'Passion guerrière',
      'ja': '燃えよゴージ！',
      'ko': '불타올라라, 산골짜기!'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  719: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼灭战',
      'de': 'Götterdämmerung - Lakshmi',
      'en': 'Emanation',
      'fr': 'Émanation',
      'ja': 'ラクシュミ討滅戦',
      'ko': '락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  720: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '吉祥天女歼殛战',
      'de': 'Zenit der Götter - Lakshmi',
      'en': 'Emanation (Extreme)',
      'fr': 'Émanation (extrême)',
      'ja': '極ラクシュミ討滅戦',
      'ko': '극 락슈미 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 87
  },
  722: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '穿越时空的夙愿',
      'de': 'Ein Wunsch aus alten Zeiten',
      'en': 'Our Unsung Heroes',
      'fr': 'L\'espoir en héritage',
      'ja': '時をかける願い',
      'ko': '시간을 뛰어넘은 염원'
    },
    'offsetX': -175,
    'offsetY': -297,
    'sizeFactor': 200,
    'weatherRate': 63
  },
  723: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '影隐忍法贴',
      'de': 'Aus dem Verborgenen',
      'en': 'When Clans Collide',
      'fr': 'La bataille des clans',
      'ja': '影隠忍法帖',
      'ko': '그림자 인법첩'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 85
  },
  725: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库深层',
      'de': 'Vergessene Kanäle von Uznair',
      'en': 'The Hidden Canals of Uznair',
      'fr': 'Les Canaux cachés d\'Uznair',
      'ja': '宝物庫 ウズネアカナル深層',
      'ko': '보물고 우즈네어 운하 심층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  729: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '距骨研究所（机动战）',
      'de': 'Astragalos',
      'en': 'Astragalos',
      'fr': 'Astragalos (machinerie)',
      'ja': 'アストラガロス (機工戦)',
      'ko': '아스트라갈로스(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  730: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '神龙梦幻歼灭战',
      'de': 'Heldenlied von Shinryu',
      'en': 'The Minstrel\'s Ballad: Shinryu\'s Domain',
      'fr': 'Le domaine de Shinryu',
      'ja': '極神龍討滅戦',
      'ko': '극 신룡 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 76
  },
  731: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '沉没神殿斯卡拉遗迹',
      'de': 'Die versunkene Stadt Skalla',
      'en': 'The Drowned City of Skalla',
      'fr': 'La Cité engloutie de Skalla',
      'ja': '水没遺構 スカラ',
      'ko': '스칼라 유적'
    },
    'offsetX': 185,
    'offsetY': 5,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  732: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 常风之地',
      'de': 'Eureka Anemos',
      'en': 'The Forbidden Land, Eureka Anemos',
      'fr': 'Eurêka Anemos',
      'ja': '禁断の地 エウレカ：アネモス編',
      'ko': '금단의 땅 에우레카: 아네모스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 91
  },
  733: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '巴哈姆特绝境战',
      'de': 'Endlose Schatten von Bahamut (fatal)',
      'en': 'The Unending Coil of Bahamut (Ultimate)',
      'fr': 'L\'Abîme infini de Bahamut (fatal)',
      'ja': '絶バハムート討滅戦',
      'ko': '절 바하무트 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  734: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '失落之都拉巴纳斯塔',
      'de': 'Rabanastre',
      'en': 'The Royal City of Rabanastre',
      'fr': 'La Cité royale de Rabanastre',
      'ja': '失われた都 ラバナスタ',
      'ko': '왕도 라바나스터'
    },
    'offsetX': 300,
    'offsetY': -100,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  741: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '良缘仪式',
      'de': 'Valentionzeremonie',
      'en': 'The Valentione\'s Ceremony',
      'fr': 'La Cérémonie de la Valention',
      'ja': 'ヴァレンティオンセレモニー',
      'ko': '발렌티온 예식장'
    },
    'offsetX': 0,
    'offsetY': 125,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  742: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '红玉火山狱之盖',
      'de': 'Höllenspund',
      'en': 'Hells\' Lid',
      'fr': 'Le Couvercle des enfers',
      'ja': '紅玉火山 獄之蓋',
      'ko': '지옥뚜껑'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  743: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '疯狂战舰无限回廊',
      'de': 'Die Fraktal-Kontinuum (schwer)',
      'en': 'The Fractal Continuum (Hard)',
      'fr': 'Le Continuum fractal (brutal)',
      'ja': '暴走戦艦 フラクタル・コンティニアム (Hard)',
      'ko': '무한연속 박물함(어려움)'
    },
    'offsetX': 0,
    'offsetY': 350,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  746: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎镇魂战',
      'de': 'Seelentanz - Byakko',
      'en': 'The Jade Stoa',
      'fr': 'La Clairière de Jade',
      'ja': '白虎征魂戦',
      'ko': '백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  748: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0',
      'en': 'Sigmascape V1.0',
      'fr': 'Sigmastice v1.0',
      'ja': '次元の狭間オメガ：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  749: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0',
      'en': 'Sigmascape V2.0',
      'fr': 'Sigmastice v2.0',
      'ja': '次元の狭間オメガ：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  750: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0',
      'en': 'Sigmascape V3.0',
      'fr': 'Sigmastice v3.0',
      'ja': '次元の狭間オメガ：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  751: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0',
      'en': 'Sigmascape V4.0',
      'fr': 'Sigmastice v4.0',
      'ja': '次元の狭間オメガ：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  752: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境1',
      'de': 'Sigmametrie 1.0 (episch)',
      'en': 'Sigmascape V1.0 (Savage)',
      'fr': 'Sigmastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編1',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 1'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  753: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境2',
      'de': 'Sigmametrie 2.0 (episch)',
      'en': 'Sigmascape V2.0 (Savage)',
      'fr': 'Sigmastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編2',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 2'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  754: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境3',
      'de': 'Sigmametrie 3.0 (episch)',
      'en': 'Sigmascape V3.0 (Savage)',
      'fr': 'Sigmastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編3',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 3'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  755: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 西格玛幻境4',
      'de': 'Sigmametrie 4.0 (episch)',
      'en': 'Sigmascape V4.0 (Savage)',
      'fr': 'Sigmastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：シグマ編4',
      'ko': '차원의 틈 오메가: 시그마편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  758: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '白虎诗魂战',
      'de': 'Seelensturm - Byakko',
      'en': 'The Jade Stoa (Extreme)',
      'fr': 'La Clairière de Jade (extrême)',
      'ja': '極白虎征魂戦',
      'ko': '극 백호 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 93
  },
  759: {
    'exVersion': 2,
    'name': {
      'cn': '多玛飞地',
      'de': 'Domanische Enklave',
      'en': 'The Doman Enclave',
      'fr': 'Quartier enclavé de Doma',
      'ja': 'ドマ町人地',
      'ko': '도마 도읍지'
    },
    'offsetX': 23,
    'offsetY': 34,
    'sizeFactor': 400,
    'weatherRate': 84
  },
  761: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙狩猎战',
      'de': 'Jagd auf Rathalos',
      'en': 'The Great Hunt',
      'fr': 'Chasse au Rathalos',
      'ja': 'リオレウス狩猟戦',
      'ko': '리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  762: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '火龙上位狩猎战',
      'de': 'Jagd auf Rathalos (schwer)',
      'en': 'The Great Hunt (Extreme)',
      'fr': 'Chasse au Rathalos (extrême)',
      'ja': '極リオレウス狩猟戦',
      'ko': '극 리오레우스 수렵전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  763: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 恒冰之地',
      'de': 'Eureka Pagos',
      'en': 'The Forbidden Land, Eureka Pagos',
      'fr': 'Eurêka Pagos',
      'ja': '禁断の地 エウレカ：パゴス編',
      'ko': '금단의 땅 에우레카: 파고스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 94
  },
  768: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '风水灵庙岩燕庙',
      'de': 'Kompass der Schwalbe',
      'en': 'The Swallow\'s Compass',
      'fr': 'Le Compas de l\'Hirondelle',
      'ja': '風水霊殿 ガンエン廟',
      'ko': '강엔 종묘'
    },
    'offsetX': 240,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  769: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '拂晓的少年',
      'de': 'Der Knabe der Morgenröte',
      'en': 'Emissary of the Dawn',
      'fr': 'Voyage en terre hostile',
      'ja': '「暁」の少年',
      'ko': '\'새벽\'의 소년'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  770: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 1～10层',
      'de': 'Himmelssäule (Ebenen 1-10)',
      'en': 'Heaven-on-High  (Floors 1-10)',
      'fr': 'Le Pilier des Cieux (étages 1-10)',
      'ja': 'アメノミハシラ 1～10層',
      'ko': '천궁탑 1~10층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  771: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 11～20层',
      'de': 'Himmelssäule (Ebenen 11-20)',
      'en': 'Heaven-on-High  (Floors 11-20)',
      'fr': 'Le Pilier des Cieux (étages 11-20)',
      'ja': 'アメノミハシラ 11～20層',
      'ko': '천궁탑 11~20층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  772: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 21～30层',
      'de': 'Himmelssäule (Ebenen 21-30)',
      'en': 'Heaven-on-High  (Floors 21-30)',
      'fr': 'Le Pilier des Cieux (étages 21-30)',
      'ja': 'アメノミハシラ 21～30層',
      'ko': '천궁탑 21~30층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  773: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 41～50层',
      'de': 'Himmelssäule (Ebenen 41-50)',
      'en': 'Heaven-on-High  (Floors 41-50)',
      'fr': 'Le Pilier des Cieux (étages 41-50)',
      'ja': 'アメノミハシラ 41～50層',
      'ko': '천궁탑 41~50층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  774: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 61～70层',
      'de': 'Himmelssäule (Ebenen 61-70)',
      'en': 'Heaven-on-High  (Floors 61-70)',
      'fr': 'Le Pilier des Cieux (étages 61-70)',
      'ja': 'アメノミハシラ 61～70層',
      'ko': '천궁탑 61~70층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  775: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 81～90层',
      'de': 'Himmelssäule (Ebenen 81-90)',
      'en': 'Heaven-on-High  (Floors 81-90)',
      'fr': 'Le Pilier des Cieux (étages 81-90)',
      'ja': 'アメノミハシラ 81～90層',
      'ko': '천궁탑 81~90층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  776: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '封闭圣塔黎铎拉纳大灯塔',
      'de': 'Richtfeuer von Ridorana',
      'en': 'The Ridorana Lighthouse',
      'fr': 'Le Phare de Ridorana',
      'ja': '封じられた聖塔 リドルアナ',
      'ko': '대등대 리도르아나'
    },
    'offsetX': 202,
    'offsetY': -92,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  777: {
    'contentType': 28,
    'exVersion': 2,
    'name': {
      'cn': '究极神兵绝境战',
      'de': 'Heldenlied von Ultima (fatal)',
      'en': 'The Weapon\'s Refrain (Ultimate)',
      'fr': 'La Fantasmagorie d\'Ultima (fatal)',
      'ja': '絶アルテマウェポン破壊作戦',
      'ko': '절 알테마 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 26
  },
  778: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读歼灭战',
      'de': 'Götterdämmerung - Tsukuyomi',
      'en': 'Castrum Fluminis',
      'fr': 'Castrum Fluminis',
      'ja': 'ツクヨミ討滅戦',
      'ko': '츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  779: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '月读幽夜歼灭战',
      'de': 'Zenit der Götter - Tsukuyomi',
      'en': 'The Minstrel\'s Ballad: Tsukuyomi\'s Pain',
      'fr': 'Castrum Fluminis (extrême)',
      'ja': '極ツクヨミ討滅戦',
      'ko': '극 츠쿠요미 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  782: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 31～40层',
      'de': 'Himmelssäule (Ebenen 31-40)',
      'en': 'Heaven-on-High  (Floors 31-40)',
      'fr': 'Le Pilier des Cieux (étages 31-40)',
      'ja': 'アメノミハシラ 31～40層',
      'ko': '천궁탑 31~40층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  783: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 51～60层',
      'de': 'Himmelssäule (Ebenen 51-60)',
      'en': 'Heaven-on-High  (Floors 51-60)',
      'fr': 'Le Pilier des Cieux (étages 51-60)',
      'ja': 'アメノミハシラ 51～60層',
      'ko': '천궁탑 51~60층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  784: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 71～80层',
      'de': 'Himmelssäule (Ebenen 71-80)',
      'en': 'Heaven-on-High  (Floors 71-80)',
      'fr': 'Le Pilier des Cieux (étages 71-80)',
      'ja': 'アメノミハシラ 71～80層',
      'ko': '천궁탑 71~80층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  785: {
    'contentType': 21,
    'exVersion': 2,
    'name': {
      'cn': '天之御柱 91～100层',
      'de': 'Himmelssäule (Ebenen 91-100)',
      'en': 'Heaven-on-High  (Floors 91-100)',
      'fr': 'Le Pilier des Cieux (étages 91-100)',
      'ja': 'アメノミハシラ 91～100層',
      'ko': '천궁탑 91~100층'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  788: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '污染庭园圣茉夏娜植物园',
      'de': 'Sankt Mocianne-Arboretum (schwer)',
      'en': 'Saint Mocianne\'s Arboretum (Hard)',
      'fr': 'L\'Arboretum Sainte-Mocianne (brutal)',
      'ja': '草木汚染 聖モシャーヌ植物園 (Hard)',
      'ko': '성 모샨 식물원(어려움)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  789: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '死亡大地终末焦土',
      'de': 'Das Kargland',
      'en': 'The Burn',
      'fr': 'L\'Escarre',
      'ja': '永久焦土 ザ・バーン',
      'ko': '영구 초토지대'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 97
  },
  790: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '灾厄重现军事演习',
      'de': 'Gedenkschlacht der Eorzäischen Allianz',
      'en': 'The Calamity Retold',
      'fr': 'Les grandes manœuvres commémoratives',
      'ja': '新生祭軍事演習',
      'ko': '신생제 군사훈련'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 95
  },
  791: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '隐塞（机动战）',
      'de': 'Verborgene Schlucht',
      'en': 'Hidden Gorge',
      'fr': 'Gorge dérobée (machinerie)',
      'ja': 'ヒドゥンゴージ (機工戦)',
      'ko': '숨겨진 보루(기공전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  792: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '虚景跳跳乐大挑战',
      'de': 'Kaktor-Kletterwand',
      'en': 'Leap of Faith',
      'fr': 'Haute voltige',
      'ja': '挑戦！ ジャンピングアスレチック',
      'ko': '뛰어라! 점핑 운동회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  793: {
    'contentType': 2,
    'exVersion': 2,
    'name': {
      'cn': '国境防线基姆利特暗区',
      'de': 'Die Ghimlyt-Finsternis',
      'en': 'The Ghimlyt Dark',
      'fr': 'Les Ténèbres de Ghimlyt',
      'ja': '境界戦線 ギムリトダーク',
      'ko': '김리트 황야'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  794: {
    'contentType': 9,
    'exVersion': 2,
    'name': {
      'cn': '运河宝物库神殿',
      'de': 'Glücksaltäre von Uznair',
      'en': 'The Shifting Altars of Uznair',
      'fr': 'Le Temple sacré d\'Uznair',
      'ja': '宝物庫 ウズネアカナル祭殿',
      'ko': '보물고 우즈네어 운하 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  795: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 涌火之地',
      'de': 'Eureka Pyros',
      'en': 'The Forbidden Land, Eureka Pyros',
      'fr': 'Eurêka Pyros',
      'ja': '禁断の地 エウレカ：ピューロス編',
      'ko': '금단의 땅 에우레카: 피로스편'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 96
  },
  796: {
    'contentType': 27,
    'exVersion': 0,
    'name': {
      'cn': '出道战',
      'de': 'Debüt in der Himmlischen Arena',
      'en': 'All\'s Well That Starts Well',
      'fr': 'Début du spectacle',
      'ja': 'デビューマッチ',
      'ko': '데뷔전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  797: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '楔石洞',
      'de': 'Der Wille der Mondgöttin',
      'en': 'The Will of the Moon',
      'fr': 'Ralliement dans la steppe',
      'ja': '楔石の虚',
      'ko': '쐐기돌 동굴'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  798: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0',
      'en': 'Alphascape V1.0',
      'fr': 'Alphastice v1.0',
      'ja': '次元の狭間オメガ：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  799: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0',
      'en': 'Alphascape V2.0',
      'fr': 'Alphastice v2.0',
      'ja': '次元の狭間オメガ：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  800: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0',
      'en': 'Alphascape V3.0',
      'fr': 'Alphastice v3.0',
      'ja': '次元の狭間オメガ：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  801: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0',
      'en': 'Alphascape V4.0',
      'fr': 'Alphastice v4.0',
      'ja': '次元の狭間オメガ：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  802: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境1',
      'de': 'Alphametrie 1.0 (episch)',
      'en': 'Alphascape V1.0 (Savage)',
      'fr': 'Alphastice v1.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編1',
      'ko': '차원의 틈 오메가: 알파편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  803: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境2',
      'de': 'Alphametrie 2.0 (episch)',
      'en': 'Alphascape V2.0 (Savage)',
      'fr': 'Alphastice v2.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編2',
      'ko': '차원의 틈 오메가: 알파편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  804: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境3',
      'de': 'Alphametrie 3.0 (episch)',
      'en': 'Alphascape V3.0 (Savage)',
      'fr': 'Alphastice v3.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編3',
      'ko': '차원의 틈 오메가: 알파편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  805: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '欧米茄零式时空狭缝 阿尔法幻境4',
      'de': 'Alphametrie 4.0 (episch)',
      'en': 'Alphascape V4.0 (Savage)',
      'fr': 'Alphastice v4.0 (sadique)',
      'ja': '次元の狭間オメガ零式：アルファ編4',
      'ko': '차원의 틈 오메가: 알파편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 92
  },
  806: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '保镖歼灭战',
      'de': 'Duell auf der Kugane-Brücke',
      'en': 'Kugane Ohashi',
      'fr': 'Le Pont Ohashi',
      'ja': '真ヨウジンボウ討滅戦',
      'ko': '진 요우진보 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  810: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀镇魂战',
      'de': 'Seelentanz - Suzaku',
      'en': 'Hells\' Kier',
      'fr': 'Le Nid des Lamentations',
      'ja': '朱雀征魂戦',
      'ko': '주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  811: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '朱雀诗魂战',
      'de': 'Seelensturm - Suzaku',
      'en': 'Hells\' Kier (Extreme)',
      'fr': 'Le Nid des Lamentations (extrême)',
      'ja': '極朱雀征魂戦',
      'ko': '극 주작 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 98
  },
  813: {
    'exVersion': 3,
    'name': {
      'cn': '雷克兰德',
      'de': 'Seenland',
      'en': 'Lakeland',
      'fr': 'Grand-Lac',
      'ja': 'レイクランド',
      'ko': '레이크랜드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 106
  },
  814: {
    'exVersion': 3,
    'name': {
      'cn': '珂露西亚岛',
      'de': 'Kholusia',
      'en': 'Kholusia',
      'fr': 'Kholusia',
      'ja': 'コルシア島',
      'ko': '콜루시아 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 107
  },
  815: {
    'exVersion': 3,
    'name': {
      'cn': '安穆·艾兰',
      'de': 'Amh Araeng',
      'en': 'Amh Araeng',
      'fr': 'Amh Araeng',
      'ja': 'アム・アレーン',
      'ko': '아므 아랭'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 108
  },
  816: {
    'exVersion': 3,
    'name': {
      'cn': '伊尔美格',
      'de': 'Il Mheg',
      'en': 'Il Mheg',
      'fr': 'Il Mheg',
      'ja': 'イル・メグ',
      'ko': '일 메그'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 109
  },
  817: {
    'exVersion': 3,
    'name': {
      'cn': '拉凯提卡大森林',
      'de': 'Der Große Wald Rak\'tika',
      'en': 'The Rak\'tika Greatwood',
      'fr': 'Rak\'tika',
      'ja': 'ラケティカ大森林',
      'ko': '라케티카 대삼림'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  818: {
    'exVersion': 3,
    'name': {
      'cn': '黑风海',
      'de': 'Tempest',
      'en': 'The Tempest',
      'fr': 'La Tempête',
      'ja': 'テンペスト',
      'ko': '템페스트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 111
  },
  819: {
    'exVersion': 3,
    'name': {
      'cn': '水晶都',
      'de': 'Crystarium',
      'en': 'The Crystarium',
      'fr': 'Cristarium',
      'ja': 'クリスタリウム',
      'ko': '크리스타리움'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 112
  },
  820: {
    'exVersion': 3,
    'name': {
      'cn': '游末邦',
      'de': 'Eulmore',
      'en': 'Eulmore',
      'fr': 'Eulmore',
      'ja': 'ユールモア',
      'ko': '율모어'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 113
  },
  821: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '水妖幻园多恩美格禁园',
      'de': 'Dohn Mheg',
      'en': 'Dohn Mheg',
      'fr': 'Dohn Mheg',
      'ja': '水妖幻園 ドォーヌ・メグ',
      'ko': '도느 메그'
    },
    'offsetX': 0,
    'offsetY': 200,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  822: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '伪造天界格鲁格火山',
      'de': 'Der Gulg',
      'en': 'Mt. Gulg',
      'fr': 'Mont Gulg',
      'ja': '偽造天界 グルグ火山',
      'ko': '굴그 화산'
    },
    'offsetX': -188,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  823: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '文明古迹奇坦那神影洞',
      'de': 'Irrungen der Qitari',
      'en': 'The Qitana Ravel',
      'fr': 'L\'Enchevêtrement des Qitari',
      'ja': '古跡探索 キタンナ神影洞',
      'ko': '키타나 신굴'
    },
    'offsetX': 0,
    'offsetY': -274,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  824: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙镇魂战',
      'de': 'Seelentanz - Seiryu',
      'en': 'The Wreath of Snakes',
      'fr': 'L\'Îlot des Amertumes',
      'ja': '青龍征魂戦',
      'ko': '청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  825: {
    'contentType': 4,
    'exVersion': 2,
    'name': {
      'cn': '青龙诗魂战',
      'de': 'Seelensturm - Seiryu',
      'en': 'The Wreath of Snakes (Extreme)',
      'fr': 'L\'Îlot des Amertumes (extrême)',
      'ja': '極青龍征魂戦',
      'ko': '극 청룡 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 99
  },
  826: {
    'contentType': 5,
    'exVersion': 2,
    'name': {
      'cn': '乐欲之所瓯博讷修道院',
      'de': 'Kloster von Orbonne',
      'en': 'The Orbonne Monastery',
      'fr': 'Le Monastère d\'Orbonne',
      'ja': '楽欲の僧院 オーボンヌ',
      'ko': '오본느 수도원'
    },
    'offsetX': -545,
    'offsetY': -663,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  827: {
    'contentType': 26,
    'exVersion': 2,
    'name': {
      'cn': '禁地优雷卡 丰水之地',
      'de': 'Eureka Hydatos',
      'en': 'The Forbidden Land, Eureka Hydatos',
      'fr': 'Eurêka Hydatos',
      'ja': '禁断の地 エウレカ：ヒュダトス編',
      'ko': '금단의 땅 에우레카: 히다토스편'
    },
    'offsetX': 0,
    'offsetY': 475,
    'sizeFactor': 100,
    'weatherRate': 100
  },
  830: {
    'contentType': 7,
    'exVersion': 2,
    'name': {
      'cn': '英雄挽歌',
      'de': 'Requiem der Helden',
      'en': 'A Requiem for Heroes',
      'fr': 'Un requiem pour les héros',
      'ja': '英雄への鎮魂歌',
      'ko': '영웅을 위한 진혼가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  831: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '多玛方城战：东风战4人亲友桌（不带食断）',
      'de': '4-Spieler-Mahjong (schnelle Partie, Kuitan deaktiviert)',
      'en': 'Four-player Mahjong (Quick Match, Kuitan Disabled)',
      'fr': 'Mahjong domien<Indent/>: 4 joueurs (partie rapide sans kuitan)',
      'ja': 'ドマ式麻雀：東風戦4人セット卓（クイタン無し）',
      'ko': '작패유희: 동풍전 4인용 탁자(부르기 단요구 없음)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  832: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '空军装甲驾驶员',
      'de': 'Luftwaffe, Feuer frei!',
      'en': 'Air Force One',
      'fr': 'As de l\'air',
      'ja': '出撃！ エアフォースパイロット',
      'ko': '출격! 에어포스 조종사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  834: {
    'contentType': 7,
    'exVersion': 0,
    'name': {
      'cn': '风之使者',
      'de': 'Durch den Sturm und zurück',
      'en': 'Messenger of the Winds',
      'fr': 'La Messagère du vent',
      'ja': '来訪せし風の御使',
      'ko': '바람의 어사'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 101
  },
  836: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '避暑离宫马利卡大井',
      'de': 'Malikahs Brunnen',
      'en': 'Malikah\'s Well',
      'fr': 'Le Puits de Malikah',
      'ja': '爽涼離宮 マリカの大井戸',
      'ko': '말리카 큰우물'
    },
    'offsetX': -65,
    'offsetY': -30,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  837: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '遇袭集落水滩村',
      'de': 'Holminster',
      'en': 'Holminster Switch',
      'fr': 'Holminster',
      'ja': '殺戮郷村 ホルミンスター',
      'ko': '홀민스터'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 102
  },
  838: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '末日暗影亚马乌罗提',
      'de': 'Amaurot',
      'en': 'Amaurot',
      'fr': 'Amaurote',
      'ja': '終末幻想 アーモロート',
      'ko': '아모로트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 105
  },
  840: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '异界遗构希尔科斯孪晶塔',
      'de': 'Der Kristallzwilling',
      'en': 'The Twinning',
      'fr': 'La Macle de Syrcus',
      'ja': '異界遺構 シルクス・ツイニング',
      'ko': '쌍둥이 시르쿠스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  841: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '创造机构阿尼德罗学院',
      'de': 'Akadaemia Anyder',
      'en': 'Akadaemia Anyder',
      'fr': 'Akadaemia Anydre',
      'ja': '創造機関 アナイダアカデミア',
      'ko': '애나이더 아카데미아'
    },
    'offsetX': 0,
    'offsetY': 30,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  845: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼灭战',
      'de': 'Offenbarung - Titania',
      'en': 'The Dancing Plague',
      'fr': 'La Valse du Monarque',
      'ja': 'ティターニア討滅戦',
      'ko': '티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  846: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼灭战',
      'de': 'Offenbarung - Innozenz',
      'en': 'The Crown of the Immaculate',
      'fr': 'La Couronne de l\'Immaculé',
      'ja': 'イノセンス討滅戦',
      'ko': '이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  847: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯歼灭战',
      'de': 'Offenbarung - Hades',
      'en': 'The Dying Gasp',
      'fr': 'Le Râle de l\'Agonie',
      'ja': 'ハーデス討滅戦',
      'ko': '하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  848: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '无瑕灵君歼殛战',
      'de': 'Letzte Läuterung - Innozenz',
      'en': 'The Crown of the Immaculate (Extreme)',
      'fr': 'La Couronne de l\'Immaculé (extrême)',
      'ja': '極イノセンス討滅戦',
      'ko': '극 이노센스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 104
  },
  849: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung',
      'en': 'Eden\'s Gate: Resurrection',
      'fr': 'L\'Éveil d\'Éden - Résurrection',
      'ja': '希望の園エデン：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  850: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft',
      'en': 'Eden\'s Gate: Descent',
      'fr': 'L\'Éveil d\'Éden - Descente',
      'ja': '希望の園エデン：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  851: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung',
      'en': 'Eden\'s Gate: Inundation',
      'fr': 'L\'Éveil d\'Éden - Déluge',
      'ja': '希望の園エデン：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  852: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung',
      'en': 'Eden\'s Gate: Sepulture',
      'fr': 'L\'Éveil d\'Éden - Inhumation',
      'ja': '希望の園エデン：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  853: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章1',
      'de': 'Edens Erwachen - Auferstehung (episch)',
      'en': 'Eden\'s Gate: Resurrection (Savage)',
      'fr': 'L\'Éveil d\'Éden - Résurrection (sadique)',
      'ja': '希望の園エデン零式：覚醒編1',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  854: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章2',
      'de': 'Edens Erwachen - Niederkunft (episch)',
      'en': 'Eden\'s Gate: Descent (Savage)',
      'fr': 'L\'Éveil d\'Éden - Descente (sadique)',
      'ja': '希望の園エデン零式：覚醒編2',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  855: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章3',
      'de': 'Edens Erwachen - Überflutung (episch)',
      'en': 'Eden\'s Gate: Inundation (Savage)',
      'fr': 'L\'Éveil d\'Éden - Déluge (sadique)',
      'ja': '希望の園エデン零式：覚醒編3',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  856: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 觉醒之章4',
      'de': 'Edens Erwachen - Beerdigung (episch)',
      'en': 'Eden\'s Gate: Sepulture (Savage)',
      'fr': 'L\'Éveil d\'Éden - Inhumation (sadique)',
      'ja': '希望の園エデン零式：覚醒編4',
      'ko': '희망의 낙원 에덴: 각성편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  858: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '缇坦妮雅歼殛战',
      'de': 'Letzte Läuterung - Titania',
      'en': 'The Dancing Plague (Extreme)',
      'fr': 'La Valse du Monarque (extrême)',
      'ja': '極ティターニア討滅戦',
      'ko': '극 티타니아 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 103
  },
  859: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '机关、诅咒、剧毒与……',
      'de': 'Der Beichtstuhl von Toupasa dem Älteren',
      'en': 'Legend of the Not-so-hidden Temple',
      'fr': 'Le Confessionnal de Toupasa l\'ancien',
      'ja': '仕掛けと呪いと毒と',
      'ko': '함정과 저주와 독'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  860: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '废都拿巴示艾兰',
      'de': 'Vater und Bruder',
      'en': 'Coming Clean',
      'fr': 'Sur les rails de Nabaath Areng',
      'ja': '廃都ナバスアレン',
      'ko': '나바스아렝 폐허'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 102
  },
  873: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '摇摆的天平',
      'de': 'Ob Mitleid oder Hass',
      'en': 'The Hardened Heart',
      'fr': 'Naissance d\'un bourreau',
      'ja': '揺れる天秤',
      'ko': '흔들리는 천칭'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  874: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '古代大再生魔法',
      'de': 'Alter Zauber',
      'en': 'The Lost and the Found',
      'fr': 'Magie ancestrale',
      'ja': '古の大再生魔法',
      'ko': '고대의 대재생 마법'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 110
  },
  875: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '勇敢的猎人',
      'de': 'Der Legende auf der Spur',
      'en': 'The Hunter\'s Legacy',
      'fr': 'La chasseuse de légende',
      'ja': '勇気の狩人',
      'ko': '용기 있는 사냥꾼'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 63
  },
  876: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '奈贝尔特的后悔',
      'de': 'Ein großes Opfer',
      'en': 'Nyelbert\'s Lament',
      'fr': 'Une cupidité bien généreuse',
      'ja': 'ナイルベルトの後悔',
      'ko': '나일베르트의 후회'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  879: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝境',
      'de': 'Verliese von Lyhe Ghiah',
      'en': 'The Dungeons of Lyhe Ghiah',
      'fr': 'Le Donjon hypogéen du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン',
      'ko': '보물고 리예 기아 지하미궁'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  882: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '复制工厂废墟',
      'de': 'Die kopierte Fabrik',
      'en': 'The Copied Factory',
      'fr': 'La réplique de l\'usine désaffectée',
      'ja': '複製サレタ工場廃墟',
      'ko': '복제된 공장 폐허'
    },
    'offsetX': 610,
    'offsetY': 70,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  884: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔法宫殿宇宙宫',
      'de': 'Chateau Cosmea',
      'en': 'The Grand Cosmos',
      'fr': 'Le Cosmos coruscant',
      'ja': '魔法宮殿 グラン・コスモス',
      'ko': '그랑 코스모스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  885: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '哈迪斯孤念歼灭战',
      'de': 'Letzte Läuterung - Hades',
      'en': 'The Minstrel\'s Ballad: Hades\'s Elegy',
      'fr': 'Le Râle de l\'Agonie (extrême)',
      'ja': '極ハーデス討滅戦',
      'ko': '극 하데스 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 105
  },
  887: {
    'contentType': 28,
    'exVersion': 3,
    'name': {
      'cn': '亚历山大绝境战',
      'de': 'Alexander (fatal)',
      'en': 'The Epic of Alexander (Ultimate)',
      'fr': 'L\'Odyssée d\'Alexander (fatal)',
      'ja': '絶アレキサンダー討滅戦',
      'ko': '절 알렉산더 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  888: {
    'contentType': 6,
    'exVersion': 0,
    'name': {
      'cn': '昂萨哈凯尔（竞争战）',
      'de': 'Onsal Hakair (Danshig Naadam)',
      'en': 'Onsal Hakair (Danshig Naadam)',
      'fr': 'Onsal Hakair (Danshig Naadam)',
      'ja': 'オンサル・ハカイル (終節戦)',
      'ko': '온살 하카이르(계절끝 합전)'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 117
  },
  893: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '纯白誓约、漆黑密约',
      'de': 'Der Wolf und der Drachenreiter',
      'en': 'Vows of Virtue, Deeds of Cruelty',
      'fr': 'Vœux de vertu, actes de cruauté',
      'ja': '白き誓約、黒き密約',
      'ko': '하얀 서약, 검은 밀약'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  894: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '我心依旧',
      'de': 'Trubel im Traumland',
      'en': 'As the Heart Bids',
      'fr': 'À l\'écoute de soi',
      'ja': 'この心が望むがままに',
      'ko': '이 마음이 원하는 대로'
    },
    'offsetX': -12,
    'offsetY': 50,
    'sizeFactor': 400,
    'weatherRate': 40
  },
  897: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵破坏作战',
      'de': 'Rubinfeuer - Entfesselung',
      'en': 'Cinder Drift',
      'fr': 'Les Nuées de Brandons',
      'ja': 'ルビーウェポン破壊作戦',
      'ko': '루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  898: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黑风海底阿尼德罗追忆馆',
      'de': 'Anamnesis Anyder',
      'en': 'Anamnesis Anyder',
      'fr': 'Anamnesis Anydre',
      'ja': '黒風海底 アニドラス・アナムネーシス',
      'ko': '애니드라스 아남네시스'
    },
    'offsetX': 100,
    'offsetY': -390,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  900: {
    'contentType': 16,
    'exVersion': 0,
    'name': {
      'cn': '出海垂钓',
      'de': 'Auf großer Fahrt',
      'en': 'Ocean Fishing',
      'fr': 'Pêche en mer',
      'ja': 'オーシャンフィッシング',
      'ko': '먼바다 낚시'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 14
  },
  902: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung',
      'en': 'Eden\'s Verse: Fulmination',
      'fr': 'Les Accords d\'Éden - Fulmination',
      'ja': '希望の園エデン：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  903: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei',
      'en': 'Eden\'s Verse: Furor',
      'fr': 'Les Accords d\'Éden - Fureur',
      'ja': '希望の園エデン：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  904: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm',
      'en': 'Eden\'s Verse: Iconoclasm',
      'fr': 'Les Accords d\'Éden - Iconoclasme',
      'ja': '希望の園エデン：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  905: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung',
      'en': 'Eden\'s Verse: Refulgence',
      'fr': 'Les Accords d\'Éden - Éclat',
      'ja': '希望の園エデン：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  906: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章1',
      'de': 'Edens Resonanz - Entladung (episch)',
      'en': 'Eden\'s Verse: Fulmination (Savage)',
      'fr': 'Les Accords d\'Éden - Fulmination (sadique)',
      'ja': '希望の園エデン零式：共鳴編1',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  907: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章2',
      'de': 'Edens Resonanz - Raserei (episch)',
      'en': 'Eden\'s Verse: Furor (Savage)',
      'fr': 'Les Accords d\'Éden - Fureur (sadique)',
      'ja': '希望の園エデン零式：共鳴編2',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  908: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章3',
      'de': 'Edens Resonanz - Bildersturm (episch)',
      'en': 'Eden\'s Verse: Iconoclasm (Savage)',
      'fr': 'Les Accords d\'Éden - Iconoclasme (sadique)',
      'ja': '希望の園エデン零式：共鳴編3',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  909: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 共鸣之章4',
      'de': 'Edens Resonanz - Erstarrung (episch)',
      'en': 'Eden\'s Verse: Refulgence (Savage)',
      'fr': 'Les Accords d\'Éden - Éclat (sadique)',
      'ja': '希望の園エデン零式：共鳴編4',
      'ko': '희망의 낙원 에덴: 공명편(영웅) 4'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  911: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒蒸发事件',
      'de': 'Der Bozja-Vorfall',
      'en': 'The Bozja Incident',
      'fr': 'Prélude à la catastrophe',
      'ja': 'シタデル・ボズヤ蒸発事変',
      'ko': '보즈야 사건'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 123
  },
  912: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '红宝石神兵狂想作战',
      'de': 'Rubinfeuer - Trauma',
      'en': 'Cinder Drift (Extreme)',
      'fr': 'Les Nuées de Brandons (extrême)',
      'ja': '極ルビーウェポン破壊作戦',
      'ko': '극 루비 웨폰 파괴작전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 28
  },
  913: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '博兹雅堡垒追忆战',
      'de': 'Memoria Misera (extrem)',
      'en': 'Memoria Misera (Extreme)',
      'fr': 'Memoria Misera (extrême)',
      'ja': '極シタデル・ボズヤ追憶戦',
      'ko': '극 보즈야 추억전'
    },
    'offsetX': -35,
    'offsetY': 683,
    'sizeFactor': 400,
    'weatherRate': 123
  },
  914: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '英雄无法安息',
      'de': 'Von schlafenden Helden',
      'en': 'A Sleep Disturbed',
      'fr': 'L\'épreuve ronka',
      'ja': '汝、英雄の眠り妨げるは',
      'ko': '그대, 영웅의 잠을 방해하는가'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 0
  },
  916: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '暗影决战诺弗兰特',
      'de': 'Schlacht um Norvrandt',
      'en': 'The Heroes\' Gauntlet',
      'fr': 'La Traversée de Norvrandt',
      'ja': '漆黒決戦 ノルヴラント',
      'ko': '노르브란트'
    },
    'offsetX': 626,
    'offsetY': -611,
    'sizeFactor': 200,
    'weatherRate': 125
  },
  917: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '人偶军事基地',
      'de': 'Die Puppenfestung',
      'en': 'The Puppets\' Bunker',
      'fr': 'La base militaire des Pantins',
      'ja': '人形タチノ軍事基地',
      'ko': '인형들의 군사 기지'
    },
    'offsetX': 290,
    'offsetY': -190,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  920: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '南方博兹雅战线',
      'de': 'Bozja-Südfront',
      'en': 'The Bozjan Southern Front',
      'fr': 'Front sud de Bozja',
      'ja': '南方ボズヤ戦線',
      'ko': '남부 보즈야 전선'
    },
    'offsetX': -127,
    'offsetY': -424,
    'sizeFactor': 100,
    'weatherRate': 124
  },
  922: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士歼灭战',
      'de': 'Krieger des Lichts',
      'en': 'The Seat of Sacrifice',
      'fr': 'Le Trône du Sacrifice',
      'ja': 'ウォーリア・オブ・ライト討滅戦',
      'ko': '빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 125
  },
  923: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '光之战士幻耀歼灭战',
      'de': 'Krieger des Lichts (extrem)',
      'en': 'The Seat of Sacrifice (Extreme)',
      'fr': 'Le Trône du Sacrifice (extrême)',
      'ja': '極ウォーリア・オブ・ライト討滅戦',
      'ko': '극 빛의 전사 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 126
  },
  924: {
    'contentType': 9,
    'exVersion': 3,
    'name': {
      'cn': '梦羽宝殿',
      'de': 'Das Karussell von Lyhe Ghiah',
      'en': 'The Shifting Oubliettes of Lyhe Ghiah',
      'fr': 'Le Jardin secret du Lyhe Ghiah',
      'ja': '宝物庫 リェー・ギア・ダンジョン祭殿',
      'ko': '보물고 리예 기아 지하미궁 제전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  925: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '飞翔吧，前往维尔利特！',
      'de': 'Luftangriff auf Werlyt',
      'en': 'Sleep Now in Sapphire',
      'fr': 'Sur la mer de saphir',
      'ja': '飛べ！ ウェルリトへ ',
      'ko': '날아라! 웰리트를 향하여'
    },
    'offsetX': 15,
    'offsetY': -610,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  929: {
    'contentType': 16,
    'exVersion': 1,
    'name': {
      'cn': '天上福地云冠群岛',
      'de': 'Das Diadem - Erschließung',
      'en': 'The Diadem',
      'fr': 'Le Diadème',
      'ja': '雲海採集 ディアデム諸島',
      'ko': '디아뎀 제도'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 68
  },
  930: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '希瓦幻巧战',
      'de': 'Traumprüfung - Shiva',
      'en': 'The Akh Afah Amphitheatre (Unreal)',
      'fr': 'L\'Amphithéâtre d\'Akh Afah (irréel)',
      'ja': '幻シヴァ討滅戦',
      'ko': '환 시바 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 46
  },
  932: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '褪色的记忆',
      'de': 'Verblasste Erinnerungen',
      'en': 'Faded Memories',
      'fr': 'Souvenir périssable',
      'ja': '色あせた記憶',
      'ko': '빛바랜 기억'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  933: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '魔术工房玛托雅工作室',
      'de': 'Matoyas Atelier',
      'en': 'Matoya\'s Relict',
      'fr': 'L\'Atelier abandonné de Matoya',
      'ja': '魔術工房 マトーヤのアトリエ',
      'ko': '마토야의 공방'
    },
    'offsetX': 0,
    'offsetY': -75,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  934: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵破坏作战',
      'de': 'Smaragdsturm - Entfesselung',
      'en': 'Castrum Marinum',
      'fr': 'Castrum Marinum',
      'ja': 'エメラルドウェポン破壊作戦',
      'ko': '에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  935: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '绿宝石神兵狂想作战',
      'de': 'Smaragdsturm - Trauma',
      'en': 'Castrum Marinum (Extreme)',
      'fr': 'Castrum Marinum (extrême)',
      'ja': '極エメラルドウェポン破壊作戦',
      'ko': '극 에메랄드 웨폰 파괴작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  936: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '女王古殿',
      'de': 'Delubrum Reginae',
      'en': 'Delubrum Reginae',
      'fr': 'Delubrum Reginae',
      'ja': 'グンヒルド・ディルーブラム',
      'ko': '군힐드 사원'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  937: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '零式女王古殿',
      'de': 'Delubrum Reginae (episch)',
      'en': 'Delubrum Reginae (Savage)',
      'fr': 'Delubrum Reginae (sadique)',
      'ja': 'グンヒルド・ディルーブラム零式',
      'ko': '군힐드 사원(영웅)'
    },
    'offsetX': 0,
    'offsetY': -378,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  938: {
    'contentType': 2,
    'exVersion': 3,
    'name': {
      'cn': '黄金平原帕戈尔赞草原',
      'de': 'Die Goldene Ebene von Paglth\'an',
      'en': 'Paglth\'an',
      'fr': 'La grande prairie de Paglth\'an',
      'ja': '黄金平原 パガルザン',
      'ko': '파글단'
    },
    'offsetX': 415,
    'offsetY': -110,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  940: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：官方锦标赛',
      'de': 'Triple Triad: Manderville-Turnier',
      'en': 'Triple Triad Open Tournament',
      'fr': 'Tournoi officiel de Triple Triade',
      'ja': 'トリプルトライアド：オフィシャルトーナメント',
      'ko': '트리플 트라이어드: 공식 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  941: {
    'contentType': 19,
    'exVersion': 0,
    'name': {
      'cn': '九宫幻卡：锦标赛对局室',
      'de': 'Triple Triad: Privatturnier',
      'en': 'Triple Triad Invitational Parlor',
      'fr': 'Salle de tournoi libre de Triple Triade',
      'ja': 'トリプルトライアド：カスタムトーナメントルーム',
      'ko': '트리플 트라이어드: 친선 토너먼트'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 800,
    'weatherRate': 0
  },
  942: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra',
      'en': 'Eden\'s Promise: Umbra',
      'fr': 'La Promesse d\'Éden - Nuée',
      'ja': '希望の園エデン：再生編1',
      'ko': '희망의 낙원 에덴: 재생편 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  943: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei',
      'en': 'Eden\'s Promise: Litany',
      'fr': 'La Promesse d\'Éden - Litanie',
      'ja': '希望の園エデン：再生編2',
      'ko': '희망의 낙원 에덴: 재생편 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  944: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose',
      'en': 'Eden\'s Promise: Anamorphosis',
      'fr': 'La Promesse d\'Éden - Anamorphose',
      'ja': '希望の園エデン：再生編3',
      'ko': '희망의 낙원 에덴: 재생편 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  945: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit',
      'en': 'Eden\'s Promise: Eternity',
      'fr': 'La Promesse d\'Éden - Éternité',
      'ja': '希望の園エデン：再生編4',
      'ko': '희망의 낙원 에덴: 재생편 4'
    },
    'offsetX': -71,
    'offsetY': 23,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  946: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章1',
      'de': 'Edens Verheißung - Umbra (episch)',
      'en': 'Eden\'s Promise: Umbra (Savage)',
      'fr': 'La Promesse d\'Éden - Nuée (sadique)',
      'ja': '希望の園エデン零式：再生編1',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 1'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  947: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章2',
      'de': 'Edens Verheißung - Litanei (episch)',
      'en': 'Eden\'s Promise: Litany (Savage)',
      'fr': 'La Promesse d\'Éden - Litanie (sadique)',
      'ja': '希望の園エデン零式：再生編2',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 2'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  948: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章3',
      'de': 'Edens Verheißung - Anamorphose (episch)',
      'en': 'Eden\'s Promise: Anamorphosis (Savage)',
      'fr': 'La Promesse d\'Éden - Anamorphose (sadique)',
      'ja': '希望の園エデン零式：再生編3',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 3'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  949: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '伊甸零式希望乐园 再生之章4',
      'de': 'Edens Verheißung - Ewigkeit (episch)',
      'en': 'Eden\'s Promise: Eternity (Savage)',
      'fr': 'La Promesse d\'Éden - Éternité (sadique)',
      'ja': '希望の園エデン零式：再生編4',
      'ko': '희망의 낙원 에덴: 재생편(영웅) 4'
    },
    'offsetX': 0,
    'offsetY': 75,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  950: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵捕获作战',
      'de': 'Diamantblitz - Entfesselung',
      'en': 'The Cloud Deck',
      'fr': 'Le Tillac des Cirrus',
      'ja': 'ダイヤウェポン捕獲作戦',
      'ko': '다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  951: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '钻石神兵狂想作战',
      'de': 'Diamantblitz - Trauma',
      'en': 'The Cloud Deck (Extreme)',
      'fr': 'Le Tillac des Cirrus (extrême)',
      'ja': '極ダイヤウェポン捕獲作戦',
      'ko': '극 다이아몬드 웨폰 포획작전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  952: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '异形楼阁佐特塔',
      'de': 'Der Turm von Zot',
      'en': 'The Tower of Zot',
      'fr': 'La tour de Zott',
      'ja': '異形楼閣 ゾットの塔',
      'ko': '조트 탑'
    },
    'offsetX': -50,
    'offsetY': -50,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  953: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '泰坦幻巧战',
      'de': 'Traumprüfung - Titan',
      'en': 'The Navel (Unreal)',
      'fr': 'Le Nombril (irréel)',
      'ja': '幻タイタン討滅戦',
      'ko': '환 타이탄 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  954: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '威尔布兰德扬帆起航',
      'de': 'Gute Winde für Vylbrand',
      'en': 'The Great Ship Vylbrand',
      'fr': 'Un navire nommé Vylbrand',
      'ja': 'バイルブランドの船出',
      'ko': '바일브랜드 출항'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 23
  },
  955: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '神佑女王',
      'de': 'Hinab in die Ruinen',
      'en': 'Fit for a Queen',
      'fr': 'Que les Dieux gardent la Reine',
      'ja': 'ゴッド・セイブ・ザ・クイーン',
      'ko': '갓 세이브 더 퀸'
    },
    'offsetX': 0,
    'offsetY': -750,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  956: {
    'exVersion': 4,
    'name': {
      'cn': '迷津',
      'de': 'Labyrinthos',
      'en': 'Labyrinthos',
      'fr': 'Le Labyrinthos',
      'ja': 'ラヴィリンソス',
      'ko': '라비린토스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 131
  },
  957: {
    'exVersion': 4,
    'name': {
      'cn': '萨维奈岛',
      'de': 'Thavnair',
      'en': 'Thavnair',
      'fr': 'Thavnair',
      'ja': 'サベネア島',
      'ko': '사베네어 섬'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 132
  },
  958: {
    'exVersion': 4,
    'name': {
      'cn': '加雷马',
      'de': 'Garlemald',
      'en': 'Garlemald',
      'fr': 'Garlemald',
      'ja': 'ガレマルド',
      'ko': '갈레말드'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 133
  },
  959: {
    'exVersion': 4,
    'name': {
      'cn': '叹息海',
      'de': 'Mare Lamentorum',
      'en': 'Mare Lamentorum',
      'fr': 'Mare Lamentorum',
      'ja': '嘆きの海',
      'ko': '비탄의 바다'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 135
  },
  960: {
    'exVersion': 4,
    'name': {
      'cn': '天外天垓',
      'de': 'Ultima Thule',
      'en': 'Ultima Thule',
      'fr': 'Ultima Thulé',
      'ja': 'ウルティマ・トゥーレ',
      'ko': '울티마 툴레'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 136
  },
  961: {
    'exVersion': 4,
    'name': {
      'cn': '厄尔庇斯',
      'de': 'Elpis',
      'en': 'Elpis',
      'fr': 'Elpis',
      'ja': 'エルピス',
      'ko': '엘피스'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 134
  },
  962: {
    'exVersion': 4,
    'name': {
      'cn': '旧萨雷安',
      'de': 'Alt-Sharlayan',
      'en': 'Old Sharlayan',
      'fr': 'Vieille Sharlayan',
      'ja': 'オールド・シャーレアン',
      'ko': '올드 샬레이안'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 137
  },
  963: {
    'exVersion': 4,
    'name': {
      'cn': '拉札罕',
      'de': 'Radz-at-Han',
      'en': 'Radz-at-Han',
      'fr': 'Radz-at-Han',
      'ja': 'ラザハン',
      'ko': '라자한'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 200,
    'weatherRate': 138
  },
  966: {
    'contentType': 5,
    'exVersion': 3,
    'name': {
      'cn': '希望之炮台：“塔”',
      'de': 'Der Turm, Paradigmenbrecher',
      'en': 'The Tower at Paradigm\'s Breach',
      'fr': 'La tour de la Contingence',
      'ja': '希望ノ砲台：「塔」',
      'ko': '희망의 포대: \'탑\''
    },
    'offsetX': 808,
    'offsetY': -772,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  968: {
    'contentType': 28,
    'exVersion': 4,
    'name': {
      'cn': '幻想龙诗绝境战',
      'de': 'Drachenkrieg (fatal)',
      'en': 'Dragonsong\'s Reprise (Ultimate)',
      'fr': 'La Guerre du chant des dragons (fatal)',
      'ja': '絶竜詩戦争',
      'ko': '절 용시전쟁'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 0
  },
  969: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '魔导神门巴别塔',
      'de': 'Der Turm von Babil',
      'en': 'The Tower of Babil',
      'fr': 'La tour de Babil',
      'ja': '魔導神門 バブイルの塔',
      'ko': '바브일 탑'
    },
    'offsetX': 270,
    'offsetY': -300,
    'sizeFactor': 200,
    'weatherRate': 28
  },
  970: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '末日树海万相森国',
      'de': 'Vanaspati',
      'en': 'Vanaspati',
      'fr': 'Vanaspati',
      'ja': '終末樹海 ヴァナスパティ',
      'ko': '바나스파티'
    },
    'offsetX': 280,
    'offsetY': 8,
    'sizeFactor': 200,
    'weatherRate': 141
  },
  972: {
    'contentType': 4,
    'exVersion': 3,
    'name': {
      'cn': '利维亚桑幻巧战',
      'de': 'Traumprüfung - Leviathan',
      'en': 'The <Emphasis>Whorleater</Emphasis> (Unreal)',
      'fr': 'Le Briseur de marées (irréel)',
      'ja': '幻リヴァイアサン討滅戦',
      'ko': '환 리바이어선 토벌전'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 400,
    'weatherRate': 38
  },
  973: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '最终幻想末世终迹',
      'de': 'Das Sternengrab',
      'en': 'The Dead Ends',
      'fr': 'L\'Issue aux Impasses',
      'ja': '最終幻想 レムナント',
      'ko': '잔해별'
    },
    'offsetX': -310,
    'offsetY': 15,
    'sizeFactor': 200,
    'weatherRate': 144
  },
  974: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '创造环境极北造物院',
      'de': 'Ktisis Hyperboreia',
      'en': 'Ktisis Hyperboreia',
      'fr': 'L\'Hyperborée',
      'ja': '創造環境 ヒュペルボレア造物院',
      'ko': '휘페르보레아 조물원'
    },
    'offsetX': 40,
    'offsetY': -150,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  975: {
    'contentType': 29,
    'exVersion': 3,
    'name': {
      'cn': '扎杜诺尔高原',
      'de': 'Zadnor-Hochebene',
      'en': 'Zadnor',
      'fr': 'Hauts plateaux de Zadnor',
      'ja': 'ザトゥノル高原',
      'ko': '자트노르 고원'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 130
  },
  976: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '乐园都市笑笑镇',
      'de': 'Smileton',
      'en': 'Smileton',
      'fr': 'Risette-sur-lune',
      'ja': '楽園都市 スマイルトン',
      'ko': '스마일턴'
    },
    'offsetX': -22,
    'offsetY': -42,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  977: {
    'contentType': 7,
    'exVersion': 3,
    'name': {
      'cn': '死斗至黎明',
      'de': 'Kampf im Morgengrauen',
      'en': 'Death Unto Dawn',
      'fr': 'Aube meurtrière',
      'ja': '黎明の死闘',
      'ko': '여명의 사투'
    },
    'offsetX': 0,
    'offsetY': 0,
    'sizeFactor': 100,
    'weatherRate': 114
  },
  978: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '星海深幽寻因星晶镜',
      'de': 'Das Aitiaskop',
      'en': 'The Aitiascope',
      'fr': 'Le Prisme de l\'Aitia',
      'ja': '星海潜航 アイティオン星晶鏡',
      'ko': '아이티온 별현미경'
    },
    'offsetX': 8,
    'offsetY': -501,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  986: {
    'contentType': 2,
    'exVersion': 4,
    'name': {
      'cn': '电脑梦境斯提格玛四',
      'de': 'Stigma-Holometrie',
      'en': 'The Stigma Dreamscape',
      'fr': 'Rêve électrique de Stigma-4',
      'ja': '電脳夢想 スティグマ・フォー',
      'ko': '스티그마-4'
    },
    'offsetX': 144,
    'offsetY': -14,
    'sizeFactor': 200,
    'weatherRate': 140
  },
  992: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克歼灭战',
      'de': 'Prophetie - Zodiark',
      'en': 'The Dark Inside',
      'fr': 'Le Cratère des Martyrs',
      'ja': 'ゾディアーク討滅戦',
      'ko': '조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  993: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '佐迪亚克暝暗歼灭战',
      'de': 'Eschatos - Zodiark',
      'en': 'The Minstrel\'s Ballad: Zodiark\'s Fall',
      'fr': 'Le Cratère des Martyrs (extrême)',
      'ja': '極ゾディアーク討滅戦',
      'ko': '극 조디아크 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  994: {
    'contentType': 22,
    'exVersion': 0,
    'name': {
      'cn': '滑稽灵殿闹鬼盛宴',
      'de': 'Lustiges Bankett',
      'en': 'The Phantoms\' Feast',
      'fr': 'Le banquet cauchemardesque',
      'ja': '道化饗宴 ホーンテッドフィースト',
      'ko': '유령의 연회'
    },
    'offsetX': 20,
    'offsetY': 10,
    'sizeFactor': 200,
    'weatherRate': 0
  },
  995: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林歼灭战',
      'de': 'Prophetie - Hydaelyn',
      'en': 'The Mothercrystal',
      'fr': 'Le Cristal-mère',
      'ja': 'ハイデリン討滅戦',
      'ko': '하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  996: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '海德林晖光歼灭战',
      'de': 'Eschatos - Hydaelyn',
      'en': 'The Minstrel\'s Ballad: Hydaelyn\'s Call',
      'fr': 'Le Cristal-mère (extrême)',
      'ja': '極ハイデリン討滅戦',
      'ko': '극 하이델린 토벌전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 139
  },
  997: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '终结之战',
      'de': 'Prophetie - Endsängerin',
      'en': 'The Final Day',
      'fr': 'Le Répons final',
      'ja': '終焉の戦い',
      'ko': '종언의 결전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 116
  },
  998: {
    'contentType': 4,
    'exVersion': 4,
    'name': {
      'cn': '终极之战',
      'de': 'Eschatos - Endsängerin',
      'en': 'The Minstrel\'s Ballad: Endsinger\'s Aria',
      'fr': 'Le Répons final (extrême)',
      'ja': '終極の戦い',
      'ko': '종극의 결전'
    },
    'offsetX': -100,
    'offsetY': -100,
    'sizeFactor': 400,
    'weatherRate': 146
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);

/***/ }),

/***/ 334:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";

// EXTERNAL MODULE: ./resources/overlay_plugin_api.ts
var overlay_plugin_api = __webpack_require__(959);
// EXTERNAL MODULE: ./resources/util.ts
var util = __webpack_require__(509);
;// CONCATENATED MODULE: ./resources/player_override.ts



// Will redirect calls from `onPlayerChangedEvent` to |func| overriding with
// |playerName| and their job.  Job is important for raidboss.
// It might be nice to do HP, because otherwise the math section of
// Ridorana Lighthouse won't work.
//
// Other parts of the player (such that would help the jobs overlay run)
// are deliberately not included here, because it's impossible to run
// jobs remotely due to gauge data being local and many bits of information
// loaded from memory.
// @TODO: Swap the order of these arguments, make playerName optional instead
const addPlayerChangedOverrideListener = (func, playerName) => {
  let lastPlayerChangedEvent = null;
  let lastPlayerJob = null;
  const onPlayerChanged = e => {
    if (playerName !== undefined && playerName.length > 0) {
      e.detail.name = playerName;
      if (lastPlayerJob) {
        // Use the non-overridden job if we don't know an overridden one.
        e.detail.job = lastPlayerJob;
      }
    }
    lastPlayerChangedEvent = e;
    func(e);
  };
  (0,overlay_plugin_api/* addOverlayListener */.PS)('onPlayerChangedEvent', onPlayerChanged);
  if (playerName === undefined || playerName.length === 0) return;
  (0,overlay_plugin_api/* addOverlayListener */.PS)('PartyChanged', e => {
    const player = e.party.find(p => p.name === playerName);
    if (!player) return;
    const newJob = util/* default.jobEnumToJob */.Z.jobEnumToJob(player.job);
    if (newJob === lastPlayerJob) return;
    lastPlayerJob = newJob;
    // This event may come before the first onPlayerChangedEvent.
    if (lastPlayerChangedEvent) onPlayerChanged(lastPlayerChangedEvent);
  });
};

// Common UI for selecting a player.
// Only used for raidboss, but could ostensibly be reused for oopsy,
// if there's ever player specific stuff.
// TODO: it would be nice to show the "connected / not connected" bit in the UI.
const addRemotePlayerSelectUI = lang => {
  const instructionTextByLang = {
    en: 'Select a Player\n(the list will update when in an instance)',
    de: 'Wähle einen Spieler\n(Diese Liste aktualisiert sich, sobald eine Instance betretten wird)',
    fr: 'Sélectionner un joueur\n (la liste se mettra à jour dans une instance)',
    ja: 'プレーヤー名を選択してください\n(インスタンスに入るとリストが更新する)',
    cn: '请选择玩家名称\n(此列表将会在进入副本后更新)',
    ko: '플레이어를 선택하세요\n(인스턴스에 있으면 리스트가 업데이트됩니다.)'
  };
  const forceTTSByLang = {
    en: 'Force Enable Text To Speech',
    de: 'Erzwinge Text in Sprache (TTS)',
    fr: 'Forcer l\'activation de la synthèse vocale (TTS)',
    ja: 'TTSを強制的に有効化する',
    cn: '强制启用TTS',
    ko: 'TTS 기능을 활성화하기'
  };
  const buttonTextByLang = {
    en: 'Start Overlay',
    de: 'Start Overlay',
    fr: 'Démarrer l\'Overlay',
    ja: 'オーバーレイを起動',
    cn: '启用悬浮窗',
    ko: '오버레이 시작'
  };
  const defaultTextByLang = {
    en: '(no override)',
    de: '(kein überschreiben)',
    fr: '(pas de dérogation)',
    ja: '(既定値)',
    cn: '(默认值)',
    ko: '(플레이어 지정 안함)'
  };

  // TODO: probably should save forceTTS as well, maybe save some {} options?
  const kStorageKey = 'cactbot-last-selected-player';
  const savePlayerName = name => {
    window.localStorage.setItem(kStorageKey, name);
  };
  const loadPlayerName = () => {
    return window.localStorage.getItem(kStorageKey);
  };

  // Add common UI to select a player.
  const container = document.createElement('div');
  container.id = 'player-select';
  document.body.appendChild(container);
  const instructionElem = document.createElement('div');
  instructionElem.id = 'player-select-instructions';
  instructionElem.innerHTML = instructionTextByLang[lang] || instructionTextByLang['en'];
  container.appendChild(instructionElem);
  const listElem = document.createElement('div');
  listElem.id = 'player-select-list';
  container.appendChild(listElem);
  const ttsElem = document.createElement('input');
  ttsElem.type = 'checkbox';
  ttsElem.id = 'player-select-tts';
  ttsElem.name = 'player-select-tts';
  container.appendChild(ttsElem);
  const ttsLabel = document.createElement('label');
  ttsLabel.id = 'player-select-tts-label';
  ttsLabel.htmlFor = 'player-select-tts';
  ttsLabel.innerHTML = forceTTSByLang[lang] || forceTTSByLang['en'];
  container.appendChild(ttsLabel);
  const buttonElem = document.createElement('button');
  buttonElem.id = 'player-select-button';
  buttonElem.name = 'player-select-button';
  buttonElem.innerHTML = buttonTextByLang[lang] || buttonTextByLang['en'];
  container.appendChild(buttonElem);
  buttonElem.addEventListener('click', () => {
    const forceTTS = ttsElem.checked;
    let playerName = '';
    let radioIndex = 0;
    for (;;) {
      radioIndex++;
      const elem = document.getElementById(`player-radio-${radioIndex}`);
      if (!elem || !(elem instanceof HTMLInputElement)) break;
      if (!elem.checked) continue;
      playerName = elem.value;
      break;
    }
    if (playerName) savePlayerName(playerName);

    // Preserve existing parameters.
    const currentParams = new URLSearchParams(window.location.search);
    const paramMap = {};
    // Yes, this is (v, k) and not (k, v).
    currentParams.forEach((v, k) => paramMap[k] = decodeURIComponent(v));
    paramMap.player = playerName;
    // Use 1/0 to be consistent with other query parameters rather than string true/false.
    paramMap.forceTTS = forceTTS ? 1 : 0;

    // TODO: overlay_plugin_api.js doesn't support uri encoded OVERLAY_WS parameters.
    // So this can't use URLSearchParams.toString yet.  Manually build string.
    let search = '?';
    for (const [k, v] of Object.entries(paramMap)) search += `${k}=${v}&`;

    // Reload the page with more options.
    window.location.search = search;
  });
  const lastSelectedPlayer = loadPlayerName();
  const buildList = party => {
    while (listElem.firstChild) {
      if (listElem.lastChild) listElem.removeChild(listElem.lastChild);
    }
    let radioCount = 0;
    const addRadio = (name, value, extraClass) => {
      radioCount++;
      const inputName = `player-radio-${radioCount}`;
      const inputElem = document.createElement('input');
      inputElem.type = 'radio';
      inputElem.value = value;
      inputElem.id = inputName;
      inputElem.name = 'player-radio';
      inputElem.classList.add('player-radio', extraClass);
      listElem.appendChild(inputElem);
      const labelElem = document.createElement('label');
      labelElem.htmlFor = inputName;
      labelElem.innerHTML = name;
      listElem.appendChild(labelElem);
      return inputElem;
    };
    const defaultText = defaultTextByLang[lang] || defaultTextByLang['en'];
    const defaultElem = addRadio(defaultText, '', 'player-radio-default');
    defaultElem.checked = true;
    if (lastSelectedPlayer !== null && lastSelectedPlayer.length > 0) {
      const last = addRadio(lastSelectedPlayer, lastSelectedPlayer, 'player-radio-last');
      last.checked = true;
    }
    const partyPlayers = party.filter(p => p.inParty && p.name !== lastSelectedPlayer);
    const partyNames = partyPlayers.map(p => p.name).sort();
    for (const name of partyNames) addRadio(name, name, 'player-radio-party');
    const alliancePlayers = party.filter(p => !p.inParty && p.name !== lastSelectedPlayer);
    const allianceNames = alliancePlayers.map(p => p.name).sort();
    for (const name of allianceNames) addRadio(name, name, 'player-radio-alliance');
  };
  (0,overlay_plugin_api/* addOverlayListener */.PS)('PartyChanged', e => {
    buildList(e.party);
  });
  buildList([]);
};
// EXTERNAL MODULE: ./resources/user_config.ts
var user_config = __webpack_require__(456);
// EXTERNAL MODULE: ./ui/raidboss/data/raidboss_manifest.txt + 593 modules
var raidboss_manifest = __webpack_require__(212);
// EXTERNAL MODULE: ./resources/languages.ts
var languages = __webpack_require__(619);
// EXTERNAL MODULE: ./resources/not_reached.ts
var not_reached = __webpack_require__(62);
;// CONCATENATED MODULE: ./resources/timerbar.ts

class TimerBar extends HTMLElement {
  static get observedAttributes() {
    return ['duration', 'value', 'elapsed', 'hideafter', 'lefttext', 'centertext', 'righttext', 'width', 'height', 'bg', 'fg', 'stylefill', 'toward', 'loop'];
  }

  /** create an instance of TimerBar with attributes */
  static create(o) {
    if (!window.customElements.get('timer-bar')) window.customElements.define('timer-bar', TimerBar);
    const element = document.createElement('timer-bar');
    if (!o) return element;
    if (typeof o.duration === 'number') element.duration = o.duration;
    if (typeof o.value === 'number') element.value = o.value;
    if (typeof o.elapsed === 'number') element.elapsed = o.elapsed;
    if (typeof o.hideafter === 'number') element.hideafter = o.hideafter;
    if (typeof o.lefttext === 'string') element.lefttext = o.lefttext;
    if (typeof o.centertext === 'string') element.centertext = o.centertext;
    if (typeof o.righttext === 'string') element.righttext = o.righttext;
    if (typeof o.width === 'string') element.width = o.width;
    if (typeof o.height === 'string') element.height = o.height;
    if (typeof o.bg === 'string') element.bg = o.bg;
    if (typeof o.fg === 'string') element.fg = o.fg;
    if (typeof o.stylefill === 'string') element.stylefill = o.stylefill;
    if (typeof o.toward === 'string') element.toward = o.toward;
    if (typeof o.loop === 'boolean') element.loop = o.loop;
    return element;
  }

  // Background color.
  set bg(c) {
    if (c === null) this.removeAttribute('bg');else this.setAttribute('bg', c);
  }
  get bg() {
    return this.getAttribute('bg');
  }

  // Foreground color.
  set fg(c) {
    if (c === null) this.removeAttribute('fg');else this.setAttribute('fg', c);
  }
  get fg() {
    return this.getAttribute('fg');
  }

  // The width of the bar.
  set width(w) {
    if (w === null) this.removeAttribute('width');else this.setAttribute('width', w);
  }
  get width() {
    return this.getAttribute('width');
  }

  // The height of the bar.
  set height(w) {
    if (w === null) this.removeAttribute('height');else this.setAttribute('height', w);
  }
  get height() {
    return this.getAttribute('height');
  }

  // The total length of time to count down.
  set duration(s) {
    if (s === null) this.removeAttribute('duration');else this.setAttribute('duration', s.toString());
  }
  get duration() {
    const s = this.getAttribute('duration');
    if (s === null) return null;
    return parseFloat(s);
  }

  // The length remaining in the count down.
  set value(s) {
    this.setAttribute('value', s.toString());
  }
  get value() {
    if (!this._start) return this._duration;
    const elapsedMs = Date.now() - this._start;
    return Math.max(0, this._duration - elapsedMs / 1000);
  }

  // The elapsed time.
  set elapsed(s) {
    this.setAttribute('elapsed', s.toString());
  }
  get elapsed() {
    if (!this._start) return 0;
    return (Date.now() - this._start) / 1000;
  }

  // If "right" then animates left-to-right (the default). If "left"
  // then animates right-to-left.
  set toward(t) {
    if (t === null) this.removeAttribute('toward');else this.setAttribute('toward', t);
  }
  get toward() {
    return this.getAttribute('toward');
  }

  // If "fill" then the progress goes empty-to-full, if "empty" then the
  // progress bar starts full and goes to empty.
  set stylefill(s) {
    if (s === null) this.removeAttribute('stylefill');else this.setAttribute('stylefill', s);
  }
  get stylefill() {
    return this.getAttribute('stylefill');
  }

  // When the bar reaches 0, it is hidden after this many seconds. If null
  // then it is not hidden.
  set hideafter(h) {
    if (h === null) this.removeAttribute('hideafter');else this.setAttribute('hideafter', h.toString());
  }
  get hideafter() {
    const h = this.getAttribute('hideafter');
    if (h === null) return null;
    return parseInt(h);
  }

  // Chooses what should be shown in the text field in each area of
  // the bar. Can be one of:
  // empty - nothing is shown.
  // "remain" - shows the remaining time.
  // "duration" - shows the remaining and total duration time
  //              of the bar.
  // "percent" - shows the percentage of remaining time to
  //             the duration.
  // "elapsed"   - shows the elapsed time
  // anything else - the given text is shown literally.
  set lefttext(p) {
    if (p === null) this.removeAttribute('lefttext');else this.setAttribute('lefttext', p);
  }
  get lefttext() {
    return this.getAttribute('lefttext');
  }
  set righttext(p) {
    if (p === null) this.removeAttribute('righttext');else this.setAttribute('righttext', p);
  }
  get righttext() {
    return this.getAttribute('righttext');
  }
  set centertext(p) {
    if (p === null) this.removeAttribute('centertext');else this.setAttribute('centertext', p);
  }
  get centertext() {
    return this.getAttribute('centertext');
  }

  // If this attribute is present, the timer will loop forever.
  set loop(l) {
    if (l) this.setAttribute('loop', '');else this.removeAttribute('loop');
  }
  get loop() {
    return this.hasAttribute('loop');
  }

  // This would be used with window.customElements.
  constructor() {
    super();
    const root = this.attachShadow({
      mode: 'open'
    });
    this.init(root);
    this._connected = false;

    // Default values.
    this._start = 0;
    this._duration = 0;
    this._width = '100%';
    this._height = '100%';
    this._bg = 'black';
    this._fg = 'yellow';
    this._towardRight = false;
    this._fill = false;
    this._leftText = '';
    this._centerText = '';
    this._rightText = '';
    this._hideAfter = -1;
    this._loop = false;
    this._hideTimer = 0;
    this.rootElement = this.shadowRoot?.getElementById('root');
    this.foregroundElement = this.shadowRoot?.getElementById('fg');
    this.backgroundElement = this.shadowRoot?.getElementById('bg');
    this.leftTextElement = this.shadowRoot?.getElementById('lefttext');
    this.centerTextElement = this.shadowRoot?.getElementById('centertext');
    this.rightTextElement = this.shadowRoot?.getElementById('righttext');
  }
  init(root) {
    root.innerHTML = `
      <style>
        .timerbar-root {
          position: relative;
          border: 1px solid black;
          box-sizing: border-box;
        }
        .timerbar-bg {
          position: absolute;
          width: 100%;
          height: 100%;
          opacity: 0.8;
        }
        .timerbar-fg {
          position: absolute;
          width: 100%;
          height: 100%;
          opacity: 1.0;
        }
        .text {
          position: absolute;
          font-family: arial;
          font-weight: bold;
          color: white;
          text-shadow: -1px 0 3px black, 0 1px 3px black, 1px 0 3px black, 0 -1px 3px black;
          will-change: content;
        }
        .text-container {
          position: absolute;
          left: 0px;
          top: calc(50% - 1.2ex);
          width: 100%;
          height: 100%;
          overflow: hidden;
        }
        .timerbar-lefttext {
          position: relative;
          text-align: left;
          padding: 0px 0.4em 0px 0.4em;
        }
        .timerbar-centertext {
          position: relative;
          text-align: center;
          padding: 0px 0.4em 0px 0.4em;
        }
        .timerbar-righttext {
          position: relative;
          text-align: right;
          padding: 0px 0.4em 0px 0.4em;
        }
        :host-context(.just-a-number) .timerbar-root {
          border: none;
        }
        :host-context(.just-a-number) .timerbar-bg {
          display: none;
        }
        :host-context(.just-a-number) .timerbar-fg {
          display: none;
        }
        /* Korean better visibility CSS */
        :lang(ko) .text-container {
          top: calc(50% - 1.5ex);
          height: calc(100% + 0.3ex);
        }
        :lang(ko) .timerbar-righttext {
          top: 0.3ex;
        }
      </style>
      <div id="root" class="timerbar-root" part="timerbar-root">
        <div id="bg" class="timerbar-bg" part="timerbar-bg"></div>
        <div id="fg" class="timerbar-fg" part="timerbar-fg"></div>
        <div class="text-container" part="text-container">
          <div id="lefttext" class="text timerbar-lefttext" part="text timerbar-lefttext"></div>
        </div>
        <div class="text-container" part="text-container">
          <div id="centertext" class="text timerbar-centertext" part="text timerbar-centertext"></div>
        </div>
        <div class="text-container" part="text-container">
          <div id="righttext" class="text timerbar-righttext" part="text timerbar-righttext"></div>
        </div>
      </div>
    `;
  }
  connectedCallback() {
    this._connected = true;
    this.layout();
    this.updateText();
    if (!this._start) this.setvalue(this._duration);else this.advance();
  }
  disconnectedCallback() {
    this._connected = false;
  }
  attributeChangedCallback(name, _oldValue, newValue) {
    if (name === 'duration') {
      this._duration = Math.max(parseFloat(newValue), 0);
      this.setvalue(this._duration);
    } else if (name === 'value') {
      this.setvalue(Math.max(parseFloat(newValue), 0));
    } else if (name === 'elapsed') {
      this.setvalue(this._duration - Math.max(parseFloat(newValue), 0));
    } else if (name === 'width') {
      this._width = newValue;
      this.layout();
    } else if (name === 'height') {
      this._height = newValue;
      this.layout();
    } else if (name === 'bg') {
      this._bg = newValue;
      this.layout();
    } else if (name === 'fg') {
      this._fg = newValue;
      this.layout();
    } else if (name === 'stylefill') {
      this._fill = newValue === 'fill';
      this.layout();
    } else if (name === 'toward') {
      this._towardRight = newValue === 'right';
      this.layout();
    } else if (name === 'lefttext') {
      const update = newValue !== this._leftText && this._connected;
      this._leftText = newValue;
      if (update) this.updateText();
    } else if (name === 'centertext') {
      const update = newValue !== this._centerText && this._connected;
      this._centerText = newValue;
      if (update) this.updateText();
    } else if (name === 'righttext') {
      const update = newValue !== this._rightText && this._connected;
      this._rightText = newValue;
      if (update) this.updateText();
    } else if (name === 'hideafter') {
      this._hideAfter = Math.max(this.hideafter ?? 0, 0);
      if (this.value === 0) {
        if (this._hideAfter >= 0) this.hide();else this.show();
      }
    } else if (name === 'loop') {
      this._loop = newValue !== null;
    }
    if (this._connected) this.draw();
  }
  layout() {
    if (!this._connected) return;
    this.backgroundElement.style.background = this._bg;
    this.foregroundElement.style.background = this._fg;
    this.rootElement.style.width = this._width;
    this.rootElement.style.height = this._height;

    // To start full and animate to empty, we animate backwards and flip
    // the direction.
    if (this._towardRight !== this._fill) {
      this.foregroundElement.style.left = '';
      this.foregroundElement.style.right = '0px';
      this.foregroundElement.style.transformOrigin = 'right center';
    } else {
      this.foregroundElement.style.left = '0px';
      this.foregroundElement.style.right = '';
      this.foregroundElement.style.transformOrigin = 'left center';
    }
  }
  updateText() {
    const varyingTexts = ['elapsed', 'duration', 'percent', 'remain'];
    // These values are filled in during draw() when the values change.
    if (!varyingTexts.includes(this._leftText)) {
      // Otherwise the value is fixed so it can be set here.
      this.leftTextElement.innerHTML = this._leftText;
    }
    if (!varyingTexts.includes(this._centerText)) this.centerTextElement.innerHTML = this._centerText;
    if (!varyingTexts.includes(this._rightText)) this.rightTextElement.innerHTML = this._rightText;
  }
  draw() {
    const elapsedSec = (Date.now() - this._start) / 1000;
    const remainSec = Math.max(0, this._duration - elapsedSec);
    let percent = this._duration <= 0 ? 0 : remainSec / this._duration;
    // Keep it between 0 and 1.
    percent = Math.min(1, Math.max(0, percent));
    const displayRemain = remainSec ? remainSec.toFixed(1) : '';
    const displayElapsed = elapsedSec.toFixed(1);
    if (this._fill) percent = 1.0 - percent;
    this.foregroundElement.style.transform = `scaleX(${percent.toFixed(3)})`;
    if (this._leftText !== '') {
      if (this._leftText === 'remain') this.leftTextElement.innerText = displayRemain;else if (this._leftText === 'duration') this.leftTextElement.innerText = `${displayRemain} / ${this._duration}`;else if (this._leftText === 'percent') this.leftTextElement.innerText = `${(percent * 100).toFixed(1)} %`;else if (this._leftText === 'elapsed') this.leftTextElement.innerText = displayElapsed;
    }
    if (this._centerText !== '') {
      if (this._centerText === 'remain') this.centerTextElement.innerText = displayRemain;else if (this._centerText === 'duration') this.centerTextElement.innerText = `${displayRemain} / ${this._duration}`;else if (this._centerText === 'percent') this.centerTextElement.innerText = `${(percent * 100).toFixed(1)} %`;else if (this._centerText === 'elapsed') this.centerTextElement.innerText = displayElapsed;
    }
    if (this._rightText !== '') {
      if (this._rightText === 'remain') this.rightTextElement.innerText = displayRemain;else if (this._rightText === 'duration') this.rightTextElement.innerText = `${displayRemain} / ${this._duration}`;else if (this._rightText === 'percent') this.rightTextElement.innerText = `${(percent * 100).toFixed(1)} %`;else if (this._rightText === 'elapsed') this.rightTextElement.innerText = displayElapsed;
    }
  }

  // Apply all styles from an object where keys are CSS properties
  applyStyles(styles) {
    const s = Object.keys(styles).map(k => {
      return `${k}:${styles?.[k] ?? ''};`;
    }).join('');
    const left = this.shadowRoot?.getElementById('lefttext');
    const center = this.shadowRoot?.getElementById('centertext');
    const right = this.shadowRoot?.getElementById('righttext');
    if (!left || !center || !right) throw new not_reached/* UnreachableCode */.$();
    left.style.cssText += s;
    center.style.cssText += s;
    right.style.cssText += s;
  }
  setvalue(remainSec) {
    const elapsedSec = Math.max(0, this._duration - remainSec);
    this._start = Date.now() - elapsedSec * 1000;
    if (!this._connected) return;
    this.show();
    clearTimeout(this._hideTimer ?? 0);
    this._hideTimer = null;
    this.advance();
  }
  advance() {
    // If the element has been disconnected from the DOM, stop requesting animation frames
    if (!this._connected) return;
    const elapsedSec = (Date.now() - this._start) / 1000;
    if (elapsedSec >= this._duration) {
      // Timer completed
      if (this._loop && this._duration > 0) {
        // Sets the remaining time to include any extra elapsed seconds past the duration
        this.setvalue(this._duration + (this._duration - elapsedSec) % this._duration);
        return;
      }

      // Sets the attribute to 0 so users can see the counter is done, and
      // if they set the same duration again it will count.
      this._duration = 0;
      if (this._hideAfter > 0) this._hideTimer = window.setTimeout(this.hide.bind(this), this._hideAfter * 1000);else if (this._hideAfter === 0) this.hide();
    } else {
      // Timer not completed, request another animation frame
      window.requestAnimationFrame(this.advance.bind(this));
    }
    this.draw();
  }
  show() {
    if (this._connected) this.rootElement.style.display = 'block';
  }
  hide() {
    if (this._connected) this.rootElement.style.display = 'none';
  }
}
window.customElements.define('timer-bar', TimerBar);
// EXTERNAL MODULE: ./resources/netregexes.ts
var netregexes = __webpack_require__(622);
;// CONCATENATED MODULE: ./ui/raidboss/common_replacement.ts
// TODO: maybe this should be structured identically to a timelineReplace section.

// The seal key is kind of a hack because we use it in a lot of different
// contexts and need to correctly grab the name of the zone that is sealed.
// These are some various lookbehinds for those different contexts:
// Regexes for a parsed ACT log line
const parsedLB = '00:0839::';
// Regexes for a network log line
const networkLB = '00\\|[^|]*\\|0839\\|\\|';
// Regex for a regex for a network log line.  <_<
const netRegexLB = '\\\\\\|0839\\\\\\|\\[\\^\\|\\]\\*\\\\\\|';
// A bare parameter (e.g. `X will be sealed off` via `netRegex: { line: 'X will be sealed off' },`)
const paramLB = '^';

// It's awkward to refer to these string keys, so name them as replaceSync[keys.sealKey].
const syncKeys = {
  // Seal is trying to match these types of lines, and is more complicated because it's
  // trying to also capture the area name:
  //   parsed log lines: 00:0839::Something will be sealed off
  //   network log lines: 00|timestamp|0839||Something will be sealed off
  //   NetRegexes: ^^00\|[^|]*\|0839\|[^|]*\|Something will be sealed off.*?\|
  seal: `(?<=${parsedLB}|${networkLB}|${netRegexLB}|${paramLB})([^|:]*) will be sealed off(?: in (?:[0-9]+ seconds)?)?`,
  unseal: 'is no longer sealed',
  engage: 'Engage!'
};
const textKeys = {
  // Match directions in replaceText
  // eg: `(N)`, `(SW)`, `(NE/NW)`, etc.
  E: '(?<= \\(|\\/)E(?=\\)|\\/)',
  N: '(?<= \\(|\\/)N(?=\\)|\\/)',
  S: '(?<= \\(|\\/)S(?=\\)|\\/)',
  W: '(?<= \\(|\\/)W(?=\\)|\\/)',
  NE: '(?<= \\(|\\/)NE(?=\\)|\\/)',
  NW: '(?<= \\(|\\/)NW(?=\\)|\\/)',
  SE: '(?<= \\(|\\/)SE(?=\\)|\\/)',
  SW: '(?<= \\(|\\/)SW(?=\\)|\\/)',
  // Match Roles in replaceText
  // eg: `(Tank)`, `(Healer)`, `(DPS)`, etc
  Tank: '(?<= \\(|\\/)Tanks?(?=\\)|\\/)',
  Healer: '(?<= \\(|\\/)Healers?(?=\\)|\\/)',
  DPS: '(?<= \\(|\\/)DPS(?=\\)|\\/)',
  // Match `--1--` style text.
  Number: '--(\\s*\\d+\\s*)--'
};
const commonReplacement = {
  replaceSync: {
    [syncKeys.seal]: {
      en: '$1 will be sealed off',
      de: 'Noch 15 Sekunden, bis sich (?:(?:der|die|das) )?(?:Zugang zu(?:[rm]| den)? )?$1 schließt',
      fr: 'Fermeture d(?:e|u|es) (?:l\'|la |les? )?$1 dans',
      ja: '$1の封鎖まであと',
      cn: '距$1被封锁还有',
      ko: '15초 후에 $1[이가] 봉쇄됩니다'
    },
    [syncKeys.unseal]: {
      en: 'is no longer sealed',
      de: 'öffnet sich (?:wieder|erneut)',
      fr: 'Ouverture ',
      ja: 'の封鎖が解かれた',
      cn: '的封锁解除了',
      ko: '의 봉쇄가 해제되었습니다'
    },
    [syncKeys.engage]: {
      en: 'Engage!',
      de: 'Start!',
      fr: 'À l\'attaque',
      ja: '戦闘開始！',
      cn: '战斗开始！',
      ko: '전투 시작!'
    }
  },
  replaceText: {
    '--adds spawn--': {
      de: '--Adds erscheinen--',
      fr: '--Apparition d\'adds--',
      ja: '--雑魚出現--',
      cn: '--小怪出现--',
      ko: '--쫄 소환--'
    },
    '--adds targetable--': {
      de: '--Adds anvisierbar--',
      fr: '--Adds ciblables--',
      ja: '--雑魚ターゲット可能--',
      cn: '--小怪可选中--',
      ko: '--쫄 타겟 가능--'
    },
    '--center--': {
      de: '--Mitte--',
      fr: '--Centre--',
      ja: '--センター--',
      cn: '--中央--',
      ko: '--중앙--'
    },
    '\\(center\\)': {
      de: '(Mitte)',
      fr: '(Centre)',
      ja: '(センター)',
      cn: '(中央)',
      ko: '(중앙)'
    },
    '--clones appear--': {
      de: '--Klone erscheinen--',
      fr: '--Apparition des clones--',
      ja: '--幻影出現--',
      cn: '--幻影出现--',
      ko: '--분신 소환--'
    },
    '--corner--': {
      de: '--Ecke--',
      fr: '--Coin--',
      ja: '--コーナー--',
      cn: '--角落--',
      ko: '--구석--'
    },
    '--dps burn--': {
      de: '--DPS burn--',
      fr: '--Burn dps--',
      ja: '--火力出せ--',
      cn: '--转火--',
      ko: '--딜 체크--'
    },
    '--east--': {
      de: '--Osten--',
      fr: '--Est--',
      ja: '--東--',
      cn: '--东--',
      ko: '--동쪽--'
    },
    '\\(east\\)': {
      de: '(Osten)',
      fr: '(Est)',
      ja: '(東)',
      cn: '(东)',
      ko: '(동쪽)'
    },
    'Enrage': {
      de: 'Finalangriff',
      fr: 'Enrage',
      ja: '時間切れ',
      cn: '狂暴',
      ko: '전멸기'
    },
    '--frozen--': {
      de: '--eingefroren--',
      fr: '--Gelé--',
      ja: '--凍結--',
      cn: '--冻结--',
      ko: '--빙결--'
    },
    '--in--': {
      de: '--Rein--',
      fr: '--Intérieur--',
      ja: '--中--',
      cn: '--内--',
      ko: '--안--'
    },
    '\\(In\\)': {
      de: '(Rein)',
      fr: '(Intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '\\(inner\\)': {
      de: '(innen)',
      fr: '(intérieur)',
      ja: '(中)',
      cn: '(内)',
      ko: '(안)'
    },
    '--jump--': {
      de: '--Sprung--',
      fr: '--Saut--',
      ja: '--ジャンプ--',
      cn: '--跳--',
      ko: '--점프--'
    },
    '--knockback--': {
      de: '--Rückstoß--',
      fr: '--Poussée--',
      ja: '--ノックバック--',
      cn: '--击退--',
      ko: '--넉백--'
    },
    '--middle--': {
      de: '--Mitte--',
      fr: '--Milieu--',
      ja: '--中央--',
      cn: '--中间--',
      ko: '--중앙--'
    },
    '\\(middle\\)': {
      de: '(Mitte)',
      fr: '(Milieu)',
      ja: '(中央)',
      cn: '(中间)',
      ko: '(중앙)'
    },
    '--north--': {
      de: '--Norden--',
      fr: '--Nord--',
      ja: '--北--',
      cn: '--北--',
      ko: '--북쪽--'
    },
    '\\(north\\)': {
      de: '(Norden)',
      fr: '(Nord)',
      ja: '(北)',
      cn: '(北)',
      ko: '(북쪽)'
    },
    '--northeast--': {
      de: '--Nordosten--',
      fr: '--Nord-Est--',
      ja: '--北東--',
      cn: '--东北--',
      ko: '--북동--'
    },
    '--northwest--': {
      de: '--Nordwesten--',
      fr: '--Nord-Ouest--',
      ja: '--北西--',
      cn: '--西北--',
      ko: '--북서--'
    },
    '--out--': {
      de: '--Raus--',
      fr: '--Extérieur--',
      ja: '--外--',
      cn: '--外--',
      ko: '--밖--'
    },
    '\\(Out\\)': {
      de: '(Raus)',
      fr: '(Extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outer\\)': {
      de: '(außen)',
      fr: '(extérieur)',
      ja: '(外)',
      cn: '(外)',
      ko: '(밖)'
    },
    '\\(outside\\)': {
      de: '(Draußen)',
      fr: '(À l\'extérieur)',
      ja: '(外)',
      cn: '(外面)',
      ko: '(바깥)'
    },
    '--rotate--': {
      de: '--rotieren--',
      fr: '--rotation--',
      ja: '--回転--',
      cn: '--旋转--',
      ko: '--회전--'
    },
    '--south--': {
      de: '--Süden--',
      fr: '--Sud--',
      ja: '--南--',
      cn: '--南--',
      ko: '--남쪽--'
    },
    '\\(south\\)': {
      de: '(Süden)',
      fr: '(Sud)',
      ja: '(南)',
      cn: '(南)',
      ko: '(남쪽)'
    },
    '--southeast--': {
      de: '--Südosten--',
      fr: '--Sud-Est--',
      ja: '--南東--',
      cn: '--东南--',
      ko: '--남동--'
    },
    '--southwest--': {
      de: '--Südwesten--',
      fr: '--Sud-Ouest--',
      ja: '--南西--',
      cn: '--西南--',
      ko: '--남서--'
    },
    '--split--': {
      de: '--teilen--',
      fr: '--division--',
      ja: '--分裂--',
      cn: '--分裂--',
      ko: '--분열--'
    },
    '--stun--': {
      de: '--Betäubung--',
      fr: '--Étourdissement--',
      ja: '--スタン--',
      cn: '--击晕--',
      ko: '--기절--'
    },
    '--sync--': {
      de: '--synchronisation--',
      fr: '--synchronisation--',
      ja: '--シンク--',
      cn: '--同步化--',
      ko: '--동기화--'
    },
    '--([0-9]+x )?targetable--': {
      de: '--$1anvisierbar--',
      fr: '--$1ciblable--',
      ja: '--$1ターゲット可能--',
      cn: '--$1可选中--',
      ko: '--$1타겟 가능--'
    },
    '--teleport--': {
      de: '--teleportation--',
      fr: '--téléportation--',
      ja: '--テレポート--',
      cn: '--传送--',
      ko: '--순간 이동--'
    },
    '--untargetable--': {
      de: '--nich anvisierbar--',
      fr: '--non ciblable--',
      ja: '--ターゲット不可--',
      cn: '--无法选中--',
      ko: '--타겟 불가능--'
    },
    '--west--': {
      de: '--Westen--',
      fr: '--Ouest--',
      ja: '--西--',
      cn: '--西--',
      ko: '--서쪽--'
    },
    [textKeys.E]: {
      de: 'O',
      fr: 'E',
      ja: '東',
      cn: '东',
      ko: '동'
    },
    [textKeys.N]: {
      de: 'N',
      fr: 'N',
      ja: '北',
      cn: '北',
      ko: '북'
    },
    [textKeys.S]: {
      de: 'S',
      fr: 'S',
      ja: '南',
      cn: '南',
      ko: '남'
    },
    [textKeys.W]: {
      de: 'W',
      fr: 'O',
      ja: '西',
      cn: '西',
      ko: '서'
    },
    [textKeys.NE]: {
      de: 'NO',
      fr: 'NE',
      ja: '北東',
      cn: '东北',
      ko: '북동'
    },
    [textKeys.NW]: {
      de: 'NW',
      fr: 'NO',
      ja: '北西',
      cn: '西北',
      ko: '북서'
    },
    [textKeys.SE]: {
      de: 'SO',
      fr: 'SE',
      ja: '南東',
      cn: '东南',
      ko: '남동'
    },
    [textKeys.SW]: {
      de: 'SW',
      fr: 'SO',
      ja: '南西',
      cn: '西南',
      ko: '남서'
    },
    [textKeys.Tank]: {
      de: 'Tank',
      fr: 'Tank',
      ja: 'タンク',
      cn: '坦克',
      ko: '탱커'
    },
    [textKeys.Healer]: {
      de: 'Heiler',
      fr: 'Healer',
      ja: 'ヒーラー',
      cn: '治疗',
      ko: '힐러'
    },
    [textKeys.DPS]: {
      de: 'DPS',
      fr: 'DPS',
      ja: 'DPS',
      cn: 'DPS',
      ko: '딜러'
    },
    [textKeys.Number]: {
      de: '--$1--',
      fr: '--$1--',
      ja: '--$1--',
      cn: '--$1--',
      ko: '--$1--'
    }
  }
};

// Keys into commonReplacement objects that represent "partial" translations,
// in the sense that even if it applies, there still needs to be another
// translation for it to be complete.  These keys should be exactly the same
// as the keys from the commonReplacement block above.  These are used for
// timeline regexes only.
const partialCommonTimelineReplacementKeys = [
// Because the zone name needs to be translated here, this is partial.
syncKeys.seal,
// Directions
textKeys.E, textKeys.N, textKeys.S, textKeys.W, textKeys.NE, textKeys.NW, textKeys.SE, textKeys.SW,
// Roles
textKeys.Tank, textKeys.Healer, textKeys.DPS];

// Same as the timeline version above, but only for trigger regexes.
const partialCommonTriggerReplacementKeys = [
// Because the zone name needs to be translated here, this is partial.
syncKeys.seal];
// EXTERNAL MODULE: ./resources/regexes.ts
var regexes = __webpack_require__(402);
;// CONCATENATED MODULE: ./resources/translations.ts




// Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.
const localeLines = {
  countdownStart: {
    en: 'Battle commencing in (?<time>\\y{Float}) seconds! \\((?<player>.*?)\\)',
    de: 'Noch (?<time>\\y{Float}) Sekunden bis Kampfbeginn! \\((?<player>.*?)\\)',
    fr: 'Début du combat dans (?<time>\\y{Float}) secondes[ ]?! \\((?<player>.*?)\\)',
    ja: '戦闘開始まで(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    cn: '距离战斗开始还有(?<time>\\y{Float})秒！ （(?<player>.*?)）',
    ko: '전투 시작 (?<time>\\y{Float})초 전! \\((?<player>.*?)\\)'
  },
  countdownEngage: {
    en: 'Engage!',
    de: 'Start!',
    fr: 'À l\'attaque[ ]?!',
    ja: '戦闘開始！',
    cn: '战斗开始！',
    ko: '전투 시작!'
  },
  countdownCancel: {
    en: 'Countdown canceled by (?<player>\\y{Name})',
    de: '(?<player>\\y{Name}) hat den Countdown abgebrochen',
    fr: 'Le compte à rebours a été interrompu par (?<player>\\y{Name})[ ]?\\.',
    ja: '(?<player>\\y{Name})により、戦闘開始カウントがキャンセルされました。',
    cn: '(?<player>\\y{Name})取消了战斗开始倒计时。',
    ko: '(?<player>\\y{Name}) 님이 초읽기를 취소했습니다\\.'
  },
  areaSeal: {
    en: '(?<area>.*?) will be sealed off in (?<time>\\y{Float}) seconds!',
    de: 'Noch (?<time>\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',
    fr: 'Fermeture (?<area>.*?) dans (?<time>\\y{Float}) secondes[ ]?\\.',
    ja: '(?<area>.*?)の封鎖まであと(?<time>\\y{Float})秒',
    cn: '距(?<area>.*?)被封锁还有(?<time>\\y{Float})秒',
    ko: '(?<time>\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\.'
  },
  areaUnseal: {
    en: '(?<area>.*?) is no longer sealed.',
    de: '(?<area>.*?) öffnet sich erneut.',
    fr: 'Ouverture (?<area>.*?)[ ]?!',
    ja: '(?<area>.*?)の封鎖が解かれた……',
    cn: '(?<area>.*?)的封锁解除了',
    ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\.'
  },
  // Recipe name always start with \ue0bb
  // HQ icon is \ue03c
  craftingStart: {
    en: 'You begin synthesizing (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\d+) )?\ue0bb(?<recipe>.*) herzustellen\\.',
    fr: 'Vous commencez à fabriquer (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(×(?<count>\\d+))?の製作を開始した。',
    cn: '(?<player>\\y{Name})开始制作“\ue0bb(?<recipe>.*)”(×(?<count>\\d+))?。',
    ko: '\ue0bb(?<recipe>.*)(×(?<count>\\d+)개)? 제작을 시작합니다\\.'
  },
  trialCraftingStart: {
    en: 'You begin trial synthesis of \ue0bb(?<recipe>.*)\\.',
    de: 'Du hast mit der Testsynthese von \ue0bb(?<recipe>.*) begonnen\\.',
    fr: 'Vous commencez une synthèse d\'essai pour une? \ue0bb(?<recipe>.*)\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習を開始した。',
    cn: '(?<player>\\y{Name})开始练习制作\ue0bb(?<recipe>.*)。',
    ko: '\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\.'
  },
  craftingFinish: {
    en: 'You synthesize (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\d+) )?(?<recipe>.*)(\ue03c)? hergestellt\\.',
    fr: 'Vous fabriquez (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+))?を完成させた！',
    cn: '(?<player>\\y{Name})制作“\ue0bb(?<recipe>.*)(\ue03c)?”(×(?<count>\\d+))?成功！',
    ko: '(?<player>\\y{Name}) 님이 \ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+)개)?(을|를) 완성했습니다!'
  },
  trialCraftingFinish: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) proved a success!',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) war erfolgreich!',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) a été couronnée de succès!',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に成功した！',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)成功了！',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!'
  },
  craftingFail: {
    en: 'Your synthesis fails!',
    de: 'Deine Synthese ist fehlgeschlagen!',
    fr: 'La synthèse échoue\\.{3}',
    ja: '(?<player>\\y{Name})は製作に失敗した……',
    cn: '(?<player>\\y{Name})制作失败了……',
    ko: '제작에 실패했습니다……\\.'
  },
  trialCraftingFail: {
    en: 'Your trial synthesis of \ue0bb(?<recipe>.*) failed\\.{3}',
    de: 'Die Testsynthese von \ue0bb(?<recipe>.*) ist fehlgeschlagen\\.{3}',
    fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) s\'est soldée par un échec\\.{3}',
    ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に失敗した……',
    cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)失败了……',
    ko: '\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\.'
  },
  craftingCancel: {
    en: 'You cancel the synthesis\\.',
    de: 'Du hast die Synthese abgebrochen\\.',
    fr: 'La synthèse est annulée\\.',
    ja: '(?<player>\\y{Name})は製作を中止した。',
    cn: '(?<player>\\y{Name})中止了制作作业。',
    ko: '제작을 중지했습니다\\.'
  },
  trialCraftingCancel: {
    en: 'You abandoned trial synthesis\\.',
    de: 'Testsynthese abgebrochen\\.',
    fr: 'Vous avez interrompu la synthèse d\'essai\\.',
    ja: '(?<player>\\y{Name})は製作練習を中止した。',
    cn: '(?<player>\\y{Name})停止了练习。',
    ko: '제작 연습을 중지했습니다\\.'
  }
};
class RegexSet {
  get localeRegex() {
    if (this.regexes) return this.regexes;
    this.regexes = this.buildLocaleRegexes(localeLines, s => regexes/* default.gameLog */.Z.gameLog({
      line: `${s}.*?`
    }));
    return this.regexes;
  }
  get localeNetRegex() {
    if (this.netRegexes) return this.netRegexes;
    this.netRegexes = this.buildLocaleRegexes(localeLines, s => netregexes/* default.gameLog */.ZP.gameLog({
      line: `${s}[^|]*?`
    }));
    return this.netRegexes;
  }
  buildLocaleRegexes(locales, builder) {
    return Object.fromEntries(Object.entries(locales).map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));
  }
  buildLocaleRegex(lines, builder) {
    const regexEn = builder(lines.en);
    return {
      en: regexEn,
      de: lines.de !== undefined ? builder(lines.de) : regexEn,
      fr: lines.fr !== undefined ? builder(lines.fr) : regexEn,
      ja: lines.ja !== undefined ? builder(lines.ja) : regexEn,
      cn: lines.cn !== undefined ? builder(lines.cn) : regexEn,
      ko: lines.ko !== undefined ? builder(lines.ko) : regexEn
    };
  }
}
const regexSet = new RegexSet();
const LocaleRegex = regexSet.localeRegex;
const LocaleNetRegex = regexSet.localeNetRegex;

// Translate a trigger or timeline regex (replaceSync) or timeline text (replaceText),
// returning the text and whether or not it can be considered "translated".
// Note, this won't catch anything that needs multiple translations, but will catch
// anything from common translations that are partial (e.g. a seal regex needs
// a zone name to be considered a full translation.
const translateWithReplacements = (text, replaceKey, replaceLang, replacements) => {
  // Special cases for empty and "not empty".
  if (text === '' || text === '[^:]+' || text === '[^|]+') return {
    text: text,
    wasTranslated: true
  };

  // All regex replacements are always global.
  const isGlobal = replaceKey === 'replaceSync';
  let wasTranslated = false;
  for (const r of replacements ?? []) {
    if (r.locale && r.locale !== replaceLang) continue;
    const reps = r[replaceKey];
    if (!reps) continue;
    for (const [key, value] of Object.entries(reps)) {
      const regex = isGlobal ? regexes/* default.parseGlobal */.Z.parseGlobal(key) : regexes/* default.parse */.Z.parse(key);
      if (text.match(regex)) wasTranslated = true;
      text = text.replace(regex, value);
    }
  }

  // Common Replacements
  const replacement = commonReplacement[replaceKey];
  for (const [key, value] of Object.entries(replacement ?? {})) {
    const repl = value[replaceLang];
    if (repl === undefined) continue;
    const regex = isGlobal ? regexes/* default.parseGlobal */.Z.parseGlobal(key) : regexes/* default.parse */.Z.parse(key);
    const partialKeys = replaceKey === 'replaceSync' ? partialCommonTriggerReplacementKeys : partialCommonTimelineReplacementKeys;
    if (text.match(regex)) {
      // Consider any partial translations as "not found" (e.g. a seal
      // message that still needs the zone name to be translated to be
      // considered fully translated).
      let isPartial = false;
      for (const partialKey of partialKeys) {
        if (regexes/* default.parseGlobal */.Z.parseGlobal(partialKey).test(key)) {
          isPartial = true;
          break;
        }
      }
      if (!isPartial) wasTranslated = true;
    }
    text = text.replace(regex, repl);
  }
  return {
    text,
    wasTranslated
  };
};

// Translates a timeline or trigger regex for a given language.
const translateRegex = (text, replaceLang, replacements) => {
  if (typeof text === 'string') return translateWithReplacements(text, 'replaceSync', replaceLang, replacements).text;
  return translateWithReplacements(text.source, 'replaceSync', replaceLang, replacements).text;
};

// Translates a timeline text for a given language.
const translateText = (text, replaceLang, replacements) => translateWithReplacements(text, 'replaceText', replaceLang, replacements).text;
const translateRegexBuildParam = (params, replaceLang, replacements) => {
  return translateRegexBuildParamAnon(params, replaceLang, replacements);
};
const translateRegexBuildParamAnon = (anonParams, replaceLang, replacements) => {
  let missingFields = undefined;
  let wasTranslated = true;

  // TODO: it's probably ok that this isn't a deep copy because we don't
  // modify string[] directly, but it probably should be anyway.
  const params = {
    ...anonParams
  };
  for (const key of netregexes/* keysThatRequireTranslation */._1) {
    const value = anonParams[key];
    if (typeof value === 'boolean' || value === undefined) continue;
    // TODO: ideally, it'd be nice to assign directly back to params[key] instead of
    // cheating and assigning back through anonParams.  The reason this is mostly
    // ok is that if params[key] is a string it only gets assigned a string,
    // and if it is a string[] it only gets assigned a string[], so the type can't
    // change.  It might be possible to assign to params[key] if we make
    // timestamp a string | string[]?
    if (typeof value === 'string') {
      const result = translateWithReplacements(value, 'replaceSync', replaceLang, replacements);
      params[key] = result.text;
      wasTranslated = wasTranslated && result.wasTranslated;
      if (!result.wasTranslated) (missingFields ??= []).push(key);
    } else {
      params[key] = value.map(x => {
        if (typeof x !== 'string') return x;
        const result = translateWithReplacements(x, 'replaceSync', replaceLang, replacements);
        wasTranslated = wasTranslated && result.wasTranslated;
        if (!result.wasTranslated) (missingFields ??= []).push(key);
        return result.text;
      });
    }
  }
  return {
    params,
    wasTranslated,
    missingFields
  };
};
// EXTERNAL MODULE: ./node_modules/json5/dist/index.js
var dist = __webpack_require__(142);
var dist_default = /*#__PURE__*/__webpack_require__.n(dist);
// EXTERNAL MODULE: ./resources/netlog_defs.ts
var netlog_defs = __webpack_require__(21);
;// CONCATENATED MODULE: ./ui/raidboss/raidboss_options.ts


// This file defines the base options that raidboss expects to see.

// Backwards compat for this old style of overriding triggers.
// TODO: we should probably deprecate and remove this.
// These options are ones that are not auto-defined by raidboss_config.js.
const defaultRaidbossNonConfigOptions = {
  PlayerNicks: {},
  InfoSound: '../../resources/sounds/freesound/percussion_hit.webm',
  AlertSound: '../../resources/sounds/BigWigs/Alert.webm',
  AlarmSound: '../../resources/sounds/BigWigs/Alarm.webm',
  LongSound: '../../resources/sounds/BigWigs/Long.webm',
  PullSound: '../../resources/sounds/freesound/sonar.webm',
  AudioAllowed: true,
  DisabledTriggers: {},
  PerTriggerAutoConfig: {},
  PerTriggerSetAutoConfig: {},
  PerTriggerOptions: {},
  PerZoneTimelineConfig: {},
  TriggerSetConfig: {},
  Triggers: [],
  IsRemoteRaidboss: false,
  TransformTts: t => t
};

// TODO: figure out how to get this type from raidboss_config??
// These values are overwritten and are just here for typing.
const defaultRaidbossConfigOptions = {
  DefaultAlertOutput: 'textAndSound',
  AlertsLanguage: undefined,
  TimelineLanguage: undefined,
  TimelineEnabled: true,
  AlertsEnabled: true,
  DefaultPlayerLabel: 'nick',
  ShowTimerBarsAtSeconds: 30,
  KeepExpiredTimerBarsForSeconds: 0.7,
  BarExpiresSoonSeconds: 6,
  MaxNumberOfTimerBars: 6,
  ReverseTimeline: false,
  DisplayAlarmTextForSeconds: 3,
  DisplayAlertTextForSeconds: 3,
  DisplayInfoTextForSeconds: 3,
  AlarmSoundVolume: 1,
  AlertSoundVolume: 1,
  InfoSoundVolume: 1,
  LongSoundVolume: 1,
  PullSoundVolume: 1,
  RumbleEnabled: false,
  InfoRumbleDuration: 400,
  InfoRumbleWeak: 0.5,
  InfoRumbleStrong: 0,
  AlertRumbleDuration: 500,
  AlertRumbleWeak: 0,
  AlertRumbleStrong: 0.5,
  AlarmRumbleDuration: 750,
  AlarmRumbleWeak: 0.75,
  AlarmRumbleStrong: 0.75
};
// See user/raidboss-example.js for documentation.
const Options = {
  ...user_config/* default.getDefaultBaseOptions */.Z.getDefaultBaseOptions(),
  ...defaultRaidbossNonConfigOptions,
  ...defaultRaidbossConfigOptions
};
/* harmony default export */ const raidboss_options = (Options);
;// CONCATENATED MODULE: ./ui/raidboss/timeline_parser.ts







const isLogDefinitionTypes = type => {
  return type in netlog_defs/* default */.Z;
};
const isStringArray = value => {
  return value.find(v => typeof v !== 'string') === undefined;
};
const isStringOrStringArray = value => {
  if (Array.isArray(value)) {
    if (isStringArray(value)) return true;
    return false;
  }
  return typeof value === 'string';
};
const isTimelineNetParams = value => {
  if (typeof value !== 'object' || Array.isArray(value)) return false;
  const obj = value;
  for (const innerValue of Object.values(obj)) {
    if (!isStringOrStringArray(innerValue)) return false;
  }
  return true;
};
const isValidNetParams = (type, params) => {
  for (const key in params) {
    // Make sure all keys are present on our definition type
    if (!(key in netlog_defs/* default */.Z[type].fields)) return false;
    // Make sure our value is either a string/int or an array of strings/ints
    if (!isStringOrStringArray(params[key])) return false;
    // These should never be specified on a timeline net regex.
    if (key === 'capture' || key === 'timestamp') return false;
  }
  return true;
};
const isObject = x => {
  // JavaScript considers [] to be an object, so check for that explicitly.
  return x instanceof Object && !Array.isArray(x);
};
const timeline_parser_regexes = {
  comment: /^\s*#/,
  commentLine: /#.*$/,
  durationCommand: /(?:[^#]*?\s)?(?<text>duration\s+(?<seconds>[0-9]+(?:\.[0-9]+)?))(\s.*)?$/,
  ignore: /^hideall\s+\"(?<id>[^"]+)\"(?:\s*#.*)?$/,
  jumpCommand: /(?:[^#]*?\s)?(?<text>(?<command>(?:force|)jump)\s+(?:"(?<label>[^"]*)"|(?<seconds>[0-9]+(?:\.[0-9]+)?)))(?:\s.*)?$/,
  label: /^(?<time>[0-9]+(?:\.[0-9]+)?)\s+(?<text>label\s+"(?<label>[^"]*)")\s*$/,
  line: /^(?<text>(?<time>[0-9]+(?:\.[0-9]+)?)\s+"(?<name>.*?)")(\s+(.*))?/,
  popupText: /^(?<type>info|alert|alarm)text\s+\"(?<id>[^"]+)\"\s+before\s+(?<beforeSeconds>-?[0-9]+(?:\.[0-9]+)?)(?:\s+\"(?<text>[^"]+)\")?$/,
  soundAlert: /^define\s+soundalert\s+"[^"]*"\s+"[^"]*"$/,
  speaker: /define speaker "[^"]*"(\s+"[^"]*")?\s+(-?[0-9]+(?:\.[0-9]+)?)\s+(-?[0-9]+(?:\.[0-9]+)?)/,
  syncRegexCommand: /(?:[^#]*?\s)?(?<text>sync\s*\/(?<regex>.*)\/)(?<args>\s.*)?$/,
  syncNetRegex: new RegExp(`(?:[^#]*?\\s)?(?<netRegexType>${Object.keys(netlog_defs/* default */.Z).join('|')})\\s*(?<netRegex>\\{.*\\})(?<args>\\s.*)?$`),
  tts: /^alertall\s+"(?<id>[^"]*)"\s+before\s+(?<beforeSeconds>-?[0-9]+(?:\.[0-9]+)?)\s+(?<command>sound|speak\s+"[^"]*")\s+"(?<text>[^"]*)"$/,
  windowCommand: /(?:[^#]*?\s)?(?<text>window\s+(?:(?<start>[0-9]+(?:\.[0-9]+)?),)?(?<end>[0-9]+(?:\.[0-9]+)?))(?:\s.*)?$/
};

// This class reads the format of ACT Timeline plugin, described in
// docs/TimelineGuide.md
class TimelineParser {
  // A set of names which will not be notified about.
  ignores = {};
  // Sorted by event occurrence time.
  events = [];
  // Sorted by event occurrence time.
  texts = [];
  // Sorted by sync.start time.
  syncStarts = [];
  // Sorted by sync.end time.
  syncEnds = [];
  // Sorted by event occurrence time.
  forceJumps = [];
  // Sorted by line.
  errors = [];
  // Map of encountered label names to their time.
  labelToTime = {};
  // Map of encountered syncs to the label they are jumping to.
  labelToSync = {};
  constructor(text, replacements, triggers, styles, options, zoneId) {
    this.options = options ?? raidboss_options;
    this.perTriggerAutoConfig = this.options.PerTriggerAutoConfig;
    this.replacements = replacements;
    this.timelineConfig = typeof zoneId === 'number' ? this.options.PerZoneTimelineConfig[zoneId] ?? {} : {};
    for (const text of this.timelineConfig.Ignore ?? []) this.ignores[text] = true;
    let uniqueId = 0;
    for (const event of this.timelineConfig.Add ?? []) {
      this.events.push({
        id: `${++uniqueId}`,
        time: event.time,
        name: event.text,
        text: event.text,
        duration: event.duration,
        activeTime: 0,
        sortKey: 0
      });
    }
    this.parse(text, triggers, styles ?? [], uniqueId);
  }
  parse(text, triggers, styles, initialId) {
    let uniqueid = initialId;
    const texts = {};

    // Make all regexes case insensitive, and parse any special \y{} groups.
    for (const trigger of triggers ?? []) {
      if (trigger.regex) trigger.regex = regexes/* default.parse */.Z.parse(trigger.regex);
    }
    const lines = text.split('\n');
    let lineNumber = 0;
    for (let line of lines) {
      ++lineNumber;
      line = line.trim();
      // Drop comments and empty lines.
      if (!line || timeline_parser_regexes.comment.test(line)) continue;
      const originalLine = line;
      let match = timeline_parser_regexes.ignore.exec(line);
      if (match && match['groups']) {
        const ignore = match['groups'];
        if (ignore.id !== undefined) this.ignores[ignore.id] = true;
        continue;
      }
      match = timeline_parser_regexes.tts.exec(line);
      if (match && match['groups']) {
        const tts = match['groups'];
        if (tts.id === undefined || tts.beforeSeconds === undefined || tts.command === undefined) throw new not_reached/* UnreachableCode */.$();
        // TODO: Support alert sounds?
        if (tts.command === 'sound') continue;
        const ttsItems = texts[tts.id] || [];
        texts[tts.id] = ttsItems;
        ttsItems.push({
          type: 'tts',
          secondsBefore: parseFloat(tts.beforeSeconds),
          text: tts.text ?? tts.id
        });
        continue;
      }
      match = timeline_parser_regexes.soundAlert.exec(line);
      if (match) continue;
      match = timeline_parser_regexes.speaker.exec(line);
      if (match) continue;
      match = timeline_parser_regexes.popupText.exec(line);
      if (match && match['groups']) {
        const popupText = match['groups'];
        if (popupText.type === undefined || popupText.id === undefined || popupText.beforeSeconds === undefined) throw new not_reached/* UnreachableCode */.$();
        const popupTextItems = texts[popupText.id] || [];
        texts[popupText.id] = popupTextItems;
        const type = popupText.type;
        if (type !== 'info' && type !== 'alert' && type !== 'alarm') continue;
        popupTextItems.push({
          type: type,
          secondsBefore: parseFloat(popupText.beforeSeconds),
          text: popupText.text ?? popupText.id
        });
        continue;
      }
      match = timeline_parser_regexes.label.exec(line);
      if (match && match['groups']) {
        const parsedLine = match['groups'];
        if (parsedLine.time === undefined || parsedLine.label === undefined) throw new not_reached/* UnreachableCode */.$();
        const seconds = parseFloat(parsedLine.time);
        const label = parsedLine.label;
        const prevTime = this.labelToTime[label];
        if (prevTime !== undefined) {
          const text = `Duplicate ${label} name found for time ${prevTime} and ${seconds}`;
          this.errors.push({
            error: text,
            lineNumber: lineNumber
          });
        }
        this.labelToTime[label] = seconds;
        continue;
      }
      match = timeline_parser_regexes.line.exec(line);
      if (!(match && match['groups'])) {
        this.errors.push({
          lineNumber: lineNumber,
          line: originalLine,
          error: 'Invalid format'
        });
        continue;
      }
      const parsedLine = match['groups'];
      // Technically the name can be empty
      if (parsedLine.text === undefined || parsedLine.time === undefined || parsedLine.name === undefined) throw new not_reached/* UnreachableCode */.$();
      line = line.replace(parsedLine.text, '').trim();
      // There can be # in the ability name, but probably not in the regex.
      line = line.replace(timeline_parser_regexes.commentLine, '').trim();
      const seconds = parseFloat(parsedLine.time);
      const e = {
        id: `${++uniqueid}`,
        time: seconds,
        // The original ability name in the timeline.  Used for hideall, infotext, etc.
        name: parsedLine.name,
        // The text to display.  Not used for any logic.
        text: this.GetReplacedText(parsedLine.name),
        activeTime: 0,
        lineNumber: lineNumber,
        sortKey: 0
      };
      if (line) {
        line = this.matchDurationCommand(line, e);
        line = this.matchSyncRegexCommand(line, uniqueid, seconds, lineNumber, e);
        line = this.matchSyncNetRegex(line, lineNumber, originalLine, uniqueid, seconds, e);
      }
      // If there's text left that isn't a comment then we didn't parse that text so report it.
      if (line && !timeline_parser_regexes.comment.exec(line)) {
        this.errors.push({
          lineNumber: lineNumber,
          line: originalLine,
          error: 'Extra text'
        });
      } else {
        this.events.push(e);
      }
    }

    // Validate that all timeline triggers match something.
    for (const trigger of triggers ?? []) {
      let found = false;
      for (const event of this.events) {
        if (trigger.regex && trigger.regex.test(event.name)) {
          found = true;
          break;
        }
      }
      if (!found) {
        const text = `No match for timeline trigger ${trigger.regex?.source ?? ''} in ${trigger.id ?? ''}`;
        this.errors.push({
          error: text
        });
        console.error(`*** ERROR: ${text}`);
      }
    }

    // Validate that all the jumps go to labels that exist.
    for (const [label, syncs] of Object.entries(this.labelToSync)) {
      const destination = this.labelToTime[label];
      if (destination === undefined) {
        const text = `No label named ${label} found to jump to`;
        for (const sync of syncs) {
          this.errors.push({
            error: text,
            lineNumber: sync.lineNumber
          });
        }
        continue;
      }
      for (const sync of syncs) sync.jump = destination;
    }
    for (const e of this.events) {
      for (const matchedTextEvent of texts[e.name] ?? []) {
        const type = matchedTextEvent.type;
        if (type !== 'info' && type !== 'alert' && type !== 'alarm') continue;
        this.texts.push({
          type: type,
          time: e.time - (matchedTextEvent.secondsBefore || 0),
          text: matchedTextEvent.text ?? ''
        });
      }

      // Rather than matching triggers at run time, pre-match all the triggers
      // against timeline text and insert them as text events to run.
      for (const trigger of triggers ?? []) {
        const m = trigger.regex?.exec(e.name);
        if (!m) continue;

        // TODO: beforeSeconds should support being a function.
        const autoConfig = trigger.id !== undefined && this.perTriggerAutoConfig[trigger.id] || {};
        const beforeSeconds = autoConfig['BeforeSeconds'] ?? trigger.beforeSeconds;

        // TODO: also put these before any forcejump as well; this will solve
        // having to care about this at runtime.
        // e.g. if the beforeSeconds would put the text prior to the jump destination
        this.texts.push({
          type: 'trigger',
          time: e.time - (beforeSeconds || 0),
          trigger: trigger,
          matches: m
        });
      }
      for (const style of styles ?? []) {
        if (!style.regex.test(e.name)) continue;
        e.style = style.style;
      }
    }

    // Sort by time, but when the time is the same, sort by file order.
    // Then assign a sortKey to each event so that we can maintain that order.
    this.events.sort((a, b) => {
      if (a.time === b.time) return parseInt(a.id) - parseInt(b.id);
      return a.time - b.time;
    });
    this.events.forEach((event, idx) => event.sortKey = idx);
    this.texts.sort((a, b) => {
      return a.time - b.time;
    });
    this.syncStarts.sort((a, b) => {
      return a.start - b.start;
    });
    this.syncEnds.sort((a, b) => {
      return a.end - b.end;
    });
    this.forceJumps.sort((a, b) => {
      return a.time - b.time;
    });
  }
  matchSyncNetRegex(line, lineNumber, originalLine, uniqueid, seconds, e) {
    const commandMatch = timeline_parser_regexes.syncNetRegex.exec(line);
    if (!commandMatch || !commandMatch['groups']) return line;
    const syncCommand = commandMatch['groups'];
    if (syncCommand.netRegexType === undefined || syncCommand.netRegex === undefined) throw new not_reached/* UnreachableCode */.$();
    line = line.replace(syncCommand.netRegexType, '').trim();
    const netRegexType = syncCommand.netRegexType;
    if (!isLogDefinitionTypes(netRegexType)) {
      this.errors.push({
        lineNumber: lineNumber,
        line: originalLine,
        error: 'Invalid NetRegex type'
      });
      return line;
    }
    line = line.replace(syncCommand.netRegex, '').trim();
    let params;
    try {
      // Use json5 here to support bareword keys and different quoting styles.
      params = dist_default().parse(syncCommand.netRegex);
    } catch (e) {
      this.errors.push({
        lineNumber: lineNumber,
        line: originalLine,
        error: 'Invalid NetRegex JSON'
      });
      return line;
    }
    if (!isObject(params) || !isValidNetParams(netRegexType, params)) {
      this.errors.push({
        lineNumber: lineNumber,
        line: originalLine,
        error: 'Invalid NetRegex arguments'
      });
      return line;
    }
    const translatedParams = translateRegexBuildParamAnon(params, this.options.ParserLanguage, this.replacements).params;
    const regex = (0,netregexes/* buildNetRegexForTrigger */.BW)(netRegexType, {
      ...translatedParams,
      capture: false
    });

    // The original params should be TimelineNetParams, thus so should the output.
    if (!isTimelineNetParams(translatedParams)) throw new not_reached/* UnreachableCode */.$();
    return this.buildRegexSync(uniqueid, 'net', translatedParams, regexes/* default.parse */.Z.parse(regex), syncCommand.args, seconds, lineNumber, e, line);
  }
  matchSyncRegexCommand(line, uniqueid, seconds, lineNumber, e) {
    const commandMatch = timeline_parser_regexes.syncRegexCommand.exec(line);
    if (!commandMatch || !commandMatch['groups']) return line;
    const syncCommand = commandMatch['groups'];
    if (syncCommand.text === undefined || syncCommand.regex === undefined) throw new not_reached/* UnreachableCode */.$();
    line = line.replace(syncCommand.text, '').trim();
    return this.buildRegexSync(uniqueid, 'parsed', syncCommand.regex, regexes/* default.parse */.Z.parse(this.GetReplacedSync(syncCommand.regex)), syncCommand.args, seconds, lineNumber, e, line);
  }
  buildRegexSync(uniqueid, regexType, origInput, parsedRegex, args, seconds, lineNumber, e, line) {
    const sync = {
      id: uniqueid,
      origInput: origInput,
      regexType: regexType,
      regex: parsedRegex,
      start: seconds - 2.5,
      end: seconds + 2.5,
      time: seconds,
      lineNumber: lineNumber,
      event: e
    };
    e.sync = sync;
    if (args !== undefined) {
      let argMatch = timeline_parser_regexes.windowCommand.exec(args);
      if (argMatch && argMatch['groups']) {
        const windowCommand = argMatch['groups'];
        if (windowCommand.text === undefined || windowCommand.end === undefined) throw new not_reached/* UnreachableCode */.$();
        line = line.replace(windowCommand.text, '').trim();
        if (windowCommand.start !== undefined) {
          sync.start = seconds - parseFloat(windowCommand.start);
          sync.end = seconds + parseFloat(windowCommand.end);
        } else {
          sync.start = seconds - parseFloat(windowCommand.end) / 2;
          sync.end = seconds + parseFloat(windowCommand.end) / 2;
        }
      }
      argMatch = timeline_parser_regexes.jumpCommand.exec(args);
      if (argMatch && argMatch['groups']) {
        const jumpCommand = argMatch['groups'];
        if (jumpCommand.text === undefined) throw new not_reached/* UnreachableCode */.$();
        line = line.replace(jumpCommand.text, '').trim();
        if (jumpCommand.seconds !== undefined) sync.jump = parseFloat(jumpCommand.seconds);else if (jumpCommand.label !== undefined) (this.labelToSync[jumpCommand.label] ??= []).push(sync);else throw new not_reached/* UnreachableCode */.$();
        if (jumpCommand.command === 'forcejump') sync.jumpType = 'force';else sync.jumpType = 'normal';
      }
    }
    this.syncStarts.push(sync);
    this.syncEnds.push(sync);
    if (sync.jumpType === 'force') this.forceJumps.push(sync);
    return line;
  }
  matchDurationCommand(line, e) {
    const commandMatch = timeline_parser_regexes.durationCommand.exec(line);
    if (commandMatch && commandMatch['groups']) {
      const durationCommand = commandMatch['groups'];
      if (durationCommand.text === undefined || durationCommand.seconds === undefined) throw new not_reached/* UnreachableCode */.$();
      line = line.replace(durationCommand.text, '').trim();
      e.duration = parseFloat(durationCommand.seconds);
    }
    return line;
  }
  GetReplacedText(text) {
    // Anything in the timeline config takes precedence over timelineReplace sections in
    // the trigger file.  It is also a full replacement, vs the regex-style GetReplacedHelper.
    const rename = this.timelineConfig?.Rename?.[text];
    if (rename !== undefined) return rename;
    const replaceLang = this.options.TimelineLanguage ?? this.options.ParserLanguage ?? 'en';
    return translateText(text, replaceLang, this.replacements);
  }
  GetReplacedSync(sync) {
    const replaceLang = this.options.ParserLanguage ?? 'en';
    return translateRegex(sync, replaceLang, this.replacements);
  }
  GetMissingTranslationsToIgnore() {
    return ['--Reset--', '--sync--', 'Start', '^ ?21:', '^( ?257)? 101:', '^(\\(\\?\\<timestamp\\>\\^\\.\\{14\\}\\)) (1B|21|23):', '^(\\^\\.\\{14\\})? ?(1B|21|23):', '^::\\y{AbilityCode}:$', '^\\.\\*$', '^ 1\\[56\\]:\\[\\^:\\]\\*:\\[\\^:\\]\\*:', '^( ?260)? 104:', '^ ?29:'].map(x => regexes/* default.parse */.Z.parse(x));
  }

  // Utility function.  This could be a function on TimelineParser, but it seems weird to
  // store all of the original timeline texts unnecessarily when only config/utilities need it.
  static Translate(timeline, timelineText, syncErrors, textErrors) {
    const lineToText = {};
    const lineToSync = {};
    for (const event of timeline.events) {
      if (!event.lineNumber) continue;
      lineToText[event.lineNumber] = event;
    }
    for (const event of timeline.syncStarts) lineToSync[event.lineNumber] = event;

    // Combine replaced lines with errors.
    const timelineLines = timelineText.split(/\n/);
    const translatedLines = [];
    timelineLines.forEach((timelineLine, idx) => {
      const lineNumber = idx + 1;
      let line = timelineLine.trim();
      const lineText = lineToText[lineNumber];
      if (lineText) line = line.replace(` "${lineText.name}"`, ` "${lineText.text}"`);
      const lineSync = lineToSync[lineNumber];
      if (lineSync) {
        if (typeof lineSync.origInput === 'string') {
          line = line.replace(`sync /${lineSync.origInput}/`, `sync /${lineSync.regex.source}/`);
        } else {
          const translatedParams = translateRegexBuildParamAnon(lineSync.origInput, timeline.options.ParserLanguage, timeline.replacements).params;
          line = line.replace(/{[^}]*}/, `{ ${JSON.stringify(translatedParams)} }`);
        }
      }
      if (syncErrors?.[lineNumber]) line += ' #MISSINGSYNC';
      if (textErrors?.[lineNumber]) line += ' #MISSINGTEXT';
      translatedLines.push(line);
    });
    return translatedLines;
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/timeline.ts





// Hi, sorry about this whole class.  This is all pretty old code and honestly could
// probably all be entirely rewritten at this point if anybody has the time or brain.
//
// This TimelineController class is involved in playing back the timeline efficiently.
// As it says on the tin, it's the controller here and HtmlTimelineUI is the view.
// The UI does very little and relies on TimelineController to manually add and remove
// timer bars as necessary.  It does some animations when things are removed, but
// only when it's been told to remove them.
//
// When any time is resynced even slightly, then all of the bars are removed and readded
// with new times.  (This could probably be better to just update them in place!).
// Similarly, any jump (even with lookahead) can't do any UI animations or anything
// because the lookahead bars don't know anything about the new bars at the jump location.
// This is kind of jarring but hopefully most people don't notice it.
//
// Things are also very precarious in terms of how this class walks through things.
// If this.activeEvents is out of sync or unsorted, then it will clog up and new bars
// will not be able to be added.  Durations are extremely awkward as they are manually
// added once their original event has passed.  This means that if you ever jump
// to a new location with an ongoing duration from the past, it will not appear.
// It also has some issues if the duration extends past the jump (see comments inline).
// Also because of this, we have to look through every event all the time to figure
// out if there's a duration to care about (and probably we could figure this out
// ahead of time like we do with placing text events + beforeSeconds at the correct
// place in the timeline).
//
// There's also no testing, sorry.

// TODO: we should also refactor uses of `window` out of here and maybe into
// set/clear timeout wrappers in html_timeline_ui as well.

const kBig = 1000000000; // Something bigger than any fight length in seconds.

const activeText = {
  en: 'Active:',
  de: 'Aktiv:',
  fr: 'Active :',
  ja: '(進行):',
  cn: '(进行中):',
  ko: '시전중:'
};
class TimelineUI {
  timeline = null;
  Init() {
    /* noop */
  }
  AddDebugInstructions() {
    /* noop */
  }
  SetPopupTextInterface(_popupText) {
    /* noop */
  }
  Reset() {
    /* noop */
  }
  SetTimeline(timeline) {
    this.Init();
    this.Reset();
    this.timeline = timeline;
    if (this.timeline) this.timeline.ui = this;
  }
  OnAddTimer(_fightNow, _e, _channeling) {
    /* noop */
  }
  OnRemoveTimer(_e, _force = false) {
    /* noop */
  }
  OnShowInfoText(_text, _currentTime) {
    /* noop */
  }
  OnShowAlertText(_text, _currentTime) {
    /* noop */
  }
  OnShowAlarmText(_text, _currentTime) {
    /* noop */
  }
  OnSpeakTTS(_text, _currentTime) {
    /* noop */
  }
  OnTrigger(_trigger, _matches, _currentTime) {
    /* noop */
  }
  OnSyncTime(_fightNow, _running) {
    /* noop */
  }
}
const initialNextEventState = {
  index: 0,
  minFightNow: 0,
  timeOffset: 0,
  sortKeyOffset: 0,
  jumpCount: 0
};
class Timeline {
  timebase = 0;
  nextEventState = {
    ...initialNextEventState
  };
  nextText = 0;
  nextSyncStart = 0;
  nextSyncEnd = 0;
  nextForceJump = 0;
  updateTimer = 0;
  constructor(text, replacements, triggers, styles, options, zoneId) {
    this.options = options;
    this.zoneId = zoneId;
    this.replacements = replacements;
    const lang = this.options.TimelineLanguage || this.options.ParserLanguage || 'en';
    this.activeText = lang in activeText ? activeText[lang] : activeText['en'];

    // Not sorted.
    this.activeSyncs = [];
    this.activeNetSyncs = [];
    // Sorted by event occurrence time.
    this.activeEvents = [];
    // Events that are no longer active but we are keeping on screen briefly.
    this.keepAliveEvents = [];
    // A set of names which will not be notified about.
    this.ignores = {};
    // Sorted by event occurrence time.
    this.events = [];
    // Sorted by event occurrence time.
    this.texts = [];
    // Sorted by sync.start time.
    this.syncStarts = [];
    // Sorted by sync.end time.
    this.syncEnds = [];
    // Sorted by event occurrence time.
    this.forceJumps = [];
    this.LoadFile(text, triggers, styles);
    this.Stop();
  }
  LoadFile(text, triggers, styles) {
    const parsed = new TimelineParser(text, this.replacements, triggers, styles, this.options, this.zoneId);
    this.ignores = parsed.ignores;
    this.events = parsed.events;
    this.texts = parsed.texts;
    this.syncStarts = parsed.syncStarts;
    this.syncEnds = parsed.syncEnds;
    this.forceJumps = parsed.forceJumps;
  }
  Stop() {
    this.timebase = 0;
    this.nextEventState = {
      ...initialNextEventState
    };
    this.nextText = 0;
    this.nextSyncStart = 0;
    this.nextSyncEnd = 0;
    this.nextForceJump = 0;
    const fightNow = 0;
    this._AdvanceTimeTo(fightNow);
    this._CollectActiveSyncs(fightNow);
    this._ClearTimers();
    this._CancelUpdate();
    this.ui?.OnSyncTime(fightNow, false);
  }
  SyncTo(fightNow, currentTime, _sync) {
    // If we ever sync somewhere else, then remove any active overhanging windows from force jumps.
    this.activeLastForceJumpSync = undefined;

    // This records the actual time which aligns with "0" in the timeline.
    const newTimebase = new Date(currentTime - fightNow * 1000).valueOf();
    // Skip syncs that are too close.  Many syncs happen on abilities that
    // hit 8 to 24 people, and so this is a lot of churn.
    if (Math.abs(newTimebase - this.timebase) <= 2) return;
    this.timebase = newTimebase;
    this.nextEventState = {
      ...initialNextEventState
    };
    this.nextText = 0;
    this.nextSyncStart = 0;
    this.nextSyncEnd = 0;

    // This will skip text events without running them.
    this._AdvanceTimeTo(fightNow);
    this._CollectActiveSyncs(fightNow);

    // Clear all timers except any synthetic duration events.
    // This is because if the sync goes even a hair into the future, then
    // the duration ending event will get dropped here.

    // FIXME: we could be smarter here and know ahead of time where all the duration
    // events are, so that we could skip ahead into the future where a duration
    // event has started but not expired and have that work properly.
    this._AddDurationTimers(fightNow);
    this._ClearExceptRunningDurationTimers(fightNow);
    this._AddUpcomingTimers(fightNow);
    this._CancelUpdate();
    this._ScheduleUpdate(fightNow);
    this.ui?.OnSyncTime(fightNow, true);
  }
  _CollectActiveSyncs(fightNow) {
    this.activeSyncs = [];
    this.activeNetSyncs = [];
    for (let i = this.nextSyncEnd; i < this.syncEnds.length; ++i) {
      const syncEnd = this.syncEnds[i];
      if (syncEnd && syncEnd.start <= fightNow) {
        if (syncEnd.regexType === 'parsed') this.activeSyncs.push(syncEnd);else this.activeNetSyncs.push(syncEnd);
      }
    }
    if (this.activeLastForceJumpSync !== undefined && this.activeLastForceJumpSync.start <= fightNow && this.activeLastForceJumpSync.end > fightNow) {
      if (this.activeLastForceJumpSync.regexType === 'parsed') this.activeSyncs.push(this.activeLastForceJumpSync);else this.activeNetSyncs.push(this.activeLastForceJumpSync);
    } else {
      this.activeLastForceJumpSync = undefined;
    }
  }
  OnLogLineJump(sync, currentTime) {
    if ('jump' in sync) {
      if (!sync.jump) {
        this.SyncTo(0, currentTime, sync);
        this.Stop();
      } else {
        this.SyncTo(sync.jump, currentTime, sync);
      }
    } else {
      this.SyncTo(sync.time, currentTime, sync);
    }
  }
  OnLogLine(line, currentTime) {
    for (const sync of this.activeSyncs) {
      if (sync.regex.test(line)) {
        this.OnLogLineJump(sync, currentTime);
        break;
      }
    }
  }
  OnNetLogLine(line, currentTime) {
    for (const sync of this.activeNetSyncs) {
      if (sync.regex.test(line)) {
        this.OnLogLineJump(sync, currentTime);
        break;
      }
    }
  }
  _AdvanceTimeTo(fightNow) {
    // This function advances time to fightNow without processing any events.
    let event = this.events[this.nextEventState.index];
    while (this.nextEventState.index < this.events.length && event && event.time + this.nextEventState.timeOffset <= fightNow) event = this.events[++this.nextEventState.index];
    let text = this.texts[this.nextText];
    while (this.nextText < this.texts.length && text && text.time <= fightNow) text = this.texts[++this.nextText];
    let syncStart = this.syncStarts[this.nextSyncStart];
    while (this.nextSyncStart < this.syncStarts.length && syncStart && syncStart.start <= fightNow) syncStart = this.syncStarts[++this.nextSyncStart];
    let syncEnd = this.syncEnds[this.nextSyncEnd];
    while (this.nextSyncEnd < this.syncEnds.length && syncEnd && syncEnd.end <= fightNow) syncEnd = this.syncEnds[++this.nextSyncEnd];
    let forceJump = this.forceJumps[this.nextForceJump];
    while (this.nextForceJump < this.forceJumps.length && forceJump && forceJump.time <= fightNow) forceJump = this.forceJumps[++this.nextForceJump];
  }
  _ClearTimers() {
    for (const activeEvent of this.activeEvents) this.ui?.OnRemoveTimer(activeEvent, false);
    this.activeEvents = [];
    for (const keepAlive of this.keepAliveEvents) {
      window.clearTimeout(keepAlive.timeout);
      this.ui?.OnRemoveTimer(keepAlive.event, false);
    }
  }
  _ClearExceptRunningDurationTimers(fightNow) {
    const durationEvents = [];
    for (const event of this.activeEvents) {
      if (event.isDur && event.time > fightNow) {
        durationEvents.push(event);
        continue;
      }
      this.ui?.OnRemoveTimer(event, true);
    }
    // Do not clear keep alive events here, as this is part of a sync jump
    // and keep alive timing is independent of timeline time.

    this.activeEvents = durationEvents;
  }
  _RemoveExpiredTimers(fightNow) {
    let activeEvent = this.activeEvents[0];
    while (this.activeEvents.length && activeEvent && activeEvent.time <= fightNow) {
      const event = activeEvent;
      if (typeof window !== 'undefined' && this.options.KeepExpiredTimerBarsForSeconds > 0) {
        this.keepAliveEvents.push({
          event: event,
          timeout: window.setTimeout(() => {
            // Find and remove the first keepalive event with this id.
            let found = false;
            this.keepAliveEvents = this.keepAliveEvents.filter(x => {
              if (found) return true;
              if (x.event.id === event.id) {
                found = true;
                return false;
              }
              return true;
            });
            this.ui?.OnRemoveTimer(event, false);
            // Because keepalive events are in "real time" just update the timer
            // whenever any has been removed in case more bars need to be added.
            this._OnUpdateTimer(Date.now());
          }, this.options.KeepExpiredTimerBarsForSeconds * 1000)
        });
      } else {
        this.ui?.OnRemoveTimer(activeEvent, false);
      }
      this.activeEvents.splice(0, 1);
      activeEvent = this.activeEvents[0];
    }
  }
  _AddDurationTimers(fightNow) {
    const events = [];
    for (let i = 0; i < this.activeEvents.length; ++i) {
      const e = this.activeEvents[i];
      if (e && e.time <= fightNow && e.duration) {
        const durationEvent = {
          // FIXME: it is incorrect to have a duration timer share an id with its non-duration
          // origin when the duration extends across the end of a short loop.  Re-adding the
          // non-duration origin will remove (due to same id) the ongoing duration timer.
          // HOWEVER, there's also various issues (sortKey is incorrect, and activeEvent.time
          // also needs to be adjusted) so for now we'll work around this by just not supporting
          // durations that extend across jumps.
          //
          // Example timeline:
          //   3 "Loop Target"
          //   7 "Long Duration Event" duration 100
          //   8 "Jump Backwards to Loop Target" sync /etc/ jump 3
          id: e.id,
          time: e.time + e.duration,
          sortKey: e.sortKey,
          name: e.name,
          text: `${this.activeText} ${e.text}`,
          isDur: true
        };
        events.push(durationEvent);
        this.activeEvents.splice(i, 1);
        this.ui?.OnRemoveTimer(e, true);
        this.ui?.OnAddTimer(fightNow, durationEvent, true);
        --i;
      }
    }
    if (events.length) Array.prototype.push.apply(this.activeEvents, events);
    this.activeEvents.sort((a, b) => {
      return a.time - b.time;
    });
  }
  _AddUpcomingTimers(fightNow) {
    while (this.nextEventState.index < this.events.length && this.activeEvents.length + this.keepAliveEvents.length < this.options.MaxNumberOfTimerBars) {
      const e = this.events[this.nextEventState.index];
      if (e === undefined) throw new not_reached/* UnreachableCode */.$();

      // If we have too many bars, just hold at this next event state
      // until space frees up and we can start processing again.
      const timeUntilEvent = e.time + this.nextEventState.timeOffset - fightNow;
      if (timeUntilEvent > this.options.ShowTimerBarsAtSeconds) break;
      ++this.nextEventState.index;

      // If this event is before a forced jump or has already happened, skip.
      if (e.time <= this.nextEventState.minFightNow || timeUntilEvent <= 0) continue;
      if (!(e.name in this.ignores)) {
        const activeEvent = {
          ...e,
          id: `${e.id}-${this.nextEventState.jumpCount}`,
          time: e.time + this.nextEventState.timeOffset,
          sortKey: e.sortKey + this.nextEventState.sortKeyOffset
        };
        this.activeEvents.push(activeEvent);
        this.ui?.OnAddTimer(fightNow, activeEvent, false);
      }
      const sync = e.sync;
      if (sync?.jumpType === 'force' && sync?.jump !== undefined) {
        this.nextEventState.index = 0;
        this.nextEventState.minFightNow = sync.jump;
        this.nextEventState.timeOffset += sync.time - sync.jump;
        this.nextEventState.jumpCount++;
        // All events are numbered with a sort key.  We could find the max sort key of all
        // timeline entries and multiply by jump count to get an ordering such that
        // all sort keys at a higher jump count sort after previous ones.  However,
        // since we doing a forced jump lookahead at this point, we will never see anything higher
        // than `e.sortKey`, so we can use that as a max.  Once the timeline syncs for any
        // reason, we'll be back to jumpCount=0 and normal sort keys.  Sadly, this will not
        // be true if we ever fix the duration bug across loops (see comments inline)
        // but it's a band-aid for now, sorry.  Probably HtmlTimelineUI needs smarter ordering.
        this.nextEventState.sortKeyOffset = e.sortKey * this.nextEventState.jumpCount;
      }
    }
  }
  _AddPassedTexts(fightNow, currentTime) {
    while (this.nextText < this.texts.length) {
      const t = this.texts[this.nextText];
      if (!t) break;
      if (t.time > fightNow) break;
      if (t.type === 'info') this.ui?.OnShowInfoText(t.text, currentTime);else if (t.type === 'alert') this.ui?.OnShowAlertText(t.text, currentTime);else if (t.type === 'alarm') this.ui?.OnShowAlarmText(t.text, currentTime);else if (t.type === 'tts') this.ui?.OnSpeakTTS(t.text, currentTime);else if (t.type === 'trigger') this.ui?.OnTrigger(t.trigger, t.matches, currentTime);
      ++this.nextText;
    }
  }
  _CancelUpdate() {
    if (this.updateTimer) {
      window.clearTimeout(this.updateTimer);
      this.updateTimer = 0;
    }
  }
  _ScheduleUpdate(fightNow) {
    console.assert(this.timebase, '_ScheduleUpdate called while stopped');
    let nextEventStarting = kBig;
    let nextTextOccurs = kBig;
    let nextEventEnding = kBig;
    let nextSyncStarting = kBig;
    let nextSyncEnding = kBig;
    if (this.nextEventState.index < this.events.length) {
      const nextEvent = this.events[this.nextEventState.index];
      if (nextEvent) {
        const nextEventEndsAt = nextEvent.time + this.nextEventState.timeOffset;
        console.assert(nextEventStarting > fightNow, 'nextEvent wasn\'t updated before calling _ScheduleUpdate');
        // There might be more events than we can show, so the next event might be in
        // the past. If that happens, then ignore it, as we can't use that for our timer.
        const showNextEventAt = nextEventEndsAt - this.options.ShowTimerBarsAtSeconds;
        if (showNextEventAt > fightNow) nextEventStarting = showNextEventAt;
      }
    }
    if (this.nextText < this.texts.length) {
      const nextText = this.texts[this.nextText];
      if (nextText) {
        nextTextOccurs = nextText.time;
        console.assert(nextTextOccurs > fightNow, 'nextText wasn\'t updated before calling _ScheduleUpdate');
      }
    }
    if (this.activeEvents.length > 0) {
      const activeEvent = this.activeEvents[0];
      if (activeEvent) {
        nextEventEnding = activeEvent.time;
        console.assert(nextEventEnding > fightNow, 'Expired activeEvents weren\'t pruned before calling _ScheduleUpdate');
      }
    }
    if (this.nextSyncStart < this.syncStarts.length) {
      const syncStarts = this.syncStarts[this.nextSyncStart];
      if (syncStarts) {
        nextSyncStarting = syncStarts.start;
        console.assert(nextSyncStarting > fightNow, 'nextSyncStart wasn\'t updated before calling _ScheduleUpdate');
      }
    }
    if (this.nextSyncEnd < this.syncEnds.length) {
      const syncEnds = this.syncEnds[this.nextSyncEnd];
      if (syncEnds) {
        nextSyncEnding = syncEnds.end;
        console.assert(nextSyncEnding > fightNow, 'nextSyncEnd wasn\'t updated before calling _ScheduleUpdate');
      }
    }
    const forceEnd = this.activeLastForceJumpSync?.end;
    if (forceEnd !== undefined && forceEnd < nextSyncEnding) nextSyncEnding = forceEnd;
    const nextTime = Math.min(nextEventStarting, nextEventEnding, nextTextOccurs, nextSyncStarting, nextSyncEnding);
    if (nextTime === kBig) return;
    console.assert(nextTime > fightNow, 'nextTime is in the past');
    this._CancelUpdate();
    this.updateTimer = window.setTimeout(() => this._OnUpdateTimer(Date.now()), (nextTime - fightNow) * 1000);
  }
  _OnUpdateTimer(currentTime) {
    console.assert(this.timebase, '_OnTimerUpdate called while stopped');
    // Round to ~30ms precision to avoid micro changes of fightNow from 10 to 10.003.
    // Also round *up*, as these timers are always scheduled for the next event
    // and it doesn't make sense to schedule something for 0.8s out and then
    // round down to 0.799s and need another timer to have that text complete.
    const fightNow = Math.ceil(32 * (currentTime - this.timebase) / 1000) / 32;

    // Unlike other jumps which happen "immediately", an unconditional jump may have happened
    // in the past (+/- some timer variation).  Should we just consider that the update
    // always happens exactly at the time it should?
    const unconditionalJump = this._CheckUnconditionalJump(fightNow);
    if (unconditionalJump) {
      const jumpSource = unconditionalJump.time;
      this._AddPassedTexts(jumpSource, currentTime);
      const jumpDest = unconditionalJump.jump;
      if (jumpDest === undefined) throw new not_reached/* UnreachableCode */.$();
      const offset = fightNow - jumpSource;
      this.SyncTo(jumpDest, currentTime - offset);

      // Handle "overhanging" windows on unconditional jumps, by rewriting:
      //   old: 500.0 sync /something/ window 20,10 jump 300
      //   new: 300.0 sync /something window 0,10 jump 300
      this.activeLastForceJumpSync = {
        ...unconditionalJump,
        time: jumpDest,
        start: jumpDest,
        end: unconditionalJump.end - unconditionalJump.time + jumpDest,
        jumpType: 'normal'
      };
      this._OnUpdateTimer(currentTime);
      return;
    }

    // Send text events now or they'd be skipped by _AdvanceTimeTo().
    this._AddPassedTexts(fightNow, currentTime);
    this._AdvanceTimeTo(fightNow);
    this._CollectActiveSyncs(fightNow);
    this._AddDurationTimers(fightNow);
    this._RemoveExpiredTimers(fightNow);
    this._AddUpcomingTimers(fightNow);
    this._ScheduleUpdate(fightNow);
  }
  _CheckUnconditionalJump(fightNow) {
    const forceJump = this.forceJumps[this.nextForceJump];
    if (forceJump && forceJump.time <= fightNow) return forceJump;
  }
}
class TimelineController {
  activeTimeline = null;
  constructor(options, ui, raidbossDataFiles) {
    this.options = options;
    this.ui = ui;
    this.options = options;
    this.ui = ui;
    this.timelines = {};
    for (const [filename, file] of Object.entries(raidbossDataFiles)) {
      if (!filename.endsWith('.txt') || typeof file !== 'string') continue;
      this.timelines[filename] = file;
    }

    // Used to suppress any Engage! if there's a wipe between /countdown and Engage!.
    this.suppressNextEngage = false;
    this.wipeRegex = netregexes/* commonNetRegex.wipe */.sL.wipe;
  }
  SetPopupTextInterface(popupText) {
    this.ui.SetPopupTextInterface(popupText);
  }
  SetInCombat(inCombat) {
    // Wipe lines come before combat is false, but because OnLogEvent doesn't process
    // lines when out of combat, suppress any engages that come before the next countdown
    // just as a safety, especially for old ARR content where wipe lines don't happen.
    if (!inCombat) this.suppressNextEngage = true;
    if (!inCombat && this.activeTimeline) this.activeTimeline.Stop();
  }
  OnLogEvent(e) {
    if (!this.activeTimeline) return;
    const currentTime = Date.now();
    for (const log of e.detail.logs) {
      if (LocaleRegex.countdownStart[this.options.ParserLanguage].test(log)) {
        // As you can't start a countdown while in combat, the next engage is real.
        this.suppressNextEngage = false;
      } else if (LocaleRegex.countdownEngage[this.options.ParserLanguage].test(log)) {
        // If we see an engage after a wipe, but before combat has started otherwise
        // (e.g. countdown > wipe > face pull > engage), don't process this engage line
        if (this.suppressNextEngage) continue;
      } else if (this.wipeRegex.test(log)) {
        // If we see a wipe, ignore the next engage.  If we see a countdown before that wipe,
        // we will clear this.  Therefore, this will only apply to active countdowns.
        this.suppressNextEngage = true;
      }
      this.activeTimeline.OnLogLine(log, currentTime);
    }
  }
  OnNetLog(e) {
    if (!this.activeTimeline) return;
    const currentTime = Date.now();

    // TODO: Check for the countdown => wipe => engage logic for network lines
    this.activeTimeline.OnNetLogLine(e.rawLine, currentTime);
  }
  SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles, zoneId) {
    this.activeTimeline = null;
    let text = '';

    // Get the text from each file in |timelineFiles|.
    for (const timelineFile of timelineFiles) {
      const name = this.timelines[timelineFile];
      if (name !== undefined) text = `${text}\n${name}`;else console.log(`Timeline file not found: ${timelineFile}`);
    }
    // Append text from each block in |timelines|.
    for (const timeline of timelines) text = `${text}\n${timeline}`;
    if (text) {
      this.activeTimeline = new Timeline(text, replacements, triggers, styles, this.options, zoneId);
    }
    this.ui.SetTimeline(this.activeTimeline);
  }
  IsReady() {
    return this.timelines !== null;
  }
}
class TimelineLoader {
  constructor(timelineController) {
    this.timelineController = timelineController;
    this.timelineController = timelineController;
  }
  SetTimelines(timelineFiles, timelines, replacements, triggers, styles, zoneId) {
    this.timelineController.SetActiveTimeline(timelineFiles, timelines, replacements, triggers, styles, zoneId);
  }
  IsReady() {
    return this.timelineController.IsReady();
  }
  StopCombat() {
    this.timelineController.SetInCombat(false);
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/html_timeline_ui.ts




const html_timeline_ui_kBig = 1000000000; // Something bigger than any fight length in seconds.

const timelineInstructions = {
  en: ['These lines are', 'debug timeline entries.', 'If you lock the overlay,', 'they will disappear!', 'Real timelines automatically', 'appear when supported.'],
  de: ['Diese Zeilen sind', 'Timeline Debug-Einträge.', 'Wenn du das Overlay sperrst,', 'werden sie verschwinden!', 'Echte Timelines erscheinen automatisch,', 'wenn sie unterstützt werden.'],
  fr: ['Ces lignes sont', 'des timelines de test.', 'Si vous bloquez l\'overlay,', 'elles disparaîtront !', 'Les vraies Timelines', 'apparaîtront automatiquement.'],
  ja: ['こちらはデバッグ用の', 'タイムラインです。', 'オーバーレイをロックすれば、', 'デバッグ用テキストも消える', 'サポートするゾーンにはタイム', 'ラインを動的にロードする。'],
  cn: ['显示在此处的是', '调试用时间轴。', '将此悬浮窗锁定', '则会立刻消失', '真实的时间轴会根据', '当前区域动态加载并显示'],
  ko: ['이 막대바는 디버그용', '타임라인 입니다.', '오버레이를 위치잠금하면,', '이 막대바도 사라집니다.', '지원되는 구역에서 타임라인이', '자동으로 표시됩니다.']
};

// TODO: Duplicated in 'jobs'
const computeBackgroundFrom = (element, classList) => {
  const div = document.createElement('div');
  const classes = classList.split('.');
  for (const cls of classes) div.classList.add(cls);
  element.appendChild(div);
  const color = window.getComputedStyle(div).background;
  element.removeChild(div);
  return color;
};
class HTMLTimelineUI extends TimelineUI {
  init = false;
  root = null;
  barColor = null;
  barExpiresSoonColor = null;
  timerlist = null;
  activeBars = {};
  debugElement = null;
  debugFightTimer = null;
  constructor(options) {
    super();
    this.options = options;
    this.lang = this.options.TimelineLanguage || this.options.ParserLanguage || 'en';
    this.AddDebugInstructions();
  }
  Init() {
    if (this.init) return;
    this.init = true;
    this.root = document.getElementById('timeline-container');
    if (!this.root) throw new Error('can\'t find timeline-container');

    // TODO: left for now as backwards compatibility with user css.  Remove this later??
    this.root.classList.add(`lang-${this.lang}`);
    this.root.lang = (0,languages/* langToLocale */.Go)(this.lang);
    if (this.options.Skin !== undefined) this.root.classList.add(`skin-${this.options.Skin}`);
    this.barColor = computeBackgroundFrom(this.root, 'timeline-bar-color');
    this.barExpiresSoonColor = computeBackgroundFrom(this.root, 'timeline-bar-color.soon');
    this.timerlist = document.getElementById('timeline');
    if (this.timerlist) {
      this.timerlist.style.gridTemplateRows = `repeat(${this.options.MaxNumberOfTimerBars}, min-content)`;
      if (this.options.ReverseTimeline) this.timerlist.classList.add('reversed');
    }
    this.activeBars = {};
  }
  AddDebugInstructions() {
    const lang = this.lang in timelineInstructions ? this.lang : 'en';
    const instructions = timelineInstructions[lang];

    // Helper for positioning/resizing when locked.
    const helper = document.getElementById('timeline-resize-helper');
    if (!helper) return;
    const rows = Math.max(6, this.options.MaxNumberOfTimerBars);
    helper.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
    for (let i = 0; i < this.options.MaxNumberOfTimerBars; ++i) {
      const helperBar = document.createElement('div');
      helperBar.classList.add('text');
      helperBar.classList.add('resize-helper-bar');
      helperBar.classList.add('timeline-bar-color');
      if (i < 1) helperBar.classList.add('soon');
      if (i < instructions.length) helperBar.innerText = instructions[i] ?? '';else helperBar.innerText = `${i + 1}`;
      helper.appendChild(helperBar);
    }

    // For simplicity in code, always make debugElement valid,
    // however it does not exist in the raid emulator.
    this.debugElement = document.getElementById('timeline-debug');
    if (!this.debugElement) this.debugElement = document.createElement('div');
  }
  SetPopupTextInterface(popupText) {
    this.popupText = popupText;
  }
  Reset() {
    if (this.timeline) {
      delete this.timeline.ui;
      while (this.timerlist && this.timerlist.lastChild) this.timerlist.removeChild(this.timerlist.lastChild);
      if (this.debugElement) this.debugElement.innerHTML = '';
      this.debugFightTimer = null;
      // TODO: clear all timeouts?
      this.activeBars = {};
    }
  }
  OnAddTimer(fightNow, e, channeling) {
    const div = document.createElement('div');
    const bar = TimerBar.create();
    div.classList.add('timer-bar');
    div.appendChild(bar);
    bar.duration = channeling ? e.time - fightNow : this.options.ShowTimerBarsAtSeconds;
    bar.value = e.time - fightNow;
    bar.righttext = 'remain';
    bar.lefttext = e.text;
    bar.toward = 'right';
    bar.stylefill = !channeling ? 'fill' : 'empty';
    if (e.style) bar.applyStyles(e.style);

    // Adding a timer with the same id immediately removes the previous.
    const activeBar = this.activeBars[e.id];
    if (activeBar) {
      const parentDiv = activeBar.bar.parentNode;
      parentDiv?.parentNode?.removeChild(parentDiv);
      // Soon timeout is just an optimization to remove, as it's unnecessary.
      if (activeBar.soonTimeout !== undefined) {
        window.clearTimeout(activeBar.soonTimeout);
        activeBar.soonTimeout = undefined;
      }
    }
    let soonTimeout = undefined;
    if (!channeling && e.time - fightNow > this.options.BarExpiresSoonSeconds) {
      bar.fg = this.barColor;
      soonTimeout = window.setTimeout(() => bar.fg = this.barExpiresSoonColor, (e.time - fightNow - this.options.BarExpiresSoonSeconds) * 1000);
    } else {
      bar.fg = this.barExpiresSoonColor;
    }
    if (e.sortKey) {
      // Invert the order if the timer bars should "grow" in the reverse direction
      div.style.order = ((this.options.ReverseTimeline ? -1 : 1) * e.sortKey).toString();
    }
    this.timerlist?.appendChild(div);
    this.activeBars[e.id] = {
      bar: bar,
      soonTimeout: soonTimeout
    };
  }
  OnRemoveTimer(e, force) {
    const activeBar = this.activeBars[e.id];
    if (!activeBar) return;
    const div = activeBar.bar.parentNode;
    if (!(div instanceof HTMLElement)) throw new not_reached/* UnreachableCode */.$();
    const removeBar = () => {
      div?.parentNode?.removeChild(div);
      delete this.activeBars[e.id];
    };
    if (!force) div.classList.add('animate-timer-bar-removed');
    if (window.getComputedStyle(div).animationName !== 'none') {
      // Wait for animation to finish
      div.addEventListener('animationend', removeBar);
    } else {
      removeBar();
    }
  }
  OnShowInfoText(text, currentTime) {
    if (this.popupText) this.popupText.Info(text, currentTime);
  }
  OnShowAlertText(text, currentTime) {
    if (this.popupText) this.popupText.Alert(text, currentTime);
  }
  OnShowAlarmText(text, currentTime) {
    if (this.popupText) this.popupText.Alarm(text, currentTime);
  }
  OnSpeakTTS(text, currentTime) {
    if (this.popupText) this.popupText.TTS(text, currentTime);
  }
  OnTrigger(trigger, matches, currentTime) {
    if (this.popupText) this.popupText.Trigger(trigger, matches, currentTime);
  }
  OnSyncTime(fightNow, running) {
    if (!this.options.Debug || !this.debugElement) return;
    if (!running) {
      if (this.debugFightTimer) this.debugElement.removeChild(this.debugFightTimer);
      this.debugFightTimer = null;
      return;
    }
    if (!this.debugFightTimer) {
      this.debugFightTimer = TimerBar.create();
      this.debugFightTimer.width = '100px';
      this.debugFightTimer.height = '17px';
      this.debugFightTimer.duration = html_timeline_ui_kBig;
      this.debugFightTimer.lefttext = 'elapsed';
      this.debugFightTimer.toward = 'right';
      this.debugFightTimer.stylefill = 'fill';
      this.debugFightTimer.bg = 'transparent';
      this.debugFightTimer.fg = 'transparent';
      // Align it to the 'first' item in the timeline container
      if (this.options.ReverseTimeline) this.debugElement.classList.add('reversed');
      this.debugElement.appendChild(this.debugFightTimer);
    }

    // Force this to be reset.
    this.debugFightTimer.elapsed = 0;
    this.debugFightTimer.elapsed = fightNow;
  }
}
;// CONCATENATED MODULE: ./resources/party.ts

const emptyRoleToPartyNames = () => {
  return {
    tank: [],
    healer: [],
    dps: [],
    crafter: [],
    gatherer: [],
    none: []
  };
};
const roleLocalized = {
  tank: {
    en: 'tank',
    de: 'Verteidiger',
    fr: 'Tank',
    ja: 'タンク',
    cn: '坦克',
    ko: '탱커'
  },
  healer: {
    en: 'healer',
    de: 'Heiler',
    fr: 'Soigneur',
    ja: 'ヒーラー',
    cn: '治疗',
    ko: '힐러'
  },
  dps: {
    en: 'dps',
    de: 'DPS',
    fr: 'DPS',
    ja: 'DPS',
    cn: '输出',
    ko: '딜러'
  },
  crafter: {
    en: 'crafter',
    de: 'Handwerker',
    fr: 'Artisan',
    ja: 'クラフター',
    cn: '能工巧匠',
    ko: '제작가'
  },
  gatherer: {
    en: 'gatherer',
    de: 'Sammler',
    fr: 'Récolteur',
    ja: 'ギャザラー',
    cn: '大地使者',
    ko: '채집가'
  },
  none: {
    en: 'none',
    de: 'Keine',
    fr: 'Aucun',
    ja: '冒険者',
    cn: '冒险者',
    ko: '모험가'
  }
};
const jobLocalizedAbbr = {
  NONE: {
    en: 'NONE',
    de: 'Keine',
    fr: 'Aucun',
    ja: '冒険者',
    cn: '冒险',
    ko: '모험가'
  },
  GLA: {
    en: 'GLA',
    de: 'GLA',
    fr: 'GLA',
    ja: '剣術士',
    cn: '剑术',
    ko: '검술'
  },
  PGL: {
    en: 'PGL',
    de: 'FST',
    fr: 'PGL',
    ja: '格闘士',
    cn: '格斗',
    ko: '격투'
  },
  MRD: {
    en: 'MRD',
    de: 'MAR',
    fr: 'MRD',
    ja: '斧術士',
    cn: '斧术',
    ko: '도끼술'
  },
  LNC: {
    en: 'LNC',
    de: 'PIK',
    fr: 'HAS',
    ja: '槍術士',
    cn: '枪术',
    ko: '창술'
  },
  ARC: {
    en: 'ARC',
    de: 'WDL',
    fr: 'ARC',
    ja: '弓術士',
    cn: '弓箭',
    ko: '궁술'
  },
  CNJ: {
    en: 'CNJ',
    de: 'DRU',
    fr: 'ÉLM',
    ja: '幻術士',
    cn: '幻术',
    ko: '환술'
  },
  THM: {
    en: 'THM',
    de: 'THM',
    fr: 'OCC',
    ja: '呪術士',
    cn: '咒术',
    ko: '주술'
  },
  CRP: {
    en: 'CRP',
    de: 'ZMR',
    fr: 'MEN',
    ja: '木工',
    cn: '刻木',
    ko: '목수'
  },
  BSM: {
    en: 'BSM',
    de: 'GRS',
    fr: 'FRG',
    ja: '鍛冶',
    cn: '锻铁',
    ko: '대장'
  },
  ARM: {
    en: 'ARM',
    de: 'PLA',
    fr: 'ARM',
    ja: '甲冑',
    cn: '铸甲',
    ko: '갑주'
  },
  GSM: {
    en: 'GSM',
    de: 'GLD',
    fr: 'ORF',
    ja: '彫金',
    cn: '雕金',
    ko: '보석'
  },
  LTW: {
    en: 'LTW',
    de: 'GER',
    fr: 'TAN',
    ja: '革細',
    cn: '制革',
    ko: '가죽'
  },
  WVR: {
    en: 'WVR',
    de: 'WEB',
    fr: 'COU',
    ja: '裁縫',
    cn: '裁衣',
    ko: '재봉'
  },
  ALC: {
    en: 'ALC',
    de: 'ALC',
    fr: 'ALC',
    ja: '錬金',
    cn: '炼金',
    ko: '연금'
  },
  CUL: {
    en: 'CUL',
    de: 'GRM',
    fr: 'CUI',
    ja: '調理',
    cn: '烹调',
    ko: '요리'
  },
  MIN: {
    en: 'MIN',
    de: 'MIN',
    fr: 'MIN',
    ja: '採掘',
    cn: '采矿',
    ko: '광부'
  },
  BTN: {
    en: 'BTN',
    de: 'GÄR',
    fr: 'BOT',
    ja: '園芸',
    cn: '园艺',
    ko: '원예'
  },
  FSH: {
    en: 'FSH',
    de: 'FIS',
    fr: 'PEC',
    ja: '漁師',
    cn: '捕鱼',
    ko: '어부'
  },
  PLD: {
    en: 'PLD',
    de: 'PLD',
    fr: 'PLD',
    ja: 'ナイト',
    cn: '骑士',
    ko: '나이트'
  },
  MNK: {
    en: 'MNK',
    de: 'MÖN',
    fr: 'MOI',
    ja: 'モンク',
    cn: '武僧',
    ko: '몽크'
  },
  WAR: {
    en: 'WAR',
    de: 'KRG',
    fr: 'GUE',
    ja: '戦士',
    cn: '战士',
    ko: '전사'
  },
  DRG: {
    en: 'DRG',
    de: 'DRG',
    fr: 'DRG',
    ja: '竜騎士',
    cn: '龙骑',
    ko: '용기사'
  },
  BRD: {
    en: 'BRD',
    de: 'BRD',
    fr: 'BRD',
    ja: '詩人',
    cn: '诗人',
    ko: '음유'
  },
  WHM: {
    en: 'WHM',
    de: 'WMA',
    fr: 'MBL',
    ja: '白魔',
    cn: '白魔',
    ko: '백마'
  },
  BLM: {
    en: 'BLM',
    de: 'SMA',
    fr: 'MNO',
    ja: '黒魔',
    cn: '黑魔',
    ko: '흑마'
  },
  ACN: {
    en: 'ACN',
    de: 'HRT',
    fr: 'ACN',
    ja: '巴術士',
    cn: '秘术',
    ko: '비술'
  },
  SMN: {
    en: 'SMN',
    de: 'BSW',
    fr: 'INV',
    ja: '召喚',
    cn: '召唤',
    ko: '소환'
  },
  SCH: {
    en: 'SCH',
    de: 'GLT',
    fr: 'ERU',
    ja: '学者',
    cn: '学者',
    ko: '학자'
  },
  ROG: {
    en: 'ROG',
    de: 'SCH',
    fr: 'SUR',
    ja: '双剣士',
    cn: '双剑',
    ko: '쌍검'
  },
  NIN: {
    en: 'NIN',
    de: 'NIN',
    fr: 'NIN',
    ja: '忍者',
    cn: '忍者',
    ko: '닌자'
  },
  MCH: {
    en: 'MCH',
    de: 'MCH',
    fr: 'MCH',
    ja: '機工',
    cn: '机工',
    ko: '기공'
  },
  DRK: {
    en: 'DRK',
    de: 'DKR',
    fr: 'CHN',
    ja: '暗黒',
    cn: '暗骑',
    ko: '암기'
  },
  AST: {
    en: 'AST',
    de: 'AST',
    fr: 'AST',
    ja: '占星',
    cn: '占星',
    ko: '점성'
  },
  SAM: {
    en: 'SAM',
    de: 'SAM',
    fr: 'SAM',
    ja: '侍',
    cn: '武士',
    ko: '사무'
  },
  RDM: {
    en: 'RDM',
    de: 'RMA',
    fr: 'MRG',
    ja: '赤魔',
    cn: '赤魔',
    ko: '적마'
  },
  BLU: {
    en: 'BLU',
    de: 'BMA',
    fr: 'MBU',
    ja: '青魔',
    cn: '青魔',
    ko: '청마'
  },
  GNB: {
    en: 'GNB',
    de: 'REV',
    fr: 'PSB',
    ja: 'ガンブレ',
    cn: '绝枪',
    ko: '건브'
  },
  DNC: {
    en: 'DNC',
    de: 'TÄN',
    fr: 'DNS',
    ja: '踊り子',
    cn: '舞者',
    ko: '무도'
  },
  RPR: {
    en: 'RPR',
    de: 'SNT',
    fr: 'FCH',
    ja: 'リーパー',
    cn: '钐镰',
    ko: '리퍼'
  },
  SGE: {
    en: 'SGE',
    de: 'WEI',
    fr: 'SAG',
    ja: '賢者',
    cn: '贤者',
    ko: '현자'
  }
};
const jobLocalizedFull = {
  NONE: {
    en: 'Adventurer',
    de: 'Abenteurer',
    fr: 'Aventurier',
    ja: '冒険者',
    cn: '冒险者',
    ko: '모험가'
  },
  GLA: {
    en: 'Gladiator',
    de: 'Gladiator',
    fr: 'Gladiateur',
    ja: '剣術士',
    cn: '剑术师',
    ko: '검술사'
  },
  PGL: {
    en: 'Pugilist',
    de: 'Faustkämpfer',
    fr: 'Pugiliste',
    ja: '格闘士',
    cn: '格斗家',
    ko: '격투가'
  },
  MRD: {
    en: 'Marauder',
    de: 'Marodeur',
    fr: 'Maraudeur',
    ja: '斧術士',
    cn: '斧术师',
    ko: '도끼술사'
  },
  LNC: {
    en: 'Lancer',
    de: 'Pikenier',
    fr: 'Maître d\'Hast',
    ja: '槍術士',
    cn: '枪术师',
    ko: '창술사'
  },
  ARC: {
    en: 'Archer',
    de: 'Waldläufer',
    fr: 'Archer',
    ja: '弓術士',
    cn: '弓箭手',
    ko: '궁술사'
  },
  CNJ: {
    en: 'Conjurer',
    de: 'Druide',
    fr: 'Élémentaliste',
    ja: '幻術士',
    cn: '幻术师',
    ko: '환술사'
  },
  THM: {
    en: 'Thaumaturge',
    de: 'Thaumaturg',
    fr: 'Occultiste',
    ja: '呪術士',
    cn: '咒术师',
    ko: '주술사'
  },
  CRP: {
    en: 'Carpenter',
    de: 'Zimmerer',
    fr: 'Charpentier',
    ja: '木工師',
    cn: '刻木匠',
    ko: '목수'
  },
  BSM: {
    en: 'Blacksmith',
    de: 'Grobschmied',
    fr: 'Forgeron',
    ja: '鍛冶師',
    cn: '锻铁匠',
    ko: '대장장이'
  },
  ARM: {
    en: 'Armorer',
    de: 'Plattner',
    fr: 'Armurier',
    ja: '甲冑師',
    cn: '铸甲匠',
    ko: '갑주제작사'
  },
  GSM: {
    en: 'Goldsmith',
    de: 'Goldschmied',
    fr: 'Orfèvre',
    ja: '彫金師',
    cn: '雕金匠',
    ko: '보석공예가'
  },
  LTW: {
    en: 'Leatherworker',
    de: 'Gerber',
    fr: 'Tanneur',
    ja: '革細工師',
    cn: '制革匠',
    ko: '가죽공예가'
  },
  WVR: {
    en: 'Weaver',
    de: 'Weber',
    fr: 'Couturier',
    ja: '裁縫師',
    cn: '裁衣匠',
    ko: '재봉사'
  },
  ALC: {
    en: 'Alchemist',
    de: 'Alchemist',
    fr: 'Alchimiste',
    ja: '錬金術師',
    cn: '炼金术士',
    ko: '연금술사'
  },
  CUL: {
    en: 'Culinarian',
    de: 'Gourmet',
    fr: 'Cuisinier',
    ja: '調理師',
    cn: '烹调师',
    ko: '요리사'
  },
  MIN: {
    en: 'Miner',
    de: 'Minenarbeiter',
    fr: 'Mineur',
    ja: '採掘師',
    cn: '采矿工',
    ko: '광부'
  },
  BTN: {
    en: 'Botanist',
    de: 'Gärtner',
    fr: 'Botaniste',
    ja: '園芸師',
    cn: '园艺工',
    ko: '원예가'
  },
  FSH: {
    en: 'Fisher',
    de: 'Fischer',
    fr: 'Pêcheur',
    ja: '漁師',
    cn: '捕鱼人',
    ko: '어부'
  },
  PLD: {
    en: 'Paladin',
    de: 'Paladin',
    fr: 'Paladin',
    ja: 'ナイト',
    cn: '骑士',
    ko: '나이트'
  },
  MNK: {
    en: 'Monk',
    de: 'Mönch',
    fr: 'Moine',
    ja: 'モンク',
    cn: '武僧',
    ko: '몽크'
  },
  WAR: {
    en: 'Warrior',
    de: 'Krieger',
    fr: 'Guerrier',
    ja: '戦士',
    cn: '战士',
    ko: '전사'
  },
  DRG: {
    en: 'Dragoon',
    de: 'Dragoon',
    fr: 'Chevalier dragon',
    ja: '竜騎士',
    cn: '龙骑士',
    ko: '용기사'
  },
  BRD: {
    en: 'Bard',
    de: 'Barde',
    fr: 'Barde',
    ja: '吟遊詩人',
    cn: '吟游诗人',
    ko: '음유시인'
  },
  WHM: {
    en: 'White Mage',
    de: 'Weißmagier',
    fr: 'Mage blanc',
    ja: '白魔道士',
    cn: '白魔法师',
    ko: '백마도사'
  },
  BLM: {
    en: 'Black Mage',
    de: 'Schwarzmagier',
    fr: 'Mage noir',
    ja: '黒魔道士',
    cn: '黑魔法师',
    ko: '흑마도사'
  },
  ACN: {
    en: 'Arcanist',
    de: 'Hermetiker',
    fr: 'Arcaniste',
    ja: '巴術士',
    cn: '秘术师',
    ko: '비슬사'
  },
  SMN: {
    en: 'Summoner',
    de: 'Beschwörer',
    fr: 'Invocateur',
    ja: '召喚士',
    cn: '召唤师',
    ko: '소환사'
  },
  SCH: {
    en: 'Scholar',
    de: 'Gelehrter',
    fr: 'Érudit',
    ja: '学者',
    cn: '学者',
    ko: '학자'
  },
  ROG: {
    en: 'Rogue',
    de: 'Schurke',
    fr: 'Surineur',
    ja: '双剣士',
    cn: '双剑师',
    ko: '쌍검사'
  },
  NIN: {
    en: 'Ninja',
    de: 'Ninja',
    fr: 'Ninja',
    ja: '忍者',
    cn: '忍者',
    ko: '닌자'
  },
  MCH: {
    en: 'Machinist',
    de: 'Maschinist',
    fr: 'Machiniste',
    ja: '機工士',
    cn: '机工士',
    ko: '기공사'
  },
  DRK: {
    en: 'Dark Knight',
    de: 'Dunkelritter',
    fr: 'Chevalier noir',
    ja: '暗黒騎士',
    cn: '暗黑骑士',
    ko: '암흑기사'
  },
  AST: {
    en: 'Astrologian',
    de: 'Astrologe',
    fr: 'Astromancien',
    ja: '占星術師',
    cn: '占星术士',
    ko: '점성술사'
  },
  SAM: {
    en: 'Samurai',
    de: 'Samurai',
    fr: 'Samuraï',
    ja: '侍',
    cn: '武士',
    ko: '사무라이'
  },
  RDM: {
    en: 'Red Mage',
    de: 'Rotmagier',
    fr: 'Mage rouge',
    ja: '赤魔道士',
    cn: '赤魔法师',
    ko: '적마도사'
  },
  BLU: {
    en: 'Blue Mage',
    de: 'Blaumagier',
    fr: 'Mage bleu',
    ja: '青魔道士',
    cn: '青魔法师',
    ko: '청마도사'
  },
  GNB: {
    en: 'Gunbreaker',
    de: 'Revolverklinge',
    fr: 'Pistosabreur',
    ja: 'ガンブレイカー',
    cn: '绝枪战士',
    ko: '건브레이커'
  },
  DNC: {
    en: 'Dancer',
    de: 'Tänzer',
    fr: 'Danseur',
    ja: '踊り子',
    cn: '舞者',
    ko: '무도가'
  },
  RPR: {
    en: 'Reaper',
    de: 'Schnitter',
    fr: 'Faucheur',
    ja: 'リーパー',
    cn: '钐镰客',
    ko: '리퍼'
  },
  SGE: {
    en: 'Sage',
    de: 'Weiser',
    fr: 'Sage',
    ja: '賢者',
    cn: '贤者',
    ko: '현자'
  }
};
class PartyTracker {
  details = [];
  partyNames_ = [];
  partyIds_ = [];
  allianceNames_ = [];
  allianceIds_ = [];
  nameToRole_ = {};
  idToName_ = {};
  roleToPartyNames_ = emptyRoleToPartyNames();
  constructor(options) {
    this.options = options;
  }

  // Bind this to PartyChanged events.
  onPartyChanged(e) {
    this.reset();
    this.details = e.party;
    for (const p of e.party) {
      this.allianceIds_.push(p.id);
      this.allianceNames_.push(p.name);
      const jobName = util/* default.jobEnumToJob */.Z.jobEnumToJob(p.job);
      const role = util/* default.jobToRole */.Z.jobToRole(jobName);
      this.idToName_[p.id] = p.name;
      this.nameToRole_[p.name] = role;
      if (p.inParty) {
        this.partyIds_.push(p.id);
        this.partyNames_.push(p.name);
        this.roleToPartyNames_[role].push(p.name);
      }
    }
  }
  reset() {
    // original event data
    this.details = [];
    this.partyNames_ = [];
    this.partyIds_ = [];
    this.allianceNames_ = [];
    this.allianceIds_ = [];
    this.nameToRole_ = {};
    this.idToName_ = {};

    // role -> [names] but only for party
    this.roleToPartyNames_ = emptyRoleToPartyNames();
  }

  // returns an array of the names of players in your immediate party
  get partyNames() {
    return this.partyNames_;
  }
  get partyIds() {
    return this.partyIds_;
  }

  // returns an array of the names of players in your alliance
  get allianceNames() {
    return this.allianceNames_;
  }

  // returns an array of the names of tanks in your immediate party
  get tankNames() {
    return this.roleToPartyNames_['tank'];
  }

  // returns an array of the names of healers in your immediate party
  get healerNames() {
    return this.roleToPartyNames_['healer'];
  }

  // returns an array of the names of dps players in your immediate party
  get dpsNames() {
    return this.roleToPartyNames_['dps'];
  }

  // returns true if the named player in your alliance is a particular role
  isRole(name, role) {
    return this.nameToRole_[name] === role;
  }

  // returns true if the named player in your alliance is a tank
  isTank(name) {
    return this.isRole(name, 'tank');
  }

  // returns true if the named player in your alliance is a healer
  isHealer(name) {
    return this.isRole(name, 'healer');
  }

  // returns true if the named player in your alliance is a dps
  isDPS(name) {
    return this.isRole(name, 'dps');
  }

  // returns true if the named player is in your immediate party
  inParty(name) {
    return this.partyNames.includes(name);
  }

  // returns true if the named player is in your alliance
  inAlliance(name) {
    return this.allianceNames.includes(name);
  }

  // for a named player, returns the other tank in your immediate party
  // if named player is not a tank, or there's not exactly two tanks
  // in your immediate party, returns null.
  otherTank(name) {
    const names = this.tankNames;
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  }

  // see: otherTank, but for healers.
  otherHealer(name) {
    const names = this.healerNames;
    if (names.length !== 2) return;
    if (names[0] === name) return names[1];
    if (names[1] === name) return names[0];
  }

  // returns the job name of the specified party member
  jobName(name) {
    const partyIndex = this.partyNames.indexOf(name);
    if (partyIndex < 0) return;
    const job = this.details[partyIndex]?.job;
    if (job === undefined) return;
    return util/* default.jobEnumToJob */.Z.jobEnumToJob(job);
  }
  nameFromId(id) {
    return this.idToName_[id];
  }
  member(name) {
    // For boilerplate convenience in triggers, handle undefined names.
    if (name === undefined) {
      const unknown = '???';
      return {
        name: unknown,
        nick: unknown,
        toString: () => unknown
      };
    }
    const partyMember = this.details.find(member => member.name === name);
    let ret;
    const nick = util/* default.shortName */.Z.shortName(name, this.options.PlayerNicks);
    if (!partyMember) {
      // If we can't find this party member for some reason, use some sort of default.
      ret = {
        name: name,
        nick: nick
      };
    } else {
      const lang = this.options.DisplayLanguage;
      const job = util/* default.jobEnumToJob */.Z.jobEnumToJob(partyMember.job);
      const jobAbbr = jobLocalizedAbbr[job]?.[lang] ?? job;
      const jobFull = jobLocalizedFull[job]?.[lang] ?? job;
      const role = util/* default.jobToRole */.Z.jobToRole(job);
      const roleName = roleLocalized[role]?.[lang] ?? role;
      ret = {
        id: partyMember.id,
        job: jobAbbr,
        jobFull: jobFull,
        role: roleName,
        name: name,
        nick: nick
      };
    }

    // Need to assign this afterwards so it can reference `ret`.
    ret.toString = () => {
      const retVal = ret[this.options.DefaultPlayerLabel];
      if (typeof retVal === 'string') return retVal;
      return ret.nick;
    };
    return ret;
  }
}
// EXTERNAL MODULE: ./resources/zone_id.ts
var zone_id = __webpack_require__(588);
;// CONCATENATED MODULE: ./ui/raidboss/autoplay_helper.ts
class AutoplayHelper {
  static isButtonCreated = false;
  static getContext() {
    AutoplayHelper.context ??= new AudioContext();
    return AutoplayHelper.context;
  }
  static CheckIfAlreadyRunning() {
    // This check will only ever succeed on running Chromium passing
    //  --autoplay-policy=no-user-gesture-required
    // as command line argument or configuring CEF the correct way.
    // Once https://bugs.chromium.org/p/chromium/issues/detail?id=1106380
    // is fixed this function will return false on every (up-to-date) browser
    const context = AutoplayHelper.getContext();
    return context.state === 'running';
  }
  static Prompt() {
    if (AutoplayHelper.isButtonCreated) {
      return;
    }
    const context = AutoplayHelper.getContext();
    const button = document.createElement('button');
    button.innerText = 'Click to enable audio';
    button.classList.add('autoplay-helper-button');
    button.onclick = function () {
      void context.resume();
    };
    context.onstatechange = function () {
      button.remove();
    };
    document.body.appendChild(button);
    AutoplayHelper.isButtonCreated = true;
  }
  static CheckAndPrompt() {
    if (!AutoplayHelper.CheckIfAlreadyRunning()) AutoplayHelper.Prompt();
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/browser_tts_engine.ts
class TTSItem {
  constructor(text, lang, voice) {
    this.text = text;
    this.item = new SpeechSynthesisUtterance(text);
    if (lang !== undefined) this.item.lang = lang;
    if (voice) this.item.voice = voice;
  }
  play() {
    window.speechSynthesis.speak(this.item);
  }
}
class BrowserTTSEngine {
  ttsItems = {};
  initializeAttempts = 0;
  constructor(cactbotLang) {
    this.cactbotLang = cactbotLang;
    if (window.speechSynthesis !== undefined) {
      // https://bugs.chromium.org/p/chromium/issues/detail?id=334847
      window.speechSynthesis.getVoices();
      window.speechSynthesis.onvoiceschanged = () => this.initializeVoice();
    } else console.error('BrowserTTS error: no browser support for window.speechSynthesis');
  }
  initializeVoice() {
    if (window.speechSynthesis === undefined) return false;
    if (this.speechVoice !== undefined) return true;
    if (this.initializeAttempts > 5) return false;
    this.initializeAttempts++;
    const cactbotLangToSpeechLang = {
      en: 'en-US',
      de: 'de-DE',
      fr: 'fr-FR',
      ja: 'ja-JP',
      // TODO: maybe need to provide an option of zh-CN, zh-HK, zh-TW?
      cn: 'zh-CN',
      ko: 'ko-KR'
    };

    // figure out what TTS engine type we need
    const speechLang = cactbotLangToSpeechLang[this.cactbotLang];
    const voice = window.speechSynthesis.getVoices().find(voice => voice.lang.replaceAll('_', '-') === speechLang);
    if (voice) {
      this.speechLang = speechLang;
      this.speechVoice = voice;
      window.speechSynthesis.onvoiceschanged = null;
      return true;
    }
    console.error('BrowserTTS error: could not find voice');
    return false;
  }
  play(text) {
    // TODO: try to address a report of the constructor not finding voices
    // by lazily looking later.
    if (!this.initializeVoice()) return;
    try {
      let ttsItem = this.ttsItems[text];
      if (!ttsItem) {
        ttsItem = new TTSItem(text, this.speechLang, this.speechVoice);
        this.ttsItems[text] = ttsItem;
      }
      ttsItem.play();
    } catch (e) {
      console.error('Exception performing TTS', e);
    }
  }
}
;// CONCATENATED MODULE: ./ui/raidboss/popup-text.ts












const isRaidbossLooseTimelineTrigger = trigger => {
  return 'isTimelineTrigger' in trigger;
};
const isNetRegexTrigger = trigger => {
  if (trigger && !isRaidbossLooseTimelineTrigger(trigger)) return 'netRegex' in trigger;
  return false;
};
const isRegexTrigger = trigger => {
  if (trigger && !isRaidbossLooseTimelineTrigger(trigger)) return 'regex' in trigger;
  return false;
};
// There should be (at most) six lines of instructions.
const raidbossInstructions = {
  en: ['Instructions as follows:', 'This is debug text for resizing.', 'It goes away when you lock the overlay', 'along with the blue background.', 'Timelines and triggers will show up in supported zones.', 'Test raidboss with a /countdown in Summerford Farms.'],
  de: ['Anweisungen wie folgt:', 'Dies ist ein Debug-Text zur Größenänderung.', 'Er verschwindet, wenn du das Overlay sperrst,', 'zusammen mit dem blauen Hintergrund.', 'Timeline und Trigger werden in den unterstützten Zonen angezeigt.', 'Testen Sie Raidboss mit einem /countdown in Sommerfurt-Höfe.'],
  fr: ['Instructions :', 'Ceci est un texte de test pour redimensionner.', 'Il disparaitra \(ainsi que le fond bleu\) quand', 'l\'overlay sera bloqué.', 'Les timelines et triggers seront affichés dans les zones supportées.', 'Testez raidboss avec un /countdown aux Vergers d\'Estival'],
  ja: ['操作手順：', 'デバッグ用のテキストです。', '青色のオーバーレイを', 'ロックすれば消える。', 'サポートするゾーンにタイムラインとトリガーテキストが表示できる。', 'サマーフォード庄に/countdownコマンドを実行し、raidbossをテストできる。'],
  cn: ['请按以下步骤操作：', '这是供用户调整悬浮窗大小的调试用文本', '当你锁定此蓝色背景的悬浮窗', '该文本即会消失。', '在支持的区域中会自动加载时间轴和触发器。', '可在盛夏农庄使用/countdown命令测试该raidboss模块。'],
  ko: ['<조작 설명>', '크기 조정을 위한 디버그 창입니다', '파란 배경과 이 텍스트는', '오버레이를 위치잠금하면 사라집니다', '지원되는 구역에서 타임라인과 트리거가 표시됩니다', '여름여울 농장에서 초읽기를 실행하여 테스트 해볼 수 있습니다']
};

// Because apparently people don't understand uppercase greek letters,
// add a special case to not uppercase them.
const triggerUpperCase = str => {
  return str.replace(/[^αβγδ]/g, x => x.toUpperCase());
};
const onTriggerException = (trigger, e) => {
  // When a fight ends and there are open promises, from delaySeconds or promise itself,
  // all promises will be rejected.  In this case there is no error; simply return without logging.
  if (e === null || typeof e !== 'object') return;
  let str = `Error in trigger: ${trigger.id !== undefined ? trigger.id : '[unknown trigger id]'}`;
  if (trigger.filename !== undefined) str += ` (${trigger.filename})`;
  console.error(str);
  if (e instanceof Error) {
    const lines = e.stack?.split('\n') ?? [];
    for (let i = 0; i < lines.length; ++i) console.error(lines[i]);
  }
};
const sounds = ['Alarm', 'Alert', 'Info', 'Long', 'Pull'];
const soundStrs = sounds;
const texts = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const textMap = {
  info: {
    text: 'infoText',
    upperText: 'InfoText',
    upperSound: 'InfoSound',
    upperSoundVolume: 'InfoSoundVolume',
    rumbleDuration: 'InfoRumbleDuration',
    rumbleWeak: 'InfoRumbleWeak',
    rumbleStrong: 'InfoRumbleStrong'
  },
  alert: {
    text: 'alertText',
    upperText: 'AlertText',
    upperSound: 'AlertSound',
    upperSoundVolume: 'AlertSoundVolume',
    rumbleDuration: 'AlertRumbleDuration',
    rumbleWeak: 'AlertRumbleWeak',
    rumbleStrong: 'AlertRumbleStrong'
  },
  alarm: {
    text: 'alarmText',
    upperText: 'AlarmText',
    upperSound: 'AlarmSound',
    upperSoundVolume: 'AlarmSoundVolume',
    rumbleDuration: 'AlarmRumbleDuration',
    rumbleWeak: 'AlarmRumbleWeak',
    rumbleStrong: 'AlarmRumbleStrong'
  }
};

// Helper for handling trigger overrides.
//
// asList will return a list of triggers in the same order as append was called, except:
// If a later trigger has the same id as a previous trigger, it will replace the previous trigger
// and appear in the same order that the previous trigger appeared.
// e.g. a, b1, c, b2 (where b1 and b2 share the same id) yields [a, b2, c] as the final list.
//
// JavaScript dictionaries are *almost* ordered automatically as we would want,
// but want to handle missing ids and integer ids (you shouldn't, but just in case).
class OrderedTriggerList {
  triggers = [];
  idToIndex = {};
  push(trigger) {
    const idx = trigger.id !== undefined ? this.idToIndex[trigger.id] : undefined;
    if (idx !== undefined && trigger.id !== undefined) {
      const oldTrigger = this.triggers[idx];
      if (oldTrigger === undefined) throw new not_reached/* UnreachableCode */.$();

      // TODO: be verbose now while this is fresh, but hide this output behind debug flags later.
      const triggerFile = trigger => trigger.filename !== undefined ? `'${trigger.filename}'` : 'user override';
      const oldFile = triggerFile(oldTrigger);
      const newFile = triggerFile(trigger);
      console.log(`Overriding '${trigger.id}' from ${oldFile} with ${newFile}.`);
      this.triggers[idx] = trigger;
      return;
    }

    // Normal case of a new trigger, with no overriding.
    if (trigger.id !== undefined) this.idToIndex[trigger.id] = this.triggers.length;
    this.triggers.push(trigger);
  }
  asList() {
    return this.triggers;
  }
}
const popup_text_isObject = x => {
  // JavaScript considers [] to be an object, so check for that explicitly.
  return x instanceof Object && !Array.isArray(x);
};

// User trigger may pass anything as parameters

class TriggerOutputProxy {
  overrideStrings = {};
  responseOutputStrings = {};
  unknownValue = '???';
  constructor(trigger, displayLang, perTriggerAutoConfig) {
    this.trigger = trigger;
    this.displayLang = displayLang;
    this.perTriggerAutoConfig = perTriggerAutoConfig;
    this.outputStrings = trigger.outputStrings ?? {};
    if (trigger.id !== undefined && perTriggerAutoConfig) {
      const config = perTriggerAutoConfig[trigger.id];
      if (config && config.OutputStrings) this.overrideStrings = config.OutputStrings;
    }
    return new Proxy(this, {
      // Response output string subtlety:
      // Take this example response:
      //
      //    response: (data, matches, output) => {
      //      return {
      //        alarmText: output.someAlarm(),
      //        outputStrings: { someAlarm: 'string' }, // <- impossible
      //      };
      //    },
      //
      // Because the object being returned is evaluated all at once, the object
      // cannot simultaneously define outputStrings and use those outputStrings.
      // So, instead, responses need to set `output.responseOutputStrings`.
      // HOWEVER, this also has its own issues!  This value is set for the trigger
      // (which may have multiple active in flight instances).  This *should* be
      // ok because we guarantee that response/alarmText/alertText/infoText/tts
      // are evaluated sequentially for a single trigger before any other trigger
      // instance evaluates that set of triggers.  Finally, for ease of automating
      // the config ui, the response should return the exact same set of
      // outputStrings every time.  Thank you for coming to my TED talk.
      set(target, property, value) {
        if (property === 'responseOutputStrings') {
          if (popup_text_isObject(value)) {
            target[property] = value;
            return true;
          }
          console.error(`Invalid responseOutputStrings on trigger ${target.trigger.id ?? 'Unknown'}`);
          return false;
        }

        // Be kind to user triggers that do weird things, and just console error this
        // instead of throwing an exception.
        console.error(`Invalid property '${String(property)}' on output.`);
        return false;
      },
      get(target, name) {
        // TODO: add a test that verifies nobody does this.
        if (name === 'toJSON' || typeof name !== 'string') return '{}';

        // Because output.func() must exist at the time of trigger eval,
        // always provide a function even before we know which keys are valid.
        return params => {
          const id = target.trigger.id ?? 'Unknown Trigger';

          // Priority: per-trigger config from ui > response > built-in trigger
          // Ideally, response provides everything and trigger provides nothing,
          // or there's no response and trigger provides everything.  Having
          // this well-defined smooths out the collision edge cases.
          let str = target.getReplacement(target.overrideStrings[name], params, name, id);
          if (str === undefined) {
            const responseString = target.responseOutputStrings[name];
            if (popup_text_isObject(responseString)) str = target.getReplacement(responseString, params, name, id);
          }
          if (str === undefined) str = target.getReplacement(target.outputStrings[name], params, name, id);
          if (str === undefined) {
            console.error(`Trigger ${target.trigger.id ?? ''} has missing outputString ${name}.`);
            return target.unknownValue;
          }
          return str;
        };
      }
    });
  }
  evaluateOutputParam(id, key, val, prop, isNestedArray) {
    if (typeof val === 'string' || typeof val === 'number') return val.toString();
    if (typeof val !== 'object') {
      console.error(`Trigger ${id} has non-string param value ${key}.`);
      return this.unknownValue;
    }
    if (Array.isArray(val)) {
      // Don't allow nesting arrays here, e.g. [player1, [player2, player3]].
      if (isNestedArray) {
        console.error(`Trigger ${id} passed nested arrays to param value ${key}.`);
        return this.unknownValue;
      }

      // If a trigger passes in [player1, player2, player3] as a value,
      // and a user specifies `${players.job}`, then return:
      // `${players[0].job}, ${players[1].job}, ${players[2].job}`.
      // In general, this means that all array elements must either be simple
      // strings/numbers or all share the same prop, or there will be errors below
      // about non-existent properties. In practice, this likely will never happen.
      //
      // Also, this assumes that all locales are ok with ", " as a separator.
      // This seems to be true in practice.
      return val.map(p => this.evaluateOutputParam(id, key, p, prop, true)).join(', ');
    }

    // Appease TypeScript, this shouldn't happen.
    if (!popup_text_isObject(val)) return this.unknownValue;
    if (prop !== undefined) {
      const retVal = val[prop];
      if (typeof retVal === 'string' || typeof retVal === 'number') return retVal.toString();
      if (retVal === undefined || retVal === null) {
        console.error(`Trigger ${id} is referencing non-existent object property ${key}.${prop}.`);
      } else {
        console.error(`Trigger ${id} is referencing object property ${key}.${prop} with incorrect type ${typeof retVal}.`);
      }
    }

    // At this point, we're going to try to return a default value if we can,
    // either from an error or because `prop` was unspecified.
    const toStringFunc = val['toString'];
    if (typeof toStringFunc !== 'function') {
      console.error(`Trigger ${id} has non-func ${key}.toString property.`);
      return this.unknownValue;
    }
    const toStringVal = toStringFunc();
    if (typeof toStringVal !== 'string' && typeof toStringVal !== 'number') {
      console.error(`Trigger ${id} returned non-string ${typeof toStringVal} from ${key}.toString().`);
      return this.unknownValue;
    }
    return toStringVal.toString();
  }
  getReplacement(
  // Can't use optional modifier for this arg since the others aren't optional
  template, params, name, id) {
    // If an output strings entry is edited in the config UI and then blanked,
    // the entry will still exist in the config file as an empty string.
    // These should be ignored as not being an override.
    // TODO: maybe blanked/default entries should be deleted from the config?
    if (template === undefined || template === '') return;
    let value;
    if (typeof template === 'string')
      // user config
      value = template;else value = template[this.displayLang] ?? template['en'];
    if (typeof value !== 'string') {
      console.error(`Trigger ${id} has invalid outputString ${name}.`, JSON.stringify(template));
      return;
    }
    return value.replace(/\${\s*([^}\s]+)\s*}/g, (_fullMatch, key) => {
      if (params !== undefined) {
        let prop = undefined;
        if (!(key in params) && key.includes('.')) {
          const parts = key.split('.');
          // Only a warning here (for user triggers), but mocha tests will error out for this case
          // If the user specifies extra parts, just ignore them
          if (parts.length > 2) console.warn(`Trigger ${id} has extra path parts for object parameter ${key}.`);
          key = parts[0] ?? '';
          prop = parts[1];
        }
        if (key in params) {
          const val = params[key];
          return this.evaluateOutputParam(id, key, val, prop);
        }
      }
      console.error(`Trigger ${id} can't replace ${key} in ${JSON.stringify(template)}.`);
      return this.unknownValue;
    });
  }
  static makeOutput(trigger, displayLang, perTriggerAutoConfig) {
    // `Output` is the common type used for the trigger data interface to support arbitrary
    // string keys and always returns a string. However, TypeScript doesn't have good support
    // for the Proxy representing this structure so we need to cast Proxy => unknown => Output
    return new TriggerOutputProxy(trigger, displayLang, perTriggerAutoConfig);
  }
}
const defaultOutput = TriggerOutputProxy.makeOutput({}, 'en');
const wipeCactbotEcho = netregexes/* commonNetRegex.cactbotWipeEcho */.sL.cactbotWipeEcho;
const wipeEndEcho = netregexes/* commonNetRegex.userWipeEcho */.sL.userWipeEcho;
const wipeFadeIn = netregexes/* commonNetRegex.wipe */.sL.wipe;
const isWipe = line => {
  if (wipeCactbotEcho.test(line) || wipeEndEcho.test(line) || wipeFadeIn.test(line)) return true;
  return false;
};
class PopupText {
  triggers = [];
  netTriggers = [];
  // A map of trigger id to setTimeout handle.
  timers = {};
  triggerSuppress = {};
  currentTriggerID = 0;
  inCombat = false;
  resetWhenOutOfCombat = true;
  // These are deliberately `| null` for raidemulator extendability reasons

  kMaxRowsOfText = 2;
  me = '';
  job = 'NONE';
  role = 'none';
  triggerSets = [];
  triggerSetsById = {};
  triggerSetConfig = {};
  zoneName = '';
  zoneId = -1;
  dataInitializers = [];
  constructor(options, timelineLoader, raidbossDataFiles) {
    this.options = options;
    this.timelineLoader = timelineLoader;
    this.raidbossDataFiles = raidbossDataFiles;
    this.options = options;
    this.partyTracker = new PartyTracker(options);
    this.timelineLoader = timelineLoader;
    this.ProcessDataFiles(raidbossDataFiles);
    this.infoText = document.getElementById('popup-text-info');
    this.alertText = document.getElementById('popup-text-alert');
    this.alarmText = document.getElementById('popup-text-alarm');
    this.parserLang = this.options.ParserLanguage ?? 'en';
    this.displayLang = this.options.AlertsLanguage ?? this.options.DisplayLanguage ?? this.options.ParserLanguage ?? 'en';
    if (this.options.IsRemoteRaidboss) {
      this.ttsEngine = new BrowserTTSEngine(this.displayLang);
      this.ttsSay = text => {
        this.ttsEngine?.play(this.options.TransformTts(text));
      };
    } else {
      this.ttsSay = text => {
        void (0,overlay_plugin_api/* callOverlayHandler */.ae)({
          call: 'cactbotSay',
          text: this.options.TransformTts(text)
        });
      };
    }
    this.data = this.getDataObject();

    // check to see if we need user interaction to play audio
    // only if audio is enabled in options
    if (this.options.AudioAllowed) AutoplayHelper.CheckAndPrompt();
    this.Reset();
    this.AddDebugInstructions();
    this.HookOverlays();
  }
  AddDebugInstructions() {
    raidbossInstructions[this.displayLang].forEach((line, i) => {
      const elem = document.getElementById(`instructions-${i}`);
      if (!elem) return;
      elem.innerHTML = line;
    });
  }
  HookOverlays() {
    (0,overlay_plugin_api/* addOverlayListener */.PS)('PartyChanged', e => {
      this.partyTracker.onPartyChanged(e);
    });
    addPlayerChangedOverrideListener(e => {
      this.OnPlayerChange(e);
    }, this.options.PlayerNameOverride);
    (0,overlay_plugin_api/* addOverlayListener */.PS)('ChangeZone', e => {
      this.OnChangeZone(e);
    });
    (0,overlay_plugin_api/* addOverlayListener */.PS)('onInCombatChangedEvent', e => {
      this.SetInCombat(e.detail.inGameCombat);
    });
    (0,overlay_plugin_api/* addOverlayListener */.PS)('onLogEvent', e => {
      this.OnLog(e);
    });
    (0,overlay_plugin_api/* addOverlayListener */.PS)('LogLine', e => {
      this.OnNetLog(e);
    });
  }
  OnPlayerChange(e) {
    if (this.job !== e.detail.job || this.me !== e.detail.name) this.OnJobChange(e);
    this.data.currentHP = e.detail.currentHP;
  }
  ProcessDataFiles(files) {
    this.triggerSets = [];
    this.triggerSetsById = {};
    for (const [filename, json] of Object.entries(files)) {
      if (!filename.endsWith('.js') && !filename.endsWith('.ts')) continue;
      if (typeof json !== 'object') {
        console.log(`Unexpected JSON from ${filename}, expected an array`);
        continue;
      }
      if (!json.triggers) {
        console.log(`Unexpected JSON from ${filename}, expected a triggers`);
        continue;
      }
      if (typeof json.triggers !== 'object' || !(json.triggers.length >= 0)) {
        console.log(`Unexpected JSON from ${filename}, expected triggers to be an array`);
        continue;
      }
      const processedSet = {
        filename: filename,
        ...json
      };
      this.triggerSets.push(processedSet);
    }

    // User triggers must come last so that they override built-in files.
    this.triggerSets.push(...this.options.Triggers);

    // Eliminate any trigger sets with duplicate ids and record a lookup by id.
    this.triggerSets = this.triggerSets.filter(triggerSet => {
      if (triggerSet.id === undefined) return true;
      if (this.triggerSetsById[triggerSet.id] !== undefined) {
        console.log(`${triggerSet.filename ?? '???'} has duplicate triggerSet id ${triggerSet.id}, ignoring triggers`);
        return false;
      }
      this.triggerSetsById[triggerSet.id] = triggerSet;
      return true;
    });
  }
  OnChangeZone(e) {
    // Note: this must check zone id and not zone name, as there are some zone name collisions.
    if (this.zoneId === e.zoneID) return;
    this.zoneName = e.zoneName;
    this.zoneId = e.zoneID;
    this.ReloadTimelines();
  }
  ReloadTimelines() {
    if (!this.me || !this.zoneName || !this.timelineLoader.IsReady()) return;

    // Drop the triggers and timelines from the previous zone, so we can add new ones.
    this.triggers = [];
    this.netTriggers = [];
    this.dataInitializers = [];
    this.triggerSetConfig = {};
    let timelineFiles = [];
    let timelines = [];
    const replacements = [];
    const timelineStyles = [];
    this.resetWhenOutOfCombat = true;
    const orderedTriggers = new OrderedTriggerList();

    // Some user timelines may rely on having valid init data
    // Don't use `this.Reset()` since that clears other things as well
    this.data = this.getDataObject();

    // Recursively/iteratively process timeline entries for triggers.
    // Functions get called with data, arrays get iterated, strings get appended.
    const addTimeline = function (obj) {
      if (Array.isArray(obj)) {
        for (const objVal of obj) addTimeline(objVal);
      } else if (typeof obj === 'function') {
        addTimeline(obj(this.data));
      } else if (obj !== undefined) {
        timelines.push(obj);
      }
    }.bind(this);

    // construct something like regexDe or regexFr.
    const langSuffix = this.parserLang.charAt(0).toUpperCase() + this.parserLang.slice(1);
    const regexParserLang = `regex${langSuffix}`;
    const netRegexParserLang = `netRegex${langSuffix}`;
    for (const set of this.triggerSets) {
      // zoneRegex can be undefined, a regex, or translatable object of regex.
      const haveZoneRegex = ('zoneRegex' in set);
      const haveZoneId = ('zoneId' in set);
      if (!haveZoneRegex && !haveZoneId || haveZoneRegex && haveZoneId) {
        console.error(`Trigger set must include exactly one of zoneRegex or zoneId property`);
        continue;
      }
      if (haveZoneId && set.zoneId === undefined) {
        const filename = set.filename !== undefined ? `'${set.filename}'` : '(user file)';
        console.error(`Trigger set has zoneId, but with nothing specified in ${filename}.  ` + `Did you misspell the ZoneId.ZoneName?`);
        continue;
      }

      /* eslint-disable-next-line deprecation/deprecation */
      const origZoneRegex = set.zoneRegex;
      if (set.zoneId !== undefined) {
        if (set.zoneId !== zone_id/* default.MatchAll */.Z.MatchAll && set.zoneId !== this.zoneId && !(typeof set.zoneId === 'object' && set.zoneId.includes(this.zoneId))) continue;
      } else if (origZoneRegex) {
        let zoneRegex = origZoneRegex;
        if (typeof zoneRegex !== 'object') {
          console.error(`zoneRegex must be translatable object or regexp: ${JSON.stringify(origZoneRegex)}`);
          continue;
        } else if (!(zoneRegex instanceof RegExp)) {
          const parserLangRegex = zoneRegex[this.parserLang];
          if (parserLangRegex) {
            zoneRegex = parserLangRegex;
          } else if (zoneRegex['en']) {
            zoneRegex = zoneRegex['en'];
          } else {
            console.error(`unknown zoneRegex parser language: ${JSON.stringify(origZoneRegex)}`);
            continue;
          }
          if (!(zoneRegex instanceof RegExp)) {
            console.error(`zoneRegex must be regexp: ${JSON.stringify(origZoneRegex)}`);
            continue;
          }
        }
        if (this.zoneName.search(regexes/* default.parse */.Z.parse(zoneRegex)) < 0) continue;
      }
      if (this.options.Debug) {
        if (set.id !== undefined) console.log(`Loading id ${set.id}`);else if (set.filename !== undefined) console.log(`Loading ${set.filename}`);else console.log('Loading user triggers for zone');
      }
      const triggerSetAutoConfig = set.id !== undefined ? this.options.PerTriggerSetAutoConfig[set.id] : undefined;
      const loadThisSet = set.id === undefined ? [] : [set.id];
      for (const id of [...loadThisSet, ...(set.loadConfigs ?? [])]) {
        // In case a trigger set id changes and somebody wants to refer to
        // the old id for a backcompat path in triggers, don't early out.
        // Also don't print errors here for missing sets or configs, because backcompat
        // should be able to load from outdated trigger (set) ids without printing errors.
        const loadSet = this.triggerSetsById[id];

        // Load the raw saved options from TriggerSetConfig and using the templates,
        // set appropriate defaults as needed.
        const loadSetConfig = loadSet?.config;
        if (loadSet !== undefined && loadSetConfig !== undefined) {
          user_config/* default.processOptions */.Z.processOptions(this.options, this.triggerSetConfig, this.options.TriggerSetConfig[id] ?? {}, loadSetConfig);
        }

        // Also make sure that any keys that don't correspond to config entries are set
        // so that triggers can use this for back compat.
        for (const [key, value] of Object.entries(this.options.TriggerSetConfig[id] ?? {})) this.triggerSetConfig[key] ??= value;
      }
      const setFilename = set.filename ?? 'Unknown';
      if (set.initData) {
        this.dataInitializers.push({
          file: setFilename,
          func: set.initData
        });
      }

      // Adjust triggers for the parser language.
      if (set.triggers && this.options.AlertsEnabled) {
        for (const [index, tr] of set.triggers.entries()) {
          const trigger = tr;
          // Add an additional resolved regex here to save
          // time later.  This will clobber each time we
          // load this, but that's ok.
          trigger.filename = setFilename;
          const id = trigger.id ?? `${setFilename} trigger[${index}]`;

          // Store trigger set options with the trigger itself,
          // as it may get overridden by a trigger with the same
          // id from a different trigger set.
          trigger.triggerSetAutoConfig = triggerSetAutoConfig;
          this.ProcessTrigger(trigger);
          orderedTriggers.push(trigger);
          const triggerObject = trigger;

          // `regex` and `regexDe` (etc) are deprecated, however they may still be used
          // by user triggers, and so are still checked here.  `regexDe` and friends
          // will never be auto-translated and are assumed to be correct.
          // TODO: maybe we could consider removing these once timelines don't need parsed lines?
          if (isRegexTrigger(trigger)) {
            const defaultRegex = trigger.regex;
            const localeRegex = triggerObject[regexParserLang];
            if (localeRegex instanceof RegExp) {
              trigger.localRegex = regexes/* default.parse */.Z.parse(localeRegex);
            } else {
              const trans = translateRegex(defaultRegex, this.parserLang, set.timelineReplace);
              trigger.localRegex = regexes/* default.parse */.Z.parse(trans);
            }
          }

          // `netRegexDe` (etc) is also deprecated, but they also may still be used by
          // user triggers.  If they exist, they will take precedence over `netRegex`.
          // `netRegex` will be auto-translated into the parser language.  `netRegexDe`
          // and friends will never be auto-translated and are assumed to be correct.
          if (isNetRegexTrigger(trigger)) {
            const defaultNetRegex = trigger.netRegex;
            const localeNetRegex = triggerObject[netRegexParserLang];
            if (localeNetRegex instanceof RegExp) {
              // localized regex don't need to handle net-regex auto build
              trigger.localNetRegex = regexes/* default.parse */.Z.parse(localeNetRegex);
            } else if (defaultNetRegex !== undefined) {
              // simple netRegex trigger, need to build netRegex and translate
              if (defaultNetRegex instanceof RegExp) {
                const trans = translateRegex(defaultNetRegex, this.parserLang, set.timelineReplace);
                trigger.localNetRegex = regexes/* default.parse */.Z.parse(trans);
              } else if (trigger.type === undefined) {
                console.error(`Trigger ${id}: without type property needs RegExp as netRegex`);
              } else {
                const re = (0,netregexes/* buildNetRegexForTrigger */.BW)(trigger.type, translateRegexBuildParam(defaultNetRegex, this.parserLang, set.timelineReplace).params);
                trigger.localNetRegex = regexes/* default.parse */.Z.parse(re);
              }
            }
          }
          if (trigger.localRegex === undefined && trigger.localNetRegex === undefined && !('disabled' in trigger)) {
            // All triggers are added for consistency reasons in overriding/disabling, however
            // show an error if for some reason we haven't been able to build a regex.
            console.error(`Trigger ${id}: missing regex and netRegex; trigger will be ignored`);
          }
        }
      }
      if (set.overrideTimelineFile) {
        const filename = set.filename !== undefined ? `'${set.filename}'` : '(user file)';
        console.log(`Overriding timeline from ${filename}.`);

        // If the timeline file override is set, all previously loaded timeline info is dropped.
        // Styles, triggers, and translations are kept, as they may still apply to the new one.
        timelineFiles = [];
        timelines = [];
      }

      // And set the timeline files/timelines from each set that matches.
      if (set.timelineFile !== undefined) {
        if (set.filename !== undefined) {
          const dir = set.filename.slice(0, Math.max(0, set.filename.lastIndexOf('/')));
          timelineFiles.push(`${dir}/${set.timelineFile}`);
        } else {
          // Note: For user files, this should get handled by raidboss_config.js,
          // where `timelineFile` should get converted to `timeline`.
          console.error(`Can't specify timelineFile in non-manifest file:${set.timelineFile}`);
        }
      }
      if (set.timeline !== undefined) addTimeline(set.timeline);
      if (set.timelineReplace) replacements.push(...set.timelineReplace);
      if (set.timelineTriggers) {
        for (const trigger of set.timelineTriggers) {
          // Timeline triggers are never translated.
          this.ProcessTrigger(trigger);
          trigger.isTimelineTrigger = true;
          trigger.triggerSetAutoConfig = triggerSetAutoConfig;
          orderedTriggers.push(trigger);
        }
      }
      if (set.timelineStyles) timelineStyles.push(...set.timelineStyles);
      if (set.resetWhenOutOfCombat !== undefined) this.resetWhenOutOfCombat &&= set.resetWhenOutOfCombat;
    }

    // Store all the collected triggers in order, and filter out disabled triggers.
    const filterEnabled = trigger => !('disabled' in trigger && trigger.disabled);
    const allTriggers = orderedTriggers.asList().filter(filterEnabled);
    this.triggers = allTriggers.filter(x => x.localRegex !== undefined);
    this.netTriggers = allTriggers.filter(x => x.localNetRegex !== undefined);
    const timelineTriggers = allTriggers.filter(isRaidbossLooseTimelineTrigger);
    this.Reset();
    this.timelineLoader.SetTimelines(timelineFiles, timelines, replacements, timelineTriggers, timelineStyles, this.zoneId);
  }
  ProcessTrigger(trigger) {
    // These properties are used internally by ReloadTimelines only and should
    // not exist on user triggers.  However, the trigger objects themselves are
    // reused when reloading pages, and so it is impossible to verify that
    // these properties don't exist.  Therefore, just delete them silently.
    if (isRaidbossLooseTimelineTrigger(trigger)) delete trigger.isTimelineTrigger;
    delete trigger.localRegex;
    delete trigger.localNetRegex;
    trigger.output = TriggerOutputProxy.makeOutput(trigger, this.displayLang, this.options.PerTriggerAutoConfig);
  }
  OnJobChange(e) {
    this.me = e.detail.name;
    this.job = e.detail.job;
    this.role = util/* default.jobToRole */.Z.jobToRole(this.job);
    this.ReloadTimelines();
  }
  SetInCombat(inCombat) {
    if (this.inCombat === inCombat) return;
    this.inCombat = inCombat;
    this.data.inCombat = inCombat;
    if (!this.resetWhenOutOfCombat) return;

    // Stop timers when stopping combat to stop any active timers that
    // are delayed.  However, also reset when starting combat.
    // This prevents late attacks from affecting |data| which
    // throws off the next run, potentially.
    if (!this.inCombat) {
      this.StopTimers();
      this.timelineLoader.StopCombat();
    }
    if (this.inCombat) this.Reset();
  }
  Reset() {
    util/* default.clearWatchCombatants */.Z.clearWatchCombatants();
    this.data = this.getDataObject();
    this.StopTimers();
    this.triggerSuppress = {};
  }
  StopTimers() {
    for (const handle of Object.values(this.timers)) window.clearTimeout(handle);
    this.timers = {};
  }
  OnLog(e) {
    // This could conceivably be determined based on the line's contents as well, but
    // not sure if that's worth the effort
    const currentTime = +new Date();
    for (const log of e.detail.logs) {
      for (const trigger of this.triggers) {
        const r = trigger.localRegex?.exec(log);
        if (r) this.OnTrigger(trigger, r, currentTime);
      }
    }
  }
  OnNetLog(e) {
    const log = e.rawLine;
    // This could conceivably be determined based on `new Date(e.line[1])` as well, but
    // not sure if that's worth the effort
    const currentTime = +new Date();
    if (isWipe(log)) {
      // isWipe can be called with `/e end` to stop the timeline due to e.g. countdown but no pull
      // However, `this.inCombat` will already be `false` in that case preventing the timeline from
      // getting stopped. If we're not inCombat and we've hit the wipe conditions defined by
      // `isWipe`, just set it to true first and then to false
      if (!this.inCombat) this.SetInCombat(true);
      this.SetInCombat(false);
    }
    for (const trigger of this.netTriggers) {
      const r = trigger.localNetRegex?.exec(log);
      if (r) this.OnTrigger(trigger, r, currentTime);
    }
  }
  OnTrigger(trigger, matches, currentTime) {
    try {
      this.OnTriggerInternal(trigger, matches, currentTime);
    } catch (e) {
      onTriggerException(trigger, e);
    }
  }
  OnTriggerInternal(trigger, matches, currentTime) {
    if (this._onTriggerInternalCheckSuppressed(trigger, currentTime)) return;
    let groups = {};
    // If using named groups, treat matches.groups as matches
    // so triggers can do things like matches.target.
    if (matches && matches.groups) {
      groups = matches.groups;
    } else if (matches) {
      // If there are no matching groups, reproduce the old js logic where
      // groups ended up as the original RegExpExecArray object
      matches.forEach((value, idx) => {
        groups[idx] = value;
      });
    }

    // Set up a helper object so we don't have to throw
    // a ton of info back and forth between subfunctions
    const triggerHelper = this._onTriggerInternalGetHelper(trigger, groups, currentTime);
    if (!this._onTriggerInternalCondition(triggerHelper)) return;
    this._onTriggerInternalPreRun(triggerHelper);

    // Evaluate for delay here, but run delay later
    const delayPromise = this._onTriggerInternalDelaySeconds(triggerHelper);
    this._onTriggerInternalDurationSeconds(triggerHelper);
    this._onTriggerInternalSuppressSeconds(triggerHelper);
    const triggerPostDelay = () => {
      const promise = this._onTriggerInternalPromise(triggerHelper);
      const triggerPostPromise = () => {
        this._onTriggerInternalSound(triggerHelper);
        this._onTriggerInternalSoundVolume(triggerHelper);
        this._onTriggerInternalResponse(triggerHelper);
        this._onTriggerInternalAlarmText(triggerHelper);
        this._onTriggerInternalAlertText(triggerHelper);
        this._onTriggerInternalInfoText(triggerHelper);

        // Rumble isn't a trigger function, so only needs to be ordered
        // after alarm/alert/info.
        this._onTriggerInternalRumble(triggerHelper);

        // Priority audio order:
        // * user disabled (play nothing)
        // * if tts options are enabled globally or for this trigger:
        //   * user TTS triggers tts override
        //   * tts entries in the trigger
        //   * default alarm tts
        //   * default alert tts
        //   * default info tts
        // * if sound options are enabled globally or for this trigger:
        //   * user trigger sound overrides
        //   * sound entries in the trigger
        //   * alarm noise
        //   * alert noise
        //   * info noise
        // * else, nothing
        //
        // In general, tts comes before sounds and user overrides come
        // before defaults.  If a user trigger or tts entry is specified as
        // being valid but empty, this will take priority over the default
        // tts texts from alarm/alert/info and will prevent tts from playing
        // and allowing sounds to be played instead.
        this._onTriggerInternalTTS(triggerHelper);
        this._onTriggerInternalPlayAudio(triggerHelper);
        this._onTriggerInternalRun(triggerHelper);
      };

      // The trigger body must run synchronously when there is no promise.
      if (promise) promise.then(triggerPostPromise, e => onTriggerException(trigger, e));else triggerPostPromise();
    };

    // The trigger body must run synchronously when there is no delay.
    if (delayPromise) delayPromise.then(triggerPostDelay, e => onTriggerException(trigger, e));else triggerPostDelay();
  }

  // Build a default triggerHelper object for this trigger
  _onTriggerInternalGetHelper(trigger, matches, now) {
    const id = trigger.id;
    let options = {};
    let config = {};
    let suppressed = false;
    if (id !== undefined) {
      options = this.options.PerTriggerOptions[id] ?? options;
      config = this.options.PerTriggerAutoConfig[id] ?? config;
      suppressed = this.options.DisabledTriggers[id] ?? suppressed;
    }
    const triggerHelper = {
      trigger: trigger,
      now: now,
      triggerOptions: options,
      triggerAutoConfig: config,
      // This setting only suppresses output, trigger still runs for data/logic purposes
      userSuppressedOutput: suppressed,
      matches: matches,
      // Default options
      textAlertsEnabled: this.options.TextAlertsEnabled,
      soundAlertsEnabled: this.options.SoundAlertsEnabled,
      spokenAlertsEnabled: this.options.SpokenAlertsEnabled,
      groupSpokenAlertsEnabled: this.options.GroupSpokenAlertsEnabled,
      valueOrFunction: f => {
        let result = f;
        if (typeof result === 'function') result = result(this.data, triggerHelper.matches, triggerHelper.output);
        // All triggers return either a string directly, or an object
        // whose keys are different parser language based names.  For simplicity,
        // this is valid to do for any trigger entry that can handle a function.
        // In case anybody wants to encapsulate any fancy grammar, the values
        // in this object can also be functions.
        if (typeof result !== 'object' || result === null) return result;
        return triggerHelper.valueOrFunction(result[this.displayLang] ?? result['en']);
      },
      get output() {
        if (this.trigger.output) return this.trigger.output;
        console.log(`Missing trigger.output for trigger ${trigger.id ?? 'Unknown'}`);
        return defaultOutput;
      }
    };
    this._onTriggerInternalHelperDefaults(triggerHelper);
    return triggerHelper;
  }
  _onTriggerInternalCheckSuppressed(trigger, when) {
    const id = trigger.id;
    if (id !== undefined) {
      const suppress = this.triggerSuppress[id];
      if (suppress !== undefined) {
        if (suppress > when) return true;
        delete this.triggerSuppress[id];
      }
    }
    return false;
  }
  _onTriggerInternalCondition(triggerHelper) {
    const condition = triggerHelper.triggerOptions.Condition ?? triggerHelper.trigger.condition;
    // If the condition is missing or hardcoded as `true`
    if (condition === undefined || condition === true) return true;
    // If the condition is hardcoded as `false`
    else if (condition === false) return false;
    const conditionFuncReturn = condition(this.data, triggerHelper.matches, triggerHelper.output);
    if (conditionFuncReturn === true) return true;
    // Treat all other return values as false (undefined | false)
    return false;
  }

  // Set defaults for triggerHelper object (anything that won't change based on
  // other trigger functions running)
  _onTriggerInternalHelperDefaults(triggerHelper) {
    // Options priority:
    // backcompat triggerOptions > trigger autoconfig > trigger set autoconfig > top level option
    triggerHelper.textAlertsEnabled = triggerHelper.triggerOptions.TextAlert ?? triggerHelper.triggerAutoConfig.TextAlertsEnabled ?? triggerHelper.trigger.triggerSetAutoConfig?.TextAlertsEnabled ?? triggerHelper.textAlertsEnabled;
    triggerHelper.soundAlertsEnabled = triggerHelper.triggerOptions.SoundAlert ?? triggerHelper.triggerAutoConfig.SoundAlertsEnabled ?? triggerHelper.trigger.triggerSetAutoConfig?.SoundAlertsEnabled ?? triggerHelper.soundAlertsEnabled;
    triggerHelper.spokenAlertsEnabled = triggerHelper.triggerOptions.SpeechAlert ?? triggerHelper.triggerAutoConfig.SpokenAlertsEnabled ?? triggerHelper.trigger.triggerSetAutoConfig?.SpokenAlertsEnabled ?? triggerHelper.spokenAlertsEnabled;

    // Load settings from triggerOptions if they're set
    triggerHelper.groupSpokenAlertsEnabled = triggerHelper.triggerOptions.GroupSpeechAlert ?? triggerHelper.groupSpokenAlertsEnabled;

    // If the user has suppressed all output for the trigger, reflect that here
    if (triggerHelper.userSuppressedOutput) {
      triggerHelper.textAlertsEnabled = false;
      triggerHelper.soundAlertsEnabled = false;
      triggerHelper.spokenAlertsEnabled = false;
      triggerHelper.groupSpokenAlertsEnabled = false;
    }

    // If the user has disabled audio output, reflect that here
    if (!this.options.AudioAllowed) {
      triggerHelper.soundAlertsEnabled = false;
      triggerHelper.spokenAlertsEnabled = false;
      triggerHelper.groupSpokenAlertsEnabled = false;
    }
  }
  _onTriggerInternalPreRun(triggerHelper) {
    triggerHelper.trigger?.preRun?.(this.data, triggerHelper.matches, triggerHelper.output);
  }
  _onTriggerInternalDelaySeconds(triggerHelper) {
    const delay = 'delaySeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.delaySeconds) : 0;
    if (typeof delay !== 'number') return;
    const adjust = triggerHelper.triggerAutoConfig.DelayAdjust ?? 0;
    const adjustedDelay = Math.max(delay ?? 0 + adjust, 0);
    if (adjustedDelay <= 0) return;
    const triggerID = this.currentTriggerID++;
    return new Promise((res, rej) => {
      this.timers[triggerID] = window.setTimeout(() => {
        if (this.timers[triggerID]) res();else rej(new Error('stopped'));
        delete this.timers[triggerID];
      }, adjustedDelay * 1000);
    });
  }
  _onTriggerInternalDurationSeconds(triggerHelper) {
    let valueDuration = triggerHelper.valueOrFunction(triggerHelper.trigger.durationSeconds);
    if (typeof valueDuration !== 'number') valueDuration = undefined;
    triggerHelper.duration = {
      fromConfig: triggerHelper.triggerAutoConfig.Duration,
      fromTrigger: valueDuration,
      alarmText: this.options.DisplayAlarmTextForSeconds,
      alertText: this.options.DisplayAlertTextForSeconds,
      infoText: this.options.DisplayInfoTextForSeconds
    };
  }
  _onTriggerInternalSuppressSeconds(triggerHelper) {
    const suppress = 'suppressSeconds' in triggerHelper.trigger ? triggerHelper.valueOrFunction(triggerHelper.trigger.suppressSeconds) : 0;
    if (typeof suppress !== 'number') return;
    if (triggerHelper.trigger.id !== undefined && suppress > 0) this.triggerSuppress[triggerHelper.trigger.id] = triggerHelper.now + suppress * 1000;
  }
  _onTriggerInternalPromise(triggerHelper) {
    let promise;
    if ('promise' in triggerHelper.trigger) {
      const id = triggerHelper.trigger.id ?? 'Unknown';
      if (typeof triggerHelper.trigger.promise === 'function') {
        promise = triggerHelper.trigger.promise(this.data, triggerHelper.matches, triggerHelper.output);

        // Make sure we actually get a Promise back from the function
        if (Promise.resolve(promise) !== promise) {
          console.error(`Trigger ${id}: promise function did not return a promise`);
          promise = undefined;
        }
      } else {
        console.error(`Trigger ${id}: promise defined but not a function`);
      }
    }
    return promise;
  }
  _onTriggerInternalSound(triggerHelper) {
    const result = triggerHelper.valueOrFunction(triggerHelper.trigger.sound);
    if (typeof result === 'string') triggerHelper.soundUrl = result;
  }
  _onTriggerInternalSoundVolume(triggerHelper) {
    const result = triggerHelper.valueOrFunction(triggerHelper.trigger.soundVolume);
    if (typeof result === 'number') triggerHelper.triggerSoundVol = result;
  }
  _onTriggerInternalResponse(triggerHelper) {
    let response = {};
    const trigger = triggerHelper.trigger;
    if (trigger.response) {
      // Can't use ValueOrFunction here as r returns a non-localizable object.
      response = trigger.response;
      while (typeof response === 'function') response = response(this.data, triggerHelper.matches, triggerHelper.output);

      // Turn falsy values into a default no-op response.
      if (!response) response = {};
    }
    triggerHelper.response = response;
  }
  _onTriggerInternalAlarmText(triggerHelper) {
    this._addTextFor('alarm', triggerHelper);
  }
  _onTriggerInternalAlertText(triggerHelper) {
    this._addTextFor('alert', triggerHelper);
  }
  _onTriggerInternalInfoText(triggerHelper) {
    this._addTextFor('info', triggerHelper);
  }
  _onTriggerInternalRumble(triggerHelper) {
    if (!this.options.RumbleEnabled) return;

    // getGamepads returns a "GamePadList" which isn't iterable.
    [...navigator.getGamepads()].forEach(gp => {
      // This list also contains nulls so that the gamepad index is preserved.
      if (!gp) return;

      // `vibrationActuator` is supported in CEF but is not in the spec yet.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      const gamepad = gp;

      // Future calls to `playEffect` will cut off the previous effect.
      // eslint-disable-next-line max-len
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
      void gamepad?.vibrationActuator?.playEffect(gamepad.vibrationActuator.type, {
        startDelay: 0,
        duration: triggerHelper.rumbleDurationMs,
        weakMagnitude: triggerHelper.rumbleWeak,
        strongMagnitude: triggerHelper.rumbleStrong
      });
    });
  }
  _onTriggerInternalTTS(triggerHelper) {
    if (!triggerHelper.groupSpokenAlertsEnabled || typeof triggerHelper.ttsText === 'undefined') {
      let result = undefined;
      if (triggerHelper.triggerOptions.TTSText !== undefined) {
        result = triggerHelper.valueOrFunction(triggerHelper.triggerOptions.TTSText);
      } else if (triggerHelper.trigger.tts !== undefined) {
        // Allow null/false/NaN/0/'' in this branch.
        result = triggerHelper.valueOrFunction(triggerHelper.trigger.tts);
      } else if (triggerHelper.response) {
        const resp = triggerHelper.response;
        if (resp.tts !== undefined) result = triggerHelper.valueOrFunction(resp.tts);
      }

      // Allow falsey values to disable tts entirely
      // Undefined will fall back to defaultTTSText
      if (result !== undefined) {
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (result) triggerHelper.ttsText = result?.toString();
      } else {
        triggerHelper.ttsText = triggerHelper.defaultTTSText;
      }
    }
  }
  _onTriggerInternalPlayAudio(triggerHelper) {
    if (triggerHelper.trigger.sound !== undefined && triggerHelper.soundUrl !== undefined && soundStrs.includes(triggerHelper.soundUrl)) {
      const namedSound = `${triggerHelper.soundUrl}Sound`;
      const namedSoundVolume = `${triggerHelper.soundUrl}SoundVolume`;
      const sound = this.options[namedSound];
      if (typeof sound === 'string') {
        triggerHelper.soundUrl = sound;
        const soundVol = this.options[namedSoundVolume];
        if (typeof soundVol === 'number') triggerHelper.soundVol = soundVol;
      }
    }
    triggerHelper.soundUrl = triggerHelper.triggerOptions.SoundOverride ?? triggerHelper.soundUrl;
    triggerHelper.soundVol = triggerHelper.triggerOptions.VolumeOverride ?? triggerHelper.triggerSoundVol ?? triggerHelper.soundVol;

    // Text to speech overrides all other sounds.  This is so
    // that a user who prefers tts can still get the benefit
    // of infoText triggers without tts entries by turning
    // on (speech=true, text=true, sound=true) but this will
    // not cause tts to play over top of sounds or noises.
    if (triggerHelper.ttsText !== undefined && triggerHelper.spokenAlertsEnabled) {
      // Heuristics for auto tts.
      // * In case this is an integer.
      triggerHelper.ttsText = triggerHelper.ttsText.toString();
      // * Remove a bunch of chars.
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/[#!]/g, '');
      // * slashes between mechanics
      triggerHelper.ttsText = triggerHelper.ttsText.replace('/', ' ');
      // * tildes at the end for emphasis
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/~+$/, '');
      // * arrows helping visually simple to understand e.g. ↖ Front left / Back right ↘
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/[↖-↙]/g, '');
      // * Korean TTS reads wrong with '1번째'
      triggerHelper.ttsText = triggerHelper.ttsText.replace('1번째', '첫번째');
      // * arrows at the front or the end are directions, e.g. "east =>"
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/[-=]>\s*$/g, '');
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/^\s*<[-=]/g, '');
      // * arrows in the middle are a sequence, e.g. "in => out => spread"
      const arrowReplacement = {
        en: ' then ',
        de: ' dann ',
        fr: ' puis ',
        ja: 'や',
        cn: '然后',
        ko: ' 그리고 '
      };
      triggerHelper.ttsText = triggerHelper.ttsText.replace(/\s*(<[-=]|[=-]>)\s*/g, arrowReplacement[this.displayLang]);
      this.ttsSay(triggerHelper.ttsText);
    } else if (triggerHelper.soundUrl !== undefined && triggerHelper.soundAlertsEnabled) {
      this._playAudioFile(triggerHelper, triggerHelper.soundUrl, triggerHelper.soundVol);
    }
  }
  _onTriggerInternalRun(triggerHelper) {
    triggerHelper.trigger?.run?.(this.data, triggerHelper.matches, triggerHelper.output);
  }
  _createTextFor(triggerHelper, text, textType, lowerTextKey, duration) {
    // info-text
    const textElementClass = `${textType}-text`;
    if (textType !== 'info') text = triggerUpperCase(text);
    const holder = this[lowerTextKey]?.getElementsByClassName('holder')[0];
    const div = this._makeTextElement(triggerHelper, text, textElementClass);
    if (!holder) throw new not_reached/* UnreachableCode */.$();
    holder.appendChild(div);
    if (holder.children.length > this.kMaxRowsOfText) holder.firstChild?.remove();
    window.setTimeout(() => {
      if (holder.contains(div)) holder.removeChild(div);
    }, duration * 1000);
  }
  _addTextFor(textType, triggerHelper) {
    // infoText
    const lowerTextKey = textMap[textType].text;
    // InfoText
    const upperTextKey = textMap[textType].upperText;
    // InfoSound
    const upperSound = textMap[textType].upperSound;
    // InfoSoundVolume
    const upperSoundVolume = textMap[textType].upperSoundVolume;
    let textObj = triggerHelper.triggerOptions[upperTextKey];
    if (textObj === undefined && triggerHelper.trigger[lowerTextKey] !== undefined) textObj = triggerHelper.trigger[lowerTextKey];
    if (textObj === undefined && triggerHelper.response !== undefined) textObj = triggerHelper.response[lowerTextKey];
    if (textObj === undefined || textObj === null) return;
    let text = triggerHelper.valueOrFunction(textObj);
    if (text === undefined || text === null) return;
    if (typeof text === 'number') text = text.toString();
    if (typeof text !== 'string') text = String(text);
    // Ignore empty strings so that config ui "blank spaces" are ignored.
    text = text.trim();
    if (text === '') return;
    triggerHelper.defaultTTSText = triggerHelper.defaultTTSText ?? text;
    if (text && typeof text === 'string' && triggerHelper.textAlertsEnabled) {
      // per-trigger option > trigger field > option duration by text type
      let duration = triggerHelper.duration?.fromConfig ?? triggerHelper.duration?.fromTrigger;
      if (duration === undefined && triggerHelper.duration) duration = triggerHelper.duration[lowerTextKey];
      if (duration === undefined) duration = 0;
      this._createTextFor(triggerHelper, text, textType, lowerTextKey, duration);
      if (triggerHelper.soundUrl === undefined) {
        triggerHelper.soundUrl = this.options[upperSound];
        triggerHelper.soundVol = this.options[upperSoundVolume];
      }
      if (triggerHelper.rumbleDurationMs === undefined) {
        triggerHelper.rumbleDurationMs = this.options[textMap[textType].rumbleDuration];
        triggerHelper.rumbleWeak = this.options[textMap[textType].rumbleWeak];
        triggerHelper.rumbleStrong = this.options[textMap[textType].rumbleStrong];
      }
    }
  }
  _makeTextElement(_triggerHelper, text, className) {
    const div = document.createElement('div');
    div.classList.add(className);
    div.classList.add('animate-text');
    div.innerText = text;
    return div;
  }
  _playAudioFile(_triggerHelper, url, volume) {
    const audio = new Audio(url);
    audio.volume = volume ?? 1;
    void audio.play();
  }
  getDataObject() {
    let preserveHP = 0;
    // Note that this function gets called in the constructor, before `this.data` has been set.
    if (this.data?.currentHP) preserveHP = this.data.currentHP;

    // TODO: make a breaking change at some point and
    // make all this style consistent, sorry.
    const data = {
      me: this.me,
      job: this.job,
      role: this.role,
      party: this.partyTracker,
      lang: this.parserLang,
      parserLang: this.parserLang,
      displayLang: this.displayLang,
      currentHP: preserveHP,
      options: this.options,
      inCombat: this.inCombat,
      triggerSetConfig: this.triggerSetConfig,
      ShortName: name => util/* default.shortName */.Z.shortName(name, this.options.PlayerNicks),
      StopCombat: () => this.SetInCombat(false),
      ParseLocaleFloat: parseFloat,
      CanStun: () => util/* default.canStun */.Z.canStun(this.job),
      CanSilence: () => util/* default.canSilence */.Z.canSilence(this.job),
      CanSleep: () => util/* default.canSleep */.Z.canSleep(this.job),
      CanCleanse: () => util/* default.canCleanse */.Z.canCleanse(this.job),
      CanFeint: () => util/* default.canFeint */.Z.canFeint(this.job),
      CanAddle: () => util/* default.canAddle */.Z.canAddle(this.job)
    };
    let triggerData = {};
    for (const initObj of this.dataInitializers) {
      const init = initObj.func;
      const initData = init();
      if (typeof initData === 'object') {
        triggerData = {
          ...triggerData,
          ...initData
        };
      } else {
        console.log(`Error in file: ${initObj.file}: these triggers may not work;
        initData function returned invalid object: ${init.toString()}`);
      }
    }
    return {
      ...triggerData,
      ...data
    };
  }
}
class PopupTextGenerator {
  constructor(popupText) {
    this.popupText = popupText;
  }
  Info(text, currentTime) {
    this.popupText.OnTrigger({
      infoText: text,
      tts: text
    }, null, currentTime);
  }
  Alert(text, currentTime) {
    this.popupText.OnTrigger({
      alertText: text,
      tts: text
    }, null, currentTime);
  }
  Alarm(text, currentTime) {
    this.popupText.OnTrigger({
      alarmText: text,
      tts: text
    }, null, currentTime);
  }
  TTS(text, currentTime) {
    this.popupText.OnTrigger({
      infoText: text,
      tts: text
    }, null, currentTime);
  }
  Trigger(trigger, matches, currentTime) {
    this.popupText.OnTrigger(trigger, matches, currentTime);
  }
}
// EXTERNAL MODULE: ./resources/responses.ts
var responses = __webpack_require__(469);
;// CONCATENATED MODULE: ./ui/raidboss/raidboss_config.ts











const kOptionKeys = {
  output: 'Output',
  duration: 'Duration',
  beforeSeconds: 'BeforeSeconds',
  delayAdjust: 'DelayAdjust',
  outputStrings: 'OutputStrings',
  // folder for all trigger options
  triggers: 'triggers',
  // folder for all trigger set options
  triggerSets: 'triggerSets',
  // folder for options in trigger set config ui
  triggerSetConfig: 'TriggerSetConfig'
};
// No sound only option, because that's silly.
const kTriggerOptions = {
  default: {
    label: {
      en: '✔ Defaults',
      de: '✔ Standards',
      fr: '✔ Défauts',
      ja: '✔ 初期設定',
      cn: '✔ 默认设置',
      ko: '✔ 기본'
    }
  },
  textAndSound: {
    label: {
      en: '🆙🔊 Text and Sound',
      de: '🆙🔊 Text und Ton',
      fr: '🆙🔊 Texte et son',
      ja: '🆙🔊 テキストと音声',
      cn: '🆙🔊 文本显示与提示音',
      ko: '🆙🔊 텍스트와 소리'
    }
  },
  ttsAndText: {
    label: {
      en: '🆙💬 Text and TTS',
      de: '🆙💬 Text und TTS',
      fr: '🆙💬 Texte et TTS',
      ja: '🆙💬 テキストとTTS',
      cn: '🆙💬 文本显示与TTS',
      ko: '🆙💬 텍스트와 TTS'
    }
  },
  ttsOnly: {
    label: {
      en: '💬 TTS Only',
      de: '💬 Nur TTS',
      fr: '💬 TTS Seulement',
      ja: '💬 TTSのみ',
      cn: '💬 只使用TTS',
      ko: '💬 TTS만'
    }
  },
  textOnly: {
    label: {
      en: '🆙 Text Only',
      de: '🆙 Nur Text',
      fr: '🆙 Texte seulement',
      ja: '🆙 テキストのみ',
      cn: '🆙 只使用文本显示',
      ko: '🆙 텍스트만'
    }
  },
  disabled: {
    label: {
      en: '❌ Disabled',
      de: '❌ Deaktiviert',
      fr: '❌ Désactivé',
      ja: '❌ 無効',
      cn: '❌ 禁用',
      ko: '❌ 비활성화'
    }
  }
};
const triggerSoundOptions = kTriggerOptions;
const kDetailKeys = {
  'triggerRegex': {
    label: {
      en: 'regex',
      de: 'regex',
      fr: 'regex',
      ja: '正規表現',
      cn: '正则表达式',
      ko: '정규식'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'triggerNetRegex': {
    label: {
      en: 'netregex',
      de: 'netregex',
      fr: 'netregex',
      ja: 'ネット正規表現',
      cn: '网络日志正则表达式',
      ko: '정규표현식'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'timelineRegex': {
    label: {
      en: 'timeline',
      de: 'timeline',
      fr: 'timeline',
      ja: 'タイムライン',
      cn: '时间轴',
      ko: '타임라인'
    },
    cls: 'regex-text',
    debugOnly: true
  },
  'beforeSeconds': {
    label: {
      en: 'before (sec)',
      de: 'Vorher (Sekunden)',
      fr: 'avant (seconde)',
      ja: 'その前に (秒)',
      cn: '提前 (秒)',
      ko: '앞당김 (초)'
    },
    cls: 'before-seconds-text',
    generatedManually: true
  },
  'condition': {
    label: {
      en: 'condition',
      de: 'condition',
      fr: 'condition',
      ja: '条件',
      cn: '条件',
      ko: '조건'
    },
    cls: 'condition-text',
    debugOnly: true
  },
  'delayAdjust': {
    label: {
      // Note: delay adjusting is both dangerous (delays can be functional in terms of
      // needing to happen after/before a particular time to collect the state of the world)
      // as well as confusing (you can adjust some but not many things negatively as
      // delay can't go below zero). Therefore, this is a developer/debug mode only for
      // people who know what they're doing.
      en: 'DEBUG delay adjust (sec)',
      de: 'DEBUG Verzögerungseinstellung (sec)',
      ja: 'DEBUGの待機調整 (秒)',
      cn: 'DEBUG 延时调整 (秒)',
      ko: '"디버그" 딜레이 조절 (초)'
    },
    cls: 'delay-adjust-text',
    generatedManually: true,
    debugOnly: true
  },
  'duration': {
    label: {
      en: 'duration (sec)',
      de: 'Dauer (Sekunden)',
      fr: 'Durée (secondes)',
      ja: '存続時間 (秒)',
      cn: '显示时长 (秒)',
      ko: '지속 시간 (초)'
    },
    cls: 'duration-text',
    generatedManually: true
  },
  'preRun': {
    label: {
      en: 'preRun',
      de: 'preRun',
      fr: 'preRun',
      ja: 'プレ実行',
      cn: '预运行',
      ko: '사전 실행'
    },
    cls: 'prerun-text',
    debugOnly: true
  },
  'alarmText': {
    label: {
      en: 'alarm',
      de: 'alarm',
      fr: 'alarme',
      ja: '警報',
      cn: '致命级',
      ko: '경고'
    },
    cls: 'alarm-text'
  },
  'alertText': {
    label: {
      en: 'alert',
      de: 'alert',
      fr: 'alerte',
      ja: '警告',
      cn: '严重级',
      ko: '주의'
    },
    cls: 'alert-text'
  },
  'infoText': {
    label: {
      en: 'info',
      de: 'info',
      fr: 'info',
      ja: '情報',
      cn: '一般级',
      ko: '안내'
    },
    cls: 'info-text'
  },
  'tts': {
    label: {
      en: 'tts',
      de: 'tts',
      fr: 'tts',
      ja: 'TTS',
      cn: 'TTS',
      ko: 'TTS'
    },
    cls: 'tts-text'
  },
  'sound': {
    label: {
      en: 'sound',
      de: 'sound',
      fr: 'son',
      ja: '音声',
      cn: '提示音',
      ko: '소리'
    },
    cls: 'sound-text'
  },
  'run': {
    label: {
      en: 'run',
      de: 'run',
      fr: 'run',
      ja: '実行',
      cn: '运行',
      ko: '실행'
    },
    cls: 'run-text',
    debugOnly: true
  }
};

// Ordered set of headers in the timeline edit table.
const kTimelineTableHeaders = {
  shouldDisplayText: {
    en: 'Show',
    de: 'Anzeigen',
    fr: 'Afficher',
    ja: '表示',
    cn: '显示',
    ko: '표시'
  },
  text: {
    en: 'Timeline Text',
    de: 'Timeline Text',
    fr: 'Texte de la timeline',
    ja: 'タイムラインテキスト',
    cn: '时间轴文本',
    ko: '타임라인 텍스트'
  },
  overrideText: {
    en: 'Rename',
    de: 'Umbenennen',
    fr: 'Renommer',
    ja: 'テキスト変更',
    cn: '修改文本',
    ko: '텍스트 변경'
  }
};
const detailKeys = kDetailKeys;
const kMiscTranslations = {
  // Shows up for un-set values.
  valueDefault: {
    en: '(default)',
    de: '(Standard)',
    fr: '(Défaut)',
    ja: '(初期値)',
    cn: '(默认值)',
    ko: '(기본값)'
  },
  // Shown when the UI can't decipher the output of a function.
  valueIsFunction: {
    en: '(function)',
    de: '(Funktion)',
    fr: '(Fonction)',
    ja: '(関数)',
    cn: '(函数)',
    ko: '(함수)'
  },
  // Warning label for triggers without ids or overridden triggers.
  warning: {
    en: '⚠️ warning',
    de: '⚠️ Warnung',
    fr: '⚠️ Attention',
    ja: '⚠️ 警告',
    cn: '⚠️ 警告',
    ko: '⚠️ 주의'
  },
  // Shows up for triggers without ids.
  missingId: {
    en: 'missing id field',
    de: 'Fehlendes ID Feld',
    fr: 'Champ ID manquant',
    ja: 'idがありません',
    cn: '缺少id属性',
    ko: 'ID 필드값 없음'
  },
  // Shows up for triggers that are overridden by other triggers.
  overriddenByFile: {
    en: 'overridden by "${file}"',
    de: 'Überschrieben durch "${file}"',
    fr: 'Écrasé(e) par "${file}"',
    ja: '"${file}"に上書きました',
    cn: '被"${file}"文件覆盖',
    ko: '"${file}" 파일에서 덮어씌움'
  },
  // Opens trigger file on Github.
  viewTriggerSource: {
    en: 'View Trigger Source',
    de: 'Zeige Trigger Quelle',
    fr: 'Afficher la source du Trigger',
    ja: 'トリガーのコードを表示',
    cn: '显示触发器源码',
    ko: '트리거 소스코드 보기'
  },
  // The header for the editing timeline section inside a trigger file.
  editTimeline: {
    en: 'Edit Timeline',
    de: 'Timeline bearbeiten',
    fr: 'Éditer la timeline',
    ja: 'タイムラインを編集',
    cn: '编辑时间轴',
    ko: '타임라인 편집'
  },
  // The header inside the Edit Timeline section on top of the reference timeline text.
  timelineListing: {
    en: 'Reference Text (uneditable)',
    de: 'Referenztext (nicht editierbar)',
    fr: 'Texte de référence (non éditable)',
    ja: '参考タイムライン (編集不可)',
    cn: '参考文本 (不可编辑)',
    ko: '원본 타임라인 (수정 불가능)'
  },
  // The header inside the Edit Timeline section on top of the add entries section.
  addCustomTimelineEntries: {
    en: 'Add Custom Timeline Entries',
    de: 'Eigene Timeline Einträge hinzufügen',
    fr: 'Ajouter une entrée de timeline personnalisée',
    ja: 'カスタマイズタイムライン追加',
    cn: '添加自定义时间轴条目',
    ko: '사용자 지정 타임라인 항목 추가'
  },
  // The button text for the Edit Timeline add entries section.
  addMoreRows: {
    en: 'Add more rows',
    de: 'Mehr Reihen hinzufügen',
    fr: 'Ajouter une ligne',
    ja: '行追加',
    cn: '添加更多行',
    ko: '행 추가'
  },
  customEntryTime: {
    en: 'Time',
    de: 'Zeit',
    fr: 'Temps',
    ja: '時間',
    cn: '时间',
    ko: '시간'
  },
  customEntryText: {
    en: 'Text',
    de: 'Text',
    fr: 'Texte',
    ja: 'テキスト',
    cn: '文本',
    ko: '텍스트'
  },
  customEntryDuration: {
    en: 'Duration (seconds)',
    de: 'Dauer (Sekunden)',
    fr: 'Durée (s)',
    ja: '持続時間 (秒)',
    cn: '显示时长 (秒)',
    ko: '지속시간 (초)'
  },
  customEntryRemove: {
    en: 'Remove',
    de: 'Entfernen',
    fr: 'Supprimer',
    ja: '削除',
    cn: '移除',
    ko: '삭제'
  }
};
const validDurationOrUndefined = valEntry => {
  if (typeof valEntry !== 'string' && typeof valEntry !== 'number') return undefined;
  const val = parseFloat(valEntry.toString());
  if (!isNaN(val) && val >= 0) return val;
  return undefined;
};
const validDelayAdjustOrUndefined = valEntry => {
  if (typeof valEntry !== 'string' && typeof valEntry !== 'number') return undefined;
  const val = parseFloat(valEntry.toString());
  if (!isNaN(val)) return val;
  return undefined;
};
const canBeConfigured = trig => !trig.isMissingId && trig.overriddenByFile === undefined;
const addTriggerDetail = (container, labelText, detailText, detailCls) => {
  const label = document.createElement('div');
  label.innerText = labelText;
  label.classList.add('trigger-label');
  container.appendChild(label);
  const detail = document.createElement('div');
  detail.classList.add('trigger-detail');
  detail.innerText = detailText;
  container.appendChild(detail);
  if (detailCls) detail.classList.add(...detailCls);
};

// This is used both for top level Options and for PerTriggerAutoConfig settings.
// Unfortunately due to poor decisions in the past, PerTriggerOptions has different
// fields here.  This should be fixed.
const setOptionsFromOutputValue = (value, options) => {
  if (value === 'default') {
    // Nothing.
  } else if (value === 'textAndSound') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = false;
  } else if (value === 'ttsAndText') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = true;
  } else if (value === 'ttsOnly') {
    options.TextAlertsEnabled = false;
    options.SoundAlertsEnabled = true;
    options.SpokenAlertsEnabled = true;
  } else if (value === 'textOnly') {
    options.TextAlertsEnabled = true;
    options.SoundAlertsEnabled = false;
    options.SpokenAlertsEnabled = false;
  } else if (value === 'disabled') {
    options.TextAlertsEnabled = false;
    options.SoundAlertsEnabled = false;
    options.SpokenAlertsEnabled = false;
  } else {
    console.error(`unknown output type: ${value.toString()}`);
  }
};

// Helper for doing nothing during trigger eval, but still recording any
// calls to `output.responseOutputStrings = x;` via callback.
class DoNothingFuncProxy {
  constructor(outputStringsCallback) {
    return new Proxy(this, {
      set(_target, property, value) {
        if (property === 'responseOutputStrings') {
          // TODO: need some way of verifying that a value is an OutputStrings.
          outputStringsCallback(value);
          return true;
        }

        // Ignore other property setting here.
        return false;
      },
      get(_target, _name) {
        return () => {/* noop */};
      }
    });
  }
}
const makeLink = href => {
  return `<a href="${href}" target="_blank">${href}</a>`;
};
const langOrEn = lang => {
  return typeof lang === 'string' && (0,languages/* isLang */.jd)(lang) ? lang : 'en';
};
class RaidbossConfigurator {
  constructor(cactbotConfigurator) {
    this.base = cactbotConfigurator;

    // TODO: is it worth adding the complexity to reflect this change in triggers that use it?
    // This is probably where using something like vue or react would be easier.
    // For the moment, folks can just reload, for real.
    this.alertsLang = langOrEn(this.base.getOption('raidboss', 'AlertsLanguage', this.base.lang));
    this.timelineLang = langOrEn(this.base.getOption('raidboss', 'TimelineLanguage', this.base.lang));
  }
  buildUI(container, raidbossFiles, userOptions) {
    const fileMap = this.processRaidbossFiles(raidbossFiles, userOptions);
    const expansionDivs = {};
    for (const [key, info] of Object.entries(fileMap)) {
      // "expansion" here is technically section, which includes "general triggers"
      // and one section per user file.
      const expansion = info.section;

      // This isn't perfect, but skip trigger sets that are no-ops.
      const hasTriggers = Object.keys(info.triggers ?? []).length !== 0;
      const hasTimeline = info.triggerSet.timeline !== undefined;
      const hasTriggerSetConfig = (info.triggerSet.config ?? []).length > 0;
      if (!hasTriggers && !hasTimeline && !hasTriggerSetConfig) continue;
      let expansionDiv = expansionDivs[expansion];
      if (!expansionDiv) {
        const expansionContainer = document.createElement('div');
        expansionContainer.classList.add('trigger-expansion-container', 'collapsed');
        container.appendChild(expansionContainer);
        const expansionHeader = document.createElement('div');
        expansionHeader.classList.add('trigger-expansion-header');
        expansionHeader.onclick = () => {
          expansionContainer.classList.toggle('collapsed');
        };
        expansionHeader.innerText = expansion;
        expansionContainer.appendChild(expansionHeader);
        expansionDiv = expansionDivs[expansion] = expansionContainer;
      }
      const triggerContainer = document.createElement('div');
      triggerContainer.classList.add('trigger-file-container', 'collapsed');
      expansionDiv.appendChild(triggerContainer);
      const headerDiv = document.createElement('div');
      headerDiv.classList.add('trigger-file-header');
      headerDiv.onclick = () => {
        triggerContainer.classList.toggle('collapsed');
      };
      const parts = [info.title, info.type, info.prefix];
      for (const part of parts) {
        if (part === undefined) continue;
        const partDiv = document.createElement('div');
        partDiv.classList.add('trigger-file-header-part');
        // Use innerHTML here because of <Emphasis>Whorleater</Emphasis>.
        partDiv.innerHTML = part;
        headerDiv.appendChild(partDiv);
      }
      triggerContainer.appendChild(headerDiv);

      // TODO: print a warning if config exists without triggerset id??
      if (info.triggerSet.id !== undefined) {
        const triggerSetConfig = document.createElement('div');
        triggerSetConfig.classList.add('overlay-options');
        triggerContainer.appendChild(triggerSetConfig);
        const triggerSetAlertOutput = {
          ...defaultTriggerSetAlertOutput,
          id: kOptionKeys.output,
          default: this.base.getStringOption('raidboss', defaultAlertOutput.id, defaultAlertOutput.default.toString())
        };
        this.base.buildConfigEntry(userOptions, triggerSetConfig, triggerSetAlertOutput, 'raidboss', [kOptionKeys.triggerSets, info.triggerSet.id]);
        for (const opt of info.triggerSet.config ?? []) {
          if (!this.base.developerOptions && opt.debugOnly) continue;
          this.base.buildConfigEntry(userOptions, triggerSetConfig, opt, 'raidboss', [kOptionKeys.triggerSetConfig, info.triggerSet.id]);
        }
      }

      // Timeline editing is tied to a single, specific zoneId per file for now.
      // We could add more indirection (via fileKey?) and look up zoneId -> fileKey[]
      // and fileKey -> timeline edits if needed.
      if (info.triggerSet.timeline !== undefined && typeof info.zoneId === 'number') this.buildTimelineUIContainer(info.zoneId, info.triggerSet, triggerContainer, userOptions);
      const triggerOptions = document.createElement('div');
      triggerOptions.classList.add('trigger-file-options');
      triggerContainer.appendChild(triggerOptions);
      for (const [trigId, trig] of Object.entries(info.triggers ?? {})) {
        // Don't construct triggers that won't show anything.
        let hasOutputFunc = false;
        for (const func of responses/* triggerOutputFunctions */.ug) {
          if (func in trig) {
            hasOutputFunc = true;
            break;
          }
        }
        if (!hasOutputFunc && !this.base.developerOptions) continue;
        const triggerDiv = document.createElement('div');
        triggerDiv.classList.add('trigger');

        // Build the trigger label.
        const triggerId = document.createElement('div');
        triggerId.classList.add('trigger-id');
        triggerId.innerHTML = trig.isMissingId ? '(???)' : trigId;
        triggerId.classList.add('trigger-id');
        triggerDiv.appendChild(triggerId);

        // Build the trigger comment
        if (trig.comment) {
          const trigComment = trig.comment[this.base.lang] ?? trig.comment?.en ?? '';
          const triggerCommentDiv = document.createElement('div');
          triggerCommentDiv.innerHTML = trigComment;
          triggerCommentDiv.classList.add('comment');
          triggerDiv.appendChild(triggerCommentDiv);
        }
        triggerOptions.appendChild(triggerDiv);

        // Container for the right side ui (select boxes, all of the info).
        const triggerDetails = document.createElement('div');
        triggerDetails.classList.add('trigger-details');
        triggerOptions.appendChild(triggerDetails);
        if (canBeConfigured(trig)) triggerDetails.appendChild(this.buildTriggerOptions(trig, triggerDiv));
        if (trig.isMissingId) {
          addTriggerDetail(triggerDetails, this.base.translate(kMiscTranslations.warning), this.base.translate(kMiscTranslations.missingId));
        }
        if (trig.overriddenByFile !== undefined) {
          const baseText = this.base.translate(kMiscTranslations.overriddenByFile);
          const detailText = baseText.replace('${file}', trig.overriddenByFile);
          addTriggerDetail(triggerDetails, this.base.translate(kMiscTranslations.warning), detailText);
        }

        // Append some details about the trigger so it's more obvious what it is.
        for (const [detailStringKey, opt] of Object.entries(detailKeys)) {
          // Object.entries coerces to a string, but the detailKeys definition makes this true.
          const detailKey = detailStringKey;
          if (opt.generatedManually) continue;
          if (!this.base.developerOptions && opt.debugOnly) continue;
          const trigOutput = trig.configOutput?.[detailKey];
          const trigFunc = trig[detailKey];
          if (trigFunc === undefined || trigFunc === null) continue;
          const detailCls = [opt.cls];
          let detailText;
          if (trigOutput !== undefined) {
            detailText = trigOutput;
          } else if (typeof trigFunc === 'function') {
            detailText = this.base.translate(kMiscTranslations.valueIsFunction);
            detailCls.push('function-text');
          } else {
            detailText = trigFunc.toString();
          }
          addTriggerDetail(triggerDetails, this.base.translate(opt.label), detailText, detailCls);
        }
        if (!canBeConfigured(trig)) continue;

        // Add beforeSeconds manually for timeline triggers.
        if (trig.isTimelineTrigger) {
          const detailKey = 'beforeSeconds';
          const optionKey = kOptionKeys.beforeSeconds;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-before-seconds');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any';

          // Say "(default)" for more complicated things like functions.
          let defaultValue = this.base.translate(kMiscTranslations.valueDefault);
          if (trig.beforeSeconds === undefined) defaultValue = '0';else if (typeof trig.beforeSeconds === 'number') defaultValue = trig.beforeSeconds.toString();
          input.placeholder = defaultValue;
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], '');
          const setFunc = () => {
            const val = validDurationOrUndefined(input.value) || '';
            this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], val);
          };
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }

        // Add delay adjust manually, as this isn't a trigger field.
        if (this.base.developerOptions) {
          const detailKey = 'delayAdjust';
          const optionKey = kOptionKeys.delayAdjust;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-delay-adjust');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any';
          input.placeholder = `0`;
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], '');
          const setFunc = () => {
            const val = validDelayAdjustOrUndefined(input.value) || '';
            this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], val);
          };
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }

        // Add duration manually with an input to override.
        if (hasOutputFunc) {
          const detailKey = 'duration';
          const optionKey = kOptionKeys.duration;
          const label = document.createElement('div');
          label.innerText = this.base.translate(kDetailKeys[detailKey].label);
          label.classList.add('trigger-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-duration');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.step = 'any';
          if (typeof trig.durationSeconds === 'number') input.placeholder = `${trig.durationSeconds}`;else input.placeholder = this.base.translate(kMiscTranslations.valueDefault);
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], '');
          const setFunc = () => {
            const val = validDurationOrUndefined(input.value) || '';
            this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], val);
          };
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }

        // Add output strings manually
        const outputStrings = trig.outputStrings || {};
        for (const [key, outputString] of Object.entries(outputStrings)) {
          const optionKey = kOptionKeys.outputStrings;
          const template = typeof outputString === 'string' ? outputString : this.base.translate(outputString);
          const label = document.createElement('div');
          label.innerText = key;
          label.classList.add('trigger-outputstring-label');
          triggerDetails.appendChild(label);
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-outputstring');
          const input = document.createElement('input');
          div.appendChild(input);
          input.type = 'text';
          input.placeholder = template;
          input.value = this.base.getStringOption('raidboss', [kOptionKeys.triggers, trigId, optionKey, key], '');
          const setFunc = () => this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey, key], input.value);
          input.onchange = setFunc;
          input.oninput = setFunc;
          triggerDetails.appendChild(div);
        }
        const label = document.createElement('div');
        triggerDetails.appendChild(label);
        const path = key.split('-');
        const [p0, p1, p2] = path;
        if (p0 !== undefined && p1 !== undefined && p2 !== undefined) {
          const div = document.createElement('div');
          div.classList.add('option-input-container', 'trigger-source');
          const baseUrl = 'https://github.com/quisquous/cactbot/blob/triggers';
          let urlFilepath;
          if (path.length === 3) {
            // 00-misc/general.js
            urlFilepath = `${p0}-${p1}/${[...path].slice(2).join('-')}`;
          } else {
            // 02-arr/raids/t1.js
            urlFilepath = `${p0}-${p1}/${p2}/${[...path].slice(3).join('-')}`;
          }
          const escapedTriggerId = trigId.replace(/'/g, '\\\'');
          const uriComponent = encodeURIComponent(`id: '${escapedTriggerId}'`).replace(/'/g, '%27');
          const urlString = `${baseUrl}/${urlFilepath}.js#:~:text=${uriComponent}`;
          div.innerHTML = `<a href="${urlString}" target="_blank">(${this.base.translate(kMiscTranslations.viewTriggerSource)})</a>`;
          triggerDetails.appendChild(div);
        }
      }
    }
  }

  // Build the top level timeline editing expandable container.
  buildTimelineUIContainer(zoneId, set, parent, options) {
    const container = document.createElement('div');
    container.classList.add('timeline-edit-container', 'collapsed');
    parent.appendChild(container);
    let hasEverBeenExpanded = false;
    const headerDiv = document.createElement('div');
    headerDiv.classList.add('timeline-edit-header');
    headerDiv.onclick = () => {
      container.classList.toggle('collapsed');
      // Build the rest of this UI on demand lazily.
      if (!hasEverBeenExpanded) {
        const text = this.timelineTextFromSet(set);
        const timeline = new TimelineParser(text, set.timelineReplace ?? [], [], [], options);
        this.buildTimelineListingUI(timeline, text, container);
        this.buildTimelineAddUI(zoneId, container);
        this.buildTimelineTextUI(zoneId, timeline, container);
      }
      hasEverBeenExpanded = true;
    };
    headerDiv.innerText = this.base.translate(kMiscTranslations.editTimeline);
    container.appendChild(headerDiv);
  }
  timelineTextFromSet(set) {
    let text = '';

    // Recursively turn the timeline array into a string.
    const addTimeline = obj => {
      if (obj === undefined) return;
      if (Array.isArray(obj)) {
        for (const objVal of obj) addTimeline(objVal);
      } else if (typeof obj === 'function') {
        // Hack, pass blank data in, as we don't have a real data here.
        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
        const blankData = {};
        try {
          addTimeline(obj(blankData));
        } catch (e) {
          // Do nothing if this fails.
          // Functions are pretty uncommon in built-in timelines.
          // If user functions do funky things, those extra lines will be skipped.
        }
      } else if (typeof obj === 'string') {
        text = `${text}\n${obj}`;
      }
    };
    addTimeline(set.timeline);
    return text;
  }
  buildTimelineListingUI(timeline, timelineText, parent) {
    const header = document.createElement('div');
    header.classList.add('timeline-listing-header');
    header.innerText = this.base.translate(kMiscTranslations.timelineListing);
    parent.appendChild(header);

    // Add timeline text itself
    const scroller = document.createElement('div');
    scroller.classList.add('timeline-scroller');
    parent.appendChild(scroller);
    const timelineContents = document.createElement('pre');
    scroller.classList.add('timeline-scroller-contents');
    scroller.appendChild(timelineContents);
    const translated = TimelineParser.Translate(timeline, timelineText);
    timelineContents.innerText = translated.join('\n');
  }
  buildTimelineAddUI(zoneId, parent) {
    const addId = ['timeline', zoneId.toString(), 'add'];
    const header = document.createElement('div');
    header.classList.add('timeline-add-header');
    header.innerText = this.base.translate(kMiscTranslations.addCustomTimelineEntries);
    parent.appendChild(header);
    const container = document.createElement('div');
    container.classList.add('timeline-add-container');
    parent.appendChild(container);
    const headerTime = document.createElement('div');
    headerTime.innerText = this.base.translate(kMiscTranslations.customEntryTime);
    container.appendChild(headerTime);
    const headerText = document.createElement('div');
    headerText.innerText = this.base.translate(kMiscTranslations.customEntryText);
    container.appendChild(headerText);
    const headerDuration = document.createElement('div');
    headerDuration.innerText = this.base.translate(kMiscTranslations.customEntryDuration);
    container.appendChild(headerDuration);

    // Spacer div in the grid for Remove, which needs no header.
    container.appendChild(document.createElement('div'));

    // Get the current SavedConfigEntry for these saved entries.
    // We will modify `rows` in place and then store it back as needed.
    const defaultRow = {
      time: '',
      text: ''
    };
    const defaultValue = [defaultRow];
    const rowsOrObj = this.base.getJsonOption('raidboss', addId, defaultValue);
    const rows = Array.isArray(rowsOrObj) ? rowsOrObj : defaultValue;
    const storeRows = () => this.base.setJsonOption('raidboss', addId, rows);
    const addRow = obj => {
      const setFunc = () => {
        obj.time = timeInput.value;
        obj.text = textInput.value;
        obj.duration = durationInput.value;
        storeRows();
      };
      const timeInput = document.createElement('input');
      timeInput.type = 'text';
      if (typeof obj.time === 'string') timeInput.value = obj.time;
      timeInput.classList.add('timeline-add-row-time');
      timeInput.onchange = setFunc;
      timeInput.oninput = setFunc;
      container.appendChild(timeInput);
      const textInput = document.createElement('input');
      textInput.type = 'text';
      if (typeof obj.text === 'string') textInput.value = obj.text;
      textInput.classList.add('timeline-add-row-text');
      textInput.onchange = setFunc;
      textInput.oninput = setFunc;
      container.appendChild(textInput);
      const durationInput = document.createElement('input');
      durationInput.type = 'text';
      if (typeof obj.duration === 'string') durationInput.value = obj.duration;
      durationInput.classList.add('timeline-add-row-duration');
      durationInput.onchange = setFunc;
      durationInput.oninput = setFunc;
      container.appendChild(durationInput);
      const remove = document.createElement('button');
      remove.classList.add('timeline-add-row-remove');
      remove.innerText = this.base.translate(kMiscTranslations.customEntryRemove);
      container.appendChild(remove);
      remove.addEventListener('click', () => {
        container.removeChild(timeInput);
        container.removeChild(textInput);
        container.removeChild(durationInput);
        container.removeChild(remove);

        // Update rows in place, as it has been captured by a closure above.
        const idx = rows.indexOf(obj);
        if (idx === -1) {
          console.error(`Failed to remove row`);
          return;
        }
        rows.splice(idx, 1);
        storeRows();
      });
    };
    const addMoreRows = document.createElement('button');
    addMoreRows.classList.add('timeline-add-button');
    addMoreRows.innerText = this.base.translate(kMiscTranslations.addMoreRows);
    addMoreRows.addEventListener('click', () => {
      // No need to call storeRows here.  Blank rows will only get saved
      // if somebody makes other changes.
      const obj = {
        ...defaultRow
      };
      rows.push(obj);
      addRow(obj);
    });
    parent.appendChild(addMoreRows);
    for (const row of rows) {
      if (typeof row !== 'object' || Array.isArray(row)) continue;
      addRow(row);
    }
  }
  buildTimelineTextUI(zoneId, timeline, parent) {
    const container = document.createElement('div');
    container.classList.add('timeline-text-container');
    parent.appendChild(container);
    for (const header of Object.values(kTimelineTableHeaders)) {
      const div = document.createElement('div');
      div.innerText = this.base.translate(header);
      container.appendChild(div);
    }
    const uniqEvents = {};
    for (const event of timeline.events) {
      if (event.name in uniqEvents) continue;
      if (event.name in timeline.ignores) continue;
      // name = original timeline text
      // text = replaced text in current language
      uniqEvents[event.name] = event.text;
    }
    const keys = Object.keys(uniqEvents).sort();
    for (const key of keys) {
      const event = uniqEvents[key];
      if (event === undefined) continue;
      const checkInput = document.createElement('input');
      checkInput.classList.add('timeline-text-enable');
      checkInput.type = 'checkbox';
      container.appendChild(checkInput);

      // Enable/disable here behaves identically to `hideall "key"`, where this text will
      // not be shown, but timeline triggers related to it will still fire.
      const enableId = ['timeline', zoneId.toString(), 'enable', key];
      const defaultValue = true;
      checkInput.checked = this.base.getBooleanOption('raidboss', enableId, defaultValue);
      checkInput.onchange = () => this.base.setOption('raidboss', enableId, checkInput.checked);
      const timelineText = document.createElement('div');
      timelineText.classList.add('timeline-text-text');
      timelineText.innerHTML = event;
      container.appendChild(timelineText);
      const textInput = document.createElement('input');
      textInput.type = 'text';
      textInput.classList.add('timeline-text-edit');
      textInput.placeholder = event;

      // Any changes are tied to the original timeline text (key), but the config ui will
      // display the current language's text with replacements (event) as the placeholder above.
      const textId = ['timeline', zoneId.toString(), 'globalReplace', key];
      textInput.value = this.base.getStringOption('raidboss', textId, '');
      const setFunc = () => this.base.setOption('raidboss', textId, textInput.value);
      textInput.onchange = setFunc;
      textInput.oninput = setFunc;
      container.appendChild(textInput);
    }
  }

  // This duplicates the raidboss function of the same name.
  valueOrFunction(f, data, matches, output) {
    const result = typeof f === 'function' ? f(data, matches, output) : f;
    if (result !== Object(result)) return result;
    if (typeof result !== 'object' || result === null) return result;
    if (result[this.alertsLang] !== undefined) return this.valueOrFunction(result[this.alertsLang], data, matches, output);
    if (result[this.timelineLang] !== undefined) return this.valueOrFunction(result[this.timelineLang], data, matches, output);
    // For partially localized results where this localization doesn't
    // exist, prefer English over nothing.
    return this.valueOrFunction(result['en'], data, matches, output);
  }
  processTrigger(trig, set) {
    // TODO: with some hackiness (e.g. regexes?) we could figure out which
    // output string came from which alert type (alarm, alert, info, tts).
    // See `makeOutput` comments for why this needs a type assertion to be an Output.
    const fakeOutputProxy = new DoNothingFuncProxy(outputStrings => {
      trig.outputStrings = trig.outputStrings || {};
      Object.assign(trig.outputStrings, outputStrings);
    });
    const baseFakeData = {
      me: '',
      job: 'NONE',
      role: 'none',
      party: new PartyTracker(raidboss_options),
      lang: this.base.lang,
      currentHP: 1000,
      options: this.base.configOptions,
      inCombat: true,
      triggerSetConfig: {},
      ShortName: x => x ?? '???',
      StopCombat: () => {/* noop */},
      ParseLocaleFloat: parseFloat,
      CanStun: () => false,
      CanSilence: () => false,
      CanSleep: () => false,
      CanCleanse: () => false,
      CanFeint: () => false,
      CanAddle: () => false,
      parserLang: this.base.lang,
      displayLang: this.base.lang
    };
    const partialFakeDataEntries = [{
      me: 'Tini Poutini',
      job: 'GNB',
      role: 'tank'
    }, {
      me: 'Potato Chippy',
      job: 'WHM',
      role: 'healer'
    }, {
      me: 'Tater Tot',
      job: 'BLM',
      role: 'dps'
    }, {
      me: 'Hash Brown',
      job: 'DRG',
      role: 'dps'
    }, {
      me: 'Aloo Gobi',
      job: 'BLU',
      role: 'dps'
    }];
    const fakeDataEntries = partialFakeDataEntries.map(x => {
      return Object.assign({}, x, baseFakeData);
    });
    const firstData = fakeDataEntries[0];
    if (!firstData) throw new not_reached/* UnreachableCode */.$();
    const kFakeMatches = {
      // TODO: really should convert all triggers to use regexes.js.
      // Mooooost triggers use matches[1] to be a name.
      1: firstData.me,
      sourceId: '41234567',
      source: 'Enemy',
      id: '1234',
      ability: 'Ability',
      targetId: '1234567',
      target: firstData.me,
      flags: '',
      x: '100',
      y: '100',
      z: '0',
      heading: '0',
      npcId: '',
      effect: 'Effect',
      duration: '30',
      code: '00',
      line: '',
      name: 'Name'
    };
    const output = {};
    const outputKeys = ['alarmText', 'alertText', 'infoText', 'tts', 'sound'];
    // Try to determine some sample output?
    // This could get much more complicated if we wanted it to.
    const evalTrigger = (trig, key, data) => {
      try {
        const result = this.valueOrFunction(trig[key], data, kFakeMatches, fakeOutputProxy);
        if (result === null || result === undefined) return false;

        // Super hack:
        const resultStr = result.toString();
        if (resultStr.includes('undefined') || resultStr.includes('NaN')) return false;
        output[key] = resultStr;
        return true;
      } catch (e) {
        // This is all totally bogus.  Many triggers assume fields on data
        // are properly defined when these calls happen, so will throw errors.
        // So just silently ignore.
        return false;
      }
    };

    // Handle 'response' first.
    if (trig.response) {
      const r = trig.response;
      for (const data of fakeDataEntries) {
        try {
          // Can't use ValueOrFunction here as r returns a non-localizable object.
          // FIXME: this hackily replicates some raidboss logic too.
          let response = r;
          while (typeof response === 'function') {
            // TODO: check if this has builtInResponseStr first.
            response = response(data, kFakeMatches, fakeOutputProxy);
          }
          if (!response) continue;
          if (!trig.outputStrings) {
            for (const key of outputKeys) evalTrigger(response, key, data);
          }
          break;
        } catch (e) {
          continue;
        }
      }
    }

    // Only evaluate fields if there are not outputStrings.
    // outputStrings will indicate more clearly what the trigger says.
    if (!trig.outputStrings) {
      for (const key of outputKeys) {
        if (!(key in trig)) continue;
        for (const data of fakeDataEntries) {
          if (evalTrigger(trig, key, data)) break;
        }
      }
    }
    trig.configOutput = output;

    // TODO: this shows the regexes in the display language.
    // Should we show them in the parser language instead?
    const lang = this.base.lang;
    const getRegex = () => {
      const regex = trig.regex;
      if (regex === undefined) return;
      return regexes/* default.parse */.Z.parse(translateRegex(regex, lang, set.timelineReplace));
    };
    const getNetRegex = () => {
      const regex = trig.netRegex;
      if (regex === undefined) return;
      if (regex instanceof RegExp) return regexes/* default.parse */.Z.parse(translateRegex(regex, lang, set.timelineReplace));
      if (trig.type === undefined) return;
      return regexes/* default.parse */.Z.parse((0,netregexes/* buildNetRegexForTrigger */.BW)(trig.type, translateRegexBuildParam(regex, lang, set.timelineReplace).params));
    };
    if (trig.isTimelineTrigger) {
      trig.timelineRegex = getRegex();
    } else {
      trig.triggerRegex = getRegex();
      trig.triggerNetRegex = getNetRegex();
    }
    return trig;
  }
  processRaidbossFiles(files, userOptions) {
    // `files` is map of filename => triggerSet (for trigger files)
    // `map` is a sorted map of shortened zone key => { various fields, triggerSet }
    const triggerFiles = {};
    const timelineFiles = {};
    for (const [filename, triggerSetOrString] of Object.entries(files)) {
      if (typeof triggerSetOrString === 'string') timelineFiles[filename] = triggerSetOrString;else triggerFiles[filename] = triggerSetOrString;
    }
    const map = this.base.processFiles(triggerFiles, userOptions.Triggers);
    let triggerIdx = 0;

    // While walking through triggers, record any previous triggers with the same
    // id so that the ui can disable overriding information.
    const previousTriggerWithId = {};
    for (const item of Object.values(map)) {
      // TODO: maybe each trigger set needs a zone name, and we should
      // use that instead of the filename???
      const rawTriggers = {
        trigger: [],
        timeline: []
      };
      const triggerSet = item.triggerSet;
      if (triggerSet.triggers) rawTriggers.trigger.push(...triggerSet.triggers);
      if (triggerSet.timelineTriggers) rawTriggers.timeline.push(...triggerSet.timelineTriggers);
      if (!triggerSet.isUserTriggerSet && triggerSet.filename !== undefined) flattenTimeline(triggerSet, triggerSet.filename, timelineFiles);
      item.triggers = {};
      for (const [key, triggerArr] of Object.entries(rawTriggers)) {
        for (const baseTrig of triggerArr) {
          const trig = baseTrig;
          triggerIdx++;
          if (trig.id === undefined) {
            // Give triggers with no id some "unique" string so that they can
            // still be added to the set and show up in the ui.
            trig.id = `!!NoIdTrigger${triggerIdx}`;
            trig.isMissingId = true;
          }

          // Track if this trigger overrides any previous trigger.
          const previous = previousTriggerWithId[trig.id];
          if (previous) previous.overriddenByFile = triggerSet.filename;
          previousTriggerWithId[trig.id] = trig;
          trig.isTimelineTrigger = key === 'timeline';
          // Also, if a user has two of the same id in the same triggerSet (?!)
          // then only the second trigger will show up.
          item.triggers[trig.id] = this.processTrigger(trig, triggerSet);
        }
      }
    }
    return map;
  }
  buildTriggerOptions(trig, labelDiv) {
    // This shouldn't happen, as all triggers should be processed with a unique id.
    const trigId = trig.id;
    if (trigId === undefined) throw new not_reached/* UnreachableCode */.$();
    const optionKey = kOptionKeys.output;
    const div = document.createElement('div');
    div.classList.add('trigger-options');
    const updateLabel = input => {
      if (input.value === 'hidden' || input.value === 'disabled') labelDiv.classList.add('disabled');else labelDiv.classList.remove('disabled');
    };
    const input = document.createElement('select');
    div.appendChild(input);
    const selectValue = this.base.getOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], 'default');
    for (const [key, opt] of Object.entries(triggerSoundOptions)) {
      // Hide debug only options unless they are selected.
      // Otherwise, it will look weird to pick something like 'Disabled',
      // but then not show it when developer options are turned off.
      if (!this.base.developerOptions && opt.debugOnly && key !== selectValue) continue;
      const elem = document.createElement('option');
      elem.innerHTML = this.base.translate(opt.label);
      elem.value = key;
      elem.selected = key === selectValue;
      input.appendChild(elem);
      updateLabel(input);
      input.onchange = () => {
        updateLabel(input);
        let value = input.value;
        if (value.includes('default')) value = 'default';
        this.base.setOption('raidboss', [kOptionKeys.triggers, trigId, optionKey], input.value);
      };
    }
    return div;
  }
}
const flattenTimeline = (set, filename, files) => {
  // Convert set.timelineFile to set.timeline.
  if (set.timelineFile === undefined) return;
  const lastIndex = Math.max(filename.lastIndexOf('/'), filename.lastIndexOf('\\'));
  // If lastIndex === -1, truncate name to the empty string.
  // if lastIndex > -1, truncate name after the final slash.
  const dir = filename.slice(0, Math.max(0, lastIndex + 1));
  const timelineFile = `${dir}${set.timelineFile}`;
  delete set.timelineFile;
  if (!(timelineFile in files)) {
    console.log(`ERROR: '${filename}' specifies non-existent timeline file '${timelineFile}'.`);
    return;
  }

  // set.timeline is processed recursively.
  set.timeline = [set.timeline, files[timelineFile]];
};

// Raidboss needs to do some extra processing of user files.
const userFileHandler = (name, files, baseOptions, basePath) => {
  // TODO: Rewrite user_config to be templated on option type so that this function knows
  // what type of options it is using.
  if (!baseOptions.Triggers) return;
  for (const baseTriggerSet of baseOptions.Triggers) {
    const set = baseTriggerSet;

    // Annotate triggers with where they came from.  Note, options is passed in repeatedly
    // as multiple sets of user files add triggers, so only process each file once.
    if (set.isUserTriggerSet) continue;

    // `filename` here is just cosmetic for better debug printing to make it more clear
    // where a trigger or an override is coming from.
    set.filename = `${basePath}${name}`;
    set.isUserTriggerSet = true;
    flattenTimeline(set, name, files);
  }
};
const processPerTriggerAutoConfig = (options, savedConfig) => {
  // raidboss will look up this.options.PerTriggerAutoConfig to find these values.
  const optionName = 'PerTriggerAutoConfig';
  const perTriggerAutoConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
  const triggers = savedConfig[kOptionKeys.triggers];
  if (typeof triggers !== 'object' || Array.isArray(triggers)) return;
  const outputObjs = {};
  const keys = Object.keys(kTriggerOptions);
  for (const key of keys) {
    const obj = outputObjs[key] = {};
    setOptionsFromOutputValue(key, obj);
  }
  for (const [id, entry] of Object.entries(triggers)) {
    if (typeof entry !== 'object' || Array.isArray(entry)) return;
    const autoConfig = {};
    const output = entry[kOptionKeys.output];
    if (typeof output === 'string') Object.assign(autoConfig, outputObjs[output]);
    const duration = validDurationOrUndefined(entry[kOptionKeys.duration]);
    if (duration) autoConfig[kOptionKeys.duration] = duration;
    const beforeSeconds = validDurationOrUndefined(entry[kOptionKeys.beforeSeconds]);
    if (beforeSeconds) autoConfig[kOptionKeys.beforeSeconds] = beforeSeconds;
    const delayAdjustSeconds = validDelayAdjustOrUndefined(entry[kOptionKeys.delayAdjust]);
    if (delayAdjustSeconds) autoConfig[kOptionKeys.delayAdjust] = delayAdjustSeconds;
    const outputStrings = entry[kOptionKeys.outputStrings];
    // Validate that the SavedConfigEntry is an an object with string values,
    // which is a subset of the OutputStrings type.
    if ((entry => {
      if (typeof entry !== 'object' || Array.isArray(entry)) return false;
      for (const value of Object.values(entry)) {
        if (typeof value !== 'string') return false;
      }
      return true;
    })(outputStrings)) autoConfig[kOptionKeys.outputStrings] = outputStrings;
    if (typeof output === 'string' || duration || outputStrings !== undefined) perTriggerAutoConfig[id] = autoConfig;
  }
};
const processPerTriggerSetAutoConfig = (options, savedConfig) => {
  // raidboss will look up this.options.PerTriggerSetAutoConfig to find these values.
  const optionName = 'PerTriggerSetAutoConfig';
  const perTriggerSetAutoConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
  const triggerSets = savedConfig[kOptionKeys.triggerSets];
  if (typeof triggerSets !== 'object' || Array.isArray(triggerSets)) return;
  const outputObjs = {};
  const keys = Object.keys(kTriggerOptions);
  for (const key of keys) {
    const obj = outputObjs[key] = {};
    setOptionsFromOutputValue(key, obj);
  }
  for (const [id, entry] of Object.entries(triggerSets)) {
    if (typeof entry !== 'object' || Array.isArray(entry)) return;
    const output = entry[kOptionKeys.output];
    if (typeof output === 'string') perTriggerSetAutoConfig[id] = {
      ...outputObjs[output]
    };
  }
};
const processPerZoneTimelineConfig = (options, savedConfig) => {
  const optionName = 'PerZoneTimelineConfig';
  // SavedConfig uses this key structure:
  // * 'timeline', zoneId (as string), 'enable', text, boolean
  // * 'timeline', zoneId (as string), 'globalReplace', text, string
  // ...and this function transforms it into a `PerZoneTimelineConfig`.

  const perZoneTimelineConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;
  const timeline = savedConfig['timeline'];
  if (typeof timeline !== 'object' || Array.isArray(timeline)) return;
  for (const [zoneKey, zoneEntry] of Object.entries(timeline)) {
    const zoneId = parseInt(zoneKey);
    if (!zoneId) continue;
    const timelineConfig = perZoneTimelineConfig[zoneId] ??= {};
    if (typeof zoneEntry !== 'object' || Array.isArray(zoneEntry)) continue;
    const enableEntry = zoneEntry['enable'];
    const replaceEntry = zoneEntry['globalReplace'];
    const addEntry = zoneEntry['add'];
    if (typeof enableEntry === 'object' && !Array.isArray(enableEntry)) {
      for (const [key, value] of Object.entries(enableEntry)) {
        if (typeof value === 'boolean' && !value) (timelineConfig.Ignore ??= []).push(key);
      }
    }
    if (typeof replaceEntry === 'object' && !Array.isArray(replaceEntry)) {
      for (const [key, value] of Object.entries(replaceEntry)) {
        if (typeof value === 'string') (timelineConfig.Rename ??= {})[key] = value;
      }
    }
    if (addEntry !== undefined && typeof addEntry === 'object' && Array.isArray(addEntry)) {
      for (const row of addEntry) {
        if (typeof row !== 'object' || Array.isArray(row)) continue;
        const time = typeof row.time === 'string' ? parseFloat(row.time) : NaN;
        const text = typeof row.text === 'string' ? row.text : '';
        const durationOrNaN = typeof row.duration === 'string' ? parseFloat(row.duration) : NaN;
        const duration = isNaN(durationOrNaN) ? undefined : durationOrNaN;
        if (text.trim() === '' || isNaN(time)) continue;
        (timelineConfig.Add ??= []).push({
          time,
          text,
          duration
        });
      }
    }
  }
};
const processTriggerSetConfig = (options, savedConfig) => {
  // Note: this function is just for providing the raw values for TriggerSetConfig.
  // popuptext handles the loading of triggersets at runtime (maybe this should be merged?)
  // and so it has to do the work of using this info to set defaults, apply overrides, and
  // run setter functions via `processOptions`.
  const optionName = 'TriggerSetConfig';
  const outputTriggerSetConfig = options[optionName] ??= {};
  if (typeof savedConfig !== 'object' || Array.isArray(savedConfig)) return;

  // raidboss > TriggerSetConfig > [triggerSetId] > [key] > [leaf ConfigValue]
  const triggerSetConfig = savedConfig[kOptionKeys.triggerSetConfig];
  if (triggerSetConfig === undefined || typeof triggerSetConfig !== 'object' || Array.isArray(triggerSetConfig)) return;
  for (const [triggerSetId, configDict] of Object.entries(triggerSetConfig)) {
    if (typeof configDict !== 'object' || Array.isArray(configDict)) continue;
    for (const [key, value] of Object.entries(configDict)) {
      if (typeof value !== 'boolean' && typeof value !== 'string' && typeof value !== 'number') continue;
      (outputTriggerSetConfig[triggerSetId] ??= {})[key] = value;
    }
  }
};

// Reused for both top level UI and trigger set config UI.
const defaultAlertOutput = {
  id: 'DefaultAlertOutput',
  name: {
    en: 'Default alert output',
    de: 'Standard Alert Ausgabe',
    fr: 'Alerte par défaut',
    ja: '警告情報出力既定値',
    cn: '默认触发器提示输出模式',
    ko: '기본 알람 출력 방식'
  },
  type: 'select',
  options: {
    en: {
      '🆙🔊 Text and Sound': 'textAndSound',
      '🆙💬 Text and TTS': 'ttsAndText',
      '💬 TTS Only': 'ttsOnly',
      '🆙 Text Only': 'textOnly',
      '❌ Disabled': 'disabled'
    },
    de: {
      '🆙🔊 Text und Ton': 'textAndSound',
      '🆙💬 Text und TTS': 'ttsAndText',
      '💬 Nur TTS': 'ttsOnly',
      '🆙 Nur Text': 'textOnly',
      '❌ Deaktiviert': 'disabled'
    },
    fr: {
      '🆙🔊 Texte et son': 'textAndSound',
      '🆙💬 Texte et TTS': 'ttsAndText',
      '💬 TTS seulement': 'ttsOnly',
      '🆙 Texte seulement': 'textOnly',
      '❌ Désactivé': 'disabled'
    },
    ja: {
      '🆙🔊 テキストと音声': 'textAndSound',
      '🆙💬 テキストとTTS': 'ttsAndText',
      '💬 TTSのみ': 'ttsOnly',
      '🆙 テキストのみ': 'textOnly',
      '❌ 無効': 'disabled'
    },
    cn: {
      '🆙🔊 文本显示与提示音': 'textAndSound',
      '🆙💬 文本显示与TTS': 'ttsAndText',
      '💬 只使用TTS': 'ttsOnly',
      '🆙 只使用文本显示': 'textOnly',
      '❌ 禁用': 'disabled'
    },
    ko: {
      '🆙🔊 텍스트와 소리': 'textAndSound',
      '🆙💬 텍스트와 TTS': 'ttsAndText',
      '💬 TTS만': 'ttsOnly',
      '🆙 텍스트만': 'textOnly',
      '❌ 비활성화': 'disabled'
    }
  },
  default: 'textAndSound',
  setterFunc: setOptionsFromOutputValue
};
const defaultTriggerSetAlertOutput = {
  ...defaultAlertOutput,
  name: {
    en: 'Default trigger set alert output',
    de: 'Standard trigger-Set Alert Ausgabe',
    ja: '基本トリガーセットの通知方法',
    cn: '默认触发器集合提示输出模式',
    ko: '기본 트리거 세트 알람 출력 방식'
  }
};
const templateOptions = {
  buildExtraUI: (base, container) => {
    const builder = new RaidbossConfigurator(base);
    const userOptions = {
      ...raidboss_options
    };
    user_config/* default.loadUserFiles */.Z.loadUserFiles('raidboss', userOptions, () => {
      builder.buildUI(container, raidboss_manifest/* default */.Z, userOptions);
    }, false);
  },
  processExtraOptions: (baseOptions, savedConfig) => {
    // TODO: Rewrite user_config to be templated on option type so that this function knows
    // what type of options it is using.  Without this, perTriggerAutoConfig is unknown.
    const options = baseOptions;
    processPerTriggerAutoConfig(options, savedConfig);
    processPerTriggerSetAutoConfig(options, savedConfig);
    processPerZoneTimelineConfig(options, savedConfig);
    processTriggerSetConfig(options, savedConfig);
  },
  options: [{
    id: 'Coverage',
    name: {
      en: 'Supported content (latest version)',
      de: 'Unterstützte Inhalte (aktuellste Version)',
      fr: 'Contenu supporté (dernière version)',
      ja: '対応コンテンツ一覧 (最新バージョン)',
      cn: '支持副本一览 (含未发布更新)',
      ko: '지원하는 컨텐츠 (릴리즈버전보다 최신)'
    },
    type: 'html',
    html: {
      // TODO: it'd be nice if OverlayPlugin could open links on the system outside of ACT.
      en: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=en'),
      de: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=de'),
      fr: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=fr'),
      ja: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=ja'),
      cn: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=cn'),
      ko: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=ko')
    },
    default: makeLink('https://quisquous.github.io/cactbot/util/coverage/coverage.html?lang=en')
  }, {
    id: 'Debug',
    name: {
      en: 'Enable debug mode',
      de: 'Aktiviere Debugmodus',
      fr: 'Activer le mode debug',
      ja: 'デバッグモードを有効にする',
      cn: '启用调试模式',
      ko: '디버그 모드 활성화'
    },
    type: 'checkbox',
    debugOnly: true,
    default: false
  }, defaultAlertOutput, {
    id: 'AlertsLanguage',
    name: {
      en: 'Alerts language',
      de: 'Alert Sprache',
      fr: 'Langue des alertes',
      ja: '警告情報の言語',
      cn: '触发器提示语言',
      ko: '알람 언어'
    },
    type: 'select',
    options: {
      en: {
        'Use Display Language': 'default',
        'English (en)': 'en',
        'Chinese (cn)': 'cn',
        'German (de)': 'de',
        'French (fr)': 'fr',
        'Japanese (ja)': 'ja',
        'Korean (ko)': 'ko'
      },
      fr: {
        'Utiliser la langue d\'affichage': 'default',
        'Anglais (en)': 'en',
        'Chinois (cn)': 'cn',
        'Allemand (de)': 'de',
        'Français (fr)': 'fr',
        'Japonais (ja)': 'ja',
        'Coréen (ko)': 'ko'
      },
      ja: {
        '表示言語既定値': 'default',
        '英語 (en)': 'en',
        '中国語 (cn)': 'cn',
        'ドイツ語 (de)': 'de',
        'フランス語 (fr)': 'fr',
        '日本語 (ja)': 'ja',
        '韓国語 (ko)': 'ko'
      },
      cn: {
        '使用显示语言': 'default',
        '英文 (en)': 'en',
        '中文 (cn)': 'cn',
        '德文 (de)': 'de',
        '法文 (fr)': 'fr',
        '日文 (ja)': 'ja',
        '韩文 (ko)': 'ko'
      },
      ko: {
        '주 사용 언어 사용': 'default',
        '영어 (en)': 'en',
        '중국어 (cn)': 'cn',
        '독일어 (de)': 'de',
        '프랑스어 (fr)': 'fr',
        '일본어 (ja)': 'ja',
        '한국어 (ko)': 'ko'
      }
    },
    default: 'default',
    debug: true,
    setterFunc: value => {
      if (typeof value !== 'string') return;
      if (value === 'default') return;
      return value;
    }
  }, {
    id: 'TimelineLanguage',
    name: {
      en: 'Timeline language',
      de: 'Timeline Sprache',
      fr: 'Langue de la timeline',
      ja: 'タイムラインの言語',
      cn: '时间轴文本的语言',
      ko: '타임라인 언어'
    },
    type: 'select',
    options: {
      en: {
        'Use FFXIV Plugin Language': 'default',
        'English (en)': 'en',
        'Chinese (cn)': 'cn',
        'German (de)': 'de',
        'French (fr)': 'fr',
        'Japanese (ja)': 'ja',
        'Korean (ko)': 'ko'
      },
      de: {
        'Benutze FFXIV Plugin Sprache': 'default',
        'Englisch (en)': 'en',
        'Chinesisch (cn)': 'cn',
        'Deutsch (de)': 'de',
        'Französisch (fr)': 'fr',
        'Japanisch (ja)': 'ja',
        'Koreanisch (ko)': 'ko'
      },
      fr: {
        'Utiliser la langue du Plugin FFXIV': 'default',
        'Anglais (en)': 'en',
        'Chinois (cn)': 'cn',
        'Allemand (de)': 'de',
        'Français (fr)': 'fr',
        'Japonais (ja)': 'ja',
        'Coréen (ko)': 'ko'
      },
      ja: {
        'FFXIV Pluginの言語設定': 'default',
        '英語 (en)': 'en',
        '中国語 (cn)': 'cn',
        'ドイツ語 (de)': 'de',
        'フランス語 (fr)': 'fr',
        '日本語 (ja)': 'ja',
        '韓国語 (ko)': 'ko'
      },
      cn: {
        '使用最终幻想XIV解析插件设置的语言': 'default',
        '英文 (en)': 'en',
        '中文 (cn)': 'cn',
        '德文 (de)': 'de',
        '法文 (fr)': 'fr',
        '日文 (ja)': 'ja',
        '韩文 (ko)': 'ko'
      },
      ko: {
        'FFXIV Plugin 언어 사용': 'default',
        '영어 (en)': 'en',
        '중국어 (cn)': 'cn',
        '독일어 (de)': 'de',
        '프랑스어 (fr)': 'fr',
        '일본어 (ja)': 'ja',
        '한국어 (ko)': 'ko'
      }
    },
    default: 'default',
    debug: true,
    setterFunc: value => {
      if (typeof value !== 'string') return;
      if (value === 'default') return;
      return value;
    }
  }, {
    id: 'Skin',
    name: {
      en: 'Raidboss Skin',
      de: 'Raidboss Skin',
      fr: 'Raidboss Skin',
      ja: 'Raidbossのスキン',
      cn: 'Raidboss皮肤',
      ko: 'Raidboss 스킨'
    },
    type: 'select',
    options: {
      en: {
        'Default': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      de: {
        'Default': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      fr: {
        'Défaut': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      ja: {
        '初期設定': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      cn: {
        '默认': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      },
      ko: {
        '기본': 'default',
        'lippe': 'lippe',
        'jwidea': 'jwidea',
        'dorgrin': 'dorgrin'
      }
    },
    default: 'default'
  }, {
    id: 'TimelineEnabled',
    name: {
      en: 'Timeline enabled',
      de: 'Timeline aktiviert',
      fr: 'Timeline activée',
      ja: 'タイムラインを有効にする',
      cn: '启用时间轴',
      ko: '타임라인 활성화'
    },
    type: 'checkbox',
    default: true
  }, {
    id: 'AlertsEnabled',
    name: {
      en: 'Alerts enabled',
      de: 'Alerts aktiviert',
      fr: 'Alertes activées',
      ja: '警告情報を有効にする',
      cn: '启用触发器提示',
      ko: '알람 활성화'
    },
    type: 'checkbox',
    default: true
  }, {
    id: 'ReverseTimeline',
    name: {
      en: 'Reverse timeline order (bottom-to-top)',
      de: 'Umgekehrte Timeline Reihenfolge (unten-nach-oben)',
      fr: 'Timeline inversée (de bas en haut)',
      ja: 'タイムラインを下から表示',
      cn: '反转时间轴顺序 (从下到上)',
      ko: '타임라인 순서 반전 (아래에서 위)'
    },
    type: 'checkbox',
    default: false
  }, {
    id: 'DefaultPlayerLabel',
    comment: {
      en: `The default way to specify players in trigger output. By default, it will use
             nicknames/first names. This can be used to print out player jobs instead.
             If you are not in a party or players are out of a party (or there are bugs),
             it will default to the player's nickname if there's no other information.`,
      de: `Die Standardmethode zur Angabe von Spielern in der Triggerausgabe. Standardmäßig werden
             Spitznamen/Vornamen verwendet. Dies kann verwendet werden, um stattdessen Spieler-Jobs darzustellen.
             Wenn Sie nicht in einer Gruppe sind oder Spieler nicht in einer Gruppe sind (oder es Fehler gibt),
             wird standardmäßig der Spitzname des Spielers verwendet, wenn es keine anderen Informationen gibt.`,
      ja: `トリガーでプレイヤーの名前を表示する方法です。基本であだ名・ファストネームをつかいます。
             あなたがパティに入ってない場合とパティ以外のプレイヤーはあだ名とファストネームが表示されます。`,
      cn: `在触发器输出中指定玩家的默认方式。默认选项为输出昵称/名字。
             使用此选项可将输出方式更改为玩家的职能名或职业名。
             若你不在小队中或玩家离开小队 (或出现错误时), 将默认输出玩家昵称。
             (注：国服对于昵称和全名不做区分)`,
      ko: `트리거 출력에서 플레이어를 언급하는 방법입니다. 기본값으로 닉네임/이름을 사용합니다.
             이 옵션은 이름 대신 플레이어의 직업이나 역할을 출력하고 싶을 때 사용할 수 있습니다.
             당신이 파티에 있지 않거나 파티 밖에 있는 플레이어에 대해서는
             기본값인 플레이어의 닉네임이 사용됩니다.
             (한국 서버에서 '이름 전체' 옵션은 '닉네임'과 같습니다.)`
    },
    name: {
      en: 'Default Player Label',
      de: 'Standard Spieler Label',
      ja: '基本プレイヤーラベル',
      cn: '默认玩家代称',
      ko: '플레이어를 언급하는 기본 방법'
    },
    type: 'select',
    options: {
      en: {
        'Nickname (Tini)': 'nick',
        'Role (Tank)': 'role',
        'Job (WAR)': 'job',
        'Full Job (Warrior)': 'jobFull',
        'Full Name (Tini Poutini)': 'name'
      },
      de: {
        'Spitzname (Tini)': 'nick',
        'Rolle (Tank)': 'role',
        'Job (WAR)': 'job',
        'Job ausgeschrieben (Warrior)': 'jobFull',
        'Kompletter Name (Tini Poutini)': 'name'
      },
      ja: {
        'あだ名 (Tini)': 'nick',
        'ロール (ヒーラー)': 'role',
        '簡略ジョブ (白魔)': 'job',
        'ジョブ (白魔導士)': 'jobFull',
        '名前 (Tini Poutini)': 'name'
      },
      cn: {
        '昵称 (弗雷)': 'nick',
        '职能 (坦克)': 'role',
        '职业简称 (暗骑)': 'job',
        '职业全称 (暗黑骑士)': 'jobFull',
        '全名 (弗雷)': 'name'
      },
      ko: {
        '닉네임 (Tini)': 'nick',
        '역할 (탱커)': 'role',
        '직업 (암기)': 'job',
        '직업 전체 (암흑기사)': 'jobFull',
        '이름 전체 (Tini Poutini)': 'name'
      }
    },
    default: 'nick'
  }, {
    id: 'ShowTimerBarsAtSeconds',
    name: {
      en: 'Timer bar show window (seconds)',
      de: 'Timer-Bar Anzeigedauer (in Sekunden)',
      fr: 'Fenêtre d\'affichage de la barre de temps (secondes)',
      ja: 'タイムバーに時間表示 (秒)',
      cn: '计时条显示时长 (秒)',
      ko: '타임라인을 표시할 기준 시간 (초 이하)'
    },
    type: 'float',
    default: 30
  }, {
    id: 'KeepExpiredTimerBarsForSeconds',
    name: {
      en: 'Keep expired timer bar (seconds)',
      de: 'Behalte abgelaufene Timer-Bar (in Sekunden)',
      fr: 'Garder la barre de temps expirée (secondes)',
      ja: '終了したタイムバーが消えるまでの待ち時間 (秒)',
      cn: '归零计时条滞留时长 (秒)',
      ko: '만료된 타임라인이 사라지기까지의 시간 (초)'
    },
    type: 'float',
    default: 0.7
  }, {
    id: 'BarExpiresSoonSeconds',
    name: {
      en: 'Time to recolor timer as expiring soon (seconds)',
      de: 'Zeit bis ein bald auslaufender Timer umgefärbt wird (in Sekunden)',
      fr: 'Recolorisation de la barre de temps avant expiration (secondes)',
      ja: 'タイムバーが終了前に再度色付けの残り時間 (秒)',
      cn: '倒计时小于该值时当前计时条变色 (秒)',
      ko: '타임라인의 색상을 바꿀 기준 시간 (초 이하)'
    },
    type: 'integer',
    default: 6
  }, {
    id: 'MaxNumberOfTimerBars',
    name: {
      en: 'Max number of timer bars',
      de: 'Max Anzahl an Timer-Bars',
      fr: 'Nombre max de barres de temps',
      ja: 'タイムバーの最大数',
      cn: '计时条最大数量',
      ko: '표시할 타임라인의 최대 개수'
    },
    type: 'integer',
    default: 6
  }, {
    id: 'DisplayAlarmTextForSeconds',
    name: {
      en: 'Alarm text display duration (seconds)',
      de: 'Alarm-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'alarme (secondes)',
      ja: '警報テキスト表示時間の長さ (秒)',
      cn: '致命级提示文本显示时长 (秒)',
      ko: '경고 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'DisplayAlertTextForSeconds',
    name: {
      en: 'Alert text display duration (seconds)',
      de: 'Alert-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'alerte (secondes)',
      ja: '警告テキスト表示時間の長さ (秒)',
      cn: '严重级提示文本显示时长 (秒)',
      ko: '주의 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'DisplayInfoTextForSeconds',
    name: {
      en: 'Info text display duration (seconds)',
      de: 'Info-Text Anzeigedauer (in Sekunden)',
      fr: 'Durée d\'affichage du texte d\'information (secondes)',
      ja: '情報テキスト表示時間の長さ (秒)',
      cn: '一般级提示文本显示时长 (秒)',
      ko: '안내 텍스트를 표시할 시간 (초)'
    },
    type: 'float',
    default: 3
  }, {
    id: 'AlarmSoundVolume',
    name: {
      en: 'Alarm sound volume (0-1)',
      de: 'Alarm Lautstärke (0-1)',
      fr: 'Volume de l\'alarme (0-1)',
      ja: '警報音声の音量 (0-1)',
      cn: '致命级提示音量 (0-1)',
      ko: '경고 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'AlertSoundVolume',
    name: {
      en: 'Alert sound volume (0-1)',
      de: 'Alert Lautstärke (0-1)',
      fr: 'Volume de l\'alerte (0-1)',
      ja: '警告音声の音量 (0-1)',
      cn: '严重级提示音量 (0-1)',
      ko: '주의 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'InfoSoundVolume',
    name: {
      en: 'Info sound volume (0-1)',
      de: 'Info Lautstärke (0-1)',
      fr: 'Volume de l\'info (0-1)',
      ja: '情報音声の音量 (0-1)',
      cn: '一般级提示音量 (0-1)',
      ko: '안내 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'LongSoundVolume',
    name: {
      en: 'Long sound volume (0-1)',
      de: 'Langer Ton Lautstärke (0-1)',
      fr: 'Volume du son long (0-1)',
      ja: '長い音声の音量 (0-1)',
      cn: '长提示音量 (0-1)',
      ko: '긴 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'PullSoundVolume',
    name: {
      en: 'Pull sound volume (0-1)',
      de: 'Pull Lautstärke (0-1)',
      fr: 'Volume du son de pull (0-1)',
      ja: 'タゲ取る効果音の音量 (0-1)',
      cn: '开怪提示音量 (0-1)',
      ko: '풀링 소리 크기 (0-1)'
    },
    type: 'float',
    default: 1
  }, {
    id: 'RumbleEnabled',
    name: {
      en: 'Enable gamepad rumble for triggers',
      de: 'Gamepad-Vibration für Trigger aktivieren',
      fr: 'Activer la vibration de la manette de jeu pour les triggers',
      ja: 'トリガーによるゲームパッド振動を有効にする',
      cn: '触发器活动时使手柄振动',
      ko: '트리거에 대해 게임패드 진동 활성화'
    },
    type: 'checkbox',
    default: false
  }, {
    id: 'InfoRumbleDuration',
    name: {
      en: 'Duration (milliseconds) of rumble for info triggers',
      de: 'Zeit (in Millisekunden) der Vibration bei info trigger',
      fr: 'Durée (millisecondes) de la vibration pour les triggers d\'informations',
      ja: '情報トリガーによる振動の長さ (ミリ秒)',
      cn: '一般级触发器振动时长 (毫秒)',
      ko: '안내 트리거의 진동 지속 시간 (밀리초)'
    },
    type: 'float',
    default: 400
  }, {
    id: 'InfoRumbleWeak',
    name: {
      en: 'Magnitude (0-1) of weak rumble for info triggers',
      de: 'Stärke (0-1) der leichten Vibration bei info trigger',
      fr: 'Intensité de la vibration faible pour les triggers d\'informations (0-1)',
      ja: '情報トリガーによる振動にモーターの弱い方の強さ (0-1)',
      cn: '一般级触发器弱电机振动强度 (0-1)',
      ko: '안내 트리거의 약한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.5
  }, {
    id: 'InfoRumbleStrong',
    name: {
      en: 'Magnitude (0-1) of strong rumble for info triggers',
      de: 'Stärke (0-1) der starken Vibration bei info trigger',
      fr: 'Intensité de la vibration forte pour les triggers d\'informations (0-1)',
      ja: '情報トリガーによる振動にモーターの強い方の強さ (0-1)',
      cn: '一般级触发器强电机振动强度 (0-1)',
      ko: '안내 트리거의 강한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0
  }, {
    id: 'AlertRumbleDuration',
    name: {
      en: 'Duration (milliseconds) of rumble for alert triggers',
      de: 'Zeit (in Millisekunden) der Vibration bei alert trigger',
      fr: 'Durée (millisecondes) de la vibration pour les triggers d\'alertes',
      ja: '警告トリガーによる振動の長さ (ミリ秒)',
      cn: '严重级触发器振动时长 (毫秒)',
      ko: '주의 트리거의 진동 지속 시간 (밀리초)'
    },
    type: 'float',
    default: 500
  }, {
    id: 'AlertRumbleWeak',
    name: {
      en: 'Magnitude (0-1) of weak rumble for alert triggers',
      de: 'Stärke (0-1) der leichten Vibration bei alert trigger',
      fr: 'Intensité de la vibration faible pour les triggers d\'alertes (0-1)',
      ja: '警告トリガーによる振動にモーターの弱い方の強さ (0-1)',
      cn: '严重级触发器弱电机振动强度 (0-1)',
      ko: '주의 트리거의 약한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0
  }, {
    id: 'AlertRumbleStrong',
    name: {
      en: 'Magnitude (0-1) of strong rumble for alert triggers',
      de: 'Stärke (0-1) der starken Vibration bei alert trigger',
      fr: 'Intensité de la vibration forte pour les triggers d\'alertes (0-1)',
      ja: '警告トリガーによる振動にモーターの強い方の強さ (0-1)',
      cn: '严重级触发器强电机振动强度 (0-1)',
      ko: '주의 트리거의 강한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.5
  }, {
    id: 'AlarmRumbleDuration',
    name: {
      en: 'Duration (milliseconds) of rumble for alarm triggers',
      de: 'Zeit (in Millisekunden) der Vibration bei alarm trigger',
      fr: 'Durée (millisecondes) de la vibration pour les triggers d\'alarmes',
      ja: '警報トリガーによる振動の長さ (ミリ秒)',
      cn: '致命级触发器振动时长 (毫秒)',
      ko: '경고 트리거의 진동 지속 시간 (밀리초)'
    },
    type: 'float',
    default: 750
  }, {
    id: 'AlarmRumbleWeak',
    name: {
      en: 'Magnitude (0-1) of weak rumble for alarm triggers',
      de: 'Stärke (0-1) der leichten Vibration bei alarm trigger',
      fr: 'Intensité de la vibration faible pour les triggers d\'alarmes (0-1)',
      ja: '警報トリガーによる振動にモーターの弱い方の強さ (0-1)',
      cn: '致命级触发器弱电机振动强度 (0-1)',
      ko: '경고 트리거의 약한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.75
  }, {
    id: 'AlarmRumbleStrong',
    name: {
      en: 'Magnitude (0-1) of strong rumble for alarm triggers',
      de: 'Stärke (0-1) der starken Vibration bei alarm trigger',
      fr: 'Intensité de la vibration forte pour les triggers d\'alarmes (0-1)',
      ja: '警報トリガーによる振動にモーターの強い方の強さ (0-1)',
      cn: '致命级触发器强电机振动强度 (0-1)',
      ko: '경고 트리거의 강한 진동 세기 (0-1)'
    },
    type: 'float',
    default: 0.75
  }]
};
user_config/* default.registerOptions */.Z.registerOptions('raidboss', templateOptions, userFileHandler);
;// CONCATENATED MODULE: ./ui/raidboss/raidboss.ts












user_config/* default.getUserConfigLocation */.Z.getUserConfigLocation('raidboss', raidboss_options, () => {
  const options = {
    ...raidboss_options
  };

  // Query params override default and user options.
  // This allows for html files that say "timeline only" or "alerts only".
  const params = new URLSearchParams(window.location.search);
  options.IsRemoteRaidboss = false;
  const overlayWsParam = params.get('OVERLAY_WS');
  if (overlayWsParam !== null) {
    const wsParam = decodeURIComponent(overlayWsParam);
    // TODO: is there a better way to do this?? This seems better than looking for ngrok.
    const isLocal = wsParam.includes('localhost') || wsParam.includes('127.0.0.1');
    options.IsRemoteRaidboss = !isLocal;
  }
  const playerNameParam = params.get('player');
  if (playerNameParam !== null) {
    options.PlayerNameOverride = playerNameParam;
    console.log(`Enabling player name override via query parameter, name: ${playerNameParam}`);
  }
  if (options.IsRemoteRaidboss && playerNameParam === null) {
    const lang = options.DisplayLanguage || options.ParserLanguage || 'en';
    addRemotePlayerSelectUI(lang);

    // Page will reload once player selected.
    return;
  }
  const ttsParam = params.get('forceTTS');
  if (ttsParam !== null) {
    const forceEnable = !!parseInt(ttsParam);
    if (forceEnable) {
      options.SpokenAlertsEnabled = true;
      console.log('Force enabling TTS via query parameter');
    }
  }
  const alertsParam = params.get('alerts');
  if (alertsParam !== null) {
    const previous = options.AlertsEnabled;
    options.AlertsEnabled = !!parseInt(alertsParam);
    if (!previous && options.AlertsEnabled) console.log('Enabling alerts via query parameter');
  }
  const timelineParam = params.get('timeline');
  if (timelineParam !== null) {
    const previous = options.TimelineEnabled;
    options.TimelineEnabled = !!parseInt(timelineParam);
    if (!previous && options.TimelineEnabled) console.log('Enabling timeline via query parameter');
  }
  const audioParam = params.get('audio');
  if (audioParam !== null) {
    const previous = options.AudioAllowed;
    options.AudioAllowed = !!parseInt(audioParam);
    if (!previous && options.AudioAllowed) console.log('Enabling audio via query parameter');
  }
  const container = document.getElementById('container');
  if (!container) throw new Error('Unable to find container element');
  if (!options.AlertsEnabled) container.classList.add('hide-alerts');
  if (!options.TimelineEnabled) container.classList.add('hide-timeline');
  const timelineUI = new HTMLTimelineUI(options);
  const timelineController = new TimelineController(options, timelineUI, raidboss_manifest/* default */.Z);
  const timelineLoader = new TimelineLoader(timelineController);
  const popupText = new PopupText(options, timelineLoader, raidboss_manifest/* default */.Z);

  // Connect the timelines to the popup text, if alerts are desired.
  if (options.AlertsEnabled) timelineController.SetPopupTextInterface(new PopupTextGenerator(popupText));
  (0,overlay_plugin_api/* addOverlayListener */.PS)('onLogEvent', e => {
    timelineController.OnLogEvent(e);
  });
  (0,overlay_plugin_api/* addOverlayListener */.PS)('LogLine', e => {
    timelineController.OnNetLog(e);
  });
});

/***/ }),

/***/ 142:
/***/ (function(module) {

(function (global, factory) {
	 true ? module.exports = factory() :
	0;
}(this, (function () { 'use strict';

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.5' };
	if (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) { throw TypeError(it + ' is not an object!'); }
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document) && _isObject(document.createElement);
	var _domCreate = function (it) {
	  return is ? document.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) { return it; }
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) { return val; }
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) { try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ } }
	  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }
	  if ('value' in Attributes) { O[P] = Attributes.value; }
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var hasOwnProperty = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var _library = false;

	var _shared = createCommonjsModule(function (module) {
	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: _core.version,
	  mode: _library ? 'pure' : 'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var _functionToString = _shared('native-function-to-string', Function.toString);

	var _redefine = createCommonjsModule(function (module) {
	var SRC = _uid('src');

	var TO_STRING = 'toString';
	var TPL = ('' + _functionToString).split(TO_STRING);

	_core.inspectSource = function (it) {
	  return _functionToString.call(it);
	};

	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) { _has(val, 'name') || _hide(val, 'name', key); }
	  if (O[key] === val) { return; }
	  if (isFunction) { _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }
	  if (O === _global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    _hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    _hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || _functionToString.call(this);
	});
	});

	var _aFunction = function (it) {
	  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) { return fn; }
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) { source = name; }
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // extend global
	    if (target) { _redefine(target, key, out, type & $export.U); }
	    // export
	    if (exports[key] != out) { _hide(exports, key, exp); }
	    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }
	  }
	};
	_global.core = _core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) { throw TypeError("Can't call method on  " + it); }
	  return it;
	};

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var $at = _stringAt(false);
	_export(_export.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});

	var codePointAt = _core.String.codePointAt;

	var max = Math.max;
	var min = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

	var fromCharCode = String.fromCharCode;
	var $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) {
	    var arguments$1 = arguments;
	 // eslint-disable-line no-unused-vars
	    var res = [];
	    var aLen = arguments.length;
	    var i = 0;
	    var code;
	    while (aLen > i) {
	      code = +arguments$1[i++];
	      if (_toAbsoluteIndex(code, 0x10ffff) !== code) { throw RangeError(code + ' is not a valid code point'); }
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

	var fromCodePoint = _core.String.fromCodePoint;

	// This is a generated file. Do not edit.
	var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
	var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
	var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;

	var unicode = {
		Space_Separator: Space_Separator,
		ID_Start: ID_Start,
		ID_Continue: ID_Continue
	};

	var util = {
	    isSpaceSeparator: function isSpaceSeparator (c) {
	        return typeof c === 'string' && unicode.Space_Separator.test(c)
	    },

	    isIdStartChar: function isIdStartChar (c) {
	        return typeof c === 'string' && (
	            (c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        (c === '$') || (c === '_') ||
	        unicode.ID_Start.test(c)
	        )
	    },

	    isIdContinueChar: function isIdContinueChar (c) {
	        return typeof c === 'string' && (
	            (c >= 'a' && c <= 'z') ||
	        (c >= 'A' && c <= 'Z') ||
	        (c >= '0' && c <= '9') ||
	        (c === '$') || (c === '_') ||
	        (c === '\u200C') || (c === '\u200D') ||
	        unicode.ID_Continue.test(c)
	        )
	    },

	    isDigit: function isDigit (c) {
	        return typeof c === 'string' && /[0-9]/.test(c)
	    },

	    isHexDigit: function isHexDigit (c) {
	        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)
	    },
	};

	var source;
	var parseState;
	var stack;
	var pos;
	var line;
	var column;
	var token;
	var key;
	var root;

	var parse = function parse (text, reviver) {
	    source = String(text);
	    parseState = 'start';
	    stack = [];
	    pos = 0;
	    line = 1;
	    column = 0;
	    token = undefined;
	    key = undefined;
	    root = undefined;

	    do {
	        token = lex();

	        // This code is unreachable.
	        // if (!parseStates[parseState]) {
	        //     throw invalidParseState()
	        // }

	        parseStates[parseState]();
	    } while (token.type !== 'eof')

	    if (typeof reviver === 'function') {
	        return internalize({'': root}, '', reviver)
	    }

	    return root
	};

	function internalize (holder, name, reviver) {
	    var value = holder[name];
	    if (value != null && typeof value === 'object') {
	        if (Array.isArray(value)) {
	            for (var i = 0; i < value.length; i++) {
	                var key = String(i);
	                var replacement = internalize(value, key, reviver);
	                if (replacement === undefined) {
	                    delete value[key];
	                } else {
	                    Object.defineProperty(value, key, {
	                        value: replacement,
	                        writable: true,
	                        enumerable: true,
	                        configurable: true,
	                    });
	                }
	            }
	        } else {
	            for (var key$1 in value) {
	                var replacement$1 = internalize(value, key$1, reviver);
	                if (replacement$1 === undefined) {
	                    delete value[key$1];
	                } else {
	                    Object.defineProperty(value, key$1, {
	                        value: replacement$1,
	                        writable: true,
	                        enumerable: true,
	                        configurable: true,
	                    });
	                }
	            }
	        }
	    }

	    return reviver.call(holder, name, value)
	}

	var lexState;
	var buffer;
	var doubleQuote;
	var sign;
	var c;

	function lex () {
	    lexState = 'default';
	    buffer = '';
	    doubleQuote = false;
	    sign = 1;

	    for (;;) {
	        c = peek();

	        // This code is unreachable.
	        // if (!lexStates[lexState]) {
	        //     throw invalidLexState(lexState)
	        // }

	        var token = lexStates[lexState]();
	        if (token) {
	            return token
	        }
	    }
	}

	function peek () {
	    if (source[pos]) {
	        return String.fromCodePoint(source.codePointAt(pos))
	    }
	}

	function read () {
	    var c = peek();

	    if (c === '\n') {
	        line++;
	        column = 0;
	    } else if (c) {
	        column += c.length;
	    } else {
	        column++;
	    }

	    if (c) {
	        pos += c.length;
	    }

	    return c
	}

	var lexStates = {
	    default: function default$1 () {
	        switch (c) {
	        case '\t':
	        case '\v':
	        case '\f':
	        case ' ':
	        case '\u00A0':
	        case '\uFEFF':
	        case '\n':
	        case '\r':
	        case '\u2028':
	        case '\u2029':
	            read();
	            return

	        case '/':
	            read();
	            lexState = 'comment';
	            return

	        case undefined:
	            read();
	            return newToken('eof')
	        }

	        if (util.isSpaceSeparator(c)) {
	            read();
	            return
	        }

	        // This code is unreachable.
	        // if (!lexStates[parseState]) {
	        //     throw invalidLexState(parseState)
	        // }

	        return lexStates[parseState]()
	    },

	    comment: function comment () {
	        switch (c) {
	        case '*':
	            read();
	            lexState = 'multiLineComment';
	            return

	        case '/':
	            read();
	            lexState = 'singleLineComment';
	            return
	        }

	        throw invalidChar(read())
	    },

	    multiLineComment: function multiLineComment () {
	        switch (c) {
	        case '*':
	            read();
	            lexState = 'multiLineCommentAsterisk';
	            return

	        case undefined:
	            throw invalidChar(read())
	        }

	        read();
	    },

	    multiLineCommentAsterisk: function multiLineCommentAsterisk () {
	        switch (c) {
	        case '*':
	            read();
	            return

	        case '/':
	            read();
	            lexState = 'default';
	            return

	        case undefined:
	            throw invalidChar(read())
	        }

	        read();
	        lexState = 'multiLineComment';
	    },

	    singleLineComment: function singleLineComment () {
	        switch (c) {
	        case '\n':
	        case '\r':
	        case '\u2028':
	        case '\u2029':
	            read();
	            lexState = 'default';
	            return

	        case undefined:
	            read();
	            return newToken('eof')
	        }

	        read();
	    },

	    value: function value () {
	        switch (c) {
	        case '{':
	        case '[':
	            return newToken('punctuator', read())

	        case 'n':
	            read();
	            literal('ull');
	            return newToken('null', null)

	        case 't':
	            read();
	            literal('rue');
	            return newToken('boolean', true)

	        case 'f':
	            read();
	            literal('alse');
	            return newToken('boolean', false)

	        case '-':
	        case '+':
	            if (read() === '-') {
	                sign = -1;
	            }

	            lexState = 'sign';
	            return

	        case '.':
	            buffer = read();
	            lexState = 'decimalPointLeading';
	            return

	        case '0':
	            buffer = read();
	            lexState = 'zero';
	            return

	        case '1':
	        case '2':
	        case '3':
	        case '4':
	        case '5':
	        case '6':
	        case '7':
	        case '8':
	        case '9':
	            buffer = read();
	            lexState = 'decimalInteger';
	            return

	        case 'I':
	            read();
	            literal('nfinity');
	            return newToken('numeric', Infinity)

	        case 'N':
	            read();
	            literal('aN');
	            return newToken('numeric', NaN)

	        case '"':
	        case "'":
	            doubleQuote = (read() === '"');
	            buffer = '';
	            lexState = 'string';
	            return
	        }

	        throw invalidChar(read())
	    },

	    identifierNameStartEscape: function identifierNameStartEscape () {
	        if (c !== 'u') {
	            throw invalidChar(read())
	        }

	        read();
	        var u = unicodeEscape();
	        switch (u) {
	        case '$':
	        case '_':
	            break

	        default:
	            if (!util.isIdStartChar(u)) {
	                throw invalidIdentifier()
	            }

	            break
	        }

	        buffer += u;
	        lexState = 'identifierName';
	    },

	    identifierName: function identifierName () {
	        switch (c) {
	        case '$':
	        case '_':
	        case '\u200C':
	        case '\u200D':
	            buffer += read();
	            return

	        case '\\':
	            read();
	            lexState = 'identifierNameEscape';
	            return
	        }

	        if (util.isIdContinueChar(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('identifier', buffer)
	    },

	    identifierNameEscape: function identifierNameEscape () {
	        if (c !== 'u') {
	            throw invalidChar(read())
	        }

	        read();
	        var u = unicodeEscape();
	        switch (u) {
	        case '$':
	        case '_':
	        case '\u200C':
	        case '\u200D':
	            break

	        default:
	            if (!util.isIdContinueChar(u)) {
	                throw invalidIdentifier()
	            }

	            break
	        }

	        buffer += u;
	        lexState = 'identifierName';
	    },

	    sign: function sign$1 () {
	        switch (c) {
	        case '.':
	            buffer = read();
	            lexState = 'decimalPointLeading';
	            return

	        case '0':
	            buffer = read();
	            lexState = 'zero';
	            return

	        case '1':
	        case '2':
	        case '3':
	        case '4':
	        case '5':
	        case '6':
	        case '7':
	        case '8':
	        case '9':
	            buffer = read();
	            lexState = 'decimalInteger';
	            return

	        case 'I':
	            read();
	            literal('nfinity');
	            return newToken('numeric', sign * Infinity)

	        case 'N':
	            read();
	            literal('aN');
	            return newToken('numeric', NaN)
	        }

	        throw invalidChar(read())
	    },

	    zero: function zero () {
	        switch (c) {
	        case '.':
	            buffer += read();
	            lexState = 'decimalPoint';
	            return

	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return

	        case 'x':
	        case 'X':
	            buffer += read();
	            lexState = 'hexadecimal';
	            return
	        }

	        return newToken('numeric', sign * 0)
	    },

	    decimalInteger: function decimalInteger () {
	        switch (c) {
	        case '.':
	            buffer += read();
	            lexState = 'decimalPoint';
	            return

	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalPointLeading: function decimalPointLeading () {
	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalFraction';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalPoint: function decimalPoint () {
	        switch (c) {
	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalFraction';
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalFraction: function decimalFraction () {
	        switch (c) {
	        case 'e':
	        case 'E':
	            buffer += read();
	            lexState = 'decimalExponent';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    decimalExponent: function decimalExponent () {
	        switch (c) {
	        case '+':
	        case '-':
	            buffer += read();
	            lexState = 'decimalExponentSign';
	            return
	        }

	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalExponentInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalExponentSign: function decimalExponentSign () {
	        if (util.isDigit(c)) {
	            buffer += read();
	            lexState = 'decimalExponentInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    decimalExponentInteger: function decimalExponentInteger () {
	        if (util.isDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    hexadecimal: function hexadecimal () {
	        if (util.isHexDigit(c)) {
	            buffer += read();
	            lexState = 'hexadecimalInteger';
	            return
	        }

	        throw invalidChar(read())
	    },

	    hexadecimalInteger: function hexadecimalInteger () {
	        if (util.isHexDigit(c)) {
	            buffer += read();
	            return
	        }

	        return newToken('numeric', sign * Number(buffer))
	    },

	    string: function string () {
	        switch (c) {
	        case '\\':
	            read();
	            buffer += escape();
	            return

	        case '"':
	            if (doubleQuote) {
	                read();
	                return newToken('string', buffer)
	            }

	            buffer += read();
	            return

	        case "'":
	            if (!doubleQuote) {
	                read();
	                return newToken('string', buffer)
	            }

	            buffer += read();
	            return

	        case '\n':
	        case '\r':
	            throw invalidChar(read())

	        case '\u2028':
	        case '\u2029':
	            separatorChar(c);
	            break

	        case undefined:
	            throw invalidChar(read())
	        }

	        buffer += read();
	    },

	    start: function start () {
	        switch (c) {
	        case '{':
	        case '[':
	            return newToken('punctuator', read())

	        // This code is unreachable since the default lexState handles eof.
	        // case undefined:
	        //     return newToken('eof')
	        }

	        lexState = 'value';
	    },

	    beforePropertyName: function beforePropertyName () {
	        switch (c) {
	        case '$':
	        case '_':
	            buffer = read();
	            lexState = 'identifierName';
	            return

	        case '\\':
	            read();
	            lexState = 'identifierNameStartEscape';
	            return

	        case '}':
	            return newToken('punctuator', read())

	        case '"':
	        case "'":
	            doubleQuote = (read() === '"');
	            lexState = 'string';
	            return
	        }

	        if (util.isIdStartChar(c)) {
	            buffer += read();
	            lexState = 'identifierName';
	            return
	        }

	        throw invalidChar(read())
	    },

	    afterPropertyName: function afterPropertyName () {
	        if (c === ':') {
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    beforePropertyValue: function beforePropertyValue () {
	        lexState = 'value';
	    },

	    afterPropertyValue: function afterPropertyValue () {
	        switch (c) {
	        case ',':
	        case '}':
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    beforeArrayValue: function beforeArrayValue () {
	        if (c === ']') {
	            return newToken('punctuator', read())
	        }

	        lexState = 'value';
	    },

	    afterArrayValue: function afterArrayValue () {
	        switch (c) {
	        case ',':
	        case ']':
	            return newToken('punctuator', read())
	        }

	        throw invalidChar(read())
	    },

	    end: function end () {
	        // This code is unreachable since it's handled by the default lexState.
	        // if (c === undefined) {
	        //     read()
	        //     return newToken('eof')
	        // }

	        throw invalidChar(read())
	    },
	};

	function newToken (type, value) {
	    return {
	        type: type,
	        value: value,
	        line: line,
	        column: column,
	    }
	}

	function literal (s) {
	    for (var i = 0, list = s; i < list.length; i += 1) {
	        var c = list[i];

	        var p = peek();

	        if (p !== c) {
	            throw invalidChar(read())
	        }

	        read();
	    }
	}

	function escape () {
	    var c = peek();
	    switch (c) {
	    case 'b':
	        read();
	        return '\b'

	    case 'f':
	        read();
	        return '\f'

	    case 'n':
	        read();
	        return '\n'

	    case 'r':
	        read();
	        return '\r'

	    case 't':
	        read();
	        return '\t'

	    case 'v':
	        read();
	        return '\v'

	    case '0':
	        read();
	        if (util.isDigit(peek())) {
	            throw invalidChar(read())
	        }

	        return '\0'

	    case 'x':
	        read();
	        return hexEscape()

	    case 'u':
	        read();
	        return unicodeEscape()

	    case '\n':
	    case '\u2028':
	    case '\u2029':
	        read();
	        return ''

	    case '\r':
	        read();
	        if (peek() === '\n') {
	            read();
	        }

	        return ''

	    case '1':
	    case '2':
	    case '3':
	    case '4':
	    case '5':
	    case '6':
	    case '7':
	    case '8':
	    case '9':
	        throw invalidChar(read())

	    case undefined:
	        throw invalidChar(read())
	    }

	    return read()
	}

	function hexEscape () {
	    var buffer = '';
	    var c = peek();

	    if (!util.isHexDigit(c)) {
	        throw invalidChar(read())
	    }

	    buffer += read();

	    c = peek();
	    if (!util.isHexDigit(c)) {
	        throw invalidChar(read())
	    }

	    buffer += read();

	    return String.fromCodePoint(parseInt(buffer, 16))
	}

	function unicodeEscape () {
	    var buffer = '';
	    var count = 4;

	    while (count-- > 0) {
	        var c = peek();
	        if (!util.isHexDigit(c)) {
	            throw invalidChar(read())
	        }

	        buffer += read();
	    }

	    return String.fromCodePoint(parseInt(buffer, 16))
	}

	var parseStates = {
	    start: function start () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        push();
	    },

	    beforePropertyName: function beforePropertyName () {
	        switch (token.type) {
	        case 'identifier':
	        case 'string':
	            key = token.value;
	            parseState = 'afterPropertyName';
	            return

	        case 'punctuator':
	            // This code is unreachable since it's handled by the lexState.
	            // if (token.value !== '}') {
	            //     throw invalidToken()
	            // }

	            pop();
	            return

	        case 'eof':
	            throw invalidEOF()
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    afterPropertyName: function afterPropertyName () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator' || token.value !== ':') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        parseState = 'beforePropertyValue';
	    },

	    beforePropertyValue: function beforePropertyValue () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        push();
	    },

	    beforeArrayValue: function beforeArrayValue () {
	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        if (token.type === 'punctuator' && token.value === ']') {
	            pop();
	            return
	        }

	        push();
	    },

	    afterPropertyValue: function afterPropertyValue () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        switch (token.value) {
	        case ',':
	            parseState = 'beforePropertyName';
	            return

	        case '}':
	            pop();
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    afterArrayValue: function afterArrayValue () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'punctuator') {
	        //     throw invalidToken()
	        // }

	        if (token.type === 'eof') {
	            throw invalidEOF()
	        }

	        switch (token.value) {
	        case ',':
	            parseState = 'beforeArrayValue';
	            return

	        case ']':
	            pop();
	        }

	        // This code is unreachable since it's handled by the lexState.
	        // throw invalidToken()
	    },

	    end: function end () {
	        // This code is unreachable since it's handled by the lexState.
	        // if (token.type !== 'eof') {
	        //     throw invalidToken()
	        // }
	    },
	};

	function push () {
	    var value;

	    switch (token.type) {
	    case 'punctuator':
	        switch (token.value) {
	        case '{':
	            value = {};
	            break

	        case '[':
	            value = [];
	            break
	        }

	        break

	    case 'null':
	    case 'boolean':
	    case 'numeric':
	    case 'string':
	        value = token.value;
	        break

	    // This code is unreachable.
	    // default:
	    //     throw invalidToken()
	    }

	    if (root === undefined) {
	        root = value;
	    } else {
	        var parent = stack[stack.length - 1];
	        if (Array.isArray(parent)) {
	            parent.push(value);
	        } else {
	            Object.defineProperty(parent, key, {
	                value: value,
	                writable: true,
	                enumerable: true,
	                configurable: true,
	            });
	        }
	    }

	    if (value !== null && typeof value === 'object') {
	        stack.push(value);

	        if (Array.isArray(value)) {
	            parseState = 'beforeArrayValue';
	        } else {
	            parseState = 'beforePropertyName';
	        }
	    } else {
	        var current = stack[stack.length - 1];
	        if (current == null) {
	            parseState = 'end';
	        } else if (Array.isArray(current)) {
	            parseState = 'afterArrayValue';
	        } else {
	            parseState = 'afterPropertyValue';
	        }
	    }
	}

	function pop () {
	    stack.pop();

	    var current = stack[stack.length - 1];
	    if (current == null) {
	        parseState = 'end';
	    } else if (Array.isArray(current)) {
	        parseState = 'afterArrayValue';
	    } else {
	        parseState = 'afterPropertyValue';
	    }
	}

	// This code is unreachable.
	// function invalidParseState () {
	//     return new Error(`JSON5: invalid parse state '${parseState}'`)
	// }

	// This code is unreachable.
	// function invalidLexState (state) {
	//     return new Error(`JSON5: invalid lex state '${state}'`)
	// }

	function invalidChar (c) {
	    if (c === undefined) {
	        return syntaxError(("JSON5: invalid end of input at " + line + ":" + column))
	    }

	    return syntaxError(("JSON5: invalid character '" + (formatChar(c)) + "' at " + line + ":" + column))
	}

	function invalidEOF () {
	    return syntaxError(("JSON5: invalid end of input at " + line + ":" + column))
	}

	// This code is unreachable.
	// function invalidToken () {
	//     if (token.type === 'eof') {
	//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
	//     }

	//     const c = String.fromCodePoint(token.value.codePointAt(0))
	//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
	// }

	function invalidIdentifier () {
	    column -= 5;
	    return syntaxError(("JSON5: invalid identifier character at " + line + ":" + column))
	}

	function separatorChar (c) {
	    console.warn(("JSON5: '" + (formatChar(c)) + "' in strings is not valid ECMAScript; consider escaping"));
	}

	function formatChar (c) {
	    var replacements = {
	        "'": "\\'",
	        '"': '\\"',
	        '\\': '\\\\',
	        '\b': '\\b',
	        '\f': '\\f',
	        '\n': '\\n',
	        '\r': '\\r',
	        '\t': '\\t',
	        '\v': '\\v',
	        '\0': '\\0',
	        '\u2028': '\\u2028',
	        '\u2029': '\\u2029',
	    };

	    if (replacements[c]) {
	        return replacements[c]
	    }

	    if (c < ' ') {
	        var hexString = c.charCodeAt(0).toString(16);
	        return '\\x' + ('00' + hexString).substring(hexString.length)
	    }

	    return c
	}

	function syntaxError (message) {
	    var err = new SyntaxError(message);
	    err.lineNumber = line;
	    err.columnNumber = column;
	    return err
	}

	var stringify = function stringify (value, replacer, space) {
	    var stack = [];
	    var indent = '';
	    var propertyList;
	    var replacerFunc;
	    var gap = '';
	    var quote;

	    if (
	        replacer != null &&
	        typeof replacer === 'object' &&
	        !Array.isArray(replacer)
	    ) {
	        space = replacer.space;
	        quote = replacer.quote;
	        replacer = replacer.replacer;
	    }

	    if (typeof replacer === 'function') {
	        replacerFunc = replacer;
	    } else if (Array.isArray(replacer)) {
	        propertyList = [];
	        for (var i = 0, list = replacer; i < list.length; i += 1) {
	            var v = list[i];

	            var item = (void 0);

	            if (typeof v === 'string') {
	                item = v;
	            } else if (
	                typeof v === 'number' ||
	                v instanceof String ||
	                v instanceof Number
	            ) {
	                item = String(v);
	            }

	            if (item !== undefined && propertyList.indexOf(item) < 0) {
	                propertyList.push(item);
	            }
	        }
	    }

	    if (space instanceof Number) {
	        space = Number(space);
	    } else if (space instanceof String) {
	        space = String(space);
	    }

	    if (typeof space === 'number') {
	        if (space > 0) {
	            space = Math.min(10, Math.floor(space));
	            gap = '          '.substr(0, space);
	        }
	    } else if (typeof space === 'string') {
	        gap = space.substr(0, 10);
	    }

	    return serializeProperty('', {'': value})

	    function serializeProperty (key, holder) {
	        var value = holder[key];
	        if (value != null) {
	            if (typeof value.toJSON5 === 'function') {
	                value = value.toJSON5(key);
	            } else if (typeof value.toJSON === 'function') {
	                value = value.toJSON(key);
	            }
	        }

	        if (replacerFunc) {
	            value = replacerFunc.call(holder, key, value);
	        }

	        if (value instanceof Number) {
	            value = Number(value);
	        } else if (value instanceof String) {
	            value = String(value);
	        } else if (value instanceof Boolean) {
	            value = value.valueOf();
	        }

	        switch (value) {
	        case null: return 'null'
	        case true: return 'true'
	        case false: return 'false'
	        }

	        if (typeof value === 'string') {
	            return quoteString(value, false)
	        }

	        if (typeof value === 'number') {
	            return String(value)
	        }

	        if (typeof value === 'object') {
	            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)
	        }

	        return undefined
	    }

	    function quoteString (value) {
	        var quotes = {
	            "'": 0.1,
	            '"': 0.2,
	        };

	        var replacements = {
	            "'": "\\'",
	            '"': '\\"',
	            '\\': '\\\\',
	            '\b': '\\b',
	            '\f': '\\f',
	            '\n': '\\n',
	            '\r': '\\r',
	            '\t': '\\t',
	            '\v': '\\v',
	            '\0': '\\0',
	            '\u2028': '\\u2028',
	            '\u2029': '\\u2029',
	        };

	        var product = '';

	        for (var i = 0; i < value.length; i++) {
	            var c = value[i];
	            switch (c) {
	            case "'":
	            case '"':
	                quotes[c]++;
	                product += c;
	                continue

	            case '\0':
	                if (util.isDigit(value[i + 1])) {
	                    product += '\\x00';
	                    continue
	                }
	            }

	            if (replacements[c]) {
	                product += replacements[c];
	                continue
	            }

	            if (c < ' ') {
	                var hexString = c.charCodeAt(0).toString(16);
	                product += '\\x' + ('00' + hexString).substring(hexString.length);
	                continue
	            }

	            product += c;
	        }

	        var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) { return (quotes[a] < quotes[b]) ? a : b; });

	        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);

	        return quoteChar + product + quoteChar
	    }

	    function serializeObject (value) {
	        if (stack.indexOf(value) >= 0) {
	            throw TypeError('Converting circular structure to JSON5')
	        }

	        stack.push(value);

	        var stepback = indent;
	        indent = indent + gap;

	        var keys = propertyList || Object.keys(value);
	        var partial = [];
	        for (var i = 0, list = keys; i < list.length; i += 1) {
	            var key = list[i];

	            var propertyString = serializeProperty(key, value);
	            if (propertyString !== undefined) {
	                var member = serializeKey(key) + ':';
	                if (gap !== '') {
	                    member += ' ';
	                }
	                member += propertyString;
	                partial.push(member);
	            }
	        }

	        var final;
	        if (partial.length === 0) {
	            final = '{}';
	        } else {
	            var properties;
	            if (gap === '') {
	                properties = partial.join(',');
	                final = '{' + properties + '}';
	            } else {
	                var separator = ',\n' + indent;
	                properties = partial.join(separator);
	                final = '{\n' + indent + properties + ',\n' + stepback + '}';
	            }
	        }

	        stack.pop();
	        indent = stepback;
	        return final
	    }

	    function serializeKey (key) {
	        if (key.length === 0) {
	            return quoteString(key, true)
	        }

	        var firstChar = String.fromCodePoint(key.codePointAt(0));
	        if (!util.isIdStartChar(firstChar)) {
	            return quoteString(key, true)
	        }

	        for (var i = firstChar.length; i < key.length; i++) {
	            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
	                return quoteString(key, true)
	            }
	        }

	        return key
	    }

	    function serializeArray (value) {
	        if (stack.indexOf(value) >= 0) {
	            throw TypeError('Converting circular structure to JSON5')
	        }

	        stack.push(value);

	        var stepback = indent;
	        indent = indent + gap;

	        var partial = [];
	        for (var i = 0; i < value.length; i++) {
	            var propertyString = serializeProperty(String(i), value);
	            partial.push((propertyString !== undefined) ? propertyString : 'null');
	        }

	        var final;
	        if (partial.length === 0) {
	            final = '[]';
	        } else {
	            if (gap === '') {
	                var properties = partial.join(',');
	                final = '[' + properties + ']';
	            } else {
	                var separator = ',\n' + indent;
	                var properties$1 = partial.join(separator);
	                final = '[\n' + indent + properties$1 + ',\n' + stepback + ']';
	            }
	        }

	        stack.pop();
	        indent = stepback;
	        return final
	    }
	};

	var JSON5 = {
	    parse: parse,
	    stringify: stringify,
	};

	var lib = JSON5;

	var es5 = lib;

	return es5;

})));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			319: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkcactbot"] = self["webpackChunkcactbot"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [890], () => (__webpack_require__(334)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUUsQ0FBQztNQUNQSyxTQUFTLEVBQUUsQ0FBQztNQUNaNkIsVUFBVSxFQUFFLENBQUM7TUFDYkMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLENBQUM7TUFDTkMsR0FBRyxFQUFFLEVBQUU7TUFDUEMsR0FBRyxFQUFFLEVBQUU7TUFDUEMsR0FBRyxFQUFFLEVBQUU7TUFDUEMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFLEVBQUU7TUFDUkMsSUFBSSxFQUFFO0lBQ1IsQ0FBQztJQUNEM0MsU0FBUyxFQUFFO01BQ1QsQ0FBQyxFQUFFLElBQUk7TUFDUCxDQUFDLEVBQUUsSUFBSTtNQUNQLENBQUMsRUFBRSxJQUFJO01BQ1AsQ0FBQyxFQUFFLElBQUk7TUFDUCxDQUFDLEVBQUUsSUFBSTtNQUNQLENBQUMsRUFBRSxJQUFJO01BQ1AsQ0FBQyxFQUFFLElBQUk7TUFDUCxFQUFFLEVBQUUsSUFBSTtNQUNSLEVBQUUsRUFBRSxJQUFJO01BQ1IsRUFBRSxFQUFFLElBQUk7TUFDUixFQUFFLEVBQUUsSUFBSTtNQUNSLEVBQUUsRUFBRSxJQUFJO01BQ1IsRUFBRSxFQUFFLElBQUk7TUFDUixFQUFFLEVBQUUsSUFBSTtNQUNSLEVBQUUsRUFBRSxJQUFJO01BQ1IsRUFBRSxFQUFFLElBQUk7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QUM7RUFDakQsQ0FBQyxDQUFDO0FBQ0o7Ozs7Ozs7Ozs7Ozs7OztBQ2hpQjRDO0FBQ1o7QUFDMEI7O0FBRTFEO0FBQ0EsTUFBTXVELGFBQWtDLEdBQUc7RUFDekNDLElBQUksRUFBRSxDQUFDO0VBQ1BDLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxDQUFDO0VBQ05DLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFBRSxFQUFFO0VBQ1BDLEdBQUcsRUFB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SHp6QixFQUFFLEVBQUUsS0FBSztJQUNUQyxFQUFFLEVBQUUsS0FBSztJQUNUQyxFQUFFLEVBQUUsS0FBSztJQUNUQyxFQUFFLEVBQUUsSUFBSTtJQUNSQyxFQUFFLEVBQUUsSUFBSTtJQUNSQyxFQUFFLEVBQUU7RUFDTixDQUFDO0VBQ0RxekIsR0FBRyxFQUFFO0lBQ0gxekIsRUFBRSxFQUFFLEtBQUs7SUFDVEMsRUFBRSxFQUFFLEtBQUs7SUFDVEMsRUFBRSxFQUFFLEtBQUs7SUFDVEMsRUFBRSxFQUFFLEtBQUs7SUFDVEMsRUFBRSxFQUFFLElBQUk7SUFDUkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUNEc3pCLEdBQUcsRUFBRTtJQUNIM3pCLEVBQUUsRUFBRSxLQUFLO0lBQ1RDLEVBQUUsRUFBRSxLQUFLO0lBQ1RDLEVBQUUsRUFBRSxLQUFLO0lBQ1RDLEVBQUUsRUFBRSxJQUFJO0lBQ1JDLEVBQUUsRUFBRSxJQUFJO0lBQ1JDLEVBQUUsRUFBRTtFQUNOLENBQUM7RUFDRHV6QixHQUFHLEVBQUU7SUFDSDV6QixFQUFFLEVBQUUsS0FBSztJQUNUQyxFQUFFLEVBQUUsS0FBSztJQUNUQyxFQUFFLEVBQUUsS0FBSztJQUNUQyxFQUFFLEVBQUUsSUFBSTtJQUNSQyxFQUFFLEVBQUUsSUFBSTtJQUNSQyxFQUFFLEVBQUU7RUFDTixDQUFDO0VBQ0R3ekIsR0FBRyxFQUFFO0lBQ0g3ekIsRUFBRSxFQUFFLEtBQUs7SUFDVEMsRUFBRSxFQUFFLEtBQUs7SUFDVEMsRUFBRSxFQUFFLEtBQUs7SUFDVEMsRUFBRSxFQUFFLElBQUk7SUFDUkMsRUFBRSxFQUFFLElBQUk7SUFDUkMsRUFBRSxFQUFFO0VBQ04sQ0FBQztFQUNEeXpCLEdBQUcsRUFBRTtJQUNIOXpCLEVBQUUsRUFBRSxLQUFLO0lBQ1RDLEVBQUUsRUFBRSxLQUFLO0lBQ1RDLEVBQUUsRUFBRSxLQUFLO0lBQ1RDLEVBQUUsRUFBRSxLQUFLO0lBQ1RDLEVBQUUsRUFBRSxJQUFJO0lBQ1JDLEVBQUUsRUFBRTtFQUNOLENBQUM7RUFDRDB6QixHQUFHLEVB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QTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQ7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtB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VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOztVQUVBO1VBQ0E7Ozs7O1dDekJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsK0JBQStCLHdDQUF3QztXQUN2RTtXQUNBO1dBQ0E7V0FDQTtXQUNBLGlCQUFpQixxQkFBcUI7V0FDdEM7V0FDQTtXQUNBLGtCQUFrQixxQkFBcUI7V0FDdkM7V0FDQTtXQUNBLEtBQUs7V0FDTDtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7Ozs7O1dDM0JBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxpQ0FBaUMsV0FBVztXQUM1QztXQUNBOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EseUNBQXlDLHdDQUF3QztXQUNqRjtXQUNBO1dBQ0E7Ozs7O1dDUEE7Ozs7O1dDQUE7O1dBRUE7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOztXQUVBOztXQUVBOztXQUVBOztXQUVBOztXQUVBOztXQUVBOztXQUVBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLE1BQU0scUJBQXFCO1dBQzNCO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7O1dBRUE7V0FDQTtXQUNBOzs7OztVRWhEQTtVQUNBO1VBQ0E7VUFDQTtVQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9jb25kaXRpb25zLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvY29udGVudF90eXBlLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvbmV0bG9nX2RlZnMudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9uZXRyZWdleGVzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvbm90X3JlYWNoZWQudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9vdXRwdXRzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvb3ZlcmxheV9wbHVnaW5fYXBpLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvcmVnZXhlcy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3Jlc3BvbnNlcy50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3VzZXJfY29uZmlnLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvdXRpbC50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vcmVzb3VyY2VzL3pvbmVfaWQudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy96b25lX2luZm8udHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy9wbGF5ZXJfb3ZlcnJpZGUudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3Jlc291cmNlcy90aW1lcmJhci50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvY29tbW9uX3JlcGxhY2VtZW50LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvdHJhbnNsYXRpb25zLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9yYWlkYm9zc19vcHRpb25zLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy90aW1lbGluZV9wYXJzZXIudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL3RpbWVsaW5lLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9odG1sX3RpbWVsaW5lX3VpLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9yZXNvdXJjZXMvcGFydHkudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL2F1dG9wbGF5X2hlbHBlci50cyIsIndlYnBhY2s6Ly9jYWN0Ym90Ly4vdWkvcmFpZGJvc3MvYnJvd3Nlcl90dHNfZW5naW5lLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9wb3B1cC10ZXh0LnRzIiwid2VicGFjazovL2NhY3Rib3QvLi91aS9yYWlkYm9zcy9yYWlkYm9zc19jb25maWcudHMiLCJ3ZWJwYWNrOi8vY2FjdGJvdC8uL3VpL3JhaWRib3NzL3JhaWRib3NzLnRzIiwid2VicGFjazovL2NhY3Rib3QvLi9ub2RlX21vZHVsZXMvanNvbjUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2NhY3Rib3Qvd2VicGFjay9iZWZvcmUtc3RhcnR1cCIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly9jYWN0Ym90L3dlYnBhY2svYWZ0ZXItc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGb3IgY29uc2lzdGVuY3kgd2l0aCBSZXNwb25zZXMsIENvbmRpdGlvbnNcclxuLy8gYXJlIGFsc28gZnVuY3Rpb25zLlxyXG5cclxuaW1wb3J0IHsgUmFpZGJvc3NEYXRhIGFzIERhdGEgfSBmcm9tICcuLi90eXBlcy9kYXRhJztcclxuaW1wb3J0IHsgVGFyZ2V0ZWRNYXRjaGVzIH0gZnJvbSAnLi4vdHlwZXMvdHJpZ2dlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgdGFyZ2V0SXNZb3UoKTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcykgPT4gYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcykgPT4gZGF0YS5tZSA9PT0gbWF0Y2hlcz8udGFyZ2V0O1xyXG4gIH0sXHJcbiAgdGFyZ2V0SXNOb3RZb3UoKTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcykgPT4gYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcykgPT4gZGF0YS5tZSAhPT0gbWF0Y2hlcz8udGFyZ2V0O1xyXG4gIH0sXHJcbiAgY2FyZXNBYm91dEFPRSgpOiAoZGF0YTogRGF0YSkgPT4gYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKGRhdGE6IERhdGEpID0+XHJcbiAgICAgIGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEucm9sZSA9PT0gJ2hlYWxlcicgfHwgZGF0YS5DYW5BZGRsZSgpIHx8IGRhdGEuam9iID09PSAnQkxVJztcclxuICB9LFxyXG4gIGNhcmVzQWJvdXRNYWdpY2FsKCk6IChkYXRhOiBEYXRhKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSkgPT5cclxuICAgICAgZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5yb2xlID09PSAnaGVhbGVyJyB8fCBkYXRhLkNhbkFkZGxlKCkgfHwgZGF0YS5qb2IgPT09ICdCTFUnO1xyXG4gIH0sXHJcbiAgY2FyZXNBYm91dFBoeXNpY2FsKCk6IChkYXRhOiBEYXRhKSA9PiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGF0YTogRGF0YSkgPT5cclxuICAgICAgZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5yb2xlID09PSAnaGVhbGVyJyB8fCBkYXRhLkNhbkZlaW50KCkgfHwgZGF0YS5qb2IgPT09ICdCTFUnO1xyXG4gIH0sXHJcbn07XHJcbiIsIi8vIEF1dG8tZ2VuZXJhdGVkIGZyb20gZ2VuX3pvbmVfaWRfYW5kX2luZm8ucHlcclxuLy8gRE8gTk9UIEVESVQgVEhJUyBGSUxFIERJUkVDVExZXHJcblxyXG5jb25zdCBkYXRhID0ge1xyXG4gICdDb21wYW5pb25zJzogMTIsXHJcbiAgJ0N1c3RvbURlbGl2ZXJpZXMnOiAyNSxcclxuICAnRGVlcER1bmdlb25zJzogMjEsXHJcbiAgJ0Rpc2NpcGxlc09mVGhlSGFuZCc6IDE3LFxyXG4gICdEaXNjaXBsZXNPZlRoZUxhbmQnOiAxNixcclxuICAnRHVuZ2VvbnMnOiAyLFxyXG4gICdEdXR5Um91bGV0dGUnOiAxLFxyXG4gICdFdXJla2EnOiAyNixcclxuICAnRmF0ZXMnOiA4LFxyXG4gICdHb2xkU2F1Y2VyJzogMTksXHJcbiAgJ0dyYW5kQ29tcGFueSc6IDExLFxyXG4gICdHdWlsZGhlc3RzJzogMyxcclxuICAnTGV2ZXF1ZXN0cyc6IDEwLFxyXG4gICdNYXNrZWRDYXJuaXZhbGUnOiAyNyxcclxuICAnT3ZlcmFsbENvbXBsZXRpb24nOiAxNCxcclxuICAnUGxheWVyQ29tbWVuZGF0aW9uJzogMTUsXHJcbiAgJ1B2cCc6IDYsXHJcbiAgJ1F1ZXN0QmF0dGxlcyc6IDcsXHJcbiAgJ1JhaWRzJzogNSxcclxuICAnUmV0YWluZXJWZW50dXJlcyc6IDE4LFxyXG4gICdUcmVhc3VyZUh1bnQnOiA5LFxyXG4gICdUcmlhbHMnOiA0LFxyXG4gICdUcmliYWxRdWVzdHMnOiAxMyxcclxuICAnVWx0aW1hdGVSYWlkcyc6IDI4LFxyXG4gICdWQ0R1bmdlb25GaW5kZXInOiAzMCxcclxuICAnV29uZHJvdXNUYWlscyc6IDI0LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGF0YTtcclxuIiwiZXhwb3J0IGNvbnN0IGxhbmd1YWdlcyA9IFsnZW4nLCAnZGUnLCAnZnInLCAnamEnLCAnY24nLCAna28nXSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCB0eXBlIExhbmcgPSB0eXBlb2YgbGFuZ3VhZ2VzW251bWJlcl07XHJcblxyXG5leHBvcnQgdHlwZSBOb25FbkxhbmcgPSBFeGNsdWRlPExhbmcsICdlbic+O1xyXG5cclxuZXhwb3J0IGNvbnN0IGxhbmdNYXA6IHsgW2xhbmcgaW4gTGFuZ106IHsgW2xhbmcgaW4gTGFuZ106IHN0cmluZyB9IH0gPSB7XHJcbiAgZW46IHtcclxuICAgIGVuOiAnRW5nbGlzaCcsXHJcbiAgICBkZTogJ0dlcm1hbicsXHJcbiAgICBmcjogJ0ZyZW5jaCcsXHJcbiAgICBqYTogJ0phcGFuZXNlJyxcclxuICAgIGNuOiAnQ2hpbmVzZScsXHJcbiAgICBrbzogJ0tvcmVhbicsXHJcbiAgfSxcclxuICBkZToge1xyXG4gICAgZW46ICdFbmdsaXNjaCcsXHJcbiAgICBkZTogJ0RldXRzY2gnLFxyXG4gICAgZnI6ICdGcmFuesO2c2lzY2gnLFxyXG4gICAgamE6ICdKYXBhbmlzY2gnLFxyXG4gICAgY246ICdDaGluZXNpc2NoJyxcclxuICAgIGtvOiAnS29yZWFuaXNjaCcsXHJcbiAgfSxcclxuICBmcjoge1xyXG4gICAgZW46ICdBbmdsYWlzJyxcclxuICAgIGRlOiAnQWxsZW1hbmQnLFxyXG4gICAgZnI6ICdGcmFuw6dhaXMnLFxyXG4gICAgamE6ICdKYXBvbmFpcycsXHJcbiAgICBjbjogJ0NoaW5vaXMnLFxyXG4gICAga286ICdDb3LDqWVuJyxcclxuICB9LFxyXG4gIGphOiB7XHJcbiAgICBlbjogJ+iLseiqnicsXHJcbiAgICBkZTogJ+ODieOCpOODhOiqnicsXHJcbiAgICBmcjogJ+ODleODqeODs+OCueiqnicsXHJcbiAgICBqYTogJ+aXpeacrOiqnicsXHJcbiAgICBjbjogJ+S4reWbveiqnicsXHJcbiAgICBrbzogJ+mfk+WbveiqnicsXHJcbiAgfSxcclxuICBjbjoge1xyXG4gICAgZW46ICfoi7HmlocnLFxyXG4gICAgZGU6ICflvrfmlocnLFxyXG4gICAgZnI6ICfms5XmlocnLFxyXG4gICAgamE6ICfml6XmlocnLFxyXG4gICAgY246ICfkuK3mlocnLFxyXG4gICAga286ICfpn6nmlocnLFxyXG4gIH0sXHJcbiAga286IHtcclxuICAgIGVuOiAn7JiB7Ja0JyxcclxuICAgIGRlOiAn64+F7J287Ja0JyxcclxuICAgIGZyOiAn7ZSE656R7Iqk7Ja0JyxcclxuICAgIGphOiAn7J2867O47Ja0JyxcclxuICAgIGNuOiAn7KSR6rWt7Ja0JyxcclxuICAgIGtvOiAn7ZWc6rWt7Ja0JyxcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzTGFuZyA9IChsYW5nPzogc3RyaW5nKTogbGFuZyBpcyBMYW5nID0+IHtcclxuICBjb25zdCBsYW5nU3RyczogcmVhZG9ubHkgc3RyaW5nW10gPSBsYW5ndWFnZXM7XHJcbiAgaWYgKGxhbmcgPT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiBmYWxzZTtcclxuICByZXR1cm4gbGFuZ1N0cnMuaW5jbHVkZXMobGFuZyk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbGFuZ1RvTG9jYWxlID0gKGxhbmc6IExhbmcpOiBzdHJpbmcgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICBlbjogJ2VuJyxcclxuICAgIGRlOiAnZGUnLFxyXG4gICAgZnI6ICdmcicsXHJcbiAgICBqYTogJ2phJyxcclxuICAgIGNuOiAnemgtQ04nLFxyXG4gICAga286ICdrbycsXHJcbiAgfVtsYW5nXTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBicm93c2VyTGFuZ3VhZ2VzVG9MYW5nID0gKGxhbmd1YWdlczogcmVhZG9ubHkgc3RyaW5nW10pOiBMYW5nID0+IHtcclxuICBjb25zdCBsYW5nID0gWy4uLm5hdmlnYXRvci5sYW5ndWFnZXMsICdlbiddXHJcbiAgICAubWFwKChsKSA9PiBsLnNsaWNlKDAsIDIpKVxyXG4gICAgLy8gUmVtYXAgYHpoYCB0byBgY25gIHRvIG1hdGNoIGNhY3Rib3QgbGFuZ3VhZ2VzXHJcbiAgICAubWFwKChsKSA9PiBsID09PSAnemgnID8gJ2NuJyA6IGwpXHJcbiAgICAuZmlsdGVyKChsKSA9PiBsYW5ndWFnZXMuaW5jbHVkZXMobCkpWzBdO1xyXG4gIHJldHVybiBpc0xhbmcobGFuZykgPyBsYW5nIDogJ2VuJztcclxufTtcclxuIiwiaW1wb3J0IHsgUGx1Z2luQ29tYmF0YW50U3RhdGUgfSBmcm9tICcuLi90eXBlcy9ldmVudCc7XHJcbmltcG9ydCB7IE5ldEZpZWxkc1JldmVyc2UgfSBmcm9tICcuLi90eXBlcy9uZXRfZmllbGRzJztcclxuXHJcbmV4cG9ydCB0eXBlIExvZ0RlZmluaXRpb24gPSB7XHJcbiAgLy8gVGhlIGxvZyBpZCwgYXMgYSBkZWNpbWFsIHN0cmluZywgbWluaW11bSB0d28gY2hhcmFjdGVycy5cclxuICB0eXBlOiBzdHJpbmc7XHJcbiAgLy8gVGhlIGluZm9ybWFsIG5hbWUgb2YgdGhpcyBsb2cgKG11c3QgbWF0Y2ggdGhlIGtleSB0aGF0IHRoZSBMb2dEZWZpbml0aW9uIGlzIGEgdmFsdWUgZm9yKS5cclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgLy8gVGhlIHBsdWdpbiB0aGF0IGdlbmVyYXRlcyB0aGlzIGxvZy5cclxuICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyB8ICdPdmVybGF5UGx1Z2luJztcclxuICAvLyBQYXJzZWQgQUNUIGxvZyBsaW5lIHR5cGUuICBPdmVybGF5UGx1Z2luIGxpbmVzIHVzZSB0aGUgYHR5cGVgIGFzIGEgc3RyaW5nLlxyXG4gIG1lc3NhZ2VUeXBlOiBzdHJpbmc7XHJcbiAgLy8gSWYgdHJ1ZSwgYWx3YXlzIGluY2x1ZGUgdGhpcyBsaW5lIHdoZW4gc3BsaXR0aW5nIGxvZ3MgKGUuZy4gRkZYSVYgcGx1Z2luIHZlcnNpb24pLlxyXG4gIGdsb2JhbEluY2x1ZGU/OiBib29sZWFuO1xyXG4gIC8vIElmIHRydWUsIGFsd2F5cyBpbmNsdWRlIHRoZSBsYXN0IGluc3RhbmNlIG9mIHRoaXMgbGluZSB3aGVuIHNwbGl0dGluZyBsb2dzIChlLmcuIENoYW5nZVpvbmUpLlxyXG4gIGxhc3RJbmNsdWRlPzogYm9vbGVhbjtcclxuICAvLyBUcnVlIGlmIHRoZSBsaW5lIGNhbiBiZSBhbm9ueW1pemVkIChpLmUuIHJlbW92aW5nIHBsYXllciBpZHMgYW5kIG5hbWVzKS5cclxuICBjYW5Bbm9ueW1pemU/OiBib29sZWFuO1xyXG4gIC8vIElmIHRydWUsIHRoaXMgbG9nIGhhcyBub3QgYmVlbiBzZWVuIGJlZm9yZSBhbmQgbmVlZHMgbW9yZSBpbmZvcm1hdGlvbi5cclxuICBpc1Vua25vd24/OiBib29sZWFuO1xyXG4gIC8vIEZpZWxkcyBhdCB0aGlzIGluZGV4IGFuZCBiZXlvbmQgYXJlIGNsZWFyZWQsIHdoZW4gYW5vbnltaXppbmcuXHJcbiAgZmlyc3RVbmtub3duRmllbGQ/OiBudW1iZXI7XHJcbiAgLy8gQSBtYXAgb2YgYWxsIG9mIHRoZSBmaWVsZHMsIHVuaXF1ZSBmaWVsZCBuYW1lIHRvIGZpZWxkIGluZGV4LlxyXG4gIGZpZWxkcz86IHsgW2ZpZWxkTmFtZTogc3RyaW5nXTogbnVtYmVyIH07XHJcbiAgLy8gQSBsaXN0IG9mIGZpZWxkIGlkcyB0aGF0ICptYXkqIGNvbnRhaW4gUlNWIGtleXMgKGZvciBkZWNvZGluZylcclxuICBwb3NzaWJsZVJzdkZpZWxkcz86IHJlYWRvbmx5IG51bWJlcltdO1xyXG4gIHN1YkZpZWxkcz86IHtcclxuICAgIFtmaWVsZE5hbWU6IHN0cmluZ106IHtcclxuICAgICAgW2ZpZWxkVmFsdWU6IHN0cmluZ106IHtcclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgY2FuQW5vbnltaXplOiBib29sZWFuO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICB9O1xyXG4gIC8vIE1hcCBvZiBpbmRleGVzIGZyb20gYSBwbGF5ZXIgaWQgdG8gdGhlIGluZGV4IG9mIHRoYXQgcGxheWVyIG5hbWUuXHJcbiAgcGxheWVySWRzPzogeyBbZmllbGRJZHg6IG51bWJlcl06IG51bWJlciB8IG51bGwgfTtcclxuICAvLyBBIGxpc3Qgb2YgZmllbGRzIHRoYXQgYXJlIG9rIHRvIGJlIGJsYW5rIChvciBoYXZlIGludmFsaWQgaWRzKS5cclxuICBibGFua0ZpZWxkcz86IHJlYWRvbmx5IG51bWJlcltdO1xyXG4gIC8vIFRoaXMgZmllbGQgYW5kIGFueSBmaWVsZCBhZnRlciB3aWxsIGJlIHRyZWF0ZWQgYXMgb3B0aW9uYWwgd2hlbiBjcmVhdGluZyBjYXB0dXJpbmcgcmVnZXhlcy5cclxuICBmaXJzdE9wdGlvbmFsRmllbGQ6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAvLyBUaGVzZSBmaWVsZHMgYXJlIHRyZWF0ZWQgYXMgcmVwZWF0YWJsZSBmaWVsZHNcclxuICByZXBlYXRpbmdGaWVsZHM/OiB7XHJcbiAgICBzdGFydGluZ0luZGV4OiBudW1iZXI7XHJcbiAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgbmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xyXG4gICAgc29ydEtleXM/OiBib29sZWFuO1xyXG4gICAgcHJpbWFyeUtleTogc3RyaW5nO1xyXG4gICAgcG9zc2libGVLZXlzOiByZWFkb25seSBzdHJpbmdbXTtcclxuICB9O1xyXG59O1xyXG5leHBvcnQgdHlwZSBMb2dEZWZpbml0aW9uTWFwID0geyBbbmFtZTogc3RyaW5nXTogTG9nRGVmaW5pdGlvbiB9O1xyXG50eXBlIExvZ0RlZmluaXRpb25WZXJzaW9uTWFwID0geyBbdmVyc2lvbjogc3RyaW5nXTogTG9nRGVmaW5pdGlvbk1hcCB9O1xyXG5cclxuLy8gVE9ETzogTWF5YmUgYnJpbmcgaW4gYSBoZWxwZXIgbGlicmFyeSB0aGF0IGNhbiBjb21waWxlLXRpbWUgZXh0cmFjdCB0aGVzZSBrZXlzIGluc3RlYWQ/XHJcbmNvbnN0IGNvbWJhdGFudE1lbW9yeUtleXM6IHJlYWRvbmx5IChFeHRyYWN0PGtleW9mIFBsdWdpbkNvbWJhdGFudFN0YXRlLCBzdHJpbmc+KVtdID0gW1xyXG4gICdDdXJyZW50V29ybGRJRCcsXHJcbiAgJ1dvcmxkSUQnLFxyXG4gICdXb3JsZE5hbWUnLFxyXG4gICdCTnBjSUQnLFxyXG4gICdCTnBjTmFtZUlEJyxcclxuICAnUGFydHlUeXBlJyxcclxuICAnSUQnLFxyXG4gICdPd25lcklEJyxcclxuICAnV2VhcG9uSWQnLFxyXG4gICdUeXBlJyxcclxuICAnSm9iJyxcclxuICAnTGV2ZWwnLFxyXG4gICdOYW1lJyxcclxuICAnQ3VycmVudEhQJyxcclxuICAnTWF4SFAnLFxyXG4gICdDdXJyZW50TVAnLFxyXG4gICdNYXhNUCcsXHJcbiAgJ1Bvc1gnLFxyXG4gICdQb3NZJyxcclxuICAnUG9zWicsXHJcbiAgJ0hlYWRpbmcnLFxyXG4gICdNb25zdGVyVHlwZScsXHJcbiAgJ1N0YXR1cycsXHJcbiAgJ01vZGVsU3RhdHVzJyxcclxuICAnQWdncmVzc2lvblN0YXR1cycsXHJcbiAgJ1RhcmdldElEJyxcclxuICAnSXNUYXJnZXRhYmxlJyxcclxuICAnUmFkaXVzJyxcclxuICAnRGlzdGFuY2UnLFxyXG4gICdFZmZlY3RpdmVEaXN0YW5jZScsXHJcbiAgJ05QQ1RhcmdldElEJyxcclxuICAnQ3VycmVudEdQJyxcclxuICAnTWF4R1AnLFxyXG4gICdDdXJyZW50Q1AnLFxyXG4gICdNYXhDUCcsXHJcbiAgJ1BDVGFyZ2V0SUQnLFxyXG4gICdJc0Nhc3RpbmcxJyxcclxuICAnSXNDYXN0aW5nMicsXHJcbiAgJ0Nhc3RCdWZmSUQnLFxyXG4gICdDYXN0VGFyZ2V0SUQnLFxyXG4gICdDYXN0RHVyYXRpb25DdXJyZW50JyxcclxuICAnQ2FzdER1cmF0aW9uTWF4JyxcclxuICAnVHJhbnNmb3JtYXRpb25JZCcsXHJcbl0gYXMgY29uc3Q7XHJcblxyXG5jb25zdCBsYXRlc3RMb2dEZWZpbml0aW9ucyA9IHtcclxuICBHYW1lTG9nOiB7XHJcbiAgICB0eXBlOiAnMDAnLFxyXG4gICAgbmFtZTogJ0dhbWVMb2cnLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0NoYXRMb2cnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgY29kZTogMixcclxuICAgICAgbmFtZTogMyxcclxuICAgICAgbGluZTogNCxcclxuICAgIH0sXHJcbiAgICBzdWJGaWVsZHM6IHtcclxuICAgICAgY29kZToge1xyXG4gICAgICAgICcwMDM5Jzoge1xyXG4gICAgICAgICAgbmFtZTogJ21lc3NhZ2UnLFxyXG4gICAgICAgICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJzAwMzgnOiB7XHJcbiAgICAgICAgICBuYW1lOiAnZWNobycsXHJcbiAgICAgICAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnMDA0NCc6IHtcclxuICAgICAgICAgIG5hbWU6ICdkaWFsb2cnLFxyXG4gICAgICAgICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJzA4MzknOiB7XHJcbiAgICAgICAgICBuYW1lOiAnbWVzc2FnZScsXHJcbiAgICAgICAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIENoYW5nZVpvbmU6IHtcclxuICAgIHR5cGU6ICcwMScsXHJcbiAgICBuYW1lOiAnQ2hhbmdlWm9uZScsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnVGVycml0b3J5JyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBuYW1lOiAzLFxyXG4gICAgfSxcclxuICAgIGxhc3RJbmNsdWRlOiB0cnVlLFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBDaGFuZ2VkUGxheWVyOiB7XHJcbiAgICB0eXBlOiAnMDInLFxyXG4gICAgbmFtZTogJ0NoYW5nZWRQbGF5ZXInLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0NoYW5nZVByaW1hcnlQbGF5ZXInLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICB9LFxyXG4gICAgbGFzdEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIEFkZGVkQ29tYmF0YW50OiB7XHJcbiAgICB0eXBlOiAnMDMnLFxyXG4gICAgbmFtZTogJ0FkZGVkQ29tYmF0YW50JyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdBZGRDb21iYXRhbnQnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICAgIGpvYjogNCxcclxuICAgICAgbGV2ZWw6IDUsXHJcbiAgICAgIG93bmVySWQ6IDYsXHJcbiAgICAgIHdvcmxkSWQ6IDcsXHJcbiAgICAgIHdvcmxkOiA4LFxyXG4gICAgICBucGNOYW1lSWQ6IDksXHJcbiAgICAgIG5wY0Jhc2VJZDogMTAsXHJcbiAgICAgIGN1cnJlbnRIcDogMTEsXHJcbiAgICAgIGhwOiAxMixcclxuICAgICAgY3VycmVudE1wOiAxMyxcclxuICAgICAgbXA6IDE0LFxyXG4gICAgICAvLyBtYXhUcDogMTUsXHJcbiAgICAgIC8vIHRwOiAxNixcclxuICAgICAgeDogMTcsXHJcbiAgICAgIHk6IDE4LFxyXG4gICAgICB6OiAxOSxcclxuICAgICAgaGVhZGluZzogMjAsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICAgIDY6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBSZW1vdmVkQ29tYmF0YW50OiB7XHJcbiAgICB0eXBlOiAnMDQnLFxyXG4gICAgbmFtZTogJ1JlbW92ZWRDb21iYXRhbnQnLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1JlbW92ZUNvbWJhdGFudCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpZDogMixcclxuICAgICAgbmFtZTogMyxcclxuICAgICAgam9iOiA0LFxyXG4gICAgICBsZXZlbDogNSxcclxuICAgICAgb3duZXI6IDYsXHJcbiAgICAgIHdvcmxkOiA4LFxyXG4gICAgICBucGNOYW1lSWQ6IDksXHJcbiAgICAgIG5wY0Jhc2VJZDogMTAsXHJcbiAgICAgIGhwOiAxMixcclxuICAgICAgeDogMTcsXHJcbiAgICAgIHk6IDE4LFxyXG4gICAgICB6OiAxOSxcclxuICAgICAgaGVhZGluZzogMjAsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICAgIDY6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBQYXJ0eUxpc3Q6IHtcclxuICAgIHR5cGU6ICcxMScsXHJcbiAgICBuYW1lOiAnUGFydHlMaXN0JyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdQYXJ0eUxpc3QnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgcGFydHlDb3VudDogMixcclxuICAgICAgaWQwOiAzLFxyXG4gICAgICBpZDE6IDQsXHJcbiAgICAgIGlkMjogNSxcclxuICAgICAgaWQzOiA2LFxyXG4gICAgICBpZDQ6IDcsXHJcbiAgICAgIGlkNTogOCxcclxuICAgICAgaWQ2OiA5LFxyXG4gICAgICBpZDc6IDEwLFxyXG4gICAgICBpZDg6IDExLFxyXG4gICAgICBpZDk6IDEyLFxyXG4gICAgICBpZDEwOiAxMyxcclxuICAgICAgaWQxMTogMTQsXHJcbiAgICAgIGlkMTI6IDE1LFxyXG4gICAgICBpZDEzOiAxNixcclxuICAgICAgaWQxNDogMTcsXHJcbiAgICAgIGlkMTU6IDE4LFxyXG4gICAgICBpZDE2OiAxOSxcclxuICAgICAgaWQxNzogMjAsXHJcbiAgICAgIGlkMTg6IDIxLFxyXG4gICAgICBpZDE5OiAyMixcclxuICAgICAgaWQyMDogMjMsXHJcbiAgICAgIGlkMjE6IDI0LFxyXG4gICAgICBpZDIyOiAyNSxcclxuICAgICAgaWQyMzogMjYsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDM6IG51bGwsXHJcbiAgICAgIDQ6IG51bGwsXHJcbiAgICAgIDU6IG51bGwsXHJcbiAgICAgIDY6IG51bGwsXHJcbiAgICAgIDc6IG51bGwsXHJcbiAgICAgIDg6IG51bGwsXHJcbiAgICAgIDk6IG51bGwsXHJcbiAgICAgIDEwOiBudWxsLFxyXG4gICAgICAxMTogbnVsbCxcclxuICAgICAgMTI6IG51bGwsXHJcbiAgICAgIDEzOiBudWxsLFxyXG4gICAgICAxNDogbnVsbCxcclxuICAgICAgMTU6IG51bGwsXHJcbiAgICAgIDE2OiBudWxsLFxyXG4gICAgICAxNzogbnVsbCxcclxuICAgICAgMTg6IG51bGwsXHJcbiAgICAgIDE5OiBudWxsLFxyXG4gICAgICAyMDogbnVsbCxcclxuICAgICAgMjE6IG51bGwsXHJcbiAgICAgIDIyOiBudWxsLFxyXG4gICAgICAyMzogbnVsbCxcclxuICAgICAgMjQ6IG51bGwsXHJcbiAgICAgIDI1OiBudWxsLFxyXG4gICAgICAyNjogbnVsbCxcclxuICAgIH0sXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IDMsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBsYXN0SW5jbHVkZTogdHJ1ZSxcclxuICB9LFxyXG4gIFBsYXllclN0YXRzOiB7XHJcbiAgICB0eXBlOiAnMTInLFxyXG4gICAgbmFtZTogJ1BsYXllclN0YXRzJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdQbGF5ZXJTdGF0cycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBqb2I6IDIsXHJcbiAgICAgIHN0cmVuZ3RoOiAzLFxyXG4gICAgICBkZXh0ZXJpdHk6IDQsXHJcbiAgICAgIHZpdGFsaXR5OiA1LFxyXG4gICAgICBpbnRlbGxpZ2VuY2U6IDYsXHJcbiAgICAgIG1pbmQ6IDcsXHJcbiAgICAgIHBpZXR5OiA4LFxyXG4gICAgICBhdHRhY2tQb3dlcjogOSxcclxuICAgICAgZGlyZWN0SGl0OiAxMCxcclxuICAgICAgY3JpdGljYWxIaXQ6IDExLFxyXG4gICAgICBhdHRhY2tNYWdpY1BvdGVuY3k6IDEyLFxyXG4gICAgICBoZWFsTWFnaWNQb3RlbmN5OiAxMyxcclxuICAgICAgZGV0ZXJtaW5hdGlvbjogMTQsXHJcbiAgICAgIHNraWxsU3BlZWQ6IDE1LFxyXG4gICAgICBzcGVsbFNwZWVkOiAxNixcclxuICAgICAgdGVuYWNpdHk6IDE4LFxyXG4gICAgICBsb2NhbENvbnRlbnRJZDogMTksXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgbGFzdEluY2x1ZGU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIFN0YXJ0c1VzaW5nOiB7XHJcbiAgICB0eXBlOiAnMjAnLFxyXG4gICAgbmFtZTogJ1N0YXJ0c1VzaW5nJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTdGFydHNDYXN0aW5nJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIHNvdXJjZUlkOiAyLFxyXG4gICAgICBzb3VyY2U6IDMsXHJcbiAgICAgIGlkOiA0LFxyXG4gICAgICBhYmlsaXR5OiA1LFxyXG4gICAgICB0YXJnZXRJZDogNixcclxuICAgICAgdGFyZ2V0OiA3LFxyXG4gICAgICBjYXN0VGltZTogOCxcclxuICAgICAgeDogOSxcclxuICAgICAgeTogMTAsXHJcbiAgICAgIHo6IDExLFxyXG4gICAgICBoZWFkaW5nOiAxMixcclxuICAgIH0sXHJcbiAgICBwb3NzaWJsZVJzdkZpZWxkczogWzVdLFxyXG4gICAgYmxhbmtGaWVsZHM6IFs2XSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgICA2OiA3LFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgQWJpbGl0eToge1xyXG4gICAgdHlwZTogJzIxJyxcclxuICAgIG5hbWU6ICdBYmlsaXR5JyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdBY3Rpb25FZmZlY3QnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgc291cmNlSWQ6IDIsXHJcbiAgICAgIHNvdXJjZTogMyxcclxuICAgICAgaWQ6IDQsXHJcbiAgICAgIGFiaWxpdHk6IDUsXHJcbiAgICAgIHRhcmdldElkOiA2LFxyXG4gICAgICB0YXJnZXQ6IDcsXHJcbiAgICAgIGZsYWdzOiA4LFxyXG4gICAgICBkYW1hZ2U6IDksXHJcbiAgICAgIHRhcmdldEN1cnJlbnRIcDogMjQsXHJcbiAgICAgIHRhcmdldE1heEhwOiAyNSxcclxuICAgICAgdGFyZ2V0Q3VycmVudE1wOiAyNixcclxuICAgICAgdGFyZ2V0TWF4TXA6IDI3LFxyXG4gICAgICAvLyB0YXJnZXRDdXJyZW50VHA6IDI4LFxyXG4gICAgICAvLyB0YXJnZXRNYXhUcDogMjksXHJcbiAgICAgIHRhcmdldFg6IDMwLFxyXG4gICAgICB0YXJnZXRZOiAzMSxcclxuICAgICAgdGFyZ2V0WjogMzIsXHJcbiAgICAgIHRhcmdldEhlYWRpbmc6IDMzLFxyXG4gICAgICBjdXJyZW50SHA6IDM0LFxyXG4gICAgICBtYXhIcDogMzUsXHJcbiAgICAgIGN1cnJlbnRNcDogMzYsXHJcbiAgICAgIG1heE1wOiAzNyxcclxuICAgICAgLy8gY3VycmVudFRwOiAzODtcclxuICAgICAgLy8gbWF4VHA6IDM5O1xyXG4gICAgICB4OiA0MCxcclxuICAgICAgeTogNDEsXHJcbiAgICAgIHo6IDQyLFxyXG4gICAgICBoZWFkaW5nOiA0MyxcclxuICAgICAgc2VxdWVuY2U6IDQ0LFxyXG4gICAgICB0YXJnZXRJbmRleDogNDUsXHJcbiAgICAgIHRhcmdldENvdW50OiA0NixcclxuICAgIH0sXHJcbiAgICBwb3NzaWJsZVJzdkZpZWxkczogWzVdLFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICAgIDY6IDcsXHJcbiAgICB9LFxyXG4gICAgYmxhbmtGaWVsZHM6IFs2XSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgTmV0d29ya0FPRUFiaWxpdHk6IHtcclxuICAgIHR5cGU6ICcyMicsXHJcbiAgICBuYW1lOiAnTmV0d29ya0FPRUFiaWxpdHknLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0FPRUFjdGlvbkVmZmVjdCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBzb3VyY2VJZDogMixcclxuICAgICAgc291cmNlOiAzLFxyXG4gICAgICBpZDogNCxcclxuICAgICAgYWJpbGl0eTogNSxcclxuICAgICAgdGFyZ2V0SWQ6IDYsXHJcbiAgICAgIHRhcmdldDogNyxcclxuICAgICAgZmxhZ3M6IDgsXHJcbiAgICAgIGRhbWFnZTogOSxcclxuICAgICAgdGFyZ2V0Q3VycmVudEhwOiAyNCxcclxuICAgICAgdGFyZ2V0TWF4SHA6IDI1LFxyXG4gICAgICB0YXJnZXRDdXJyZW50TXA6IDI2LFxyXG4gICAgICB0YXJnZXRNYXhNcDogMjcsXHJcbiAgICAgIC8vIHRhcmdldEN1cnJlbnRUcDogMjgsXHJcbiAgICAgIC8vIHRhcmdldE1heFRwOiAyOSxcclxuICAgICAgdGFyZ2V0WDogMzAsXHJcbiAgICAgIHRhcmdldFk6IDMxLFxyXG4gICAgICB0YXJnZXRaOiAzMixcclxuICAgICAgdGFyZ2V0SGVhZGluZzogMzMsXHJcbiAgICAgIGN1cnJlbnRIcDogMzQsXHJcbiAgICAgIG1heEhwOiAzNSxcclxuICAgICAgY3VycmVudE1wOiAzNixcclxuICAgICAgbWF4TXA6IDM3LFxyXG4gICAgICAvLyBjdXJyZW50VHA6IDM4O1xyXG4gICAgICAvLyBtYXhUcDogMzk7XHJcbiAgICAgIHg6IDQwLFxyXG4gICAgICB5OiA0MSxcclxuICAgICAgejogNDIsXHJcbiAgICAgIGhlYWRpbmc6IDQzLFxyXG4gICAgICBzZXF1ZW5jZTogNDQsXHJcbiAgICAgIHRhcmdldEluZGV4OiA0NSxcclxuICAgICAgdGFyZ2V0Q291bnQ6IDQ2LFxyXG4gICAgfSxcclxuICAgIHBvc3NpYmxlUnN2RmllbGRzOiBbNV0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgICAgNjogNyxcclxuICAgIH0sXHJcbiAgICBibGFua0ZpZWxkczogWzZdLFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBOZXR3b3JrQ2FuY2VsQWJpbGl0eToge1xyXG4gICAgdHlwZTogJzIzJyxcclxuICAgIG5hbWU6ICdOZXR3b3JrQ2FuY2VsQWJpbGl0eScsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnQ2FuY2VsQWN0aW9uJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIHNvdXJjZUlkOiAyLFxyXG4gICAgICBzb3VyY2U6IDMsXHJcbiAgICAgIGlkOiA0LFxyXG4gICAgICBuYW1lOiA1LFxyXG4gICAgICByZWFzb246IDYsXHJcbiAgICB9LFxyXG4gICAgcG9zc2libGVSc3ZGaWVsZHM6IFs1XSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgTmV0d29ya0RvVDoge1xyXG4gICAgdHlwZTogJzI0JyxcclxuICAgIG5hbWU6ICdOZXR3b3JrRG9UJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdEb1RIb1QnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICAgIHdoaWNoOiA0LFxyXG4gICAgICBlZmZlY3RJZDogNSxcclxuICAgICAgZGFtYWdlOiA2LFxyXG4gICAgICBjdXJyZW50SHA6IDcsXHJcbiAgICAgIG1heEhwOiA4LFxyXG4gICAgICBjdXJyZW50TXA6IDksXHJcbiAgICAgIG1heE1wOiAxMCxcclxuICAgICAgLy8gY3VycmVudFRwOiAxMSxcclxuICAgICAgLy8gbWF4VHA6IDEyLFxyXG4gICAgICB4OiAxMyxcclxuICAgICAgeTogMTQsXHJcbiAgICAgIHo6IDE1LFxyXG4gICAgICBoZWFkaW5nOiAxNixcclxuICAgICAgc291cmNlSWQ6IDE3LFxyXG4gICAgICBzb3VyY2U6IDE4LFxyXG4gICAgICAvLyBBbiBpZCBudW1iZXIgbG9va3VwIGludG8gdGhlIEF0dGFja1R5cGUgdGFibGVcclxuICAgICAgZGFtYWdlVHlwZTogMTksXHJcbiAgICAgIHNvdXJjZUN1cnJlbnRIcDogMjAsXHJcbiAgICAgIHNvdXJjZU1heEhwOiAyMSxcclxuICAgICAgc291cmNlQ3VycmVudE1wOiAyMixcclxuICAgICAgc291cmNlTWF4TXA6IDIzLFxyXG4gICAgICAvLyBzb3VyY2VDdXJyZW50VHA6IDI0LFxyXG4gICAgICAvLyBzb3VyY2VNYXhUcDogMjUsXHJcbiAgICAgIHNvdXJjZVg6IDI2LFxyXG4gICAgICBzb3VyY2VZOiAyNyxcclxuICAgICAgc291cmNlWjogMjgsXHJcbiAgICAgIHNvdXJjZUhlYWRpbmc6IDI5LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgICAxNzogMTgsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBXYXNEZWZlYXRlZDoge1xyXG4gICAgdHlwZTogJzI1JyxcclxuICAgIG5hbWU6ICdXYXNEZWZlYXRlZCcsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnRGVhdGgnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgdGFyZ2V0SWQ6IDIsXHJcbiAgICAgIHRhcmdldDogMyxcclxuICAgICAgc291cmNlSWQ6IDQsXHJcbiAgICAgIHNvdXJjZTogNSxcclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgICAgNDogNSxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIEdhaW5zRWZmZWN0OiB7XHJcbiAgICB0eXBlOiAnMjYnLFxyXG4gICAgbmFtZTogJ0dhaW5zRWZmZWN0JyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTdGF0dXNBZGQnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgZWZmZWN0SWQ6IDIsXHJcbiAgICAgIGVmZmVjdDogMyxcclxuICAgICAgZHVyYXRpb246IDQsXHJcbiAgICAgIHNvdXJjZUlkOiA1LFxyXG4gICAgICBzb3VyY2U6IDYsXHJcbiAgICAgIHRhcmdldElkOiA3LFxyXG4gICAgICB0YXJnZXQ6IDgsXHJcbiAgICAgIGNvdW50OiA5LFxyXG4gICAgICB0YXJnZXRNYXhIcDogMTAsXHJcbiAgICAgIHNvdXJjZU1heEhwOiAxMSxcclxuICAgIH0sXHJcbiAgICBwb3NzaWJsZVJzdkZpZWxkczogWzNdLFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDU6IDYsXHJcbiAgICAgIDc6IDgsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBIZWFkTWFya2VyOiB7XHJcbiAgICB0eXBlOiAnMjcnLFxyXG4gICAgbmFtZTogJ0hlYWRNYXJrZXInLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1RhcmdldEljb24nLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgdGFyZ2V0SWQ6IDIsXHJcbiAgICAgIHRhcmdldDogMyxcclxuICAgICAgaWQ6IDYsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBOZXR3b3JrUmFpZE1hcmtlcjoge1xyXG4gICAgdHlwZTogJzI4JyxcclxuICAgIG5hbWU6ICdOZXR3b3JrUmFpZE1hcmtlcicsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnV2F5bWFya01hcmtlcicsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBvcGVyYXRpb246IDIsXHJcbiAgICAgIHdheW1hcms6IDMsXHJcbiAgICAgIGlkOiA0LFxyXG4gICAgICBuYW1lOiA1LFxyXG4gICAgICB4OiA2LFxyXG4gICAgICB5OiA3LFxyXG4gICAgICB6OiA4LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICA0OiA1LFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgTmV0d29ya1RhcmdldE1hcmtlcjoge1xyXG4gICAgdHlwZTogJzI5JyxcclxuICAgIG5hbWU6ICdOZXR3b3JrVGFyZ2V0TWFya2VyJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTaWduTWFya2VyJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIG9wZXJhdGlvbjogMiwgLy8gQWRkLCBVcGRhdGUsIERlbGV0ZVxyXG4gICAgICB3YXltYXJrOiAzLFxyXG4gICAgICBpZDogNCxcclxuICAgICAgbmFtZTogNSxcclxuICAgICAgdGFyZ2V0SWQ6IDYsXHJcbiAgICAgIHRhcmdldE5hbWU6IDcsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDQ6IDUsXHJcbiAgICAgIDY6IDcsXHJcbiAgICB9LFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBMb3Nlc0VmZmVjdDoge1xyXG4gICAgdHlwZTogJzMwJyxcclxuICAgIG5hbWU6ICdMb3Nlc0VmZmVjdCcsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnU3RhdHVzUmVtb3ZlJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGVmZmVjdElkOiAyLFxyXG4gICAgICBlZmZlY3Q6IDMsXHJcbiAgICAgIHNvdXJjZUlkOiA1LFxyXG4gICAgICBzb3VyY2U6IDYsXHJcbiAgICAgIHRhcmdldElkOiA3LFxyXG4gICAgICB0YXJnZXQ6IDgsXHJcbiAgICAgIGNvdW50OiA5LFxyXG4gICAgfSxcclxuICAgIHBvc3NpYmxlUnN2RmllbGRzOiBbM10sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgNTogNixcclxuICAgICAgNzogOCxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5ldHdvcmtHYXVnZToge1xyXG4gICAgdHlwZTogJzMxJyxcclxuICAgIG5hbWU6ICdOZXR3b3JrR2F1Z2UnLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ0dhdWdlJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBkYXRhMDogMyxcclxuICAgICAgZGF0YTE6IDQsXHJcbiAgICAgIGRhdGEyOiA1LFxyXG4gICAgICBkYXRhMzogNixcclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogbnVsbCxcclxuICAgIH0sXHJcbiAgICAvLyBTb21ldGltZXMgdGhpcyBsYXN0IGZpZWxkIGxvb2tzIGxpa2UgYSBwbGF5ZXIgaWQuXHJcbiAgICAvLyBGb3Igc2FmZXR5LCBhbm9ueW1pemUgYWxsIG9mIHRoZSBnYXVnZSBkYXRhLlxyXG4gICAgZmlyc3RVbmtub3duRmllbGQ6IDMsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5ldHdvcmtXb3JsZDoge1xyXG4gICAgdHlwZTogJzMyJyxcclxuICAgIG5hbWU6ICdOZXR3b3JrV29ybGQnLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1dvcmxkJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICB9LFxyXG4gICAgaXNVbmtub3duOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBBY3RvckNvbnRyb2w6IHtcclxuICAgIHR5cGU6ICczMycsXHJcbiAgICBuYW1lOiAnQWN0b3JDb250cm9sJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdEaXJlY3RvcicsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpbnN0YW5jZTogMixcclxuICAgICAgY29tbWFuZDogMyxcclxuICAgICAgZGF0YTA6IDQsXHJcbiAgICAgIGRhdGExOiA1LFxyXG4gICAgICBkYXRhMjogNixcclxuICAgICAgZGF0YTM6IDcsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBOYW1lVG9nZ2xlOiB7XHJcbiAgICB0eXBlOiAnMzQnLFxyXG4gICAgbmFtZTogJ05hbWVUb2dnbGUnLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ05hbWVUb2dnbGUnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICAgIHRhcmdldElkOiA0LFxyXG4gICAgICB0YXJnZXROYW1lOiA1LFxyXG4gICAgICB0b2dnbGU6IDYsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICAgIDQ6IDUsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBUZXRoZXI6IHtcclxuICAgIHR5cGU6ICczNScsXHJcbiAgICBuYW1lOiAnVGV0aGVyJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdUZXRoZXInLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgc291cmNlSWQ6IDIsXHJcbiAgICAgIHNvdXJjZTogMyxcclxuICAgICAgdGFyZ2V0SWQ6IDQsXHJcbiAgICAgIHRhcmdldDogNSxcclxuICAgICAgaWQ6IDgsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IDMsXHJcbiAgICAgIDQ6IDUsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RVbmtub3duRmllbGQ6IDksXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIExpbWl0QnJlYWs6IHtcclxuICAgIHR5cGU6ICczNicsXHJcbiAgICBuYW1lOiAnTGltaXRCcmVhaycsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnTGltaXRCcmVhaycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICB2YWx1ZUhleDogMixcclxuICAgICAgYmFyczogMyxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE5ldHdvcmtFZmZlY3RSZXN1bHQ6IHtcclxuICAgIHR5cGU6ICczNycsXHJcbiAgICBuYW1lOiAnTmV0d29ya0VmZmVjdFJlc3VsdCcsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnRWZmZWN0UmVzdWx0JyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICBuYW1lOiAzLFxyXG4gICAgICBzZXF1ZW5jZUlkOiA0LFxyXG4gICAgICBjdXJyZW50SHA6IDUsXHJcbiAgICAgIG1heEhwOiA2LFxyXG4gICAgICBjdXJyZW50TXA6IDcsXHJcbiAgICAgIG1heE1wOiA4LFxyXG4gICAgICBjdXJyZW50U2hpZWxkOiA5LFxyXG4gICAgICAvLyBGaWVsZCBpbmRleCAxMCBpcyBhbHdheXMgYDBgXHJcbiAgICAgIHg6IDExLFxyXG4gICAgICB5OiAxMixcclxuICAgICAgejogMTMsXHJcbiAgICAgIGhlYWRpbmc6IDE0LFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgfSxcclxuICAgIGZpcnN0VW5rbm93bkZpZWxkOiAyMixcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgU3RhdHVzRWZmZWN0OiB7XHJcbiAgICB0eXBlOiAnMzgnLFxyXG4gICAgbmFtZTogJ1N0YXR1c0VmZmVjdCcsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnU3RhdHVzTGlzdCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICB0YXJnZXRJZDogMixcclxuICAgICAgdGFyZ2V0OiAzLFxyXG4gICAgICBqb2JMZXZlbERhdGE6IDQsXHJcbiAgICAgIGhwOiA1LFxyXG4gICAgICBtYXhIcDogNixcclxuICAgICAgbXA6IDcsXHJcbiAgICAgIG1heE1wOiA4LFxyXG4gICAgICBjdXJyZW50U2hpZWxkOiA5LFxyXG4gICAgICAvLyBGaWVsZCBpbmRleCAxMCBpcyBhbHdheXMgYDBgXHJcbiAgICAgIHg6IDExLFxyXG4gICAgICB5OiAxMixcclxuICAgICAgejogMTMsXHJcbiAgICAgIGhlYWRpbmc6IDE0LFxyXG4gICAgICBkYXRhMDogMTUsXHJcbiAgICAgIGRhdGExOiAxNixcclxuICAgICAgZGF0YTI6IDE3LFxyXG4gICAgICBkYXRhMzogMTgsXHJcbiAgICAgIGRhdGE0OiAxOSxcclxuICAgICAgZGF0YTU6IDIwLFxyXG4gICAgICAvLyBWYXJpYWJsZSBudW1iZXIgb2YgdHJpcGxldHMgaGVyZSwgYnV0IGF0IGxlYXN0IG9uZS5cclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgIH0sXHJcbiAgICBmaXJzdFVua25vd25GaWVsZDogMTgsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IDE4LFxyXG4gIH0sXHJcbiAgTmV0d29ya1VwZGF0ZUhQOiB7XHJcbiAgICB0eXBlOiAnMzknLFxyXG4gICAgbmFtZTogJ05ldHdvcmtVcGRhdGVIUCcsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnVXBkYXRlSHAnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaWQ6IDIsXHJcbiAgICAgIG5hbWU6IDMsXHJcbiAgICAgIGN1cnJlbnRIcDogNCxcclxuICAgICAgbWF4SHA6IDUsXHJcbiAgICAgIGN1cnJlbnRNcDogNixcclxuICAgICAgbWF4TXA6IDcsXHJcbiAgICAgIC8vIGN1cnJlbnRUcDogOCxcclxuICAgICAgLy8gbWF4VHA6IDksXHJcbiAgICAgIHg6IDEwLFxyXG4gICAgICB5OiAxMSxcclxuICAgICAgejogMTIsXHJcbiAgICAgIGhlYWRpbmc6IDEzLFxyXG4gICAgfSxcclxuICAgIHBsYXllcklkczoge1xyXG4gICAgICAyOiAzLFxyXG4gICAgfSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgTWFwOiB7XHJcbiAgICB0eXBlOiAnNDAnLFxyXG4gICAgbmFtZTogJ01hcCcsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnQ2hhbmdlTWFwJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGlkOiAyLFxyXG4gICAgICByZWdpb25OYW1lOiAzLFxyXG4gICAgICBwbGFjZU5hbWU6IDQsXHJcbiAgICAgIHBsYWNlTmFtZVN1YjogNSxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICAgIGxhc3RJbmNsdWRlOiB0cnVlLFxyXG4gIH0sXHJcbiAgU3lzdGVtTG9nTWVzc2FnZToge1xyXG4gICAgdHlwZTogJzQxJyxcclxuICAgIG5hbWU6ICdTeXN0ZW1Mb2dNZXNzYWdlJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTeXN0ZW1Mb2dNZXNzYWdlJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGluc3RhbmNlOiAyLFxyXG4gICAgICBpZDogMyxcclxuICAgICAgcGFyYW0wOiA0LFxyXG4gICAgICBwYXJhbTE6IDUsXHJcbiAgICAgIHBhcmFtMjogNixcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIFN0YXR1c0xpc3QzOiB7XHJcbiAgICB0eXBlOiAnNDInLFxyXG4gICAgbmFtZTogJ1N0YXR1c0xpc3QzJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdTdGF0dXNMaXN0MycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpZDogMixcclxuICAgICAgbmFtZTogMyxcclxuICAgICAgLy8gdHJpcGxldHMgb2YgZmllbGRzIGZyb20gaGVyZSAoZWZmZWN0SWQsIGRhdGEsIHBsYXllcklkKT9cclxuICAgIH0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogMyxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IDQsXHJcbiAgICBmaXJzdFVua25vd25GaWVsZDogNCxcclxuICB9LFxyXG4gIFBhcnNlckluZm86IHtcclxuICAgIHR5cGU6ICcyNDknLFxyXG4gICAgbmFtZTogJ1BhcnNlckluZm8nLFxyXG4gICAgc291cmNlOiAnRkZYSVZfQUNUX1BsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJ1NldHRpbmdzJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICB9LFxyXG4gICAgZ2xvYmFsSW5jbHVkZTogdHJ1ZSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgUHJvY2Vzc0luZm86IHtcclxuICAgIHR5cGU6ICcyNTAnLFxyXG4gICAgbmFtZTogJ1Byb2Nlc3NJbmZvJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdQcm9jZXNzJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICB9LFxyXG4gICAgZ2xvYmFsSW5jbHVkZTogdHJ1ZSxcclxuICAgIGNhbkFub255bWl6ZTogdHJ1ZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgRGVidWc6IHtcclxuICAgIHR5cGU6ICcyNTEnLFxyXG4gICAgbmFtZTogJ0RlYnVnJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdEZWJ1ZycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgfSxcclxuICAgIGdsb2JhbEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IGZhbHNlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBQYWNrZXREdW1wOiB7XHJcbiAgICB0eXBlOiAnMjUyJyxcclxuICAgIG5hbWU6ICdQYWNrZXREdW1wJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdQYWNrZXREdW1wJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiBmYWxzZSxcclxuICAgIGZpcnN0T3B0aW9uYWxGaWVsZDogdW5kZWZpbmVkLFxyXG4gIH0sXHJcbiAgVmVyc2lvbjoge1xyXG4gICAgdHlwZTogJzI1MycsXHJcbiAgICBuYW1lOiAnVmVyc2lvbicsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnVmVyc2lvbicsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgfSxcclxuICAgIGdsb2JhbEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIEVycm9yOiB7XHJcbiAgICB0eXBlOiAnMjU0JyxcclxuICAgIG5hbWU6ICdFcnJvcicsXHJcbiAgICBzb3VyY2U6ICdGRlhJVl9BQ1RfUGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnRXJyb3InLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IGZhbHNlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBOb25lOiB7XHJcbiAgICB0eXBlOiAnWzAtOV0rJyxcclxuICAgIG5hbWU6ICdOb25lJyxcclxuICAgIHNvdXJjZTogJ0ZGWElWX0FDVF9QbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICdOb25lJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICB9LFxyXG4gICAgaXNVbmtub3duOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICAvLyBPdmVybGF5UGx1Z2luIGxvZyBsaW5lc1xyXG4gIExpbmVSZWdpc3RyYXRpb246IHtcclxuICAgIHR5cGU6ICcyNTYnLFxyXG4gICAgbmFtZTogJ0xpbmVSZWdpc3RyYXRpb24nLFxyXG4gICAgc291cmNlOiAnT3ZlcmxheVBsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJzI1NicsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpZDogMixcclxuICAgICAgc291cmNlOiAzLFxyXG4gICAgICB2ZXJzaW9uOiA0LFxyXG4gICAgfSxcclxuICAgIGdsb2JhbEluY2x1ZGU6IHRydWUsXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIE1hcEVmZmVjdDoge1xyXG4gICAgdHlwZTogJzI1NycsXHJcbiAgICBuYW1lOiAnTWFwRWZmZWN0JyxcclxuICAgIHNvdXJjZTogJ092ZXJsYXlQbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICcyNTcnLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgaW5zdGFuY2U6IDIsXHJcbiAgICAgIGZsYWdzOiAzLFxyXG4gICAgICAvLyB2YWx1ZXMgZm9yIHRoZSBsb2NhdGlvbiBmaWVsZCBzZWVtIHRvIHZhcnkgYmV0d2VlbiBpbnN0YW5jZXNcclxuICAgICAgLy8gKGUuZy4gYSBsb2NhdGlvbiBvZiAnMDgnIGluIFA1UyBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgdGhlIHNhbWUgbG9jYXRpb24gaW4gUDVTIGFzIGluIFA2UylcclxuICAgICAgLy8gYnV0IHRoaXMgZmllbGQgZG9lcyBhcHBlYXIgdG8gY29uc2lzdGVudGx5IGNvbnRhaW4gcG9zaXRpb24gaW5mbyBmb3IgdGhlIGVmZmVjdCByZW5kZXJpbmdcclxuICAgICAgbG9jYXRpb246IDQsXHJcbiAgICAgIGRhdGEwOiA1LFxyXG4gICAgICBkYXRhMTogNixcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIEZhdGVEaXJlY3Rvcjoge1xyXG4gICAgdHlwZTogJzI1OCcsXHJcbiAgICBuYW1lOiAnRmF0ZURpcmVjdG9yJyxcclxuICAgIHNvdXJjZTogJ092ZXJsYXlQbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICcyNTgnLFxyXG4gICAgLy8gZmF0ZUlkIGFuZCBwcm9ncmVzcyBhcmUgaW4gaGV4LlxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgY2F0ZWdvcnk6IDIsXHJcbiAgICAgIC8vIHBhZGRpbmcwOiAzLFxyXG4gICAgICBmYXRlSWQ6IDQsXHJcbiAgICAgIHByb2dyZXNzOiA1LFxyXG4gICAgICAvLyBwYXJhbTM6IDYsXHJcbiAgICAgIC8vIHBhcmFtNDogNyxcclxuICAgICAgLy8gcGFyYW01OiA4LFxyXG4gICAgICAvLyBwYXJhbTY6IDksXHJcbiAgICAgIC8vIHBhZGRpbmcxOiAxMCxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIENFRGlyZWN0b3I6IHtcclxuICAgIHR5cGU6ICcyNTknLFxyXG4gICAgbmFtZTogJ0NFRGlyZWN0b3InLFxyXG4gICAgc291cmNlOiAnT3ZlcmxheVBsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJzI1OScsXHJcbiAgICAvLyBhbGwgZmllbGRzIGFyZSBpbiBoZXhcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIHBvcFRpbWU6IDIsXHJcbiAgICAgIHRpbWVSZW1haW5pbmc6IDMsXHJcbiAgICAgIC8vIHVua25vd24wOiA0LFxyXG4gICAgICBjZUtleTogNSxcclxuICAgICAgbnVtUGxheWVyczogNixcclxuICAgICAgc3RhdHVzOiA3LFxyXG4gICAgICAvLyB1bmtub3duMTogOCxcclxuICAgICAgcHJvZ3Jlc3M6IDksXHJcbiAgICAgIC8vIHVua25vd24yOiAxMCxcclxuICAgICAgLy8gdW5rbm93bjM6IDExLFxyXG4gICAgICAvLyB1bmtub3duNDogMTIsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBJbkNvbWJhdDoge1xyXG4gICAgdHlwZTogJzI2MCcsXHJcbiAgICBuYW1lOiAnSW5Db21iYXQnLFxyXG4gICAgc291cmNlOiAnT3ZlcmxheVBsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJzI2MCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBpbkFDVENvbWJhdDogMixcclxuICAgICAgaW5HYW1lQ29tYmF0OiAzLFxyXG4gICAgICBpc0FDVENoYW5nZWQ6IDQsXHJcbiAgICAgIGlzR2FtZUNoYW5nZWQ6IDUsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiB1bmRlZmluZWQsXHJcbiAgfSxcclxuICBDb21iYXRhbnRNZW1vcnk6IHtcclxuICAgIHR5cGU6ICcyNjEnLFxyXG4gICAgbmFtZTogJ0NvbWJhdGFudE1lbW9yeScsXHJcbiAgICBzb3VyY2U6ICdPdmVybGF5UGx1Z2luJyxcclxuICAgIG1lc3NhZ2VUeXBlOiAnMjYxJyxcclxuICAgIGZpZWxkczoge1xyXG4gICAgICB0eXBlOiAwLFxyXG4gICAgICB0aW1lc3RhbXA6IDEsXHJcbiAgICAgIGNoYW5nZTogMixcclxuICAgICAgaWQ6IDMsXHJcbiAgICAgIC8vIGZyb20gaGVyZSwgcGFpcnMgb2YgZmllbGQgbmFtZS92YWx1ZXNcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IDUsXHJcbiAgICAvLyBUT0RPOiBmaXggdGhpcyBkYXRhIHN0cnVjdHVyZSBhbmQgYW5vbnltaXplciB0byBiZSBhYmxlIHRvIGhhbmRsZSByZXBlYXRpbmdGaWVsZHMuXHJcbiAgICAvLyBBdCB0aGUgdmVyeSBsZWFzdCwgTmFtZSBhbmQgUENUYXJnZXRJRCBuZWVkIHRvIGJlIGFub255bWl6ZWQgYXMgd2VsbC5cclxuICAgIGZpcnN0VW5rbm93bkZpZWxkOiA0LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDM6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgcmVwZWF0aW5nRmllbGRzOiB7XHJcbiAgICAgIHN0YXJ0aW5nSW5kZXg6IDQsXHJcbiAgICAgIGxhYmVsOiAncGFpcicsXHJcbiAgICAgIG5hbWVzOiBbJ2tleScsICd2YWx1ZSddLFxyXG4gICAgICBzb3J0S2V5czogdHJ1ZSxcclxuICAgICAgcHJpbWFyeUtleTogJ2tleScsXHJcbiAgICAgIHBvc3NpYmxlS2V5czogY29tYmF0YW50TWVtb3J5S2V5cyxcclxuICAgIH0sXHJcbiAgfSxcclxuICBSU1ZEYXRhOiB7XHJcbiAgICB0eXBlOiAnMjYyJyxcclxuICAgIG5hbWU6ICdSU1ZEYXRhJyxcclxuICAgIHNvdXJjZTogJ092ZXJsYXlQbHVnaW4nLFxyXG4gICAgbWVzc2FnZVR5cGU6ICcyNjInLFxyXG4gICAgZmllbGRzOiB7XHJcbiAgICAgIHR5cGU6IDAsXHJcbiAgICAgIHRpbWVzdGFtcDogMSxcclxuICAgICAgbG9jYWxlOiAyLFxyXG4gICAgICAvLyB1bmtub3duMDogMyxcclxuICAgICAga2V5OiA0LFxyXG4gICAgICB2YWx1ZTogNSxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IHVuZGVmaW5lZCxcclxuICB9LFxyXG4gIFN0YXJ0c1VzaW5nRXh0cmE6IHtcclxuICAgIHR5cGU6ICcyNjMnLFxyXG4gICAgbmFtZTogJ1N0YXJ0c1VzaW5nRXh0cmEnLFxyXG4gICAgc291cmNlOiAnT3ZlcmxheVBsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJzI2MycsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBzb3VyY2VJZDogMixcclxuICAgICAgaWQ6IDMsXHJcbiAgICAgIHg6IDQsXHJcbiAgICAgIHk6IDUsXHJcbiAgICAgIHo6IDYsXHJcbiAgICAgIGhlYWRpbmc6IDcsXHJcbiAgICB9LFxyXG4gICAgcGxheWVySWRzOiB7XHJcbiAgICAgIDI6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgY2FuQW5vbnltaXplOiB0cnVlLFxyXG4gICAgZmlyc3RPcHRpb25hbEZpZWxkOiA3LFxyXG4gIH0sXHJcbiAgQWJpbGl0eUV4dHJhOiB7XHJcbiAgICB0eXBlOiAnMjY0JyxcclxuICAgIG5hbWU6ICdBYmlsaXR5RXh0cmEnLFxyXG4gICAgc291cmNlOiAnT3ZlcmxheVBsdWdpbicsXHJcbiAgICBtZXNzYWdlVHlwZTogJzI2NCcsXHJcbiAgICBmaWVsZHM6IHtcclxuICAgICAgdHlwZTogMCxcclxuICAgICAgdGltZXN0YW1wOiAxLFxyXG4gICAgICBzb3VyY2VJZDogMixcclxuICAgICAgaWQ6IDMsXHJcbiAgICAgIGdsb2JhbEVmZmVjdENvdW50ZXI6IDQsXHJcbiAgICAgIGRhdGFGbGFnOiA1LFxyXG4gICAgICB4OiA2LFxyXG4gICAgICB5OiA3LFxyXG4gICAgICB6OiA4LFxyXG4gICAgICBoZWFkaW5nOiA5LFxyXG4gICAgfSxcclxuICAgIGJsYW5rRmllbGRzOiBbNl0sXHJcbiAgICBwbGF5ZXJJZHM6IHtcclxuICAgICAgMjogbnVsbCxcclxuICAgIH0sXHJcbiAgICBjYW5Bbm9ueW1pemU6IHRydWUsXHJcbiAgICBmaXJzdE9wdGlvbmFsRmllbGQ6IDksXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2dEZWZpbml0aW9uc1ZlcnNpb25zID0ge1xyXG4gICdsYXRlc3QnOiBsYXRlc3RMb2dEZWZpbml0aW9ucyxcclxufSBhcyBjb25zdDtcclxuXHJcbi8vIFZlcmlmeSB0aGF0IHRoaXMgaGFzIHRoZSByaWdodCB0eXBlLCBidXQgZXhwb3J0IGBhcyBjb25zdGAuXHJcbmNvbnN0IGFzc2VydExvZ0RlZmluaXRpb25zOiBMb2dEZWZpbml0aW9uVmVyc2lvbk1hcCA9IGxvZ0RlZmluaXRpb25zVmVyc2lvbnM7XHJcbmNvbnNvbGUuYXNzZXJ0KGFzc2VydExvZ0RlZmluaXRpb25zKTtcclxuXHJcbmV4cG9ydCB0eXBlIExvZ0RlZmluaXRpb25zID0gdHlwZW9mIGxvZ0RlZmluaXRpb25zVmVyc2lvbnNbJ2xhdGVzdCddO1xyXG5leHBvcnQgdHlwZSBMb2dEZWZpbml0aW9uVHlwZXMgPSBrZXlvZiBMb2dEZWZpbml0aW9ucztcclxuZXhwb3J0IHR5cGUgTG9nRGVmaW5pdGlvblZlcnNpb25zID0ga2V5b2YgdHlwZW9mIGxvZ0RlZmluaXRpb25zVmVyc2lvbnM7XHJcblxyXG50eXBlIFJlcGVhdGluZ0ZpZWxkc05hcnJvd2luZ1R5cGUgPSB7IHJlYWRvbmx5IHJlcGVhdGluZ0ZpZWxkczogdW5rbm93biB9O1xyXG5cclxuZXhwb3J0IHR5cGUgUmVwZWF0aW5nRmllbGRzVHlwZXMgPSBrZXlvZiB7XHJcbiAgW1xyXG4gICAgdHlwZSBpbiBMb2dEZWZpbml0aW9uVHlwZXMgYXMgTG9nRGVmaW5pdGlvbnNbdHlwZV0gZXh0ZW5kcyBSZXBlYXRpbmdGaWVsZHNOYXJyb3dpbmdUeXBlID8gdHlwZVxyXG4gICAgICA6IG5ldmVyXHJcbiAgXTogbnVsbDtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFJlcGVhdGluZ0ZpZWxkc0RlZmluaXRpb25zID0ge1xyXG4gIFt0eXBlIGluIFJlcGVhdGluZ0ZpZWxkc1R5cGVzXTogTG9nRGVmaW5pdGlvbnNbdHlwZV0gJiB7XHJcbiAgICByZWFkb25seSByZXBlYXRpbmdGaWVsZHM6IEV4Y2x1ZGU8TG9nRGVmaW5pdGlvbnNbdHlwZV1bJ3JlcGVhdGluZ0ZpZWxkcyddLCB1bmRlZmluZWQ+O1xyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBQYXJzZUhlbHBlckZpZWxkPFxyXG4gIFR5cGUgZXh0ZW5kcyBMb2dEZWZpbml0aW9uVHlwZXMsXHJcbiAgRmllbGRzIGV4dGVuZHMgTmV0RmllbGRzUmV2ZXJzZVtUeXBlXSxcclxuICBGaWVsZCBleHRlbmRzIGtleW9mIEZpZWxkcyxcclxuPiA9IHtcclxuICBmaWVsZDogRmllbGRzW0ZpZWxkXSBleHRlbmRzIHN0cmluZyA/IEZpZWxkc1tGaWVsZF0gOiBuZXZlcjtcclxuICB2YWx1ZT86IHN0cmluZztcclxuICBvcHRpb25hbD86IGJvb2xlYW47XHJcbiAgcmVwZWF0aW5nPzogYm9vbGVhbjtcclxuICByZXBlYXRpbmdLZXlzPzogc3RyaW5nW107XHJcbiAgc29ydEtleXM/OiBib29sZWFuO1xyXG4gIHByaW1hcnlLZXk/OiBzdHJpbmc7XHJcbiAgcG9zc2libGVLZXlzPzogc3RyaW5nW107XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBQYXJzZUhlbHBlckZpZWxkczxUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzPiA9IHtcclxuICBbZmllbGQgaW4ga2V5b2YgTmV0RmllbGRzUmV2ZXJzZVtUXV06IFBhcnNlSGVscGVyRmllbGQ8VCwgTmV0RmllbGRzUmV2ZXJzZVtUXSwgZmllbGQ+O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbG9nRGVmaW5pdGlvbnNWZXJzaW9uc1snbGF0ZXN0J107XHJcbiIsImltcG9ydCB7IE5ldEZpZWxkcywgTmV0RmllbGRzUmV2ZXJzZSB9IGZyb20gJy4uL3R5cGVzL25ldF9maWVsZHMnO1xyXG5pbXBvcnQgeyBOZXRQYXJhbXMgfSBmcm9tICcuLi90eXBlcy9uZXRfcHJvcHMnO1xyXG5pbXBvcnQgeyBDYWN0Ym90QmFzZVJlZ0V4cCB9IGZyb20gJy4uL3R5cGVzL25ldF90cmlnZ2VyJztcclxuXHJcbmltcG9ydCB7XHJcbiAgbG9nRGVmaW5pdGlvbnNWZXJzaW9ucyxcclxuICBMb2dEZWZpbml0aW9uVHlwZXMsXHJcbiAgTG9nRGVmaW5pdGlvblZlcnNpb25zLFxyXG4gIFBhcnNlSGVscGVyRmllbGRzLFxyXG4gIFJlcGVhdGluZ0ZpZWxkc0RlZmluaXRpb25zLFxyXG4gIFJlcGVhdGluZ0ZpZWxkc1R5cGVzLFxyXG59IGZyb20gJy4vbmV0bG9nX2RlZnMnO1xyXG5pbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuL25vdF9yZWFjaGVkJztcclxuaW1wb3J0IFJlZ2V4ZXMgZnJvbSAnLi9yZWdleGVzJztcclxuXHJcbmNvbnN0IHNlcGFyYXRvciA9ICdcXFxcfCc7XHJcbmNvbnN0IG1hdGNoRGVmYXVsdCA9ICdbXnxdKic7XHJcblxyXG4vLyBJZiBOZXRSZWdleGVzLnNldEZsYWdUcmFuc2xhdGlvbnNOZWVkZWQgaXMgc2V0IHRvIHRydWUsIHRoZW4gYW55XHJcbi8vIHJlZ2V4IGNyZWF0ZWQgdGhhdCByZXF1aXJlcyBhIHRyYW5zbGF0aW9uIHdpbGwgYmVnaW4gd2l0aCB0aGlzIHN0cmluZ1xyXG4vLyBhbmQgbWF0Y2ggdGhlIG1hZ2ljU3RyaW5nUmVnZXguICBUaGlzIGlzIG1heWJlIGEgYml0IGdvb2Z5LCBidXQgaXNcclxuLy8gYSBwcmV0dHkgc3RyYWlnaHRmb3J3YXJkIHdheSB0byBtYXJrIHJlZ2V4ZXMgZm9yIHRyYW5zbGF0aW9ucy5cclxuLy8gSWYgaXNzdWUgIzEzMDYgaXMgZXZlciByZXNvbHZlZCwgd2UgY2FuIHJlbW92ZSB0aGlzLlxyXG5jb25zdCBtYWdpY1RyYW5zbGF0aW9uU3RyaW5nID0gYF5eYDtcclxuY29uc3QgbWFnaWNTdHJpbmdSZWdleCA9IC9eXFxeXFxeLztcclxuXHJcbi8vIGNhbid0IHNpbXBseSBleHBvcnQgdGhpcywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9wdWxsLzQ5NTcjZGlzY3Vzc2lvbl9yMTAwMjU5MDU4OVxyXG5jb25zdCBrZXlzVGhhdFJlcXVpcmVUcmFuc2xhdGlvbkFzQ29uc3QgPSBbXHJcbiAgJ2FiaWxpdHknLFxyXG4gICduYW1lJyxcclxuICAnc291cmNlJyxcclxuICAndGFyZ2V0JyxcclxuICAnbGluZScsXHJcbl0gYXMgY29uc3Q7XHJcbmV4cG9ydCBjb25zdCBrZXlzVGhhdFJlcXVpcmVUcmFuc2xhdGlvbjogcmVhZG9ubHkgc3RyaW5nW10gPSBrZXlzVGhhdFJlcXVpcmVUcmFuc2xhdGlvbkFzQ29uc3Q7XHJcbmV4cG9ydCB0eXBlIEtleXNUaGF0UmVxdWlyZVRyYW5zbGF0aW9uID0gdHlwZW9mIGtleXNUaGF0UmVxdWlyZVRyYW5zbGF0aW9uQXNDb25zdFtudW1iZXJdO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdhbWVMb2dDb2RlcyA9IHtcclxuICBlY2hvOiAnMDAzOCcsXHJcbiAgZGlhbG9nOiAnMDA0NCcsXHJcbiAgbWVzc2FnZTogJzA4MzknLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuY29uc3QgZGVmYXVsdFBhcmFtcyA9IDxcclxuICBUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzLFxyXG4gIFYgZXh0ZW5kcyBMb2dEZWZpbml0aW9uVmVyc2lvbnMsXHJcbj4odHlwZTogVCwgdmVyc2lvbjogViwgaW5jbHVkZT86IHN0cmluZ1tdKTogUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj4gPT4ge1xyXG4gIGNvbnN0IGxvZ1R5cGUgPSBsb2dEZWZpbml0aW9uc1ZlcnNpb25zW3ZlcnNpb25dW3R5cGVdO1xyXG4gIGlmIChpbmNsdWRlID09PSB1bmRlZmluZWQpIHtcclxuICAgIGluY2x1ZGUgPSBPYmplY3Qua2V5cyhsb2dUeXBlLmZpZWxkcyk7XHJcbiAgICBpZiAoJ3JlcGVhdGluZ0ZpZWxkcycgaW4gbG9nVHlwZSkge1xyXG4gICAgICBpbmNsdWRlLnB1c2gobG9nVHlwZS5yZXBlYXRpbmdGaWVsZHMubGFiZWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFyYW1zOiB7XHJcbiAgICBbaW5kZXg6IG51bWJlcl06IHtcclxuICAgICAgZmllbGQ6IHN0cmluZztcclxuICAgICAgdmFsdWU/OiBzdHJpbmc7XHJcbiAgICAgIG9wdGlvbmFsOiBib29sZWFuO1xyXG4gICAgICByZXBlYXRpbmc/OiBib29sZWFuO1xyXG4gICAgICByZXBlYXRpbmdLZXlzPzogc3RyaW5nW107XHJcbiAgICAgIHNvcnRLZXlzPzogYm9vbGVhbjtcclxuICAgICAgcHJpbWFyeUtleT86IHN0cmluZztcclxuICAgICAgcG9zc2libGVLZXlzPzogc3RyaW5nW107XHJcbiAgICB9O1xyXG4gIH0gPSB7fTtcclxuICBjb25zdCBmaXJzdE9wdGlvbmFsRmllbGQgPSBsb2dUeXBlLmZpcnN0T3B0aW9uYWxGaWVsZDtcclxuXHJcbiAgZm9yIChjb25zdCBbcHJvcCwgaW5kZXhdIG9mIE9iamVjdC5lbnRyaWVzKGxvZ1R5cGUuZmllbGRzKSkge1xyXG4gICAgaWYgKCFpbmNsdWRlLmluY2x1ZGVzKHByb3ApKVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIGNvbnN0IHBhcmFtOiB7IGZpZWxkOiBzdHJpbmc7IHZhbHVlPzogc3RyaW5nOyBvcHRpb25hbDogYm9vbGVhbjsgcmVwZWF0aW5nPzogYm9vbGVhbiB9ID0ge1xyXG4gICAgICBmaWVsZDogcHJvcCxcclxuICAgICAgb3B0aW9uYWw6IGZpcnN0T3B0aW9uYWxGaWVsZCAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID49IGZpcnN0T3B0aW9uYWxGaWVsZCxcclxuICAgIH07XHJcbiAgICBpZiAocHJvcCA9PT0gJ3R5cGUnKVxyXG4gICAgICBwYXJhbS52YWx1ZSA9IGxvZ1R5cGUudHlwZTtcclxuXHJcbiAgICBwYXJhbXNbaW5kZXhdID0gcGFyYW07XHJcbiAgfVxyXG5cclxuICBpZiAoJ3JlcGVhdGluZ0ZpZWxkcycgaW4gbG9nVHlwZSAmJiBpbmNsdWRlLmluY2x1ZGVzKGxvZ1R5cGUucmVwZWF0aW5nRmllbGRzLmxhYmVsKSkge1xyXG4gICAgcGFyYW1zW2xvZ1R5cGUucmVwZWF0aW5nRmllbGRzLnN0YXJ0aW5nSW5kZXhdID0ge1xyXG4gICAgICBmaWVsZDogbG9nVHlwZS5yZXBlYXRpbmdGaWVsZHMubGFiZWwsXHJcbiAgICAgIG9wdGlvbmFsOiBmaXJzdE9wdGlvbmFsRmllbGQgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIGxvZ1R5cGUucmVwZWF0aW5nRmllbGRzLnN0YXJ0aW5nSW5kZXggPj0gZmlyc3RPcHRpb25hbEZpZWxkLFxyXG4gICAgICByZXBlYXRpbmc6IHRydWUsXHJcbiAgICAgIHJlcGVhdGluZ0tleXM6IFsuLi5sb2dUeXBlLnJlcGVhdGluZ0ZpZWxkcy5uYW1lc10sXHJcbiAgICAgIHNvcnRLZXlzOiBsb2dUeXBlLnJlcGVhdGluZ0ZpZWxkcy5zb3J0S2V5cyxcclxuICAgICAgcHJpbWFyeUtleTogbG9nVHlwZS5yZXBlYXRpbmdGaWVsZHMucHJpbWFyeUtleSxcclxuICAgICAgcG9zc2libGVLZXlzOiBbLi4ubG9nVHlwZS5yZXBlYXRpbmdGaWVsZHMucG9zc2libGVLZXlzXSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGFyYW1zIGFzIFBhcnRpYWw8UGFyc2VIZWxwZXJGaWVsZHM8VD4+O1xyXG59O1xyXG5cclxudHlwZSBSZXBlYXRpbmdGaWVsZHNNYXA8XHJcbiAgVEJhc2UgZXh0ZW5kcyBMb2dEZWZpbml0aW9uVHlwZXMsXHJcbiAgVEtleSBleHRlbmRzIFJlcGVhdGluZ0ZpZWxkc1R5cGVzID0gVEJhc2UgZXh0ZW5kcyBSZXBlYXRpbmdGaWVsZHNUeXBlcyA/IFRCYXNlIDogbmV2ZXIsXHJcbj4gPSB7XHJcbiAgW25hbWUgaW4gUmVwZWF0aW5nRmllbGRzRGVmaW5pdGlvbnNbVEtleV1bJ3JlcGVhdGluZ0ZpZWxkcyddWyduYW1lcyddW251bWJlcl1dOlxyXG4gICAgfCBzdHJpbmdcclxuICAgIHwgc3RyaW5nW107XHJcbn1bXTtcclxuXHJcbnR5cGUgUmVwZWF0aW5nRmllbGRzTWFwVHlwZUNoZWNrPFxyXG4gIFRCYXNlIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzLFxyXG4gIEYgZXh0ZW5kcyBrZXlvZiBOZXRGaWVsZHNbVEJhc2VdLFxyXG4gIFRLZXkgZXh0ZW5kcyBSZXBlYXRpbmdGaWVsZHNUeXBlcyA9IFRCYXNlIGV4dGVuZHMgUmVwZWF0aW5nRmllbGRzVHlwZXMgPyBUQmFzZSA6IG5ldmVyLFxyXG4+ID0gRiBleHRlbmRzIFJlcGVhdGluZ0ZpZWxkc0RlZmluaXRpb25zW1RLZXldWydyZXBlYXRpbmdGaWVsZHMnXVsnbGFiZWwnXVxyXG4gID8gUmVwZWF0aW5nRmllbGRzTWFwPFRLZXk+IDpcclxuICBuZXZlcjtcclxuXHJcbnR5cGUgUmVwZWF0aW5nRmllbGRzTWFwVHlwZTxcclxuICBUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzLFxyXG4gIEYgZXh0ZW5kcyBrZXlvZiBOZXRGaWVsZHNbVF0sXHJcbj4gPSBUIGV4dGVuZHMgUmVwZWF0aW5nRmllbGRzVHlwZXMgPyBSZXBlYXRpbmdGaWVsZHNNYXBUeXBlQ2hlY2s8VCwgRj5cclxuICA6IG5ldmVyO1xyXG5cclxudHlwZSBQYXJzZUhlbHBlclR5cGU8VCBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcz4gPVxyXG4gICYge1xyXG4gICAgW2ZpZWxkIGluIGtleW9mIE5ldEZpZWxkc1tUXV0/OiBzdHJpbmcgfCByZWFkb25seSBzdHJpbmdbXSB8IFJlcGVhdGluZ0ZpZWxkc01hcFR5cGU8VCwgZmllbGQ+O1xyXG4gIH1cclxuICAmIHsgY2FwdHVyZT86IGJvb2xlYW4gfTtcclxuXHJcbmNvbnN0IGlzUmVwZWF0aW5nRmllbGQgPSA8XHJcbiAgVCBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcyxcclxuPihcclxuICByZXBlYXRpbmc6IGJvb2xlYW4gfCB1bmRlZmluZWQsXHJcbiAgdmFsdWU6IHN0cmluZyB8IHJlYWRvbmx5IHN0cmluZ1tdIHwgUmVwZWF0aW5nRmllbGRzTWFwPFQ+IHwgdW5kZWZpbmVkLFxyXG4pOiB2YWx1ZSBpcyBSZXBlYXRpbmdGaWVsZHNNYXA8VD4gPT4ge1xyXG4gIGlmIChyZXBlYXRpbmcgIT09IHRydWUpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgLy8gQWxsb3cgZXhjbHVkaW5nIHRoZSBmaWVsZCB0byBtYXRjaCBmb3IgZXh0cmFjdGlvblxyXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSlcclxuICAgIHJldHVybiBmYWxzZTtcclxuICBmb3IgKGNvbnN0IGUgb2YgdmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgZSAhPT0gJ29iamVjdCcpXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5jb25zdCBwYXJzZUhlbHBlciA9IDxUIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzPihcclxuICBwYXJhbXM6IFBhcnNlSGVscGVyVHlwZTxUPiB8IHVuZGVmaW5lZCxcclxuICBmdW5jTmFtZTogc3RyaW5nLFxyXG4gIGZpZWxkczogUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj4sXHJcbik6IENhY3Rib3RCYXNlUmVnRXhwPFQ+ID0+IHtcclxuICBwYXJhbXMgPSBwYXJhbXMgPz8ge307XHJcbiAgY29uc3QgdmFsaWRGaWVsZHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIGZvciAoY29uc3QgaW5kZXggaW4gZmllbGRzKSB7XHJcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpbmRleF07XHJcbiAgICBpZiAoZmllbGQpXHJcbiAgICAgIHZhbGlkRmllbGRzLnB1c2goZmllbGQuZmllbGQpO1xyXG4gIH1cclxuXHJcbiAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIGZ1bmNOYW1lLCBbJ2NhcHR1cmUnLCAuLi52YWxpZEZpZWxkc10pO1xyXG5cclxuICAvLyBGaW5kIHRoZSBsYXN0IGtleSB3ZSBjYXJlIGFib3V0LCBzbyB3ZSBjYW4gc2hvcnRlbiB0aGUgcmVnZXggaWYgbmVlZGVkLlxyXG4gIGNvbnN0IGNhcHR1cmUgPSBSZWdleGVzLnRydWVJZlVuZGVmaW5lZChwYXJhbXMuY2FwdHVyZSk7XHJcbiAgY29uc3QgZmllbGRLZXlzID0gT2JqZWN0LmtleXMoZmllbGRzKS5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhKSAtIHBhcnNlSW50KGIpKTtcclxuICBsZXQgbWF4S2V5U3RyOiBzdHJpbmc7XHJcbiAgaWYgKGNhcHR1cmUpIHtcclxuICAgIGNvbnN0IGtleXM6IEV4dHJhY3Q8a2V5b2YgTmV0RmllbGRzUmV2ZXJzZVtUXSwgc3RyaW5nPltdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpXHJcbiAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgbGV0IHRtcEtleSA9IGtleXMucG9wKCk7XHJcbiAgICBpZiAodG1wS2V5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgbWF4S2V5U3RyID0gZmllbGRLZXlzW2ZpZWxkS2V5cy5sZW5ndGggLSAxXSA/PyAnMCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aGlsZSAoXHJcbiAgICAgICAgZmllbGRzW3RtcEtleV0/Lm9wdGlvbmFsICYmXHJcbiAgICAgICAgISgoZmllbGRzW3RtcEtleV0/LmZpZWxkID8/ICcnKSBpbiBwYXJhbXMpXHJcbiAgICAgIClcclxuICAgICAgICB0bXBLZXkgPSBrZXlzLnBvcCgpO1xyXG4gICAgICBtYXhLZXlTdHIgPSB0bXBLZXkgPz8gJzAnO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBtYXhLZXlTdHIgPSAnMCc7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZHMpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZHNba2V5XSA/PyB7fTtcclxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGZpZWxkc1trZXldPy5maWVsZDtcclxuICAgICAgaWYgKGZpZWxkTmFtZSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkTmFtZSBpbiBwYXJhbXMpXHJcbiAgICAgICAgbWF4S2V5U3RyID0ga2V5O1xyXG4gICAgfVxyXG4gIH1cclxuICBjb25zdCBtYXhLZXkgPSBwYXJzZUludChtYXhLZXlTdHIpO1xyXG5cclxuICAvLyBGb3IgdGVzdGluZywgaXQncyB1c2VmdWwgdG8ga25vdyBpZiB0aGlzIGlzIGEgcmVnZXggdGhhdCByZXF1aXJlc1xyXG4gIC8vIHRyYW5zbGF0aW9uLiAgV2UgdGVzdCB0aGlzIGJ5IHNlZWluZyBpZiB0aGVyZSBhcmUgYW55IHNwZWNpZmllZFxyXG4gIC8vIGZpZWxkcywgYW5kIGlmIHNvLCBpbnNlcnRpbmcgYSBtYWdpYyBzdHJpbmcgdGhhdCB3ZSBjYW4gZGV0ZWN0LlxyXG4gIC8vIFRoaXMgbGV0cyB1cyBkaWZmZXJlbnRpYXRlIGJldHdlZW4gXCJyZWdleCB0aGF0IHNob3VsZCBiZSB0cmFuc2xhdGVkXCJcclxuICAvLyBlLmcuIGEgcmVnZXggd2l0aCBgdGFyZ2V0YCBzcGVjaWZpZWQsIGFuZCBcInJlZ2V4IHRoYXQgc2hvdWxkbid0XCJcclxuICAvLyBlLmcuIGEgZ2FpbnMgZWZmZWN0IHdpdGgganVzdCBlZmZlY3RJZCBzcGVjaWZpZWQuXHJcbiAgY29uc3QgdHJhbnNQYXJhbXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpLmZpbHRlcigoaykgPT4ga2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb24uaW5jbHVkZXMoaykpO1xyXG4gIGNvbnN0IG5lZWRzVHJhbnNsYXRpb25zID0gTmV0UmVnZXhlcy5mbGFnVHJhbnNsYXRpb25zTmVlZGVkICYmIHRyYW5zUGFyYW1zLmxlbmd0aCA+IDA7XHJcblxyXG4gIC8vIEJ1aWxkIHRoZSByZWdleCBmcm9tIHRoZSBmaWVsZHMuXHJcbiAgbGV0IHN0ciA9IG5lZWRzVHJhbnNsYXRpb25zID8gbWFnaWNUcmFuc2xhdGlvblN0cmluZyA6ICdeJztcclxuICBsZXQgbGFzdEtleSA9IC0xO1xyXG4gIGZvciAoY29uc3Qga2V5U3RyIGluIGZpZWxkcykge1xyXG4gICAgY29uc3Qga2V5ID0gcGFyc2VJbnQoa2V5U3RyKTtcclxuICAgIC8vIEZpbGwgaW4gYmxhbmtzLlxyXG4gICAgY29uc3QgbWlzc2luZ0ZpZWxkcyA9IGtleSAtIGxhc3RLZXkgLSAxO1xyXG4gICAgaWYgKG1pc3NpbmdGaWVsZHMgPT09IDEpXHJcbiAgICAgIHN0ciArPSAnXFxcXHl7TmV0RmllbGR9JztcclxuICAgIGVsc2UgaWYgKG1pc3NpbmdGaWVsZHMgPiAxKVxyXG4gICAgICBzdHIgKz0gYFxcXFx5e05ldEZpZWxkfXske21pc3NpbmdGaWVsZHN9fWA7XHJcbiAgICBsYXN0S2V5ID0ga2V5O1xyXG5cclxuICAgIGNvbnN0IHZhbHVlID0gZmllbGRzW2tleVN0cl07XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JylcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Z1bmNOYW1lfTogaW52YWxpZCB2YWx1ZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XHJcblxyXG4gICAgY29uc3QgZmllbGROYW1lID0gdmFsdWUuZmllbGQ7XHJcbiAgICBjb25zdCBkZWZhdWx0RmllbGRWYWx1ZSA9IHZhbHVlLnZhbHVlPy50b1N0cmluZygpID8/IG1hdGNoRGVmYXVsdDtcclxuICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBwYXJhbXNbZmllbGROYW1lXTtcclxuXHJcbiAgICBpZiAoaXNSZXBlYXRpbmdGaWVsZChmaWVsZHNba2V5U3RyXT8ucmVwZWF0aW5nLCBmaWVsZFZhbHVlKSkge1xyXG4gICAgICBsZXQgcmVwZWF0aW5nQXJyYXk6IFJlcGVhdGluZ0ZpZWxkc01hcDxUPiB8IHVuZGVmaW5lZCA9IGZpZWxkVmFsdWU7XHJcblxyXG4gICAgICBjb25zdCBzb3J0S2V5cyA9IGZpZWxkc1trZXlTdHJdPy5zb3J0S2V5cztcclxuICAgICAgY29uc3QgcHJpbWFyeUtleSA9IGZpZWxkc1trZXlTdHJdPy5wcmltYXJ5S2V5O1xyXG4gICAgICBjb25zdCBwb3NzaWJsZUtleXMgPSBmaWVsZHNba2V5U3RyXT8ucG9zc2libGVLZXlzO1xyXG5cclxuICAgICAgLy8gcHJpbWFyeUtleSBpcyByZXF1aXJlZCBpZiB0aGlzIGlzIGEgcmVwZWF0aW5nIGZpZWxkIHBlciB0eXBlZGVmIGluIG5ldGxvZ19kZWZzLnRzXHJcbiAgICAgIC8vIFNhbWUgd2l0aCBwb3NzaWJsZUtleXNcclxuICAgICAgaWYgKHByaW1hcnlLZXkgPT09IHVuZGVmaW5lZCB8fCBwb3NzaWJsZUtleXMgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICAvLyBBbGxvdyBzb3J0aW5nIGlmIG5lZWRlZFxyXG4gICAgICBpZiAoc29ydEtleXMpIHtcclxuICAgICAgICAvLyBBbHNvIHNvcnQgb3VyIHZhbGlkIGtleXMgbGlzdFxyXG4gICAgICAgIHBvc3NpYmxlS2V5cy5zb3J0KChsZWZ0LCByaWdodCkgPT4gbGVmdC50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUocmlnaHQudG9Mb3dlckNhc2UoKSkpO1xyXG4gICAgICAgIGlmIChyZXBlYXRpbmdBcnJheSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXBlYXRpbmdBcnJheSA9IFsuLi5yZXBlYXRpbmdBcnJheV0uc29ydChcclxuICAgICAgICAgICAgKGxlZnQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCByaWdodDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIFdlIGNoZWNrIHRoZSB2YWxpZGl0eSBvZiBsZWZ0L3JpZ2h0IGJlY2F1c2UgdGhleSdyZSB1c2VyLXN1cHBsaWVkXHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsZWZ0ICE9PSAnb2JqZWN0JyB8fCBsZWZ0W3ByaW1hcnlLZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8gdHJpZ2dlcjonLCBsZWZ0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25zdCBsZWZ0VmFsdWUgPSBsZWZ0W3ByaW1hcnlLZXldO1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgbGVmdFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhcG9zc2libGVLZXlzPy5pbmNsdWRlcyhsZWZ0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIHRyaWdnZXI6JywgbGVmdCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByaWdodCAhPT0gJ29iamVjdCcgfHwgcmlnaHRbcHJpbWFyeUtleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byB0cmlnZ2VyOicsIHJpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25zdCByaWdodFZhbHVlID0gcmlnaHRbcHJpbWFyeUtleV07XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByaWdodFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhcG9zc2libGVLZXlzPy5pbmNsdWRlcyhyaWdodFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byB0cmlnZ2VyOicsIHJpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm4gbGVmdFZhbHVlLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShyaWdodFZhbHVlLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGFub25SZXBzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9W10gfCB1bmRlZmluZWQgPSByZXBlYXRpbmdBcnJheTtcclxuICAgICAgLy8gTG9vcCBvdmVyIG91ciBwb3NzaWJsZSBrZXlzXHJcbiAgICAgIC8vIEJ1aWxkIGEgcmVnZXggdGhhdCBjYW4gbWF0Y2ggYW55IHBvc3NpYmxlIGtleSB3aXRoIHJlcXVpcmVkIHZhbHVlcyBzdWJzdGl0dXRlZCBpblxyXG4gICAgICBwb3NzaWJsZUtleXMuZm9yRWFjaCgocG9zc2libGVLZXkpID0+IHtcclxuICAgICAgICBjb25zdCByZXAgPSBhbm9uUmVwcz8uZmluZCgocmVwKSA9PiBwcmltYXJ5S2V5IGluIHJlcCAmJiByZXBbcHJpbWFyeUtleV0gPT09IHBvc3NpYmxlS2V5KTtcclxuXHJcbiAgICAgICAgbGV0IGZpZWxkUmVnZXggPSAnJztcclxuICAgICAgICAvLyBSYXRoZXIgdGhhbiBsb29waW5nIG92ZXIgdGhlIGtleXMgZGVmaW5lZCBvbiB0aGUgb2JqZWN0LFxyXG4gICAgICAgIC8vIGxvb3Agb3ZlciB0aGUgYmFzZSB0eXBlIGRlZidzIGtleXMuIFRoaXMgZW5mb3JjZXMgdGhlIGNvcnJlY3Qgb3JkZXIuXHJcbiAgICAgICAgZmllbGRzW2tleVN0cl0/LnJlcGVhdGluZ0tleXM/LmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgbGV0IHZhbCA9IHJlcD8uW2tleV07XHJcbiAgICAgICAgICBpZiAocmVwID09PSB1bmRlZmluZWQgfHwgIShrZXkgaW4gcmVwKSkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgdmFsdWUgZm9yIHRoaXMga2V5XHJcbiAgICAgICAgICAgIC8vIGluc2VydCBhIHBsYWNlaG9sZGVyLCB1bmxlc3MgaXQncyB0aGUgcHJpbWFyeSBrZXlcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gcHJpbWFyeUtleSlcclxuICAgICAgICAgICAgICB2YWwgPSBwb3NzaWJsZUtleTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgIHZhbCA9IG1hdGNoRGVmYXVsdDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsKSlcclxuICAgICAgICAgICAgICB2YWwgPSBtYXRjaERlZmF1bHQ7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbC5sZW5ndGggPCAxKVxyXG4gICAgICAgICAgICAgIHZhbCA9IG1hdGNoRGVmYXVsdDtcclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsLnNvbWUoKHYpID0+IHR5cGVvZiB2ICE9PSAnc3RyaW5nJykpXHJcbiAgICAgICAgICAgICAgdmFsID0gbWF0Y2hEZWZhdWx0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZmllbGRSZWdleCArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShcclxuICAgICAgICAgICAga2V5ID09PSBwcmltYXJ5S2V5ID8gZmFsc2UgOiBjYXB0dXJlLFxyXG4gICAgICAgICAgICAvLyBBbGwgY2FwdHVyaW5nIGdyb3VwcyBhcmUgYGZpZWxkTmFtZWAgKyBgcG9zc2libGVLZXlgLCBlLmcuIGBwYWlySXNDYXN0aW5nMWBcclxuICAgICAgICAgICAgZmllbGROYW1lICsgcG9zc2libGVLZXksXHJcbiAgICAgICAgICAgIHZhbCxcclxuICAgICAgICAgICAgZGVmYXVsdEZpZWxkVmFsdWUsXHJcbiAgICAgICAgICApICtcclxuICAgICAgICAgICAgc2VwYXJhdG9yO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoZmllbGRSZWdleC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBzdHIgKz0gYCg/OiR7ZmllbGRSZWdleH0pJHtyZXAgIT09IHVuZGVmaW5lZCA/ICcnIDogJz8nfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoZmllbGRzW2tleVN0cl0/LnJlcGVhdGluZykge1xyXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgcmVwZWF0aW5nIGZpZWxkIGJ1dCB0aGUgYWN0dWFsIHZhbHVlIGlzIGVtcHR5IG9yIG90aGVyd2lzZSBpbnZhbGlkLFxyXG4gICAgICAvLyBkb24ndCBwcm9jZXNzIGZ1cnRoZXIuIFdlIGNhbid0IHVzZSBgY29udGludWVgIGluIHRoZSBhYm92ZSBibG9jayBiZWNhdXNlIHRoYXRcclxuICAgICAgLy8gd291bGQgc2tpcCB0aGUgZWFybHktb3V0IGJyZWFrIGF0IHRoZSBlbmQgb2YgdGhlIGxvb3AuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZmllbGROYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdHIgKz0gUmVnZXhlcy5tYXliZUNhcHR1cmUoXHJcbiAgICAgICAgICAvLyBtb3JlIGFjY3VyYXRlIHR5cGUgaW5zdGVhZCBvZiBgYXNgIGNhc3RcclxuICAgICAgICAgIC8vIG1heWJlIHRoaXMgZnVuY3Rpb24gbmVlZHMgYSByZWZhY3RvcmluZ1xyXG4gICAgICAgICAgY2FwdHVyZSxcclxuICAgICAgICAgIGZpZWxkTmFtZSxcclxuICAgICAgICAgIGZpZWxkVmFsdWUsXHJcbiAgICAgICAgICBkZWZhdWx0RmllbGRWYWx1ZSxcclxuICAgICAgICApICtcclxuICAgICAgICAgIHNlcGFyYXRvcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzdHIgKz0gZGVmYXVsdEZpZWxkVmFsdWUgKyBzZXBhcmF0b3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTdG9wIGlmIHdlJ3JlIG5vdCBjYXB0dXJpbmcgYW5kIGRvbid0IGNhcmUgYWJvdXQgZnV0dXJlIGZpZWxkcy5cclxuICAgIGlmIChrZXkgPj0gbWF4S2V5KVxyXG4gICAgICBicmVhaztcclxuICB9XHJcbiAgcmV0dXJuIFJlZ2V4ZXMucGFyc2Uoc3RyKSBhcyBDYWN0Ym90QmFzZVJlZ0V4cDxUPjtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBidWlsZFJlZ2V4ID0gPFQgZXh0ZW5kcyBrZXlvZiBOZXRQYXJhbXM+KFxyXG4gIHR5cGU6IFQsXHJcbiAgcGFyYW1zPzogUGFyc2VIZWxwZXJUeXBlPFQ+LFxyXG4pOiBDYWN0Ym90QmFzZVJlZ0V4cDxUPiA9PiB7XHJcbiAgcmV0dXJuIHBhcnNlSGVscGVyKHBhcmFtcywgdHlwZSwgZGVmYXVsdFBhcmFtcyh0eXBlLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5ldFJlZ2V4ZXMge1xyXG4gIHN0YXRpYyBsb2dWZXJzaW9uOiBMb2dEZWZpbml0aW9uVmVyc2lvbnMgPSAnbGF0ZXN0JztcclxuXHJcbiAgc3RhdGljIGZsYWdUcmFuc2xhdGlvbnNOZWVkZWQgPSBmYWxzZTtcclxuICBzdGF0aWMgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZCh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgTmV0UmVnZXhlcy5mbGFnVHJhbnNsYXRpb25zTmVlZGVkID0gdmFsdWU7XHJcbiAgfVxyXG4gIHN0YXRpYyBkb2VzTmV0UmVnZXhOZWVkVHJhbnNsYXRpb24ocmVnZXg6IFJlZ0V4cCB8IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgLy8gTmVlZCB0byBgc2V0RmxhZ1RyYW5zbGF0aW9uc05lZWRlZGAgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cclxuICAgIGNvbnNvbGUuYXNzZXJ0KE5ldFJlZ2V4ZXMuZmxhZ1RyYW5zbGF0aW9uc05lZWRlZCk7XHJcbiAgICBjb25zdCBzdHIgPSB0eXBlb2YgcmVnZXggPT09ICdzdHJpbmcnID8gcmVnZXggOiByZWdleC5zb3VyY2U7XHJcbiAgICByZXR1cm4gISFtYWdpY1N0cmluZ1JlZ2V4LmV4ZWMoc3RyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTIwLTB4MTQtbmV0d29ya3N0YXJ0c2Nhc3RpbmdcclxuICAgKi9cclxuICBzdGF0aWMgc3RhcnRzVXNpbmcocGFyYW1zPzogTmV0UGFyYW1zWydTdGFydHNVc2luZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1N0YXJ0c1VzaW5nJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1N0YXJ0c1VzaW5nJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTIxLTB4MTUtbmV0d29ya2FiaWxpdHlcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMi0weDE2LW5ldHdvcmthb2VhYmlsaXR5XHJcbiAgICovXHJcbiAgc3RhdGljIGFiaWxpdHkocGFyYW1zPzogTmV0UGFyYW1zWydBYmlsaXR5J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWJpbGl0eSc+IHtcclxuICAgIHJldHVybiBwYXJzZUhlbHBlcihwYXJhbXMsICdBYmlsaXR5Jywge1xyXG4gICAgICAuLi5kZWZhdWx0UGFyYW1zKCdBYmlsaXR5JywgTmV0UmVnZXhlcy5sb2dWZXJzaW9uKSxcclxuICAgICAgLy8gT3ZlcnJpZGUgdHlwZVxyXG4gICAgICAwOiB7IGZpZWxkOiAndHlwZScsIHZhbHVlOiAnMlsxMl0nLCBvcHRpb25hbDogZmFsc2UgfSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjEtMHgxNS1uZXR3b3JrYWJpbGl0eVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTIyLTB4MTYtbmV0d29ya2FvZWFiaWxpdHlcclxuICAgKlxyXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgYWJpbGl0eWAgaW5zdGVhZFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYmlsaXR5RnVsbChwYXJhbXM/OiBOZXRQYXJhbXNbJ0FiaWxpdHknXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdBYmlsaXR5Jz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWJpbGl0eShwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjctMHgxYi1uZXR3b3JrdGFyZ2V0aWNvbi1oZWFkLW1hcmtlclxyXG4gICAqL1xyXG4gIHN0YXRpYyBoZWFkTWFya2VyKHBhcmFtcz86IE5ldFBhcmFtc1snSGVhZE1hcmtlciddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0hlYWRNYXJrZXInPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnSGVhZE1hcmtlcicsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMy0weDAzLWFkZGNvbWJhdGFudFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhZGRlZENvbWJhdGFudChwYXJhbXM/OiBOZXRQYXJhbXNbJ0FkZGVkQ29tYmF0YW50J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWRkZWRDb21iYXRhbnQnPiB7XHJcbiAgICByZXR1cm4gcGFyc2VIZWxwZXIoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ0FkZGVkQ29tYmF0YW50JyxcclxuICAgICAgZGVmYXVsdFBhcmFtcygnQWRkZWRDb21iYXRhbnQnLCBOZXRSZWdleGVzLmxvZ1ZlcnNpb24pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAzLTB4MDMtYWRkY29tYmF0YW50XHJcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBhZGRlZENvbWJhdGFudGAgaW5zdGVhZFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhZGRlZENvbWJhdGFudEZ1bGwoXHJcbiAgICBwYXJhbXM/OiBOZXRQYXJhbXNbJ0FkZGVkQ29tYmF0YW50J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0FkZGVkQ29tYmF0YW50Jz4ge1xyXG4gICAgcmV0dXJuIE5ldFJlZ2V4ZXMuYWRkZWRDb21iYXRhbnQocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTA0LTB4MDQtcmVtb3ZlY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIHJlbW92aW5nQ29tYmF0YW50KFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydSZW1vdmVkQ29tYmF0YW50J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1JlbW92ZWRDb21iYXRhbnQnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnUmVtb3ZlZENvbWJhdGFudCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNi0weDFhLW5ldHdvcmtidWZmXHJcbiAgICovXHJcbiAgc3RhdGljIGdhaW5zRWZmZWN0KHBhcmFtcz86IE5ldFBhcmFtc1snR2FpbnNFZmZlY3QnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYWluc0VmZmVjdCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdHYWluc0VmZmVjdCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcmVmZXIgZ2FpbnNFZmZlY3Qgb3ZlciB0aGlzIGZ1bmN0aW9uIHVubGVzcyB5b3UgcmVhbGx5IG5lZWQgZXh0cmEgZGF0YS5cclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zOC0weDI2LW5ldHdvcmtzdGF0dXNlZmZlY3RzXHJcbiAgICovXHJcbiAgc3RhdGljIHN0YXR1c0VmZmVjdEV4cGxpY2l0KFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydTdGF0dXNFZmZlY3QnXSxcclxuICApOiBDYWN0Ym90QmFzZVJlZ0V4cDwnU3RhdHVzRWZmZWN0Jz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1N0YXR1c0VmZmVjdCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zMC0weDFlLW5ldHdvcmtidWZmcmVtb3ZlXHJcbiAgICovXHJcbiAgc3RhdGljIGxvc2VzRWZmZWN0KHBhcmFtcz86IE5ldFBhcmFtc1snTG9zZXNFZmZlY3QnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdMb3Nlc0VmZmVjdCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdMb3Nlc0VmZmVjdCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zNS0weDIzLW5ldHdvcmt0ZXRoZXJcclxuICAgKi9cclxuICBzdGF0aWMgdGV0aGVyKHBhcmFtcz86IE5ldFBhcmFtc1snVGV0aGVyJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnVGV0aGVyJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1RldGhlcicsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAndGFyZ2V0JyB3YXMgZGVmZWF0ZWQgYnkgJ3NvdXJjZSdcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNS0weDE5LW5ldHdvcmtkZWF0aFxyXG4gICAqL1xyXG4gIHN0YXRpYyB3YXNEZWZlYXRlZChwYXJhbXM/OiBOZXRQYXJhbXNbJ1dhc0RlZmVhdGVkJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnV2FzRGVmZWF0ZWQnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnV2FzRGVmZWF0ZWQnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjQtMHgxOC1uZXR3b3JrZG90XHJcbiAgICovXHJcbiAgc3RhdGljIG5ldHdvcmtEb1QocGFyYW1zPzogTmV0UGFyYW1zWydOZXR3b3JrRG9UJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTmV0d29ya0RvVCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdOZXR3b3JrRG9UJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAwLTB4MDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBlY2hvKHBhcmFtcz86IE9taXQ8TmV0UGFyYW1zWydHYW1lTG9nJ10sICdjb2RlJz4pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHtcclxuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAndW5kZWZpbmVkJylcclxuICAgICAgcGFyYW1zID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKFxyXG4gICAgICBwYXJhbXMsXHJcbiAgICAgICdFY2hvJyxcclxuICAgICAgWyd0eXBlJywgJ3RpbWVzdGFtcCcsICdjb2RlJywgJ25hbWUnLCAnbGluZScsICdjYXB0dXJlJ10sXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBOZXRSZWdleGVzLmdhbWVMb2coeyAuLi5wYXJhbXMsIGNvZGU6IGdhbWVMb2dDb2Rlcy5lY2hvIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDAtMHgwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGRpYWxvZyhwYXJhbXM/OiBPbWl0PE5ldFBhcmFtc1snR2FtZUxvZyddLCAnY29kZSc+KTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIHBhcmFtcyA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnRGlhbG9nJyxcclxuICAgICAgWyd0eXBlJywgJ3RpbWVzdGFtcCcsICdjb2RlJywgJ25hbWUnLCAnbGluZScsICdjYXB0dXJlJ10sXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBOZXRSZWdleGVzLmdhbWVMb2coeyAuLi5wYXJhbXMsIGNvZGU6IGdhbWVMb2dDb2Rlcy5kaWFsb2cgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMC0weDAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgbWVzc2FnZShwYXJhbXM/OiBPbWl0PE5ldFBhcmFtc1snR2FtZUxvZyddLCAnY29kZSc+KTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIHBhcmFtcyA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnTWVzc2FnZScsXHJcbiAgICAgIFsndHlwZScsICd0aW1lc3RhbXAnLCAnY29kZScsICduYW1lJywgJ2xpbmUnLCAnY2FwdHVyZSddLFxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gTmV0UmVnZXhlcy5nYW1lTG9nKHsgLi4ucGFyYW1zLCBjb2RlOiBnYW1lTG9nQ29kZXMubWVzc2FnZSB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZpZWxkczogY29kZSwgbmFtZSwgbGluZSwgY2FwdHVyZVxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAwLTB4MDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBnYW1lTG9nKHBhcmFtcz86IE5ldFBhcmFtc1snR2FtZUxvZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnR2FtZUxvZycsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMC0weDAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgZ2FtZU5hbWVMb2cocGFyYW1zPzogTmV0UGFyYW1zWydHYW1lTG9nJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHtcclxuICAgIC8vIEJhY2t3YXJkcyBjb21wYXRhYmlsaXR5LlxyXG4gICAgcmV0dXJuIE5ldFJlZ2V4ZXMuZ2FtZUxvZyhwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMTItMHgwYy1wbGF5ZXJzdGF0c1xyXG4gICAqL1xyXG4gIHN0YXRpYyBzdGF0Q2hhbmdlKHBhcmFtcz86IE5ldFBhcmFtc1snUGxheWVyU3RhdHMnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdQbGF5ZXJTdGF0cyc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdQbGF5ZXJTdGF0cycsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMS0weDAxLWNoYW5nZXpvbmVcclxuICAgKi9cclxuICBzdGF0aWMgY2hhbmdlWm9uZShwYXJhbXM/OiBOZXRQYXJhbXNbJ0NoYW5nZVpvbmUnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdDaGFuZ2Vab25lJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ0NoYW5nZVpvbmUnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMzMtMHgyMS1uZXR3b3JrNmQtYWN0b3ItY29udHJvbFxyXG4gICAqL1xyXG4gIHN0YXRpYyBuZXR3b3JrNmQocGFyYW1zPzogTmV0UGFyYW1zWydBY3RvckNvbnRyb2wnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdBY3RvckNvbnRyb2wnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnQWN0b3JDb250cm9sJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTM0LTB4MjItbmV0d29ya25hbWV0b2dnbGVcclxuICAgKi9cclxuICBzdGF0aWMgbmFtZVRvZ2dsZShwYXJhbXM/OiBOZXRQYXJhbXNbJ05hbWVUb2dnbGUnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdOYW1lVG9nZ2xlJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ05hbWVUb2dnbGUnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtNDAtMHgyOC1tYXBcclxuICAgKi9cclxuICBzdGF0aWMgbWFwKHBhcmFtcz86IE5ldFBhcmFtc1snTWFwJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTWFwJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ01hcCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS00MS0weDI5LXN5c3RlbWxvZ21lc3NhZ2VcclxuICAgKi9cclxuICBzdGF0aWMgc3lzdGVtTG9nTWVzc2FnZShcclxuICAgIHBhcmFtcz86IE5ldFBhcmFtc1snU3lzdGVtTG9nTWVzc2FnZSddLFxyXG4gICk6IENhY3Rib3RCYXNlUmVnRXhwPCdTeXN0ZW1Mb2dNZXNzYWdlJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1N5c3RlbUxvZ01lc3NhZ2UnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjU3LTB4MTAxLW1hcGVmZmVjdFxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXBFZmZlY3QocGFyYW1zPzogTmV0UGFyYW1zWydNYXBFZmZlY3QnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdNYXBFZmZlY3QnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnTWFwRWZmZWN0JywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTI1OC0weDEwMi1mYXRlZGlyZWN0b3JcclxuICAgKi9cclxuICBzdGF0aWMgZmF0ZURpcmVjdG9yKHBhcmFtcz86IE5ldFBhcmFtc1snRmF0ZURpcmVjdG9yJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnRmF0ZURpcmVjdG9yJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ0ZhdGVEaXJlY3RvcicsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNTktMHgxMDMtY2VkaXJlY3RvclxyXG4gICAqL1xyXG4gIHN0YXRpYyBjZURpcmVjdG9yKHBhcmFtcz86IE5ldFBhcmFtc1snQ0VEaXJlY3RvciddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0NFRGlyZWN0b3InPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnQ0VEaXJlY3RvcicsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNjEtMHgxMDUtY29tYmF0YW50bWVtb3J5XHJcbiAgICovXHJcbiAgc3RhdGljIGNvbWJhdGFudE1lbW9yeShcclxuICAgIHBhcmFtcz86IE5ldFBhcmFtc1snQ29tYmF0YW50TWVtb3J5J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0NvbWJhdGFudE1lbW9yeSc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdDb21iYXRhbnRNZW1vcnknLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjYzLTB4MTA3LXN0YXJ0c3VzaW5nZXh0cmFcclxuICAgKi9cclxuICBzdGF0aWMgc3RhcnRzVXNpbmdFeHRyYShcclxuICAgIHBhcmFtcz86IE5ldFBhcmFtc1snU3RhcnRzVXNpbmdFeHRyYSddLFxyXG4gICk6IENhY3Rib3RCYXNlUmVnRXhwPCdTdGFydHNVc2luZ0V4dHJhJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1N0YXJ0c1VzaW5nRXh0cmEnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjY0LTB4MTA4LWFiaWxpdHlleHRyYVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYmlsaXR5RXh0cmEoXHJcbiAgICBwYXJhbXM/OiBOZXRQYXJhbXNbJ0FiaWxpdHlFeHRyYSddLFxyXG4gICk6IENhY3Rib3RCYXNlUmVnRXhwPCdBYmlsaXR5RXh0cmEnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnQWJpbGl0eUV4dHJhJywgcGFyYW1zKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjb21tb25OZXRSZWdleCA9IHtcclxuICAvLyBUT0RPKDYuMik6IHJlbW92ZSA0MDAwMDAxMCBhZnRlciBldmVyeWJvZHkgaXMgb24gNi4yLlxyXG4gIC8vIFRPRE86IG9yIG1heWJlIGtlZXAgYXJvdW5kIGZvciBwbGF5aW5nIG9sZCBsb2cgZmlsZXM/P1xyXG4gIHdpcGU6IE5ldFJlZ2V4ZXMubmV0d29yazZkKHsgY29tbWFuZDogWyc0MDAwMDAxMCcsICc0MDAwMDAwRiddIH0pLFxyXG4gIGNhY3Rib3RXaXBlRWNobzogTmV0UmVnZXhlcy5lY2hvKHsgbGluZTogJ2NhY3Rib3Qgd2lwZS4qPycgfSksXHJcbiAgdXNlcldpcGVFY2hvOiBOZXRSZWdleGVzLmVjaG8oeyBsaW5lOiAnZW5kJyB9KSxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBjb25zdCBidWlsZE5ldFJlZ2V4Rm9yVHJpZ2dlciA9IDxUIGV4dGVuZHMga2V5b2YgTmV0UGFyYW1zPihcclxuICB0eXBlOiBULFxyXG4gIHBhcmFtcz86IE5ldFBhcmFtc1tUXSxcclxuKTogQ2FjdGJvdEJhc2VSZWdFeHA8VD4gPT4ge1xyXG4gIGlmICh0eXBlID09PSAnQWJpbGl0eScpXHJcbiAgICAvLyB0cyBjYW4ndCBuYXJyb3cgVCB0byBgQWJpbGl0eWAgaGVyZSwgbmVlZCBjYXN0aW5nLlxyXG4gICAgcmV0dXJuIE5ldFJlZ2V4ZXMuYWJpbGl0eShwYXJhbXMpIGFzIENhY3Rib3RCYXNlUmVnRXhwPFQ+O1xyXG5cclxuICByZXR1cm4gYnVpbGRSZWdleDxUPih0eXBlLCBwYXJhbXMpO1xyXG59O1xyXG4iLCIvLyBIZWxwZXIgRXJyb3IgZm9yIFR5cGVTY3JpcHQgc2l0dWF0aW9ucyB3aGVyZSB0aGUgcHJvZ3JhbW1lciB0aGlua3MgdGhleVxyXG4vLyBrbm93IGJldHRlciB0aGFuIFR5cGVTY3JpcHQgdGhhdCBzb21lIHNpdHVhdGlvbiB3aWxsIG5ldmVyIG9jY3VyLlxyXG5cclxuLy8gVGhlIGludGVudGlvbiBoZXJlIGlzIHRoYXQgdGhlIHByb2dyYW1tZXIgZG9lcyBub3QgZXhwZWN0IGEgcGFydGljdWxhclxyXG4vLyBiaXQgb2YgY29kZSB0byBoYXBwZW4sIGFuZCBzbyBoYXMgbm90IHdyaXR0ZW4gY2FyZWZ1bCBlcnJvciBoYW5kbGluZy5cclxuLy8gSWYgaXQgZG9lcyBvY2N1ciwgYXQgbGVhc3QgdGhlcmUgd2lsbCBiZSBhbiBlcnJvciBhbmQgd2UgY2FuIGZpZ3VyZSBvdXQgd2h5LlxyXG4vLyBUaGlzIGlzIHByZWZlcmFibGUgdG8gY2FzdGluZyBvciBkaXNhYmxpbmcgVHlwZVNjcmlwdCBhbHRvZ2V0aGVyIGluIG9yZGVyIHRvXHJcbi8vIGF2b2lkIHN5bnRheCBlcnJvcnMuXHJcblxyXG4vLyBPbmUgY29tbW9uIGV4YW1wbGUgaXMgYSByZWdleCwgd2hlcmUgaWYgdGhlIHJlZ2V4IG1hdGNoZXMgdGhlbiBhbGwgb2YgdGhlXHJcbi8vIChub24tb3B0aW9uYWwpIHJlZ2V4IGdyb3VwcyB3aWxsIGFsc28gYmUgdmFsaWQsIGJ1dCBUeXBlU2NyaXB0IGRvZXNuJ3Qga25vdy5cclxuZXhwb3J0IGNsYXNzIFVucmVhY2hhYmxlQ29kZSBleHRlbmRzIEVycm9yIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCdUaGlzIGNvZGUgc2hvdWxkblxcJ3QgYmUgcmVhY2hlZCcpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBGdWxsTG9jYWxlVGV4dCB9IGZyb20gJy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxuLy8gT3V0cHV0IHN0cmluZ3MgZm9yIG5vdyByZXF1aXJlIGEgZmllbGQgZm9yIGV2ZXJ5IGxhbmd1YWdlLCBzbyB0aGlzIGlzIGFcclxuLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIG9uZSBmb3IgbGl0ZXJhbCBudW1iZXJzLlxyXG5jb25zdCBudW1iZXJUb091dHB1dFN0cmluZyA9IGZ1bmN0aW9uKG46IG51bWJlcik6IEZ1bGxMb2NhbGVUZXh0IHtcclxuICBjb25zdCBzdHIgPSBuLnRvU3RyaW5nKCk7XHJcbiAgcmV0dXJuIHtcclxuICAgIGVuOiBzdHIsXHJcbiAgICBkZTogc3RyLFxyXG4gICAgZnI6IHN0cixcclxuICAgIGphOiBzdHIsXHJcbiAgICBjbjogc3RyLFxyXG4gICAga286IHN0cixcclxuICB9O1xyXG59O1xyXG5cclxuLy8gR2VuZXJhbCBndWlkZWxpbmVzOlxyXG4vLyAqIHByb3BlcnR5IG5hbWVzIHNob3VsZCBjbG9zZWx5IG1hdGNoIEVuZ2xpc2ggdGV4dFxyXG4vLyAqIHVzZSBPblBsYXllciBzdWZmaXggZm9yIHRoaW5ncyB3aXRoIGAke3BsYXllcn1gXHJcbi8vICogdXNlIE9uVGFyZ2V0IHN1ZmZpeCBmb3IgdGhpbmdzIHdpdGggYCR7bmFtZX1gXHJcbi8vICogYW55IG90aGVyIHBhcmFtZXRlcnMgKG9mIHdoaWNoIHRoZXJlIGFyZSBub25lLCBjdXJyZW50bHkpIHNob3VsZCB1c2UgY29uc2lzdGVudCBzdWZmaXhlcy5cclxuLy8gKiB0aGUgdmFsdWUgb2YgZWFjaCBwcm9wZXJ0eSBzaG91bGQgYmUgYSBzaW5nbGUgb2JqZWN0IHdpdGggbG9jYWxpemVkIGtleXNcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGFvZToge1xyXG4gICAgZW46ICdhb2UnLFxyXG4gICAgZGU6ICdBb0UnLFxyXG4gICAgZnI6ICdBb0UnLFxyXG4gICAgamE6ICflhajkvZPmlLvmkoMnLFxyXG4gICAgY246ICdBb0UnLFxyXG4gICAga286ICfsoITssrQg6rO16rKpJyxcclxuICB9LFxyXG4gIGJpZ0FvZToge1xyXG4gICAgZW46ICdiaWcgYW9lIScsXHJcbiAgICBkZTogJ0dyb8OfZSBBb0UhJyxcclxuICAgIGZyOiAnR3Jvc3NlIEFvRSAhJyxcclxuICAgIGphOiAn5by35Yqb44Gq5YWo5L2T5pS75pKDJyxcclxuICAgIGNuOiAn5aSnQW9F5Lyk5a6z77yBJyxcclxuICAgIGtvOiAn6rCV7ZWcIOyghOyytCDqs7XqsqkhJyxcclxuICB9LFxyXG4gIGJsZWVkQW9lOiB7XHJcbiAgICBlbjogJ0FvRSArIEJsZWVkJyxcclxuICAgIGRlOiAnQW9FICsgQmx1dHVuZycsXHJcbiAgICBmcjogJ0FvRSArIFNhaWduZW1lbnQnLFxyXG4gICAgamE6ICflhajkvZPmlLvmkoMgKyBEb1QnLFxyXG4gICAgY246ICdBT0UgKyDmtYHooYAnLFxyXG4gICAga286ICfsoITssrQg6rO16rKpICsg64+E7Yq4JyxcclxuICB9LFxyXG4gIHRhbmtCdXN0ZXI6IHtcclxuICAgIGVuOiAnVGFuayBCdXN0ZXInLFxyXG4gICAgZGU6ICdUYW5rIGJ1c3RlcicsXHJcbiAgICBmcjogJ1RhbmsgYnVzdGVyJyxcclxuICAgIGphOiAn44K/44Oz44Kv5by35pS75pKDJyxcclxuICAgIGNuOiAn5Z2m5YWL5q275YiRJyxcclxuICAgIGtvOiAn7YOx67KEJyxcclxuICB9LFxyXG4gIG1pbmlCdXN0ZXI6IHtcclxuICAgIGVuOiAnTWluaSBCdXN0ZXInLFxyXG4gICAgZGU6ICdLbGVpbmVyIFRhbmtidXN0ZXInLFxyXG4gICAgZnI6ICdNaW5pIEJ1c3RlcicsXHJcbiAgICBqYTogJ+OCv+ODs+OCr+aUu+aSgycsXHJcbiAgICBjbjogJ+Wwj+atu+WIkScsXHJcbiAgICBrbzogJ+yVve2VnCDtg7HrsoQnLFxyXG4gIH0sXHJcbiAgdGFua0J1c3Rlck9uUGxheWVyOiB7XHJcbiAgICBlbjogJ1RhbmsgQnVzdGVyIG9uICR7cGxheWVyfScsXHJcbiAgICBkZTogJ1RhbmsgYnVzdGVyIGF1ZiAke3BsYXllcn0nLFxyXG4gICAgZnI6ICdUYW5rIGJ1c3RlciBzdXIgJHtwbGF5ZXJ9JyxcclxuICAgIGphOiAnJHtwbGF5ZXJ944Gr5by35pS75pKDJyxcclxuICAgIGNuOiAn5q275YiRIOeCuSAke3BsYXllcn0nLFxyXG4gICAga286ICdcIiR7cGxheWVyfVwiIO2DseuyhCcsXHJcbiAgfSxcclxuICB0YW5rQnVzdGVyT25Zb3U6IHtcclxuICAgIGVuOiAnVGFuayBCdXN0ZXIgb24gWU9VJyxcclxuICAgIGRlOiAnVGFuayBidXN0ZXIgYXVmIERJUicsXHJcbiAgICBmcjogJ1RhbmsgYnVzdGVyIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr5by35pS75pKDJyxcclxuICAgIGNuOiAn5q275YiR54K55ZCNJyxcclxuICAgIGtvOiAn7YOx67KEIOuMgOyDgeyekCcsXHJcbiAgfSxcclxuICAvLyB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSB0YW5rYnVzdGVycyBnb2luZyBvdXRcclxuICB0YW5rQnVzdGVyczoge1xyXG4gICAgZW46ICdUYW5rIEJ1c3RlcnMnLFxyXG4gICAgZGU6ICdUYW5rIGJ1c3RlcnMnLFxyXG4gICAgZnI6ICdUYW5rIGJ1c3RlcnMnLFxyXG4gICAgamE6ICfjgr/jg7Pjgq/lvLfmlLvmkoMnLFxyXG4gICAgY246ICflnablhYvmrbvliJEnLFxyXG4gICAga286ICftg7HrsoQnLFxyXG4gIH0sXHJcbiAgdGFua0NsZWF2ZToge1xyXG4gICAgZW46ICdUYW5rIGNsZWF2ZScsXHJcbiAgICBkZTogJ1RhbmsgQ2xlYXZlJyxcclxuICAgIGZyOiAnVGFuayBjbGVhdmUnLFxyXG4gICAgamE6ICfjgr/jg7Pjgq/nr4Tlm7LmlLvmkoMnLFxyXG4gICAgY246ICfpobrliognLFxyXG4gICAga286ICfqtJHsl60g7YOx67KEJyxcclxuICB9LFxyXG4gIHRhbmtCdXN0ZXJDbGVhdmVzOiB7XHJcbiAgICBlbjogJ1RhbmsgQnVzdGVyIENsZWF2ZXMnLFxyXG4gICAgZGU6ICdUYW5rYnVzdGVyIENsZWF2ZXMnLFxyXG4gICAgZnI6ICdUYW5rYnVzdGVyIGNsZWF2ZXMnLFxyXG4gICAgamE6ICdNVOODu1NU5ZCM5pmC56+E5Zuy5pS75pKDJyxcclxuICAgIGNuOiAn5Y+MVOaJh+W9ouatu+WIkScsXHJcbiAgICBrbzogJ+uPmeyLnCDqtJHsl60g7YOx67KEJyxcclxuICB9LFxyXG4gIHRhbmtCdXN0ZXJDbGVhdmVzT25Zb3U6IHtcclxuICAgIGVuOiAnVGFuayBDbGVhdmVzIG9uIFlPVScsXHJcbiAgICBkZTogJ1RhbmsgQ2xlYXZlcyBhdWYgRElSJyxcclxuICAgIGZyOiAnVGFuayBjbGVhdmVzIHN1ciBWT1VTJyxcclxuICAgIGphOiAnTVTjg7tTVOWQjOaZguevhOWbsuaUu+aSgyjoh6rliIblr77osaEpJyxcclxuICAgIGNuOiAn5Z2m5YWL6aG65YqI54K55ZCNJyxcclxuICAgIGtvOiAn6rSR7JetIO2DseuyhCDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAgYXZvaWRUYW5rQ2xlYXZlOiB7XHJcbiAgICBlbjogJ0F2b2lkIHRhbmsgY2xlYXZlJyxcclxuICAgIGRlOiAnVGFuayBDbGVhdmUgYXVzd2VpY2hlbicsXHJcbiAgICBmcjogJ8OJdml0ZXogbGUgdGFuayBjbGVhdmUnLFxyXG4gICAgamE6ICfjgr/jg7Pjgq/nr4Tlm7LmlLvmkoPjgpLpgb/jgZHjgosnLFxyXG4gICAgY246ICfov5znprvpobrliognLFxyXG4gICAga286ICfqtJHsl60g7YOx67KEIO2UvO2VmOq4sCcsXHJcbiAgfSxcclxuICBhdm9pZFRhbmtDbGVhdmVzOiB7XHJcbiAgICBlbjogJ0F2b2lkIFRhbmsgQ2xlYXZlcycsXHJcbiAgICBkZTogJ1RhbmtidXN0ZXIgQ2xlYXZlcyBhdXN3ZWljaGVuJyxcclxuICAgIGZyOiAnw4l2aXRleiBsZXMgY2xlYXZlcyAodGFua2J1c3RlcnMpJyxcclxuICAgIGphOiAn56+E5Zuy5pS75pKD44KS6YG/44GR44GmJyxcclxuICAgIGNuOiAn6Lqy6YG/5Y+MVOaJh+W9ouatu+WIkScsXHJcbiAgICBrbzogJ+q0keyXrSDtg7HrsoQg7ZS87ZWY6riwJyxcclxuICB9LFxyXG4gIHRhbmtDbGVhdmVPbllvdToge1xyXG4gICAgZW46ICdUYW5rIGNsZWF2ZSBvbiBZT1UnLFxyXG4gICAgZGU6ICdUYW5rIENsZWF2ZSBhdWQgRElSJyxcclxuICAgIGZyOiAnVGFuayBjbGVhdmUgc3VyIFZPVVMnLFxyXG4gICAgamE6ICfoh6rliIbjgavnr4Tlm7LmlLvmkoMnLFxyXG4gICAgY246ICfpobrliojngrnlkI0nLFxyXG4gICAga286ICfrgpjsl5Dqsowg6rSR7JetIO2DseuyhCcsXHJcbiAgfSxcclxuICBzaGFyZWRUYW5rYnVzdGVyOiB7XHJcbiAgICBlbjogJ1NoYXJlZCBUYW5rIEJ1c3RlcicsXHJcbiAgICBkZTogJ0dldGVpbHRlciBUYW5rYnVzdGVyJyxcclxuICAgIGZyOiAnUGFydGFnZXogbGUgVGFuayBidXN0ZXInLFxyXG4gICAgamE6ICfjgr/jg7Pjgq/poK3libLjgoonLFxyXG4gICAgY246ICfliIbmkYrmrbvliJEnLFxyXG4gICAga286ICfsiZDslrQg7YOx67KEJyxcclxuICB9LFxyXG4gIHNoYXJlZFRhbmtidXN0ZXJPbllvdToge1xyXG4gICAgZW46ICdTaGFyZWQgVGFuayBCdXN0ZXIgb24gWU9VJyxcclxuICAgIGRlOiAnZ2V0ZWlsdGVyIFRhbmtidXN0ZXIgYXVmIERJUicsXHJcbiAgICBmcjogJ1RhbmsgYnVzdGVyIMOgIHBhcnRhZ2VyIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr44K/44Oz44Kv6aCt5Ymy44KKJyxcclxuICAgIGNuOiAn5YiG5pGK5q275YiR54K55ZCNJyxcclxuICAgIGtvOiAn7ImQ7Ja0IO2DseuyhCDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAgc2hhcmVkVGFua2J1c3Rlck9uUGxheWVyOiB7XHJcbiAgICBlbjogJ1NoYXJlZCBUYW5rIEJ1c3RlciBvbiAke3BsYXllcn0nLFxyXG4gICAgZGU6ICdnZXRlaWx0ZXIgVGFua2J1c3RlciBvbiAke3BsYXllcn0nLFxyXG4gICAgZnI6ICdUYW5rIGJ1c3RlciDDoCBwYXJ0YWdlciBzdXIgJHtwbGF5ZXJ9JyxcclxuICAgIGphOiAnJHtwbGF5ZXJ9IOOBq+OCv+ODs+OCr+mgreWJsuOCiicsXHJcbiAgICBjbjogJ+WIhuaRiuatu+WIkeeCuSAke3BsYXllcn0nLFxyXG4gICAga286ICdcIiR7cGxheWVyfVwiIOyJkOyWtCDtg7HrsoQnLFxyXG4gIH0sXHJcbiAgdGFua1N3YXA6IHtcclxuICAgIGVuOiAnVGFuayBTd2FwIScsXHJcbiAgICBkZTogJ1Rhbmt3ZWNoc2VsIScsXHJcbiAgICBmcjogJ1Rhbmsgc3dhcCAhJyxcclxuICAgIGphOiAn44K/44Oz44Kv44K544Kk44OD44OBIScsXHJcbiAgICBjbjogJ+aNolTvvIEnLFxyXG4gICAga286ICftg7Eg6rWQ64yAJyxcclxuICB9LFxyXG4gIHNwcmVhZDoge1xyXG4gICAgZW46ICdTcHJlYWQnLFxyXG4gICAgZGU6ICdWZXJ0ZWlsZW4nLFxyXG4gICAgZnI6ICdEaXNwZXJzZXotdm91cycsXHJcbiAgICBqYTogJ+aVo+mWiycsXHJcbiAgICBjbjogJ+WIhuaVoycsXHJcbiAgICBrbzogJ+yCsOqwnCcsXHJcbiAgfSxcclxuICBzdGFja01hcmtlcjoge1xyXG4gICAgLy8gZm9yIHN0YWNrIG1hcmtlciBzaXR1YXRpb25zXHJcbiAgICBlbjogJ1N0YWNrJyxcclxuICAgIGRlOiAnU2FtbWVsbicsXHJcbiAgICBmcjogJ1BhY2tlei12b3VzJyxcclxuICAgIGphOiAn6aCt5Ymy44KKJyxcclxuICAgIGNuOiAn5YiG5pGKJyxcclxuICAgIGtvOiAn7ImQ7Ja0646AJyxcclxuICB9LFxyXG4gIGdldFRvZ2V0aGVyOiB7XHJcbiAgICAvLyBmb3IgZ2V0dGluZyB0b2dldGhlciB3aXRob3V0IHN0YWNrIG1hcmtlclxyXG4gICAgZW46ICdTdGFjaycsXHJcbiAgICBkZTogJ1NhbW1lbG4nLFxyXG4gICAgZnI6ICdQYWNrZXotdm91cycsXHJcbiAgICBqYTogJ+mbhuWQiCcsXHJcbiAgICBjbjogJ+mbhuWQiCcsXHJcbiAgICBrbzogJ+uqqOydtOq4sCcsXHJcbiAgfSxcclxuICBoZWFsZXJHcm91cHM6IHtcclxuICAgIGVuOiAnSGVhbGVyIEdyb3VwcycsXHJcbiAgICBkZTogJ0hlaWxlci1HcnVwcGVuJyxcclxuICAgIGZyOiAnR3JvdXBlcyBzdXIgbGVzIGhlYWxzJyxcclxuICAgIGphOiAn44OS44Op44Gr6aCt5Ymy44KKJyxcclxuICAgIGNuOiAn5rK755aX5YiG5pGK57uEJyxcclxuICAgIGtvOiAn7Z6Q65+sIOq3uOujuSDsiZDslrQnLFxyXG4gIH0sXHJcbiAgc3RhY2tPbllvdToge1xyXG4gICAgZW46ICdTdGFjayBvbiBZT1UnLFxyXG4gICAgZGU6ICdBdWYgRElSIHNhbW1lbG4nLFxyXG4gICAgZnI6ICdQYWNrYWdlIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr6aCt5Ymy44KKJyxcclxuICAgIGNuOiAn6ZuG5ZCI54K55ZCNJyxcclxuICAgIGtvOiAn7ImQ7Ja07KeVIOuMgOyDgeyekCcsXHJcbiAgfSxcclxuICBzdGFja09uUGxheWVyOiB7XHJcbiAgICBlbjogJ1N0YWNrIG9uICR7cGxheWVyfScsXHJcbiAgICBkZTogJ0F1ZiAke3BsYXllcn0gc2FtbWVsbicsXHJcbiAgICBmcjogJ1BhY2tlei12b3VzIHN1ciAke3BsYXllcn0nLFxyXG4gICAgamE6ICcke3BsYXllcn3jgavpoK3libLjgoonLFxyXG4gICAgY246ICfpnaDov5EgJHtwbGF5ZXJ96ZuG5ZCIJyxcclxuICAgIGtvOiAnXCIke3BsYXllcn1cIiDsiZDslrTsp5UnLFxyXG4gIH0sXHJcbiAgc3RhY2tNaWRkbGU6IHtcclxuICAgIGVuOiAnU3RhY2sgaW4gbWlkZGxlJyxcclxuICAgIGRlOiAnSW4gZGVyIE1pdHRlIHNhbW1lbG4nLFxyXG4gICAgZnI6ICdQYWNrZXotdm91cyBhdSBtaWxpZXUnLFxyXG4gICAgamE6ICfkuK3lpK7jgafpoK3libLjgoonLFxyXG4gICAgY246ICfkuK3pl7Tpm4blkIgnLFxyXG4gICAga286ICfspJHslZnsl5DshJwg66qo7J206riwJyxcclxuICB9LFxyXG4gIGRvcml0b1N0YWNrOiB7XHJcbiAgICBlbjogJ0Rvcml0byBTdGFjaycsXHJcbiAgICBkZTogJ01pdCBNYXJrZXIgc2FtbWVsbicsXHJcbiAgICBmcjogJ1BhY2tleiBsZXMgbWFycXVlcycsXHJcbiAgICBqYTogJ+ODnuODvOOCq+ODvOWQjOWjq+OBp+mgreWJsuOCiicsXHJcbiAgICBjbjogJ+eCueWQjembhuWQiCcsXHJcbiAgICBrbzogJ+ynleuBvOumrCDrqqjsnbTquLAnLFxyXG4gIH0sXHJcbiAgc3ByZWFkVGhlblN0YWNrOiB7XHJcbiAgICBlbjogJ1NwcmVhZCA9PiBTdGFjaycsXHJcbiAgICBkZTogJ1ZlcnRlaWxlbiA9PiBTYW1tZWxuJyxcclxuICAgIGZyOiAnRGlzcGVyc2lvbiA9PiBQYWNrYWdlJyxcclxuICAgIGphOiAn5pWj6ZaLID0+IOmgreWJsuOCiicsXHJcbiAgICBjbjogJ+WIhuaVoyA9PiDpm4blkIgnLFxyXG4gICAga286ICfsgrDqsJwgPT4g7KeR7ZWpJyxcclxuICB9LFxyXG4gIHN0YWNrVGhlblNwcmVhZDoge1xyXG4gICAgZW46ICdTdGFjayA9PiBTcHJlYWQnLFxyXG4gICAgZGU6ICdTYW1tZWxuID0+IFZlcnRlaWxlbicsXHJcbiAgICBmcjogJ1BhY2thZ2UgPT4gRGlzcGVyc2lvbicsXHJcbiAgICBqYTogJ+mgreWJsuOCiiA9PiDmlaPplosnLFxyXG4gICAgY246ICfpm4blkIggPT4g5YiG5pWjJyxcclxuICAgIGtvOiAn7KeR7ZWpID0+IOyCsOqwnCcsXHJcbiAgfSxcclxuICBkcmF3SW46IHtcclxuICAgIC8vIE9wcG9zaXRlIG9mIGEga25vY2tiYWNrLlxyXG4gICAgZW46ICdEcmF3IEluJyxcclxuICAgIGRlOiAnRWluenVnJyxcclxuICAgIGZyOiAnQXR0cmFjdGlvbicsXHJcbiAgICBqYTogJ+WQuOi+vOOBvycsXHJcbiAgICBjbjogJ+WQuOW8lScsXHJcbiAgICBrbzogJ+uBjOyWtOuLueq5gCcsXHJcbiAgfSxcclxuICBrbm9ja2JhY2s6IHtcclxuICAgIGVuOiAnS25vY2tiYWNrJyxcclxuICAgIGRlOiAnUsO8Y2tzdG/DnycsXHJcbiAgICBmcjogJ1BvdXNzw6llJyxcclxuICAgIGphOiAn44OO44OD44Kv44OQ44OD44KvJyxcclxuICAgIGNuOiAn5Ye76YCAJyxcclxuICAgIGtvOiAn64SJ67CxJyxcclxuICB9LFxyXG4gIGtub2NrYmFja09uWW91OiB7XHJcbiAgICBlbjogJ0tub2NrYmFjayBvbiBZT1UnLFxyXG4gICAgZGU6ICdSw7xja3N0b8OfIGF1ZiBESVInLFxyXG4gICAgZnI6ICdQb3Vzc8OpZSBzdXIgVk9VUycsXHJcbiAgICBqYTogJ+iHquWIhuOBq+ODjuODg+OCr+ODkOODg+OCrycsXHJcbiAgICBjbjogJ+WHu+mAgOeCueWQjScsXHJcbiAgICBrbzogJ+uEieuwseynlSDrjIDsg4HsnpAnLFxyXG4gIH0sXHJcbiAga25vY2tiYWNrT25QbGF5ZXI6IHtcclxuICAgIGVuOiAnS25vY2tiYWNrIG9uICR7cGxheWVyfScsXHJcbiAgICBkZTogJ1LDvGNrc3Rvw58gYXVmICR7cGxheWVyfScsXHJcbiAgICBmcjogJ1BvdXNzw6llIHN1ciAke3BsYXllcn0nLFxyXG4gICAgamE6ICcke3BsYXllcn3jgavjg47jg4Pjgq/jg5Djg4Pjgq8nLFxyXG4gICAgY246ICflh7vpgIDngrnlkI0ke3BsYXllcn0nLFxyXG4gICAga286ICdcIiR7cGxheWVyfVwiIOuEieuwseynlScsXHJcbiAgfSxcclxuICBsb29rVG93YXJkc0Jvc3M6IHtcclxuICAgIGVuOiAnTG9vayBUb3dhcmRzIEJvc3MnLFxyXG4gICAgZGU6ICdBbnNjaGF1ZW4gQm9zcycsXHJcbiAgICBmcjogJ1JlZ2FyZGV6IGxlIGJvc3MnLFxyXG4gICAgamE6ICfjg5zjgrnjgpLopovjgosnLFxyXG4gICAgY246ICfpnaLlkJFCb3NzJyxcclxuICAgIGtvOiAn7LOQ64uk67O06riwJyxcclxuICB9LFxyXG4gIGxvb2tBd2F5OiB7XHJcbiAgICBlbjogJ0xvb2sgQXdheScsXHJcbiAgICBkZTogJ1dlZ3NjaGF1ZW4nLFxyXG4gICAgZnI6ICdSZWdhcmRleiBhaWxsZXVycycsXHJcbiAgICBqYTogJ+ODnOOCueOCkuimi+OBquOBhCcsXHJcbiAgICBjbjogJ+iDjOWvuUJvc3MnLFxyXG4gICAga286ICfrkqTrj4zquLAnLFxyXG4gIH0sXHJcbiAgbG9va0F3YXlGcm9tUGxheWVyOiB7XHJcbiAgICBlbjogJ0xvb2sgQXdheSBmcm9tICR7cGxheWVyfScsXHJcbiAgICBkZTogJ1NjaGF1IHdlZyB2b24gJHtwbGF5ZXJ9JyxcclxuICAgIGZyOiAnTmUgcmVnYXJkZXogcGFzICR7cGxheWVyfScsXHJcbiAgICBqYTogJyR7cGxheWVyfeOCkuimi+OBquOBhCcsXHJcbiAgICBjbjogJ+iDjOWvuSR7cGxheWVyfScsXHJcbiAgICBrbzogJyR7cGxheWVyfeyXkOqyjOyEnCDrkqTrj4zquLAnLFxyXG4gIH0sXHJcbiAgbG9va0F3YXlGcm9tVGFyZ2V0OiB7XHJcbiAgICBlbjogJ0xvb2sgQXdheSBmcm9tICR7bmFtZX0nLFxyXG4gICAgZGU6ICdTY2hhdSB3ZWcgdm9uICR7bmFtZX0nLFxyXG4gICAgZnI6ICdOZSByZWdhcmRleiBwYXMgJHtuYW1lfScsXHJcbiAgICBqYTogJyR7bmFtZX3jgpLopovjgarjgYQnLFxyXG4gICAgY246ICfog4zlr7kke25hbWV9JyxcclxuICAgIGtvOiAnJHtuYW1lfeyXkOqyjOyEnCDrkqTrj4zquLAnLFxyXG4gIH0sXHJcbiAgZ2V0QmVoaW5kOiB7XHJcbiAgICBlbjogJ0dldCBCZWhpbmQnLFxyXG4gICAgZGU6ICdIaW50ZXIgaWhuJyxcclxuICAgIGZyOiAnUGFzc2V6IGRlcnJpw6hyZScsXHJcbiAgICBqYTogJ+iDjOmdouOBuCcsXHJcbiAgICBjbjogJ+WOu+iDjOWQjicsXHJcbiAgICBrbzogJ+uztOyKpCDrkqTroZwnLFxyXG4gIH0sXHJcbiAgZ29Gcm9udE9yU2lkZXM6IHtcclxuICAgIGVuOiAnR28gRnJvbnQgLyBTaWRlcycsXHJcbiAgICBkZTogJ0dlaGUgbmFjaCBWb3JuZS8genUgZGVuIFNlaXRlbicsXHJcbiAgICBmcjogJ0FsbGV6IERldmFudCAvIEPDtHTDqXMnLFxyXG4gICAgamE6ICfliY3vvI/mqKrjgbgnLFxyXG4gICAgY246ICfljrvliY3kvqfmlrknLFxyXG4gICAga286ICfrs7TsiqQg7ZuE67CpIO2UvO2VmOq4sCcsXHJcbiAgfSxcclxuICBnb0Zyb250OiB7XHJcbiAgICBlbjogJ0dvIEZyb250JyxcclxuICAgIGRlOiAnR2VoIG5hY2ggdm9ybicsXHJcbiAgICBmcjogJ0FsbGV6IERldmFudCcsXHJcbiAgICBqYTogJ+WJjeOBuCcsXHJcbiAgICBjbjogJ+WOu+WJjemdoicsXHJcbiAgICBrbzogJ+yVnuycvOuhnCcsXHJcbiAgfSxcclxuICAvLyBnZXRVbmRlciBpcyB1c2VkIHdoZW4geW91IGhhdmUgdG8gZ2V0IGludG8gdGhlIGJvc3NlcyBoaXRib3hcclxuICBnZXRVbmRlcjoge1xyXG4gICAgZW46ICdHZXQgVW5kZXInLFxyXG4gICAgZGU6ICdVbnRlciBpaG4nLFxyXG4gICAgZnI6ICdFbiBkZXNzb3VzJyxcclxuICAgIGphOiAn44Oc44K544Gr6LK844KK5LuY44GPJyxcclxuICAgIGNuOiAn5Y676ISa5LiLJyxcclxuICAgIGtvOiAn67O07IqkIOyVhOuemOuhnCcsXHJcbiAgfSxcclxuICAvLyBpbiBpcyBtb3JlIGxpa2UgXCJnZXQgY2xvc2UgYnV0IG1heWJlIGV2ZW4gbWVsZWUgcmFuZ2UgaXMgZmluZVwiXHJcbiAgaW46IHtcclxuICAgIGVuOiAnSW4nLFxyXG4gICAgZGU6ICdSZWluJyxcclxuICAgIGZyOiAnSW50w6lyaWV1cicsXHJcbiAgICBqYTogJ+S4reOBuCcsXHJcbiAgICBjbjogJ+mdoOi/kScsXHJcbiAgICBrbzogJ+yViOycvOuhnCcsXHJcbiAgfSxcclxuICAvLyBvdXQgbWVhbnMgZ2V0IGZhciBhd2F5XHJcbiAgb3V0OiB7XHJcbiAgICBlbjogJ091dCcsXHJcbiAgICBkZTogJ1JhdXMnLFxyXG4gICAgZnI6ICdFeHTDqXJpZXVyJyxcclxuICAgIGphOiAn5aSW44G4JyxcclxuICAgIGNuOiAn6L+c56a7JyxcclxuICAgIGtvOiAn67CW7Jy866GcJyxcclxuICB9LFxyXG4gIG91dE9mTWVsZWU6IHtcclxuICAgIGVuOiAnT3V0IG9mIG1lbGVlJyxcclxuICAgIGRlOiAnUmF1cyBhdXMgTmFoa2FtcGYnLFxyXG4gICAgZnI6ICdTb3J0ZXogZGUgbGEgbcOqbMOpZScsXHJcbiAgICBqYTogJ+i/keaOpeOBruevhOWbsuOBi+OCiembouOCjOOCiycsXHJcbiAgICBjbjogJ+emu+W8gOi/keaImOi3neemuycsXHJcbiAgICBrbzogJ+q3vOygkeuylOychCDrsJbsnLzroZwnLFxyXG4gIH0sXHJcbiAgaW5UaGVuT3V0OiB7XHJcbiAgICBlbjogJ0luID0+IG91dCcsXHJcbiAgICBkZTogJ1JlaW4sIGRhbm4gcmF1cycsXHJcbiAgICBmcjogJ0ludMOpcmlldXIsIHB1aXMgZXh0w6lyaWV1cicsXHJcbiAgICBqYTogJ+S4rSA9PiDlpJYnLFxyXG4gICAgY246ICflhYjpnaDov5HvvIzlho3ov5znprsnLFxyXG4gICAga286ICfslYjsnLzroZwgPT4g67CW7Jy866GcJyxcclxuICB9LFxyXG4gIG91dFRoZW5Jbjoge1xyXG4gICAgZW46ICdPdXQgPT4gaW4nLFxyXG4gICAgZGU6ICdSYXVzLCBkYW5uIHJlaW4nLFxyXG4gICAgZnI6ICdFeHTDqXJpZXVyLCBwdWlzIGludMOpcmlldXInLFxyXG4gICAgamE6ICflpJYgPT4g5LitJyxcclxuICAgIGNuOiAn5YWI6L+c56a777yM5YaN6Z2g6L+RJyxcclxuICAgIGtvOiAn67CW7Jy866GcID0+IOyViOycvOuhnCcsXHJcbiAgfSxcclxuICBiYWNrVGhlbkZyb250OiB7XHJcbiAgICBlbjogJ0JhY2sgPT4gRnJvbnQnLFxyXG4gICAgZGU6ICdOYWNoIEhpbnRlbiwgZGFuYWNoIG5hY2ggVm9ybmUnLFxyXG4gICAgZnI6ICdEZXJyacOocmUgcHVpcyBkZXZhbnQnLFxyXG4gICAgamE6ICflvozjgo0gPT4g5YmNJyxcclxuICAgIGNuOiAn5ZCOID0+IOWJjScsXHJcbiAgICBrbzogJ+uSpOuhnCA9PiDslZ7snLzroZwnLFxyXG4gIH0sXHJcbiAgZnJvbnRUaGVuQmFjazoge1xyXG4gICAgZW46ICdGcm9udCA9PiBCYWNrJyxcclxuICAgIGRlOiAnTmFjaCBWb3JuZSwgZGFuYWNoIG5hY2ggSGludGVuJyxcclxuICAgIGZyOiAnRGV2YW50IHB1aXMgZGVycmnDqHJlJyxcclxuICAgIGphOiAn5YmNID0+IOW+jOOCjScsXHJcbiAgICBjbjogJ+WJjSA9PiDlkI4nLFxyXG4gICAga286ICfslZ7snLzroZwgPT4g65Kk66GcJyxcclxuICB9LFxyXG4gIGdvSW50b01pZGRsZToge1xyXG4gICAgZW46ICdHZXQgTWlkZGxlJyxcclxuICAgIGRlOiAnaW4gZGllIE1pdHRlIGdlaGVuJyxcclxuICAgIGZyOiAnQWxsZXogYXUgbWlsaWV1JyxcclxuICAgIGphOiAn5Lit44G4JyxcclxuICAgIGNuOiAn5Y675Lit6Ze0JyxcclxuICAgIGtvOiAn7KSR7JWZ7Jy866GcJyxcclxuICB9LFxyXG4gIGZyb250OiB7XHJcbiAgICBlbjogJ0Zyb250JyxcclxuICAgIGRlOiAnVm9ybmUnLFxyXG4gICAgZnI6ICdEZXZhbnQnLFxyXG4gICAgamE6ICfliY0nLFxyXG4gICAgY246ICfliY0nLFxyXG4gICAga286ICfslZ4nLFxyXG4gIH0sXHJcbiAgYmFjazoge1xyXG4gICAgZW46ICdCYWNrJyxcclxuICAgIGRlOiAnSGludGVuJyxcclxuICAgIGZyOiAnRGVycmnDqHJlJyxcclxuICAgIGphOiAn5b6M44KNJyxcclxuICAgIGNuOiAn5ZCOJyxcclxuICAgIGtvOiAn65KkJyxcclxuICB9LFxyXG4gIHJpZ2h0OiB7XHJcbiAgICBlbjogJ1JpZ2h0JyxcclxuICAgIGRlOiAnUmVjaHRzJyxcclxuICAgIGZyOiAnw4AgZHJvaXRlJyxcclxuICAgIGphOiAn5Y+z44G4JyxcclxuICAgIGNuOiAn5Y+zJyxcclxuICAgIGtvOiAn7Jik66W47Kq9JyxcclxuICB9LFxyXG4gIGxlZnQ6IHtcclxuICAgIGVuOiAnTGVmdCcsXHJcbiAgICBkZTogJ0xpbmtzJyxcclxuICAgIGZyOiAnw4AgZ2F1Y2hlJyxcclxuICAgIGphOiAn5bem44G4JyxcclxuICAgIGNuOiAn5bemJyxcclxuICAgIGtvOiAn7Jm87Kq9JyxcclxuICB9LFxyXG4gIGdldExlZnRBbmRXZXN0OiB7XHJcbiAgICBlbjogJzw9IEdldCBMZWZ0L1dlc3QnLFxyXG4gICAgZGU6ICc8PSBOYWNoIExpbmtzL1dlc3RlbicsXHJcbiAgICBmcjogJzw9IEFsbGV6IMOgIEdhdWNoZS9PdWVzdCcsXHJcbiAgICBqYTogJzw9IOW3pi/opb/jgbgnLFxyXG4gICAgY246ICc8PSDljrvlt6Yv6KW/6L65JyxcclxuICAgIGtvOiAnPD0g7Jm87Kq97Jy866GcJyxcclxuICB9LFxyXG4gIGdldFJpZ2h0QW5kRWFzdDoge1xyXG4gICAgZW46ICdHZXQgUmlnaHQvRWFzdCA9PicsXHJcbiAgICBkZTogJ05hY2ggUmVjaHRzL09zdGVuID0+JyxcclxuICAgIGZyOiAnQWxsZXogw6AgRHJvaXRlL0VzdCA9PicsXHJcbiAgICBqYTogJ+WPsy/mnbHjgbggPT4nLFxyXG4gICAgY246ICfljrvlj7Mv5Lic6L65ID0+JyxcclxuICAgIGtvOiAn7Jik66W47Kq97Jy866GcID0+JyxcclxuICB9LFxyXG4gIGxlZnRUaGVuUmlnaHQ6IHtcclxuICAgIGVuOiAnTGVmdCA9PiBSaWdodCcsXHJcbiAgICBkZTogJ0xpbmtzID0+IFJlY2h0cycsXHJcbiAgICBmcjogJ8OAIGdhdWNoZSA9PiDDgCBkcm9pdGUnLFxyXG4gICAgamE6ICflt6YgPT4g5Y+zJyxcclxuICAgIGNuOiAn5bemID0+IOWPsycsXHJcbiAgICBrbzogJ+yZvOyqvSA9PiDsmKTrpbjsqr0nLFxyXG4gIH0sXHJcbiAgcmlnaHRUaGVuTGVmdDoge1xyXG4gICAgZW46ICdSaWdodCA9PiBMZWZ0JyxcclxuICAgIGRlOiAnUmVjaHRzID0+IExpbmtzJyxcclxuICAgIGZyOiAnw4AgZHJvaXRlID0+IMOAIGdhdWNoZScsXHJcbiAgICBqYTogJ+WPsyA9PiDlt6YnLFxyXG4gICAgY246ICflj7MgPT4g5bemJyxcclxuICAgIGtvOiAn7Jik66W47Kq9ID0+IOyZvOyqvScsXHJcbiAgfSxcclxuICBnb0Zyb250QmFjazoge1xyXG4gICAgZW46ICdHbyBGcm9udC9CYWNrJyxcclxuICAgIGRlOiAnR2VoIG5hY2ggVm9ybmUvSGludGVuJyxcclxuICAgIGZyOiAnQWxsZXogRGV2YW50L0RlcnJpw6hyZScsXHJcbiAgICBqYTogJ+e4puOBuCcsXHJcbiAgICBjbjogJ+WOu+WJjeWQjicsXHJcbiAgICBrbzogJ+yVni/rkqTroZwnLFxyXG4gIH0sXHJcbiAgc2lkZXM6IHtcclxuICAgIGVuOiAnU2lkZXMnLFxyXG4gICAgZGU6ICdTZWl0ZW4nLFxyXG4gICAgZnI6ICdDw7R0w6lzJyxcclxuICAgIGphOiAn5qiq44G4JyxcclxuICAgIGNuOiAn5Y675L6n6Z2iJyxcclxuICAgIGtvOiAn7JaR7JiG7Jy866GcJyxcclxuICB9LFxyXG4gIG1pZGRsZToge1xyXG4gICAgZW46ICdNaWRkbGUnLFxyXG4gICAgZGU6ICdNaXR0ZScsXHJcbiAgICBmcjogJ01pbGlldScsXHJcbiAgICBqYTogJ+S4reOBuCcsXHJcbiAgICBjbjogJ+S4remXtCcsXHJcbiAgICBrbzogJ+ykkeyVmScsXHJcbiAgfSxcclxuICBjbG9ja3dpc2U6IHtcclxuICAgIGVuOiAnQ2xvY2t3aXNlJyxcclxuICAgIGRlOiAnSW0gVWhyemVpZ2Vyc2lubicsXHJcbiAgICBmcjogJ1NlbnMgaG9yYWlyZScsXHJcbiAgICBqYTogJ+aZgumHneWbnuOCiicsXHJcbiAgICBjbjogJ+mhuuaXtumSiCcsXHJcbiAgICBrbzogJ+yLnOqzhOuwqe2WpScsXHJcbiAgfSxcclxuICBjb3VudGVyY2xvY2t3aXNlOiB7XHJcbiAgICBlbjogJ0NvdW50ZXItY2xvY2snLFxyXG4gICAgZGU6ICdHZWdlbiBkZW4gVWhyemVpZ2Vyc2lubicsXHJcbiAgICBmcjogJ0FudGktaG9yYWlyZScsXHJcbiAgICBqYTogJ+WPjeaZgumHneWbnuOCiicsXHJcbiAgICBjbjogJ+mAhuaXtumSiCcsXHJcbiAgICBrbzogJ+uwmOyLnOqzhOuwqe2WpScsXHJcbiAgfSxcclxuICAvLyBraWxsQWRkcyBpcyB1c2VkIGZvciBhZGRzIHRoYXQgd2lsbCBhbHdheXMgYmUgYXZhaWxhYmxlXHJcbiAga2lsbEFkZHM6IHtcclxuICAgIGVuOiAnS2lsbCBhZGRzJyxcclxuICAgIGRlOiAnQWRkcyBiZXNpZWdlbicsXHJcbiAgICBmcjogJ1R1ZXogbGVzIGFkZHMnLFxyXG4gICAgamE6ICfpm5HprZrjgYvjgonlgJLjgZfjgaYnLFxyXG4gICAgY246ICflh7vmnYDlsI/mgKonLFxyXG4gICAga286ICfsq4Qg7J6h6riwJyxcclxuICB9LFxyXG4gIC8vIGtpbGxFeHRyYUFkZCBpcyB1c2VkIGZvciBhZGRzIHRoYXQgYXBwZWFyIGlmIGEgbWVjaGFuaWMgd2FzIG5vdCBwbGF5ZWQgY29ycmVjdGx5XHJcbiAga2lsbEV4dHJhQWRkOiB7XHJcbiAgICBlbjogJ0tpbGwgRXh0cmEgQWRkJyxcclxuICAgIGRlOiAnQWRkIGJlc2llZ2VuJyxcclxuICAgIGZyOiAnVHVleiBsXFwnYWRkJyxcclxuICAgIGphOiAn6ZuR6a2a44GL44KJ5YCS44GX44GmJyxcclxuICAgIGNuOiAn5Ye75p2A5bCP5oCqJyxcclxuICAgIGtvOiAn7KuEIOyeoeq4sCcsXHJcbiAgfSxcclxuICBhd2F5RnJvbUZyb250OiB7XHJcbiAgICBlbjogJ0F3YXkgRnJvbSBGcm9udCcsXHJcbiAgICBkZTogJ1dlZyB2b24gVm9ybmUnLFxyXG4gICAgZnI6ICfDiWxvaWduZXotdm91cyBkdSBkZXZhbnQnLFxyXG4gICAgamE6ICfliY3mlrnjgYvjgonpm6LjgozjgosnLFxyXG4gICAgY246ICfov5znprvmraPpnaInLFxyXG4gICAga286ICfrs7TsiqQg7KCE67CpIO2UvO2VmOq4sCcsXHJcbiAgfSxcclxuICBzbGVlcFRhcmdldDoge1xyXG4gICAgZW46ICdTbGVlcCAke25hbWV9JyxcclxuICAgIGRlOiAnU2NobGFmIGF1ZiAke25hbWV9JyxcclxuICAgIGZyOiAnU29tbWVpbCBzdXIgJHtuYW1lfScsXHJcbiAgICBqYTogJyR7bmFtZX0g44Gr44K544Oq44OX44OrJyxcclxuICAgIGNuOiAn5YKs55ygICR7bmFtZX0nLFxyXG4gICAga286ICcke25hbWV9IOyKrOumrO2UjCcsXHJcbiAgfSxcclxuICBzdHVuVGFyZ2V0OiB7XHJcbiAgICBlbjogJ1N0dW4gJHtuYW1lfScsXHJcbiAgICBkZTogJ0JldMOkdWJ1bmcgYXVmICR7bmFtZX0nLFxyXG4gICAgZnI6ICfDiXRvdXJkaXNzZXogJHtuYW1lfScsXHJcbiAgICBqYTogJyR7bmFtZX0g44Gr44K544K/44OzJyxcclxuICAgIGNuOiAn55yp5pmVICR7bmFtZX0nLFxyXG4gICAga286ICcke25hbWV96riw7KCIJyxcclxuICB9LFxyXG4gIGludGVycnVwdFRhcmdldDoge1xyXG4gICAgZW46ICdpbnRlcnJ1cHQgJHtuYW1lfScsXHJcbiAgICBkZTogJ3VudGVyYnJlY2hlICR7bmFtZX0nLFxyXG4gICAgZnI6ICdJbnRlcnJvbXBleiAke25hbWV9JyxcclxuICAgIGphOiAnJHtuYW1lfSDjgavmsojpu5knLFxyXG4gICAgY246ICfmiZPmlq0ke25hbWV9JyxcclxuICAgIGtvOiAnJHtuYW1lfeq4sOyIoCDsi5zsoIQg64GK6riwJyxcclxuICB9LFxyXG4gIHByZXlPbllvdToge1xyXG4gICAgZW46ICdQcmV5IG9uIFlPVScsXHJcbiAgICBkZTogJ01hcmtlciBhdWYgRElSJyxcclxuICAgIGZyOiAnTWFycXVhZ2Ugc3VyIFZPVVMnLFxyXG4gICAgamE6ICfoh6rliIbjgavmjZXpo58nLFxyXG4gICAgY246ICfmjqDpo5/ngrnlkI0nLFxyXG4gICAga286ICftmY3smKXsp5Ug64yA7IOB7J6QJyxcclxuICB9LFxyXG4gIHByZXlPblBsYXllcjoge1xyXG4gICAgZW46ICdQcmV5IG9uICR7cGxheWVyfScsXHJcbiAgICBkZTogJ01hcmtlciBhdWYgJHtwbGF5ZXJ9JyxcclxuICAgIGZyOiAnTWFycXVhZ2Ugc3VyICR7cGxheWVyfScsXHJcbiAgICBqYTogJyR7cGxheWVyfeOBq+aNlemjnycsXHJcbiAgICBjbjogJ+aOoOmjn+eCueWQjSR7cGxheWVyfScsXHJcbiAgICBrbzogJ1wiJHtwbGF5ZXJ9XCIg7ZmN7Jil7KeVJyxcclxuICB9LFxyXG4gIGF3YXlGcm9tR3JvdXA6IHtcclxuICAgIGVuOiAnQXdheSBmcm9tIEdyb3VwJyxcclxuICAgIGRlOiAnV2VnIHZvbiBkZXIgR3J1cHBlJyxcclxuICAgIGZyOiAnw4lsb2lnbmV6LXZvdXMgZHUgZ3JvdXBlJyxcclxuICAgIGphOiAn5aSW44G4JyxcclxuICAgIGNuOiAn6L+c56a75Lq6576kJyxcclxuICAgIGtvOiAn64uk66W4IOyCrOuejOuTpOqzvCDrlqjslrTsp4DquLAnLFxyXG4gIH0sXHJcbiAgYXdheUZyb21QbGF5ZXI6IHtcclxuICAgIGVuOiAnQXdheSBmcm9tICR7cGxheWVyfScsXHJcbiAgICBkZTogJ1dlZyB2b24gJHtwbGF5ZXJ9JyxcclxuICAgIGZyOiAnw4lsb2lnbmV6LXZvdXMgZGUgJHtwbGF5ZXJ9JyxcclxuICAgIGphOiAnJHtwbGF5ZXJ944GL44KJ6Zui44KM44KLJyxcclxuICAgIGNuOiAn6L+c56a7JHtwbGF5ZXJ9JyxcclxuICAgIGtvOiAnXCIke3BsYXllcn1cIuyXkOqyjOyEnCDrqYDslrTsp4DquLAnLFxyXG4gIH0sXHJcbiAgbWV0ZW9yT25Zb3U6IHtcclxuICAgIGVuOiAnTWV0ZW9yIG9uIFlPVScsXHJcbiAgICBkZTogJ01ldGVvciBhdWYgRElSJyxcclxuICAgIGZyOiAnTcOpdMOpb3JlIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr44Oh44OG44KqJyxcclxuICAgIGNuOiAn6Zmo55+z54K55ZCNJyxcclxuICAgIGtvOiAn64KY7JeQ6rKMIOuplO2FjOyYpOynlScsXHJcbiAgfSxcclxuICBzdG9wTW92aW5nOiB7XHJcbiAgICBlbjogJ1N0b3AgTW92aW5nIScsXHJcbiAgICBkZTogJ0Jld2VndW5nIHN0b3BwZW4hJyxcclxuICAgIGZyOiAnTmUgYm91Z2V6IHBhcyAhJyxcclxuICAgIGphOiAn56e75YuV56aB5q2i77yBJyxcclxuICAgIGNuOiAn5YGc5q2i56e75Yqo77yBJyxcclxuICAgIGtvOiAn7J2064+ZIOupiOy2lOq4sCEnLFxyXG4gIH0sXHJcbiAgc3RvcEV2ZXJ5dGhpbmc6IHtcclxuICAgIGVuOiAnU3RvcCBFdmVyeXRoaW5nIScsXHJcbiAgICBkZTogJ1N0b3BwZSBBbGxlcyEnLFxyXG4gICAgZnI6ICdBcnLDqnRleiB0b3V0ICEnLFxyXG4gICAgamE6ICfooYzli5XnpoHmraLvvIEnLFxyXG4gICAgY246ICflgZzmraLooYzliqjvvIEnLFxyXG4gICAga286ICftlonrj5kg66mI7LaU6riwIScsXHJcbiAgfSxcclxuICBtb3ZlQXdheToge1xyXG4gICAgLy8gbW92ZSBhd2F5IHRvIGRvZGdlIGFvZXNcclxuICAgIGVuOiAnTW92ZSEnLFxyXG4gICAgZGU6ICdCZXdlZ2VuIScsXHJcbiAgICBmcjogJ0JvdWdleiAhJyxcclxuICAgIGphOiAn6YG/44GR44Gm77yBJyxcclxuICAgIGNuOiAn5b+r6Lqy5byA77yBJyxcclxuICAgIGtvOiAn7J2064+Z7ZWY6riwIScsXHJcbiAgfSxcclxuICBtb3ZlQXJvdW5kOiB7XHJcbiAgICAvLyBtb3ZlIGFyb3VuZCAoZS5nLiBqdW1waW5nKSB0byBhdm9pZCBiZWluZyBmcm96ZW5cclxuICAgIGVuOiAnTW92ZSEnLFxyXG4gICAgZGU6ICdCZXdlZ2VuIScsXHJcbiAgICBmcjogJ0JvdWdleiAhJyxcclxuICAgIGphOiAn5YuV44GP77yBJyxcclxuICAgIGNuOiAn5b+r5Yqo77yBJyxcclxuICAgIGtvOiAn7JuA7KeB7J206riwIScsXHJcbiAgfSxcclxuICBicmVha0NoYWluczoge1xyXG4gICAgZW46ICdCcmVhayBjaGFpbnMnLFxyXG4gICAgZGU6ICdLZXR0ZSB6ZXJicmVjaGVuJyxcclxuICAgIGZyOiAnQnJpc2V6IGxlcyBjaGFpbmVzJyxcclxuICAgIGphOiAn57ea44KS5YiH44KLJyxcclxuICAgIGNuOiAn5YiH5pat6L+e57q/JyxcclxuICAgIGtvOiAn7ISgIOuBiuq4sCcsXHJcbiAgfSxcclxuICBtb3ZlQ2hhaW5zVG9nZXRoZXI6IHtcclxuICAgIGVuOiAnTW92ZSBjaGFpbnMgdG9nZXRoZXInLFxyXG4gICAgZGU6ICdLZXR0ZW4genVzYW1tZW4gYmV3ZWdlbicsXHJcbiAgICBmcjogJ0JvdWdleiBsZXMgY2hhaW5lcyBlbnNlbWJsZScsXHJcbiAgICBqYTogJ+e3muWQjOWjq+OBp+S4gOe3kuOBq+enu+WLlScsXHJcbiAgICBjbjogJ+i/nue6v+S4gOi1t+enu+WKqCcsXHJcbiAgICBrbzogJ+yEoCDrtpnslrTshJwg6rCZ7J20IOybgOyngeydtOq4sCcsXHJcbiAgfSxcclxuICBlYXJ0aHNoYWtlck9uWW91OiB7XHJcbiAgICBlbjogJ0VhcnRoIFNoYWtlciBvbiBZT1UnLFxyXG4gICAgZGU6ICdFcmRzdG/DnyBhdWYgRElSJyxcclxuICAgIGZyOiAnTWFycXVlIGRlIHRlcnJlIHN1ciBWT1VTJyxcclxuICAgIGphOiAn6Ieq5YiG44Gr44Ki44O844K544K344Kn44Kk44Kr44O8JyxcclxuICAgIGNuOiAn5aSn5Zyw5pGH5Yqo54K55ZCNJyxcclxuICAgIGtvOiAn7Ja07Iqk7KeVIOuMgOyDgeyekCcsXHJcbiAgfSxcclxuICB3YWtlVXA6IHtcclxuICAgIGVuOiAnV0FLRSBVUCcsXHJcbiAgICBkZTogJ0FVRldBQ0hFTicsXHJcbiAgICBmcjogJ1LDiVZFSUxMRS1UT0knLFxyXG4gICAgamE6ICfnm67jgpLopprjgb7jgZfjgabvvIEnLFxyXG4gICAgY246ICfphpLphpLvvIHliqjkuIDliqjvvIHvvIEnLFxyXG4gICAga286ICfsnbzslrTrgpjshLjsmpQhJyxcclxuICB9LFxyXG4gIGNsb3NlVGV0aGVyc1dpdGhQbGF5ZXI6IHtcclxuICAgIGVuOiAnQ2xvc2UgVGV0aGVycyAoJHtwbGF5ZXJ9KScsXHJcbiAgICBkZTogJ05haGUgVmVyYmluZHVuZ2VuICgke3BsYXllcn0pJyxcclxuICAgIGZyOiAnTGllbnMgcHJvY2hlcyBhdmVjICgke3BsYXllcn0pJyxcclxuICAgIGphOiAnJHtwbGF5ZXJ944Gr6L+R44Gl44GPJyxcclxuICAgIGNuOiAn6Z2g6L+R6L+e57q/ICgke3BsYXllcn0pJyxcclxuICAgIGtvOiAn7IOB64yA7JmAIOqwgOq5jOydtCDrtpnquLAgKCR7cGxheWVyfSknLFxyXG4gIH0sXHJcbiAgZmFyVGV0aGVyc1dpdGhQbGF5ZXI6IHtcclxuICAgIGVuOiAnRmFyIFRldGhlcnMgKCR7cGxheWVyfSknLFxyXG4gICAgZGU6ICdFbnRmZXJudGUgVmVyYmluZHVuZ2VuICgke3BsYXllcn0pJyxcclxuICAgIGZyOiAnTGllbnMgw6lsb2lnbsOpcyBhdmVjICgke3BsYXllcn0pJyxcclxuICAgIGphOiAnICgke3BsYXllcn0p44GL44KJ6Zui44KM44KLJyxcclxuICAgIGNuOiAn6L+c56a76L+e57q/ICgke3BsYXllcn0pJyxcclxuICAgIGtvOiAn7IOB64yA7JmAIOuWqOyWtOyngOq4sCAoJHtwbGF5ZXJ9KScsXHJcbiAgfSxcclxuICBnZXRUb3dlcnM6IHtcclxuICAgIGVuOiAnR2V0IFRvd2VycycsXHJcbiAgICBkZTogJ1TDvHJtZSBuZWhtZW4nLFxyXG4gICAgZnI6ICdBbGxleiBkYW5zIGxlcyB0b3VycycsXHJcbiAgICBqYTogJ+WhlOOCkui4j+OCgCcsXHJcbiAgICBjbjogJ+i4qeWhlCcsXHJcbiAgICBrbzogJ+q4sOuRpSDrk6TslrTqsIDquLAnLFxyXG4gIH0sXHJcbiAgdW5rbm93bjoge1xyXG4gICAgZW46ICc/Pz8nLFxyXG4gICAgZGU6ICc/Pz8nLFxyXG4gICAgZnI6ICc/Pz8nLFxyXG4gICAgamE6ICc/Pz8nLFxyXG4gICAgY246ICc/Pz8nLFxyXG4gICAga286ICc/Pz8nLFxyXG4gIH0sXHJcbiAgbm9ydGg6IHtcclxuICAgIGVuOiAnTm9ydGgnLFxyXG4gICAgZGU6ICdOb3JkZW4nLFxyXG4gICAgZnI6ICdOb3JkJyxcclxuICAgIGphOiAn5YyXJyxcclxuICAgIGNuOiAn5LiKKOWMlyknLFxyXG4gICAga286ICfrtoHsqr0nLFxyXG4gIH0sXHJcbiAgc291dGg6IHtcclxuICAgIGVuOiAnU291dGgnLFxyXG4gICAgZGU6ICdTw7xkZW4nLFxyXG4gICAgZnI6ICdTdWQnLFxyXG4gICAgamE6ICfljZcnLFxyXG4gICAgY246ICfkuIso5Y2XKScsXHJcbiAgICBrbzogJ+uCqOyqvScsXHJcbiAgfSxcclxuICBlYXN0OiB7XHJcbiAgICBlbjogJ0Vhc3QnLFxyXG4gICAgZGU6ICdPc3RlbicsXHJcbiAgICBmcjogJ0VzdCcsXHJcbiAgICBqYTogJ+adsScsXHJcbiAgICBjbjogJ+WPsyjkuJwpJyxcclxuICAgIGtvOiAn64+Z7Kq9JyxcclxuICB9LFxyXG4gIHdlc3Q6IHtcclxuICAgIGVuOiAnV2VzdCcsXHJcbiAgICBkZTogJ1dlc3RlbicsXHJcbiAgICBmcjogJ091ZXN0JyxcclxuICAgIGphOiAn6KW/JyxcclxuICAgIGNuOiAn5bemKOilvyknLFxyXG4gICAga286ICfshJzsqr0nLFxyXG4gIH0sXHJcbiAgbm9ydGh3ZXN0OiB7XHJcbiAgICBlbjogJ05vcnRod2VzdCcsXHJcbiAgICBkZTogJ05vcmR3ZXN0ZW4nLFxyXG4gICAgZnI6ICdOb3JkLU91ZXN0JyxcclxuICAgIGphOiAn5YyX6KW/JyxcclxuICAgIGNuOiAn5bem5LiKKOilv+WMlyknLFxyXG4gICAga286ICfrtoHshJzsqr0nLFxyXG4gIH0sXHJcbiAgbm9ydGhlYXN0OiB7XHJcbiAgICBlbjogJ05vcnRoZWFzdCcsXHJcbiAgICBkZTogJ05vcmRvc3RlbicsXHJcbiAgICBmcjogJ05vcmQtRXN0JyxcclxuICAgIGphOiAn5YyX5p2xJyxcclxuICAgIGNuOiAn5Y+z5LiKKOS4nOWMlyknLFxyXG4gICAga286ICfrtoHrj5nsqr0nLFxyXG4gIH0sXHJcbiAgc291dGh3ZXN0OiB7XHJcbiAgICBlbjogJ1NvdXRod2VzdCcsXHJcbiAgICBkZTogJ1PDvGR3ZXN0ZW4nLFxyXG4gICAgZnI6ICdTdWQtT3Vlc3QnLFxyXG4gICAgamE6ICfljZfopb8nLFxyXG4gICAgY246ICflt6bkuIso6KW/5Y2XKScsXHJcbiAgICBrbzogJ+uCqOyEnOyqvScsXHJcbiAgfSxcclxuICBzb3V0aGVhc3Q6IHtcclxuICAgIGVuOiAnU291dGhlYXN0JyxcclxuICAgIGRlOiAnU8O8ZG9zdGVuJyxcclxuICAgIGZyOiAnU3VkLUVzdCcsXHJcbiAgICBqYTogJ+WNl+adsScsXHJcbiAgICBjbjogJ+WPs+S4iyjkuJzljZcpJyxcclxuICAgIGtvOiAn64Ko64+Z7Kq9JyxcclxuICB9LFxyXG4gIGRpck46IHtcclxuICAgIGVuOiAnTicsXHJcbiAgICBkZTogJ04nLFxyXG4gICAgZnI6ICdOJyxcclxuICAgIGphOiAn5YyXJyxcclxuICAgIGNuOiAn5LiKKOWMlyknLFxyXG4gICAga286ICfrtoEnLFxyXG4gIH0sXHJcbiAgZGlyUzoge1xyXG4gICAgZW46ICdTJyxcclxuICAgIGRlOiAnUycsXHJcbiAgICBmcjogJ1MnLFxyXG4gICAgamE6ICfljZcnLFxyXG4gICAgY246ICfkuIso5Y2XKScsXHJcbiAgICBrbzogJ+uCqCcsXHJcbiAgfSxcclxuICBkaXJFOiB7XHJcbiAgICBlbjogJ0UnLFxyXG4gICAgZGU6ICdPJyxcclxuICAgIGZyOiAnRScsXHJcbiAgICBqYTogJ+adsScsXHJcbiAgICBjbjogJ+WPsyjkuJwpJyxcclxuICAgIGtvOiAn64+ZJyxcclxuICB9LFxyXG4gIGRpclc6IHtcclxuICAgIGVuOiAnVycsXHJcbiAgICBkZTogJ1cnLFxyXG4gICAgZnI6ICdPJyxcclxuICAgIGphOiAn6KW/JyxcclxuICAgIGNuOiAn5bemKOilvyknLFxyXG4gICAga286ICfshJwnLFxyXG4gIH0sXHJcbiAgZGlyTlc6IHtcclxuICAgIGVuOiAnTlcnLFxyXG4gICAgZGU6ICdOVycsXHJcbiAgICBmcjogJ05PJyxcclxuICAgIGphOiAn5YyX6KW/JyxcclxuICAgIGNuOiAn5bem5LiKKOilv+WMlyknLFxyXG4gICAga286ICfrtoHshJwnLFxyXG4gIH0sXHJcbiAgZGlyTkU6IHtcclxuICAgIGVuOiAnTkUnLFxyXG4gICAgZGU6ICdOTycsXHJcbiAgICBmcjogJ05FJyxcclxuICAgIGphOiAn5YyX5p2xJyxcclxuICAgIGNuOiAn5Y+z5LiKKOS4nOWMlyknLFxyXG4gICAga286ICfrtoHrj5knLFxyXG4gIH0sXHJcbiAgZGlyU1c6IHtcclxuICAgIGVuOiAnU1cnLFxyXG4gICAgZGU6ICdTVycsXHJcbiAgICBmcjogJ1NPJyxcclxuICAgIGphOiAn5Y2X6KW/JyxcclxuICAgIGNuOiAn5bem5LiLKOilv+WNlyknLFxyXG4gICAga286ICfrgqjshJwnLFxyXG4gIH0sXHJcbiAgZGlyU0U6IHtcclxuICAgIGVuOiAnU0UnLFxyXG4gICAgZGU6ICdTTycsXHJcbiAgICBmcjogJ1NFJyxcclxuICAgIGphOiAn5Y2X5p2xJyxcclxuICAgIGNuOiAn5Y+z5LiLKOS4nOWNlyknLFxyXG4gICAga286ICfrgqjrj5knLFxyXG4gIH0sXHJcbiAgZGlyTk5FOiB7XHJcbiAgICBlbjogJ05ORScsXHJcbiAgICBkZTogJ05OTycsXHJcbiAgICBmcjogJ05ORScsXHJcbiAgICBqYTogJ+WMl+WMl+adsSgx5pmCKScsXHJcbiAgICBjbjogJ+S4iuWBj+WPsyjljJflgY/kuJwpJyxcclxuICAgIGtvOiAnMeyLnCcsXHJcbiAgfSxcclxuICBkaXJFTkU6IHtcclxuICAgIGVuOiAnRU5FJyxcclxuICAgIGRlOiAnT05PJyxcclxuICAgIGZyOiAnRU5FJyxcclxuICAgIGphOiAn5p2x5YyX5p2xKDLmmYIpJyxcclxuICAgIGNuOiAn5Y+z5YGP5LiKKOS4nOWBj+WMlyknLFxyXG4gICAga286ICcy7IucJyxcclxuICB9LFxyXG4gIGRpckVTRToge1xyXG4gICAgZW46ICdFU0UnLFxyXG4gICAgZGU6ICdPU08nLFxyXG4gICAgZnI6ICdFU0UnLFxyXG4gICAgamE6ICfmnbHljZfmnbEoNOaZgiknLFxyXG4gICAgY246ICflj7PlgY/kuIso5Lic5YGP5Y2XKScsXHJcbiAgICBrbzogJzTsi5wnLFxyXG4gIH0sXHJcbiAgZGlyU1NFOiB7XHJcbiAgICBlbjogJ1NTRScsXHJcbiAgICBkZTogJ1NTTycsXHJcbiAgICBmcjogJ1NTRScsXHJcbiAgICBqYTogJ+WNl+WNl+adsSg15pmCKScsXHJcbiAgICBjbjogJ+S4i+WBj+WPsyjljZflgY/kuJwpJyxcclxuICAgIGtvOiAnNeyLnCcsXHJcbiAgfSxcclxuICBkaXJTU1c6IHtcclxuICAgIGVuOiAnU1NXJyxcclxuICAgIGRlOiAnU1NXJyxcclxuICAgIGZyOiAnU1NPJyxcclxuICAgIGphOiAn5Y2X5Y2X6KW/KDfmmYIpJyxcclxuICAgIGNuOiAn5LiL5YGP5bemKOWNl+WBj+ilvyknLFxyXG4gICAga286ICc37IucJyxcclxuICB9LFxyXG4gIGRpcldTVzoge1xyXG4gICAgZW46ICdXU1cnLFxyXG4gICAgZGU6ICdXU1cnLFxyXG4gICAgZnI6ICdPU08nLFxyXG4gICAgamE6ICfopb/ljZfopb8oOOaZgiknLFxyXG4gICAgY246ICflt6blgY/kuIso6KW/5YGP5Y2XKScsXHJcbiAgICBrbzogJzjsi5wnLFxyXG4gIH0sXHJcbiAgZGlyV05XOiB7XHJcbiAgICBlbjogJ1dOVycsXHJcbiAgICBkZTogJ1dOVycsXHJcbiAgICBmcjogJ09OTycsXHJcbiAgICBqYTogJ+ilv+WMl+ilvygxMOaZgiknLFxyXG4gICAgY246ICflt6blgY/kuIoo6KW/5YGP5YyXKScsXHJcbiAgICBrbzogJzEw7IucJyxcclxuICB9LFxyXG4gIGRpck5OVzoge1xyXG4gICAgZW46ICdOTlcnLFxyXG4gICAgZGU6ICdOTlcnLFxyXG4gICAgZnI6ICdOTk8nLFxyXG4gICAgamE6ICfljJfljJfopb8oMTHmmYIpJyxcclxuICAgIGNuOiAn5LiK5YGP5bemKOWMl+WBj+ilvyknLFxyXG4gICAga286ICcxMeyLnCcsXHJcbiAgfSxcclxuICB0YW5rOiB7XHJcbiAgICBlbjogJ1RhbmsnLFxyXG4gICAgZGU6ICdUYW5rJyxcclxuICAgIGZyOiAnVGFuaycsXHJcbiAgICBqYTogJ+OCv+ODs+OCrycsXHJcbiAgICBjbjogJ+WdpuWFiycsXHJcbiAgICBrbzogJ+2DsScsXHJcbiAgfSxcclxuICBoZWFsZXI6IHtcclxuICAgIGVuOiAnSGVhbGVyJyxcclxuICAgIGRlOiAnSGVpbGVyJyxcclxuICAgIGZyOiAnSGVhbGVyJyxcclxuICAgIGphOiAn44OS44O844Op44O8JyxcclxuICAgIGNuOiAn5rK755aXJyxcclxuICAgIGtvOiAn7Z6QJyxcclxuICB9LFxyXG4gIGRwczoge1xyXG4gICAgZW46ICdEUFMnLFxyXG4gICAgZGU6ICdEUFMnLFxyXG4gICAgZnI6ICdEUFMnLFxyXG4gICAgamE6ICdEUFMnLFxyXG4gICAgY246ICdEUFMnLFxyXG4gICAga286ICfrlJzrn6wnLFxyXG4gIH0sXHJcbiAgLy8gTGl0ZXJhbCBudW1iZXJzLlxyXG4gIG51bTA6IG51bWJlclRvT3V0cHV0U3RyaW5nKDApLFxyXG4gIG51bTE6IG51bWJlclRvT3V0cHV0U3RyaW5nKDEpLFxyXG4gIG51bTI6IG51bWJlclRvT3V0cHV0U3RyaW5nKDIpLFxyXG4gIG51bTM6IG51bWJlclRvT3V0cHV0U3RyaW5nKDMpLFxyXG4gIG51bTQ6IG51bWJlclRvT3V0cHV0U3RyaW5nKDQpLFxyXG4gIG51bTU6IG51bWJlclRvT3V0cHV0U3RyaW5nKDUpLFxyXG4gIG51bTY6IG51bWJlclRvT3V0cHV0U3RyaW5nKDYpLFxyXG4gIG51bTc6IG51bWJlclRvT3V0cHV0U3RyaW5nKDcpLFxyXG4gIG51bTg6IG51bWJlclRvT3V0cHV0U3RyaW5nKDgpLFxyXG4gIG51bTk6IG51bWJlclRvT3V0cHV0U3RyaW5nKDkpLFxyXG59IGFzIGNvbnN0O1xyXG4iLCIvLyBPdmVybGF5UGx1Z2luIEFQSSBzZXR1cFxyXG5cclxuaW1wb3J0IHtcclxuICBFdmVudE1hcCxcclxuICBFdmVudFR5cGUsXHJcbiAgSU92ZXJsYXlIYW5kbGVyLFxyXG4gIE92ZXJsYXlIYW5kbGVyRnVuY3MsXHJcbiAgT3ZlcmxheUhhbmRsZXJUeXBlcyxcclxufSBmcm9tICcuLi90eXBlcy9ldmVudCc7XHJcblxyXG50eXBlIEJhc2VSZXNwb25zZSA9IHsgcnNlcT86IG51bWJlcjsgJyRlcnJvcic/OiBib29sZWFuIH07XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICBfX092ZXJsYXlDYWxsYmFjazogRXZlbnRNYXBbRXZlbnRUeXBlXTtcclxuICAgIGRpc3BhdGNoT3ZlcmxheUV2ZW50PzogdHlwZW9mIHByb2Nlc3NFdmVudDtcclxuICAgIE92ZXJsYXlQbHVnaW5BcGk6IHtcclxuICAgICAgcmVhZHk6IGJvb2xlYW47XHJcbiAgICAgIGNhbGxIYW5kbGVyOiAobXNnOiBzdHJpbmcsIGNiPzogKHZhbHVlOiBzdHJpbmcpID0+IHVua25vd24pID0+IHZvaWQ7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGlzIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxyXG4gICAgICpcclxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRvIGltcG9ydCBmcm9tIHRoaXMgZmlsZTpcclxuICAgICAqXHJcbiAgICAgKiBgaW1wb3J0IHsgYWRkT3ZlcmxheUxpc3RlbmVyIH0gZnJvbSAnL3BhdGgvdG8vb3ZlcmxheV9wbHVnaW5fYXBpJztgXHJcbiAgICAgKi9cclxuICAgIGFkZE92ZXJsYXlMaXN0ZW5lcjogSUFkZE92ZXJsYXlMaXN0ZW5lcjtcclxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cclxuICAgICAqXHJcbiAgICAgKiBJdCBpcyByZWNvbW1lbmRlZCB0byBpbXBvcnQgZnJvbSB0aGlzIGZpbGU6XHJcbiAgICAgKlxyXG4gICAgICogYGltcG9ydCB7IHJlbW92ZU92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy9wYXRoL3RvL292ZXJsYXlfcGx1Z2luX2FwaSc7YFxyXG4gICAgICovXHJcbiAgICByZW1vdmVPdmVybGF5TGlzdGVuZXI6IElSZW1vdmVPdmVybGF5TGlzdGVuZXI7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXHJcbiAgICAgKlxyXG4gICAgICogSXQgaXMgcmVjb21tZW5kZWQgdG8gaW1wb3J0IGZyb20gdGhpcyBmaWxlOlxyXG4gICAgICpcclxuICAgICAqIGBpbXBvcnQgeyBjYWxsT3ZlcmxheUhhbmRsZXIgfSBmcm9tICcvcGF0aC90by9vdmVybGF5X3BsdWdpbl9hcGknO2BcclxuICAgICAqL1xyXG4gICAgY2FsbE92ZXJsYXlIYW5kbGVyOiBJT3ZlcmxheUhhbmRsZXI7XHJcbiAgfVxyXG59XHJcblxyXG50eXBlIElBZGRPdmVybGF5TGlzdGVuZXIgPSA8VCBleHRlbmRzIEV2ZW50VHlwZT4oZXZlbnQ6IFQsIGNiOiBFdmVudE1hcFtUXSkgPT4gdm9pZDtcclxudHlwZSBJUmVtb3ZlT3ZlcmxheUxpc3RlbmVyID0gPFQgZXh0ZW5kcyBFdmVudFR5cGU+KGV2ZW50OiBULCBjYjogRXZlbnRNYXBbVF0pID0+IHZvaWQ7XHJcblxyXG50eXBlIFN1YnNjcmliZXI8VD4gPSB7XHJcbiAgW2tleSBpbiBFdmVudFR5cGVdPzogVFtdO1xyXG59O1xyXG50eXBlIEV2ZW50UGFyYW1ldGVyID0gUGFyYW1ldGVyczxFdmVudE1hcFtFdmVudFR5cGVdPlswXTtcclxudHlwZSBWb2lkRnVuYzxUPiA9ICguLi5hcmdzOiBUW10pID0+IHZvaWQ7XHJcblxyXG5sZXQgaW5pdGVkID0gZmFsc2U7XHJcblxyXG5sZXQgd3NVcmw6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG5sZXQgd3M6IFdlYlNvY2tldCB8IG51bGwgPSBudWxsO1xyXG5sZXQgcXVldWU6IChcclxuICB8IHsgW3M6IHN0cmluZ106IHVua25vd24gfVxyXG4gIHwgW3sgW3M6IHN0cmluZ106IHVua25vd24gfSwgKCh2YWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4gdW5rbm93bikgfCB1bmRlZmluZWRdXHJcbilbXSB8IG51bGwgPSBbXTtcclxubGV0IHJzZXFDb3VudGVyID0gMDtcclxudHlwZSBQcm9taXNlRnVuY3MgPSB7XHJcbiAgcmVzb2x2ZTogKHZhbHVlOiB1bmtub3duKSA9PiB2b2lkO1xyXG4gIHJlamVjdDogKHZhbHVlOiB1bmtub3duKSA9PiB2b2lkO1xyXG59O1xyXG5jb25zdCByZXNwb25zZVByb21pc2VzOiB7IFtyc2VxSWR4OiBudW1iZXJdOiBQcm9taXNlRnVuY3MgfSA9IHt9O1xyXG5cclxuY29uc3Qgc3Vic2NyaWJlcnM6IFN1YnNjcmliZXI8Vm9pZEZ1bmM8dW5rbm93bj4+ID0ge307XHJcblxyXG5jb25zdCBzZW5kTWVzc2FnZSA9IChcclxuICBtc2c6IHsgW3M6IHN0cmluZ106IHVua25vd24gfSxcclxuICBjYj86ICh2YWx1ZTogc3RyaW5nIHwgbnVsbCkgPT4gdW5rbm93bixcclxuKTogdm9pZCA9PiB7XHJcbiAgaWYgKHdzKSB7XHJcbiAgICBpZiAocXVldWUpXHJcbiAgICAgIHF1ZXVlLnB1c2gobXNnKTtcclxuICAgIGVsc2VcclxuICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeShtc2cpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgaWYgKHF1ZXVlKVxyXG4gICAgICBxdWV1ZS5wdXNoKFttc2csIGNiXSk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHdpbmRvdy5PdmVybGF5UGx1Z2luQXBpLmNhbGxIYW5kbGVyKEpTT04uc3RyaW5naWZ5KG1zZyksIGNiKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBwcm9jZXNzRXZlbnQgPSA8VCBleHRlbmRzIEV2ZW50VHlwZT4obXNnOiBQYXJhbWV0ZXJzPEV2ZW50TWFwW1RdPlswXSk6IHZvaWQgPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgY29uc3Qgc3VicyA9IHN1YnNjcmliZXJzW21zZy50eXBlXTtcclxuICBzdWJzPy5mb3JFYWNoKChzdWIpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHN1Yihtc2cpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRpc3BhdGNoT3ZlcmxheUV2ZW50ID0gcHJvY2Vzc0V2ZW50O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZE92ZXJsYXlMaXN0ZW5lcjogSUFkZE92ZXJsYXlMaXN0ZW5lciA9IChldmVudCwgY2IpOiB2b2lkID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIGlmICghc3Vic2NyaWJlcnNbZXZlbnRdKSB7XHJcbiAgICBzdWJzY3JpYmVyc1tldmVudF0gPSBbXTtcclxuXHJcbiAgICBpZiAoIXF1ZXVlKSB7XHJcbiAgICAgIHNlbmRNZXNzYWdlKHtcclxuICAgICAgICBjYWxsOiAnc3Vic2NyaWJlJyxcclxuICAgICAgICBldmVudHM6IFtldmVudF0sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlcnNbZXZlbnRdPy5wdXNoKGNiIGFzIFZvaWRGdW5jPHVua25vd24+KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVPdmVybGF5TGlzdGVuZXI6IElSZW1vdmVPdmVybGF5TGlzdGVuZXIgPSAoZXZlbnQsIGNiKTogdm9pZCA9PiB7XHJcbiAgaW5pdCgpO1xyXG5cclxuICBpZiAoc3Vic2NyaWJlcnNbZXZlbnRdKSB7XHJcbiAgICBjb25zdCBsaXN0ID0gc3Vic2NyaWJlcnNbZXZlbnRdO1xyXG4gICAgY29uc3QgcG9zID0gbGlzdD8uaW5kZXhPZihjYiBhcyBWb2lkRnVuYzx1bmtub3duPik7XHJcblxyXG4gICAgaWYgKHBvcyAhPT0gdW5kZWZpbmVkICYmIHBvcyA+IC0xKVxyXG4gICAgICBsaXN0Py5zcGxpY2UocG9zLCAxKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBjYWxsT3ZlcmxheUhhbmRsZXJJbnRlcm5hbDogSU92ZXJsYXlIYW5kbGVyID0gKFxyXG4gIF9tc2c6IHsgW3M6IHN0cmluZ106IHVua25vd24gfSxcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4pOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIGluaXQoKTtcclxuXHJcbiAgY29uc3QgbXNnID0ge1xyXG4gICAgLi4uX21zZyxcclxuICAgIHJzZXE6IDAsXHJcbiAgfTtcclxuICBsZXQgcDogUHJvbWlzZTx1bmtub3duPjtcclxuXHJcbiAgaWYgKHdzKSB7XHJcbiAgICBtc2cucnNlcSA9IHJzZXFDb3VudGVyKys7XHJcbiAgICBwID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICByZXNwb25zZVByb21pc2VzW21zZy5yc2VxXSA9IHsgcmVzb2x2ZTogcmVzb2x2ZSwgcmVqZWN0OiByZWplY3QgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIHNlbmRNZXNzYWdlKG1zZyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHNlbmRNZXNzYWdlKG1zZywgKGRhdGEpID0+IHtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShkYXRhKSBhcyBCYXNlUmVzcG9uc2U7XHJcbiAgICAgICAgaWYgKHBhcnNlZFsnJGVycm9yJ10pXHJcbiAgICAgICAgICByZWplY3QocGFyc2VkKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICByZXNvbHZlKHBhcnNlZCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcDtcclxufTtcclxuXHJcbnR5cGUgT3ZlcnJpZGVNYXAgPSB7IFtjYWxsIGluIE92ZXJsYXlIYW5kbGVyVHlwZXNdPzogT3ZlcmxheUhhbmRsZXJGdW5jc1tjYWxsXSB9O1xyXG5jb25zdCBjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcDogT3ZlcnJpZGVNYXAgPSB7fTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYWxsT3ZlcmxheUhhbmRsZXI6IElPdmVybGF5SGFuZGxlciA9IChcclxuICBfbXNnOiB7IFtzOiBzdHJpbmddOiB1bmtub3duIH0sXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBpbml0KCk7XHJcblxyXG4gIC8vIElmIHRoaXMgYGFzYCBpcyBpbmNvcnJlY3QsIHRoZW4gaXQgd2lsbCBub3QgZmluZCBhbiBvdmVycmlkZS5cclxuICAvLyBUT0RPOiB3ZSBjb3VsZCBhbHNvIHJlcGxhY2UgdGhpcyB3aXRoIGEgdHlwZSBndWFyZC5cclxuICBjb25zdCB0eXBlID0gX21zZy5jYWxsIGFzIGtleW9mIE92ZXJyaWRlTWFwO1xyXG4gIGNvbnN0IGNhbGxGdW5jID0gY2FsbE92ZXJsYXlIYW5kbGVyT3ZlcnJpZGVNYXBbdHlwZV0gPz8gY2FsbE92ZXJsYXlIYW5kbGVySW50ZXJuYWw7XHJcblxyXG4gIC8vIFRoZSBgSU92ZXJsYXlIYW5kbGVyYCB0eXBlIGd1YXJhbnRlZXMgdGhhdCBwYXJhbWV0ZXJzL3JldHVybiB0eXBlIG1hdGNoXHJcbiAgLy8gb25lIG9mIHRoZSBvdmVybGF5IGhhbmRsZXJzLiAgVGhlIE92ZXJyaWRlTWFwIGFsc28gb25seSBzdG9yZXMgZnVuY3Rpb25zXHJcbiAgLy8gdGhhdCBtYXRjaCBieSB0aGUgZGlzY3JpbWluYXRpbmcgYGNhbGxgIGZpZWxkLCBhbmQgc28gYW55IG92ZXJyaWRlc1xyXG4gIC8vIHNob3VsZCBiZSBjb3JyZWN0IGhlcmUuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XHJcbiAgcmV0dXJuIGNhbGxGdW5jKF9tc2cgYXMgYW55KTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXRPdmVybGF5SGFuZGxlck92ZXJyaWRlID0gPFQgZXh0ZW5kcyBrZXlvZiBPdmVybGF5SGFuZGxlckZ1bmNzPihcclxuICB0eXBlOiBULFxyXG4gIG92ZXJyaWRlPzogT3ZlcmxheUhhbmRsZXJGdW5jc1tUXSxcclxuKTogdm9pZCA9PiB7XHJcbiAgaWYgKCFvdmVycmlkZSkge1xyXG4gICAgZGVsZXRlIGNhbGxPdmVybGF5SGFuZGxlck92ZXJyaWRlTWFwW3R5cGVdO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcFt0eXBlXSA9IG92ZXJyaWRlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGluaXQgPSAoKTogdm9pZCA9PiB7XHJcbiAgaWYgKGluaXRlZClcclxuICAgIHJldHVybjtcclxuXHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3c1VybCA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCkuZ2V0KCdPVkVSTEFZX1dTJyk7XHJcbiAgICBpZiAod3NVcmwgIT09IG51bGwpIHtcclxuICAgICAgY29uc3QgY29ubmVjdFdzID0gZnVuY3Rpb24od3NVcmw6IHN0cmluZykge1xyXG4gICAgICAgIHdzID0gbmV3IFdlYlNvY2tldCh3c1VybCk7XHJcblxyXG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGUpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIScpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHEgPSBxdWV1ZSA/PyBbXTtcclxuICAgICAgICAgIHF1ZXVlID0gbnVsbDtcclxuXHJcbiAgICAgICAgICBzZW5kTWVzc2FnZSh7XHJcbiAgICAgICAgICAgIGNhbGw6ICdzdWJzY3JpYmUnLFxyXG4gICAgICAgICAgICBldmVudHM6IE9iamVjdC5rZXlzKHN1YnNjcmliZXJzKSxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGZvciAoY29uc3QgbXNnIG9mIHEpIHtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1zZykpXHJcbiAgICAgICAgICAgICAgc2VuZE1lc3NhZ2UobXNnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChfbXNnKSA9PiB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIF9tc2cuZGF0YSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIG1lc3NhZ2UgZGF0YSByZWNlaXZlZDogJywgX21zZyk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IEpTT04ucGFyc2UoX21zZy5kYXRhKSBhcyBFdmVudFBhcmFtZXRlciAmIEJhc2VSZXNwb25zZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VGdW5jcyA9IG1zZz8ucnNlcSAhPT0gdW5kZWZpbmVkID8gcmVzcG9uc2VQcm9taXNlc1ttc2cucnNlcV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmIChtc2cucnNlcSAhPT0gdW5kZWZpbmVkICYmIHByb21pc2VGdW5jcykge1xyXG4gICAgICAgICAgICAgIGlmIChtc2dbJyRlcnJvciddKVxyXG4gICAgICAgICAgICAgICAgcHJvbWlzZUZ1bmNzLnJlamVjdChtc2cpO1xyXG4gICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHByb21pc2VGdW5jcy5yZXNvbHZlKG1zZyk7XHJcbiAgICAgICAgICAgICAgZGVsZXRlIHJlc3BvbnNlUHJvbWlzZXNbbXNnLnJzZXFdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHByb2Nlc3NFdmVudChtc2cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ludmFsaWQgbWVzc2FnZSByZWNlaXZlZDogJywgX21zZyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICBxdWV1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1RyeWluZyB0byByZWNvbm5lY3QuLi4nKTtcclxuICAgICAgICAgIC8vIERvbid0IHNwYW0gdGhlIHNlcnZlciB3aXRoIHJldHJpZXMuXHJcbiAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbm5lY3RXcyh3c1VybCk7XHJcbiAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29ubmVjdFdzKHdzVXJsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHdhaXRGb3JBcGkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXdpbmRvdy5PdmVybGF5UGx1Z2luQXBpPy5yZWFkeSkge1xyXG4gICAgICAgICAgd2luZG93LnNldFRpbWVvdXQod2FpdEZvckFwaSwgMzAwKTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHEgPSBxdWV1ZSA/PyBbXTtcclxuICAgICAgICBxdWV1ZSA9IG51bGw7XHJcblxyXG4gICAgICAgIHdpbmRvdy5fX092ZXJsYXlDYWxsYmFjayA9IHByb2Nlc3NFdmVudDtcclxuXHJcbiAgICAgICAgc2VuZE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgY2FsbDogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgICBldmVudHM6IE9iamVjdC5rZXlzKHN1YnNjcmliZXJzKSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHEpIHtcclxuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKVxyXG4gICAgICAgICAgICBzZW5kTWVzc2FnZShpdGVtWzBdLCBpdGVtWzFdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3YWl0Rm9yQXBpKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGVyZSB0aGUgT3ZlcmxheVBsdWdpbiBBUEkgaXMgcmVnaXN0ZXJlZCB0byB0aGUgd2luZG93IG9iamVjdCxcclxuICAgIC8vIGJ1dCB0aGlzIGlzIG1haW5seSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEZvciBjYWN0Ym90J3MgYnVpbHQtaW4gZmlsZXMsXHJcbiAgICAvLyBpdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHZhcmlvdXMgZnVuY3Rpb25zIGV4cG9ydGVkIGluIHJlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGkudHMuXHJcblxyXG4gICAgLyogZXNsaW50LWRpc2FibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cclxuICAgIHdpbmRvdy5hZGRPdmVybGF5TGlzdGVuZXIgPSBhZGRPdmVybGF5TGlzdGVuZXI7XHJcbiAgICB3aW5kb3cucmVtb3ZlT3ZlcmxheUxpc3RlbmVyID0gcmVtb3ZlT3ZlcmxheUxpc3RlbmVyO1xyXG4gICAgd2luZG93LmNhbGxPdmVybGF5SGFuZGxlciA9IGNhbGxPdmVybGF5SGFuZGxlcjtcclxuICAgIHdpbmRvdy5kaXNwYXRjaE92ZXJsYXlFdmVudCA9IGRpc3BhdGNoT3ZlcmxheUV2ZW50O1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvbiAqL1xyXG4gIH1cclxuXHJcbiAgaW5pdGVkID0gdHJ1ZTtcclxufTtcclxuIiwiaW1wb3J0IHsgTmV0RmllbGRzLCBOZXRGaWVsZHNSZXZlcnNlIH0gZnJvbSAnLi4vdHlwZXMvbmV0X2ZpZWxkcyc7XHJcbmltcG9ydCB7IE5ldFBhcmFtcyB9IGZyb20gJy4uL3R5cGVzL25ldF9wcm9wcyc7XHJcbmltcG9ydCB7IENhY3Rib3RCYXNlUmVnRXhwIH0gZnJvbSAnLi4vdHlwZXMvbmV0X3RyaWdnZXInO1xyXG5cclxuaW1wb3J0IGxvZ0RlZmluaXRpb25zLCB7XHJcbiAgbG9nRGVmaW5pdGlvbnNWZXJzaW9ucyxcclxuICBMb2dEZWZpbml0aW9uVHlwZXMsXHJcbiAgTG9nRGVmaW5pdGlvblZlcnNpb25zLFxyXG4gIFBhcnNlSGVscGVyRmllbGRzLFxyXG4gIFJlcGVhdGluZ0ZpZWxkc0RlZmluaXRpb25zLFxyXG4gIFJlcGVhdGluZ0ZpZWxkc1R5cGVzLFxyXG59IGZyb20gJy4vbmV0bG9nX2RlZnMnO1xyXG5pbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuL25vdF9yZWFjaGVkJztcclxuXHJcbmNvbnN0IHNlcGFyYXRvciA9ICc6JztcclxuY29uc3QgbWF0Y2hEZWZhdWx0ID0gJ1teOl0qJztcclxuY29uc3QgbWF0Y2hXaXRoQ29sb25zRGVmYXVsdCA9ICcoPzpbXjpdfDogKSo/JztcclxuY29uc3QgZmllbGRzV2l0aFBvdGVudGlhbENvbG9ucyA9IFsnZWZmZWN0JywgJ2FiaWxpdHknXTtcclxuXHJcbmNvbnN0IGRlZmF1bHRQYXJhbXMgPSA8XHJcbiAgVCBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcyxcclxuICBWIGV4dGVuZHMgTG9nRGVmaW5pdGlvblZlcnNpb25zLFxyXG4+KHR5cGU6IFQsIHZlcnNpb246IFYsIGluY2x1ZGU/OiBzdHJpbmdbXSk6IFBhcnRpYWw8UGFyc2VIZWxwZXJGaWVsZHM8VD4+ID0+IHtcclxuICBjb25zdCBsb2dUeXBlID0gbG9nRGVmaW5pdGlvbnNWZXJzaW9uc1t2ZXJzaW9uXVt0eXBlXTtcclxuICBpZiAoaW5jbHVkZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICBpbmNsdWRlID0gT2JqZWN0LmtleXMobG9nVHlwZS5maWVsZHMpO1xyXG4gICAgaWYgKCdyZXBlYXRpbmdGaWVsZHMnIGluIGxvZ1R5cGUpIHtcclxuICAgICAgaW5jbHVkZS5wdXNoKGxvZ1R5cGUucmVwZWF0aW5nRmllbGRzLmxhYmVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IHBhcmFtczoge1xyXG4gICAgW2luZGV4OiBudW1iZXJdOiB7XHJcbiAgICAgIGZpZWxkOiBzdHJpbmc7XHJcbiAgICAgIHZhbHVlPzogc3RyaW5nO1xyXG4gICAgICBvcHRpb25hbDogYm9vbGVhbjtcclxuICAgICAgcmVwZWF0aW5nPzogYm9vbGVhbjtcclxuICAgICAgcmVwZWF0aW5nS2V5cz86IHN0cmluZ1tdO1xyXG4gICAgICBzb3J0S2V5cz86IGJvb2xlYW47XHJcbiAgICAgIHByaW1hcnlLZXk/OiBzdHJpbmc7XHJcbiAgICAgIHBvc3NpYmxlS2V5cz86IHN0cmluZ1tdO1xyXG4gICAgfTtcclxuICB9ID0ge307XHJcbiAgY29uc3QgZmlyc3RPcHRpb25hbEZpZWxkID0gbG9nVHlwZS5maXJzdE9wdGlvbmFsRmllbGQ7XHJcblxyXG4gIGZvciAoY29uc3QgW3Byb3AsIGluZGV4XSBvZiBPYmplY3QuZW50cmllcyhsb2dUeXBlLmZpZWxkcykpIHtcclxuICAgIGlmICghaW5jbHVkZS5pbmNsdWRlcyhwcm9wKSlcclxuICAgICAgY29udGludWU7XHJcbiAgICBjb25zdCBwYXJhbTogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZT86IHN0cmluZzsgb3B0aW9uYWw6IGJvb2xlYW47IHJlcGVhdGluZz86IGJvb2xlYW4gfSA9IHtcclxuICAgICAgZmllbGQ6IHByb3AsXHJcbiAgICAgIG9wdGlvbmFsOiBmaXJzdE9wdGlvbmFsRmllbGQgIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+PSBmaXJzdE9wdGlvbmFsRmllbGQsXHJcbiAgICB9O1xyXG4gICAgaWYgKHByb3AgPT09ICd0eXBlJylcclxuICAgICAgcGFyYW0udmFsdWUgPSBsb2dUeXBlLnR5cGU7XHJcblxyXG4gICAgcGFyYW1zW2luZGV4XSA9IHBhcmFtO1xyXG4gIH1cclxuXHJcbiAgaWYgKCdyZXBlYXRpbmdGaWVsZHMnIGluIGxvZ1R5cGUgJiYgaW5jbHVkZS5pbmNsdWRlcyhsb2dUeXBlLnJlcGVhdGluZ0ZpZWxkcy5sYWJlbCkpIHtcclxuICAgIHBhcmFtc1tsb2dUeXBlLnJlcGVhdGluZ0ZpZWxkcy5zdGFydGluZ0luZGV4XSA9IHtcclxuICAgICAgZmllbGQ6IGxvZ1R5cGUucmVwZWF0aW5nRmllbGRzLmxhYmVsLFxyXG4gICAgICBvcHRpb25hbDogZmlyc3RPcHRpb25hbEZpZWxkICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICBsb2dUeXBlLnJlcGVhdGluZ0ZpZWxkcy5zdGFydGluZ0luZGV4ID49IGZpcnN0T3B0aW9uYWxGaWVsZCxcclxuICAgICAgcmVwZWF0aW5nOiB0cnVlLFxyXG4gICAgICByZXBlYXRpbmdLZXlzOiBbLi4ubG9nVHlwZS5yZXBlYXRpbmdGaWVsZHMubmFtZXNdLFxyXG4gICAgICBzb3J0S2V5czogbG9nVHlwZS5yZXBlYXRpbmdGaWVsZHMuc29ydEtleXMsXHJcbiAgICAgIHByaW1hcnlLZXk6IGxvZ1R5cGUucmVwZWF0aW5nRmllbGRzLnByaW1hcnlLZXksXHJcbiAgICAgIHBvc3NpYmxlS2V5czogWy4uLmxvZ1R5cGUucmVwZWF0aW5nRmllbGRzLnBvc3NpYmxlS2V5c10sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHBhcmFtcyBhcyBQYXJ0aWFsPFBhcnNlSGVscGVyRmllbGRzPFQ+PjtcclxufTtcclxuXHJcbnR5cGUgUmVwZWF0aW5nRmllbGRzTWFwPFxyXG4gIFRCYXNlIGV4dGVuZHMgTG9nRGVmaW5pdGlvblR5cGVzLFxyXG4gIFRLZXkgZXh0ZW5kcyBSZXBlYXRpbmdGaWVsZHNUeXBlcyA9IFRCYXNlIGV4dGVuZHMgUmVwZWF0aW5nRmllbGRzVHlwZXMgPyBUQmFzZSA6IG5ldmVyLFxyXG4+ID0ge1xyXG4gIFtuYW1lIGluIFJlcGVhdGluZ0ZpZWxkc0RlZmluaXRpb25zW1RLZXldWydyZXBlYXRpbmdGaWVsZHMnXVsnbmFtZXMnXVtudW1iZXJdXTpcclxuICAgIHwgc3RyaW5nXHJcbiAgICB8IHN0cmluZ1tdO1xyXG59W107XHJcblxyXG50eXBlIFJlcGVhdGluZ0ZpZWxkc01hcFR5cGVDaGVjazxcclxuICBUQmFzZSBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcyxcclxuICBGIGV4dGVuZHMga2V5b2YgTmV0RmllbGRzW1RCYXNlXSxcclxuICBUS2V5IGV4dGVuZHMgUmVwZWF0aW5nRmllbGRzVHlwZXMgPSBUQmFzZSBleHRlbmRzIFJlcGVhdGluZ0ZpZWxkc1R5cGVzID8gVEJhc2UgOiBuZXZlcixcclxuPiA9IEYgZXh0ZW5kcyBSZXBlYXRpbmdGaWVsZHNEZWZpbml0aW9uc1tUS2V5XVsncmVwZWF0aW5nRmllbGRzJ11bJ2xhYmVsJ11cclxuICA/IFJlcGVhdGluZ0ZpZWxkc01hcDxUS2V5PiA6XHJcbiAgbmV2ZXI7XHJcblxyXG50eXBlIFJlcGVhdGluZ0ZpZWxkc01hcFR5cGU8XHJcbiAgVCBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcyxcclxuICBGIGV4dGVuZHMga2V5b2YgTmV0RmllbGRzW1RdLFxyXG4+ID0gVCBleHRlbmRzIFJlcGVhdGluZ0ZpZWxkc1R5cGVzID8gUmVwZWF0aW5nRmllbGRzTWFwVHlwZUNoZWNrPFQsIEY+XHJcbiAgOiBuZXZlcjtcclxuXHJcbnR5cGUgUGFyc2VIZWxwZXJUeXBlPFQgZXh0ZW5kcyBMb2dEZWZpbml0aW9uVHlwZXM+ID1cclxuICAmIHtcclxuICAgIFtmaWVsZCBpbiBrZXlvZiBOZXRGaWVsZHNbVF1dPzogc3RyaW5nIHwgcmVhZG9ubHkgc3RyaW5nW10gfCBSZXBlYXRpbmdGaWVsZHNNYXBUeXBlPFQsIGZpZWxkPjtcclxuICB9XHJcbiAgJiB7IGNhcHR1cmU/OiBib29sZWFuIH07XHJcblxyXG5jb25zdCBpc1JlcGVhdGluZ0ZpZWxkID0gPFxyXG4gIFQgZXh0ZW5kcyBMb2dEZWZpbml0aW9uVHlwZXMsXHJcbj4oXHJcbiAgcmVwZWF0aW5nOiBib29sZWFuIHwgdW5kZWZpbmVkLFxyXG4gIHZhbHVlOiBzdHJpbmcgfCByZWFkb25seSBzdHJpbmdbXSB8IFJlcGVhdGluZ0ZpZWxkc01hcDxUPiB8IHVuZGVmaW5lZCxcclxuKTogdmFsdWUgaXMgUmVwZWF0aW5nRmllbGRzTWFwPFQ+ID0+IHtcclxuICBpZiAocmVwZWF0aW5nICE9PSB0cnVlKVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIC8vIEFsbG93IGV4Y2x1ZGluZyB0aGUgZmllbGQgdG8gbWF0Y2ggZm9yIGV4dHJhY3Rpb25cclxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgZm9yIChjb25zdCBlIG9mIHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIGUgIT09ICdvYmplY3QnKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuY29uc3QgcGFyc2VIZWxwZXIgPSA8VCBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcz4oXHJcbiAgcGFyYW1zOiBQYXJzZUhlbHBlclR5cGU8VD4gfCB1bmRlZmluZWQsXHJcbiAgZGVmS2V5OiBULFxyXG4gIGZpZWxkczogUGFydGlhbDxQYXJzZUhlbHBlckZpZWxkczxUPj4sXHJcbik6IENhY3Rib3RCYXNlUmVnRXhwPFQ+ID0+IHtcclxuICBwYXJhbXMgPSBwYXJhbXMgPz8ge307XHJcbiAgY29uc3QgdmFsaWRGaWVsZHM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gIGZvciAoY29uc3QgaW5kZXggaW4gZmllbGRzKSB7XHJcbiAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tpbmRleF07XHJcbiAgICBpZiAoZmllbGQpXHJcbiAgICAgIHZhbGlkRmllbGRzLnB1c2goZmllbGQuZmllbGQpO1xyXG4gIH1cclxuXHJcbiAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhwYXJhbXMsIGRlZktleSwgWydjYXB0dXJlJywgLi4udmFsaWRGaWVsZHNdKTtcclxuXHJcbiAgLy8gRmluZCB0aGUgbGFzdCBrZXkgd2UgY2FyZSBhYm91dCwgc28gd2UgY2FuIHNob3J0ZW4gdGhlIHJlZ2V4IGlmIG5lZWRlZC5cclxuICBjb25zdCBjYXB0dXJlID0gUmVnZXhlcy50cnVlSWZVbmRlZmluZWQocGFyYW1zLmNhcHR1cmUpO1xyXG4gIGNvbnN0IGZpZWxkS2V5cyA9IE9iamVjdC5rZXlzKGZpZWxkcykuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYSkgLSBwYXJzZUludChiKSk7XHJcbiAgbGV0IG1heEtleVN0cjogc3RyaW5nO1xyXG4gIGlmIChjYXB0dXJlKSB7XHJcbiAgICBjb25zdCBrZXlzOiBFeHRyYWN0PGtleW9mIE5ldEZpZWxkc1JldmVyc2VbVF0sIHN0cmluZz5bXSA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZmllbGRzKVxyXG4gICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgIGxldCB0bXBLZXkgPSBrZXlzLnBvcCgpO1xyXG4gICAgaWYgKHRtcEtleSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIG1heEtleVN0ciA9IGZpZWxkS2V5c1tmaWVsZEtleXMubGVuZ3RoIC0gMV0gPz8gJzAnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd2hpbGUgKFxyXG4gICAgICAgIGZpZWxkc1t0bXBLZXldPy5vcHRpb25hbCAmJlxyXG4gICAgICAgICEoKGZpZWxkc1t0bXBLZXldPy5maWVsZCA/PyAnJykgaW4gcGFyYW1zKVxyXG4gICAgICApXHJcbiAgICAgICAgdG1wS2V5ID0ga2V5cy5wb3AoKTtcclxuICAgICAgbWF4S2V5U3RyID0gdG1wS2V5ID8/ICcwJztcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbWF4S2V5U3RyID0gJzAnO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZmllbGRzKSB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gZmllbGRzW2tleV0gPz8ge307XHJcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZHNba2V5XT8uZmllbGQ7XHJcbiAgICAgIGlmIChmaWVsZE5hbWUgIT09IHVuZGVmaW5lZCAmJiBmaWVsZE5hbWUgaW4gcGFyYW1zKVxyXG4gICAgICAgIG1heEtleVN0ciA9IGtleTtcclxuICAgIH1cclxuICB9XHJcbiAgY29uc3QgbWF4S2V5ID0gcGFyc2VJbnQobWF4S2V5U3RyKTtcclxuXHJcbiAgLy8gU3BlY2lhbCBjYXNlIGZvciBBYmlsaXR5IHRvIGhhbmRsZSBhb2UgYW5kIG5vbi1hb2UuXHJcbiAgY29uc3QgYWJpbGl0eU1lc3NhZ2VUeXBlID1cclxuICAgIGAoPzoke2xvZ0RlZmluaXRpb25zLkFiaWxpdHkubWVzc2FnZVR5cGV9fCR7bG9nRGVmaW5pdGlvbnMuTmV0d29ya0FPRUFiaWxpdHkubWVzc2FnZVR5cGV9KWA7XHJcbiAgY29uc3QgYWJpbGl0eUhleENvZGUgPSAnKD86MTV8MTYpJztcclxuXHJcbiAgLy8gQnVpbGQgdGhlIHJlZ2V4IGZyb20gdGhlIGZpZWxkcy5cclxuICBjb25zdCBwcmVmaXggPSBkZWZLZXkgIT09ICdBYmlsaXR5JyA/IGxvZ0RlZmluaXRpb25zW2RlZktleV0ubWVzc2FnZVR5cGUgOiBhYmlsaXR5TWVzc2FnZVR5cGU7XHJcblxyXG4gIC8vIEhleCBjb2RlcyBhcmUgYSBtaW5pbXVtIG9mIHR3byBjaGFyYWN0ZXJzLiAgQWJpbGl0aWVzIGFyZSBzcGVjaWFsIGJlY2F1c2VcclxuICAvLyB0aGV5IG5lZWQgdG8gc3VwcG9ydCBib3RoIDB4MTUgYW5kIDB4MTYuXHJcbiAgY29uc3QgdHlwZUFzSGV4ID0gcGFyc2VJbnQobG9nRGVmaW5pdGlvbnNbZGVmS2V5XS50eXBlKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcclxuICBjb25zdCBkZWZhdWx0SGV4Q29kZSA9IHR5cGVBc0hleC5sZW5ndGggPCAyID8gYDAwJHt0eXBlQXNIZXh9YC5zbGljZSgtMikgOiB0eXBlQXNIZXg7XHJcbiAgY29uc3QgaGV4Q29kZSA9IGRlZktleSAhPT0gJ0FiaWxpdHknID8gZGVmYXVsdEhleENvZGUgOiBhYmlsaXR5SGV4Q29kZTtcclxuXHJcbiAgbGV0IHN0ciA9ICcnO1xyXG4gIGlmIChjYXB0dXJlKVxyXG4gICAgc3RyICs9IGAoPzx0aW1lc3RhbXA+XFxcXHl7VGltZXN0YW1wfSkgJHtwcmVmaXh9ICg/PHR5cGU+JHtoZXhDb2RlfSlgO1xyXG4gIGVsc2VcclxuICAgIHN0ciArPSBgXFxcXHl7VGltZXN0YW1wfSAke3ByZWZpeH0gJHtoZXhDb2RlfWA7XHJcblxyXG4gIGxldCBsYXN0S2V5ID0gMTtcclxuICBmb3IgKGNvbnN0IGtleVN0ciBpbiBmaWVsZHMpIHtcclxuICAgIGNvbnN0IHBhcnNlRmllbGQgPSBmaWVsZHNba2V5U3RyXTtcclxuICAgIGlmIChwYXJzZUZpZWxkID09PSB1bmRlZmluZWQpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgY29uc3QgZmllbGROYW1lID0gcGFyc2VGaWVsZC5maWVsZDtcclxuXHJcbiAgICAvLyBSZWdleCBoYW5kbGVzIHRoZXNlIG1hbnVhbGx5IGFib3ZlIGluIHRoZSBgc3RyYCBpbml0aWFsaXphdGlvbi5cclxuICAgIGlmIChmaWVsZE5hbWUgPT09ICd0aW1lc3RhbXAnIHx8IGZpZWxkTmFtZSA9PT0gJ3R5cGUnKVxyXG4gICAgICBjb250aW51ZTtcclxuXHJcbiAgICBjb25zdCBrZXkgPSBwYXJzZUludChrZXlTdHIpO1xyXG4gICAgLy8gRmlsbCBpbiBibGFua3MuXHJcbiAgICBjb25zdCBtaXNzaW5nRmllbGRzID0ga2V5IC0gbGFzdEtleSAtIDE7XHJcbiAgICBpZiAobWlzc2luZ0ZpZWxkcyA9PT0gMSlcclxuICAgICAgc3RyICs9IGAke3NlcGFyYXRvcn0ke21hdGNoRGVmYXVsdH1gO1xyXG4gICAgZWxzZSBpZiAobWlzc2luZ0ZpZWxkcyA+IDEpXHJcbiAgICAgIHN0ciArPSBgKD86JHtzZXBhcmF0b3J9JHttYXRjaERlZmF1bHR9KXske21pc3NpbmdGaWVsZHN9fWA7XHJcbiAgICBsYXN0S2V5ID0ga2V5O1xyXG5cclxuICAgIHN0ciArPSBzZXBhcmF0b3I7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBwYXJzZUZpZWxkICE9PSAnb2JqZWN0JylcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2RlZktleX06IGludmFsaWQgdmFsdWU6ICR7SlNPTi5zdHJpbmdpZnkocGFyc2VGaWVsZCl9YCk7XHJcblxyXG4gICAgY29uc3QgZmllbGREZWZhdWx0ID0gZmllbGROYW1lICE9PSB1bmRlZmluZWQgJiYgZmllbGRzV2l0aFBvdGVudGlhbENvbG9ucy5pbmNsdWRlcyhmaWVsZE5hbWUpXHJcbiAgICAgID8gbWF0Y2hXaXRoQ29sb25zRGVmYXVsdFxyXG4gICAgICA6IG1hdGNoRGVmYXVsdDtcclxuICAgIGNvbnN0IGRlZmF1bHRGaWVsZFZhbHVlID0gcGFyc2VGaWVsZC52YWx1ZT8udG9TdHJpbmcoKSA/PyBmaWVsZERlZmF1bHQ7XHJcbiAgICBjb25zdCBmaWVsZFZhbHVlID0gcGFyYW1zW2ZpZWxkTmFtZV07XHJcblxyXG4gICAgaWYgKGlzUmVwZWF0aW5nRmllbGQoZmllbGRzW2tleVN0cl0/LnJlcGVhdGluZywgZmllbGRWYWx1ZSkpIHtcclxuICAgICAgY29uc3QgcmVwZWF0aW5nRmllbGRzU2VwYXJhdG9yID0gJyg/OiR8OiknO1xyXG4gICAgICBsZXQgcmVwZWF0aW5nQXJyYXk6IFJlcGVhdGluZ0ZpZWxkc01hcDxUPiB8IHVuZGVmaW5lZCA9IGZpZWxkVmFsdWU7XHJcblxyXG4gICAgICBjb25zdCBzb3J0S2V5cyA9IGZpZWxkc1trZXlTdHJdPy5zb3J0S2V5cztcclxuICAgICAgY29uc3QgcHJpbWFyeUtleSA9IGZpZWxkc1trZXlTdHJdPy5wcmltYXJ5S2V5O1xyXG4gICAgICBjb25zdCBwb3NzaWJsZUtleXMgPSBmaWVsZHNba2V5U3RyXT8ucG9zc2libGVLZXlzO1xyXG5cclxuICAgICAgLy8gcHJpbWFyeUtleSBpcyByZXF1aXJlZCBpZiB0aGlzIGlzIGEgcmVwZWF0aW5nIGZpZWxkIHBlciB0eXBlZGVmIGluIG5ldGxvZ19kZWZzLnRzXHJcbiAgICAgIC8vIFNhbWUgd2l0aCBwb3NzaWJsZUtleXNcclxuICAgICAgaWYgKHByaW1hcnlLZXkgPT09IHVuZGVmaW5lZCB8fCBwb3NzaWJsZUtleXMgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICAvLyBBbGxvdyBzb3J0aW5nIGlmIG5lZWRlZFxyXG4gICAgICBpZiAoc29ydEtleXMpIHtcclxuICAgICAgICAvLyBBbHNvIHNvcnQgb3VyIHZhbGlkIGtleXMgbGlzdFxyXG4gICAgICAgIHBvc3NpYmxlS2V5cy5zb3J0KChsZWZ0LCByaWdodCkgPT4gbGVmdC50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUocmlnaHQudG9Mb3dlckNhc2UoKSkpO1xyXG4gICAgICAgIGlmIChyZXBlYXRpbmdBcnJheSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXBlYXRpbmdBcnJheSA9IFsuLi5yZXBlYXRpbmdBcnJheV0uc29ydChcclxuICAgICAgICAgICAgKGxlZnQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCByaWdodDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBudW1iZXIgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIFdlIGNoZWNrIHRoZSB2YWxpZGl0eSBvZiBsZWZ0L3JpZ2h0IGJlY2F1c2UgdGhleSdyZSB1c2VyLXN1cHBsaWVkXHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsZWZ0ICE9PSAnb2JqZWN0JyB8fCBsZWZ0W3ByaW1hcnlLZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8gdHJpZ2dlcjonLCBsZWZ0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25zdCBsZWZ0VmFsdWUgPSBsZWZ0W3ByaW1hcnlLZXldO1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgbGVmdFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhcG9zc2libGVLZXlzPy5pbmNsdWRlcyhsZWZ0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIHRyaWdnZXI6JywgbGVmdCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByaWdodCAhPT0gJ29iamVjdCcgfHwgcmlnaHRbcHJpbWFyeUtleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byB0cmlnZ2VyOicsIHJpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25zdCByaWdodFZhbHVlID0gcmlnaHRbcHJpbWFyeUtleV07XHJcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByaWdodFZhbHVlICE9PSAnc3RyaW5nJyB8fCAhcG9zc2libGVLZXlzPy5pbmNsdWRlcyhyaWdodFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byB0cmlnZ2VyOicsIHJpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm4gbGVmdFZhbHVlLnRvTG93ZXJDYXNlKCkubG9jYWxlQ29tcGFyZShyaWdodFZhbHVlLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGFub25SZXBzOiB7IFtuYW1lOiBzdHJpbmddOiBzdHJpbmcgfCBzdHJpbmdbXSB9W10gfCB1bmRlZmluZWQgPSByZXBlYXRpbmdBcnJheTtcclxuICAgICAgLy8gTG9vcCBvdmVyIG91ciBwb3NzaWJsZSBrZXlzXHJcbiAgICAgIC8vIEJ1aWxkIGEgcmVnZXggdGhhdCBjYW4gbWF0Y2ggYW55IHBvc3NpYmxlIGtleSB3aXRoIHJlcXVpcmVkIHZhbHVlcyBzdWJzdGl0dXRlZCBpblxyXG4gICAgICBwb3NzaWJsZUtleXMuZm9yRWFjaCgocG9zc2libGVLZXkpID0+IHtcclxuICAgICAgICBjb25zdCByZXAgPSBhbm9uUmVwcz8uZmluZCgocmVwKSA9PiBwcmltYXJ5S2V5IGluIHJlcCAmJiByZXBbcHJpbWFyeUtleV0gPT09IHBvc3NpYmxlS2V5KTtcclxuXHJcbiAgICAgICAgbGV0IGZpZWxkUmVnZXggPSAnJztcclxuICAgICAgICAvLyBSYXRoZXIgdGhhbiBsb29waW5nIG92ZXIgdGhlIGtleXMgZGVmaW5lZCBvbiB0aGUgb2JqZWN0LFxyXG4gICAgICAgIC8vIGxvb3Agb3ZlciB0aGUgYmFzZSB0eXBlIGRlZidzIGtleXMuIFRoaXMgZW5mb3JjZXMgdGhlIGNvcnJlY3Qgb3JkZXIuXHJcbiAgICAgICAgZmllbGRzW2tleVN0cl0/LnJlcGVhdGluZ0tleXM/LmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgbGV0IHZhbCA9IHJlcD8uW2tleV07XHJcbiAgICAgICAgICBpZiAocmVwID09PSB1bmRlZmluZWQgfHwgIShrZXkgaW4gcmVwKSkge1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgdmFsdWUgZm9yIHRoaXMga2V5XHJcbiAgICAgICAgICAgIC8vIGluc2VydCBhIHBsYWNlaG9sZGVyLCB1bmxlc3MgaXQncyB0aGUgcHJpbWFyeSBrZXlcclxuICAgICAgICAgICAgaWYgKGtleSA9PT0gcHJpbWFyeUtleSlcclxuICAgICAgICAgICAgICB2YWwgPSBwb3NzaWJsZUtleTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgIHZhbCA9IG1hdGNoRGVmYXVsdDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsKSlcclxuICAgICAgICAgICAgICB2YWwgPSBtYXRjaERlZmF1bHQ7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbC5sZW5ndGggPCAxKVxyXG4gICAgICAgICAgICAgIHZhbCA9IG1hdGNoRGVmYXVsdDtcclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsLnNvbWUoKHYpID0+IHR5cGVvZiB2ICE9PSAnc3RyaW5nJykpXHJcbiAgICAgICAgICAgICAgdmFsID0gbWF0Y2hEZWZhdWx0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZmllbGRSZWdleCArPSBSZWdleGVzLm1heWJlQ2FwdHVyZShcclxuICAgICAgICAgICAga2V5ID09PSBwcmltYXJ5S2V5ID8gZmFsc2UgOiBjYXB0dXJlLFxyXG4gICAgICAgICAgICAvLyBBbGwgY2FwdHVyaW5nIGdyb3VwcyBhcmUgYGZpZWxkTmFtZWAgKyBgcG9zc2libGVLZXlgLCBlLmcuIGBwYWlySXNDYXN0aW5nMWBcclxuICAgICAgICAgICAgZmllbGROYW1lICsgcG9zc2libGVLZXksXHJcbiAgICAgICAgICAgIHZhbCxcclxuICAgICAgICAgICAgZGVmYXVsdEZpZWxkVmFsdWUsXHJcbiAgICAgICAgICApICtcclxuICAgICAgICAgICAgcmVwZWF0aW5nRmllbGRzU2VwYXJhdG9yO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoZmllbGRSZWdleC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBzdHIgKz0gYCg/OiR7ZmllbGRSZWdleH0pJHtyZXAgIT09IHVuZGVmaW5lZCA/ICcnIDogJz8nfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSBpZiAoZmllbGRzW2tleVN0cl0/LnJlcGVhdGluZykge1xyXG4gICAgICAvLyBJZiB0aGlzIGlzIGEgcmVwZWF0aW5nIGZpZWxkIGJ1dCB0aGUgYWN0dWFsIHZhbHVlIGlzIGVtcHR5IG9yIG90aGVyd2lzZSBpbnZhbGlkLFxyXG4gICAgICAvLyBkb24ndCBwcm9jZXNzIGZ1cnRoZXIuIFdlIGNhbid0IHVzZSBgY29udGludWVgIGluIHRoZSBhYm92ZSBibG9jayBiZWNhdXNlIHRoYXRcclxuICAgICAgLy8gd291bGQgc2tpcCB0aGUgZWFybHktb3V0IGJyZWFrIGF0IHRoZSBlbmQgb2YgdGhlIGxvb3AuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZmllbGROYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdHIgKz0gUmVnZXhlcy5tYXliZUNhcHR1cmUoXHJcbiAgICAgICAgICAvLyBtb3JlIGFjY3VyYXRlIHR5cGUgaW5zdGVhZCBvZiBgYXNgIGNhc3RcclxuICAgICAgICAgIC8vIG1heWJlIHRoaXMgZnVuY3Rpb24gbmVlZHMgYSByZWZhY3RvcmluZ1xyXG4gICAgICAgICAgY2FwdHVyZSxcclxuICAgICAgICAgIGZpZWxkTmFtZSxcclxuICAgICAgICAgIGZpZWxkVmFsdWUsXHJcbiAgICAgICAgICBkZWZhdWx0RmllbGRWYWx1ZSxcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0ciArPSBmaWVsZFZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RvcCBpZiB3ZSdyZSBub3QgY2FwdHVyaW5nIGFuZCBkb24ndCBjYXJlIGFib3V0IGZ1dHVyZSBmaWVsZHMuXHJcbiAgICBpZiAoa2V5ID49IG1heEtleSlcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG5cclxuICBzdHIgKz0gJyg/OiR8OiknO1xyXG5cclxuICByZXR1cm4gUmVnZXhlcy5wYXJzZShzdHIpIGFzIENhY3Rib3RCYXNlUmVnRXhwPFQ+O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1aWxkUmVnZXggPSA8VCBleHRlbmRzIGtleW9mIE5ldFBhcmFtcz4oXHJcbiAgdHlwZTogVCxcclxuICBwYXJhbXM/OiBQYXJzZUhlbHBlclR5cGU8VD4sXHJcbik6IENhY3Rib3RCYXNlUmVnRXhwPFQ+ID0+IHtcclxuICByZXR1cm4gcGFyc2VIZWxwZXIocGFyYW1zLCB0eXBlLCBkZWZhdWx0UGFyYW1zKHR5cGUsIFJlZ2V4ZXMubG9nVmVyc2lvbikpO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVnZXhlcyB7XHJcbiAgc3RhdGljIGxvZ1ZlcnNpb246IExvZ0RlZmluaXRpb25WZXJzaW9ucyA9ICdsYXRlc3QnO1xyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMC0weDE0LW5ldHdvcmtzdGFydHNjYXN0aW5nXHJcbiAgICovXHJcbiAgc3RhdGljIHN0YXJ0c1VzaW5nKHBhcmFtcz86IE5ldFBhcmFtc1snU3RhcnRzVXNpbmcnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdTdGFydHNVc2luZyc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdTdGFydHNVc2luZycsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMS0weDE1LW5ldHdvcmthYmlsaXR5XHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjItMHgxNi1uZXR3b3JrYW9lYWJpbGl0eVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYmlsaXR5KHBhcmFtcz86IE5ldFBhcmFtc1snQWJpbGl0eSddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0FiaWxpdHknPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnQWJpbGl0eScsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yMS0weDE1LW5ldHdvcmthYmlsaXR5XHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjItMHgxNi1uZXR3b3JrYW9lYWJpbGl0eVxyXG4gICAqXHJcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGBhYmlsaXR5YCBpbnN0ZWFkXHJcbiAgICovXHJcbiAgc3RhdGljIGFiaWxpdHlGdWxsKHBhcmFtcz86IE5ldFBhcmFtc1snQWJpbGl0eSddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0FiaWxpdHknPiB7XHJcbiAgICByZXR1cm4gdGhpcy5hYmlsaXR5KHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNy0weDFiLW5ldHdvcmt0YXJnZXRpY29uLWhlYWQtbWFya2VyXHJcbiAgICovXHJcbiAgc3RhdGljIGhlYWRNYXJrZXIocGFyYW1zPzogTmV0UGFyYW1zWydIZWFkTWFya2VyJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnSGVhZE1hcmtlcic+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdIZWFkTWFya2VyJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAzLTB4MDMtYWRkY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIGFkZGVkQ29tYmF0YW50KHBhcmFtcz86IE5ldFBhcmFtc1snQWRkZWRDb21iYXRhbnQnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdBZGRlZENvbWJhdGFudCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdBZGRlZENvbWJhdGFudCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMy0weDAzLWFkZGNvbWJhdGFudFxyXG4gICAqL1xyXG4gIHN0YXRpYyBhZGRlZENvbWJhdGFudEZ1bGwoXHJcbiAgICBwYXJhbXM/OiBOZXRQYXJhbXNbJ0FkZGVkQ29tYmF0YW50J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0FkZGVkQ29tYmF0YW50Jz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkZWRDb21iYXRhbnQocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTA0LTB4MDQtcmVtb3ZlY29tYmF0YW50XHJcbiAgICovXHJcbiAgc3RhdGljIHJlbW92aW5nQ29tYmF0YW50KFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydSZW1vdmVkQ29tYmF0YW50J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J1JlbW92ZWRDb21iYXRhbnQnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnUmVtb3ZlZENvbWJhdGFudCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNi0weDFhLW5ldHdvcmtidWZmXHJcbiAgICovXHJcbiAgc3RhdGljIGdhaW5zRWZmZWN0KHBhcmFtcz86IE5ldFBhcmFtc1snR2FpbnNFZmZlY3QnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYWluc0VmZmVjdCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdHYWluc0VmZmVjdCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcmVmZXIgZ2FpbnNFZmZlY3Qgb3ZlciB0aGlzIGZ1bmN0aW9uIHVubGVzcyB5b3UgcmVhbGx5IG5lZWQgZXh0cmEgZGF0YS5cclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zOC0weDI2LW5ldHdvcmtzdGF0dXNlZmZlY3RzXHJcbiAgICovXHJcbiAgc3RhdGljIHN0YXR1c0VmZmVjdEV4cGxpY2l0KFxyXG4gICAgcGFyYW1zPzogTmV0UGFyYW1zWydTdGF0dXNFZmZlY3QnXSxcclxuICApOiBDYWN0Ym90QmFzZVJlZ0V4cDwnU3RhdHVzRWZmZWN0Jz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1N0YXR1c0VmZmVjdCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zMC0weDFlLW5ldHdvcmtidWZmcmVtb3ZlXHJcbiAgICovXHJcbiAgc3RhdGljIGxvc2VzRWZmZWN0KHBhcmFtcz86IE5ldFBhcmFtc1snTG9zZXNFZmZlY3QnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdMb3Nlc0VmZmVjdCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdMb3Nlc0VmZmVjdCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zNS0weDIzLW5ldHdvcmt0ZXRoZXJcclxuICAgKi9cclxuICBzdGF0aWMgdGV0aGVyKHBhcmFtcz86IE5ldFBhcmFtc1snVGV0aGVyJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnVGV0aGVyJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1RldGhlcicsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiAndGFyZ2V0JyB3YXMgZGVmZWF0ZWQgYnkgJ3NvdXJjZSdcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNS0weDE5LW5ldHdvcmtkZWF0aFxyXG4gICAqL1xyXG4gIHN0YXRpYyB3YXNEZWZlYXRlZChwYXJhbXM/OiBOZXRQYXJhbXNbJ1dhc0RlZmVhdGVkJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnV2FzRGVmZWF0ZWQnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnV2FzRGVmZWF0ZWQnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjQtMHgxOC1uZXR3b3JrZG90XHJcbiAgICovXHJcbiAgc3RhdGljIG5ldHdvcmtEb1QocGFyYW1zPzogTmV0UGFyYW1zWydOZXR3b3JrRG9UJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTmV0d29ya0RvVCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdOZXR3b3JrRG9UJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTAwLTB4MDAtbG9nbGluZVxyXG4gICAqL1xyXG4gIHN0YXRpYyBlY2hvKHBhcmFtcz86IE5ldFBhcmFtc1snR2FtZUxvZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICBpZiAodHlwZW9mIHBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpXHJcbiAgICAgIHBhcmFtcyA9IHt9O1xyXG4gICAgUmVnZXhlcy52YWxpZGF0ZVBhcmFtcyhcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICAnZWNobycsXHJcbiAgICAgIFsndHlwZScsICd0aW1lc3RhbXAnLCAnY29kZScsICduYW1lJywgJ2xpbmUnLCAnY2FwdHVyZSddLFxyXG4gICAgKTtcclxuICAgIHBhcmFtcy5jb2RlID0gJzAwMzgnO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMuZ2FtZUxvZyhwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDAtMHgwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGRpYWxvZyhwYXJhbXM/OiBOZXRQYXJhbXNbJ0dhbWVMb2cnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYW1lTG9nJz4ge1xyXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09ICd1bmRlZmluZWQnKVxyXG4gICAgICBwYXJhbXMgPSB7fTtcclxuICAgIFJlZ2V4ZXMudmFsaWRhdGVQYXJhbXMoXHJcbiAgICAgIHBhcmFtcyxcclxuICAgICAgJ2RpYWxvZycsXHJcbiAgICAgIFsndHlwZScsICd0aW1lc3RhbXAnLCAnY29kZScsICduYW1lJywgJ2xpbmUnLCAnY2FwdHVyZSddLFxyXG4gICAgKTtcclxuICAgIHBhcmFtcy5jb2RlID0gJzAwNDQnO1xyXG4gICAgcmV0dXJuIFJlZ2V4ZXMuZ2FtZUxvZyhwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDAtMHgwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIG1lc3NhZ2UocGFyYW1zPzogTmV0UGFyYW1zWydHYW1lTG9nJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnR2FtZUxvZyc+IHtcclxuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAndW5kZWZpbmVkJylcclxuICAgICAgcGFyYW1zID0ge307XHJcbiAgICBSZWdleGVzLnZhbGlkYXRlUGFyYW1zKFxyXG4gICAgICBwYXJhbXMsXHJcbiAgICAgICdtZXNzYWdlJyxcclxuICAgICAgWyd0eXBlJywgJ3RpbWVzdGFtcCcsICdjb2RlJywgJ25hbWUnLCAnbGluZScsICdjYXB0dXJlJ10sXHJcbiAgICApO1xyXG4gICAgcGFyYW1zLmNvZGUgPSAnMDgzOSc7XHJcbiAgICByZXR1cm4gUmVnZXhlcy5nYW1lTG9nKHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmaWVsZHM6IGNvZGUsIG5hbWUsIGxpbmUsIGNhcHR1cmVcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0wMC0weDAwLWxvZ2xpbmVcclxuICAgKi9cclxuICBzdGF0aWMgZ2FtZUxvZyhwYXJhbXM/OiBOZXRQYXJhbXNbJ0dhbWVMb2cnXSk6IENhY3Rib3RCYXNlUmVnRXhwPCdHYW1lTG9nJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ0dhbWVMb2cnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDAtMHgwMC1sb2dsaW5lXHJcbiAgICovXHJcbiAgc3RhdGljIGdhbWVOYW1lTG9nKHBhcmFtcz86IE5ldFBhcmFtc1snR2FtZUxvZyddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB7XHJcbiAgICAvLyBCYWNrd2FyZHMgY29tcGF0YWJpbGl0eS5cclxuICAgIHJldHVybiBSZWdleGVzLmdhbWVMb2cocGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTEyLTB4MGMtcGxheWVyc3RhdHNcclxuICAgKi9cclxuICBzdGF0aWMgc3RhdENoYW5nZShwYXJhbXM/OiBOZXRQYXJhbXNbJ1BsYXllclN0YXRzJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnUGxheWVyU3RhdHMnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnUGxheWVyU3RhdHMnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMDEtMHgwMS1jaGFuZ2V6b25lXHJcbiAgICovXHJcbiAgc3RhdGljIGNoYW5nZVpvbmUocGFyYW1zPzogTmV0UGFyYW1zWydDaGFuZ2Vab25lJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQ2hhbmdlWm9uZSc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdDaGFuZ2Vab25lJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTMzLTB4MjEtbmV0d29yazZkLWFjdG9yLWNvbnRyb2xcclxuICAgKi9cclxuICBzdGF0aWMgbmV0d29yazZkKHBhcmFtcz86IE5ldFBhcmFtc1snQWN0b3JDb250cm9sJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWN0b3JDb250cm9sJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ0FjdG9yQ29udHJvbCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0zNC0weDIyLW5ldHdvcmtuYW1ldG9nZ2xlXHJcbiAgICovXHJcbiAgc3RhdGljIG5hbWVUb2dnbGUocGFyYW1zPzogTmV0UGFyYW1zWydOYW1lVG9nZ2xlJ10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTmFtZVRvZ2dsZSc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdOYW1lVG9nZ2xlJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTQwLTB4MjgtbWFwXHJcbiAgICovXHJcbiAgc3RhdGljIG1hcChwYXJhbXM/OiBOZXRQYXJhbXNbJ01hcCddKTogQ2FjdGJvdEJhc2VSZWdFeHA8J01hcCc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdNYXAnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtNDEtMHgyOS1zeXN0ZW1sb2dtZXNzYWdlXHJcbiAgICovXHJcbiAgc3RhdGljIHN5c3RlbUxvZ01lc3NhZ2UoXHJcbiAgICBwYXJhbXM/OiBOZXRQYXJhbXNbJ1N5c3RlbUxvZ01lc3NhZ2UnXSxcclxuICApOiBDYWN0Ym90QmFzZVJlZ0V4cDwnU3lzdGVtTG9nTWVzc2FnZSc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdTeXN0ZW1Mb2dNZXNzYWdlJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIG1hdGNoZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9xdWlzcXVvdXMvY2FjdGJvdC9ibG9iL21haW4vZG9jcy9Mb2dHdWlkZS5tZCNsaW5lLTI1Ny0weDEwMS1tYXBlZmZlY3RcclxuICAgKi9cclxuICBzdGF0aWMgbWFwRWZmZWN0KHBhcmFtcz86IE5ldFBhcmFtc1snTWFwRWZmZWN0J10pOiBDYWN0Ym90QmFzZVJlZ0V4cDwnTWFwRWZmZWN0Jz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ01hcEVmZmVjdCcsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBtYXRjaGVzOiBodHRwczovL2dpdGh1Yi5jb20vcXVpc3F1b3VzL2NhY3Rib3QvYmxvYi9tYWluL2RvY3MvTG9nR3VpZGUubWQjbGluZS0yNjEtMHgxMDUtY29tYmF0YW50bWVtb3J5XHJcbiAgICovXHJcbiAgc3RhdGljIGNvbWJhdGFudE1lbW9yeShcclxuICAgIHBhcmFtcz86IE5ldFBhcmFtc1snQ29tYmF0YW50TWVtb3J5J10sXHJcbiAgKTogQ2FjdGJvdEJhc2VSZWdFeHA8J0NvbWJhdGFudE1lbW9yeSc+IHtcclxuICAgIHJldHVybiBidWlsZFJlZ2V4KCdDb21iYXRhbnRNZW1vcnknLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjYzLTB4MTA3LXN0YXJ0c3VzaW5nZXh0cmFcclxuICAgKi9cclxuICBzdGF0aWMgc3RhcnRzVXNpbmdFeHRyYShcclxuICAgIHBhcmFtcz86IE5ldFBhcmFtc1snU3RhcnRzVXNpbmdFeHRyYSddLFxyXG4gICk6IENhY3Rib3RCYXNlUmVnRXhwPCdTdGFydHNVc2luZ0V4dHJhJz4ge1xyXG4gICAgcmV0dXJuIGJ1aWxkUmVnZXgoJ1N0YXJ0c1VzaW5nRXh0cmEnLCBwYXJhbXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogbWF0Y2hlczogaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvbWFpbi9kb2NzL0xvZ0d1aWRlLm1kI2xpbmUtMjY0LTB4MTA4LWFiaWxpdHlleHRyYVxyXG4gICAqL1xyXG4gIHN0YXRpYyBhYmlsaXR5RXh0cmEoXHJcbiAgICBwYXJhbXM/OiBOZXRQYXJhbXNbJ0FiaWxpdHlFeHRyYSddLFxyXG4gICk6IENhY3Rib3RCYXNlUmVnRXhwPCdBYmlsaXR5RXh0cmEnPiB7XHJcbiAgICByZXR1cm4gYnVpbGRSZWdleCgnQWJpbGl0eUV4dHJhJywgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgYnVpbGRpbmcgbmFtZWQgY2FwdHVyZSBncm91cFxyXG4gICAqL1xyXG4gIHN0YXRpYyBtYXliZUNhcHR1cmUoXHJcbiAgICBjYXB0dXJlOiBib29sZWFuLFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgdmFsdWU6IHN0cmluZyB8IHJlYWRvbmx5IHN0cmluZ1tdIHwgdW5kZWZpbmVkLFxyXG4gICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nLFxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZClcclxuICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWUgPz8gbWF0Y2hEZWZhdWx0O1xyXG4gICAgdmFsdWUgPSBSZWdleGVzLmFueU9mKHZhbHVlKTtcclxuICAgIHJldHVybiBjYXB0dXJlID8gUmVnZXhlcy5uYW1lZENhcHR1cmUobmFtZSwgdmFsdWUpIDogdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb3B0aW9uYWwoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAoPzoke3N0cn0pP2A7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGVzIGEgbmFtZWQgcmVnZXggY2FwdHVyZSBncm91cCBuYW1lZCB8bmFtZXwgZm9yIHRoZSBtYXRjaCB8dmFsdWV8LlxyXG4gIHN0YXRpYyBuYW1lZENhcHR1cmUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmIChuYW1lLmluY2x1ZGVzKCc+JykpXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFwiJHtuYW1lfVwiIGNvbnRhaW5zIFwiPlwiLmApO1xyXG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJzwnKSlcclxuICAgICAgY29uc29sZS5lcnJvcihgXCIke25hbWV9XCIgY29udGFpbnMgXCI+XCIuYCk7XHJcblxyXG4gICAgcmV0dXJuIGAoPzwke25hbWV9PiR7dmFsdWV9KWA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZW5pZW5jZSBmb3IgdHVybmluZyBtdWx0aXBsZSBhcmdzIGludG8gYSB1bmlvbmVkIHJlZ3VsYXIgZXhwcmVzc2lvbi5cclxuICAgKiBhbnlPZih4LCB5LCB6KSBvciBhbnlPZihbeCwgeSwgel0pIGRvIHRoZSBzYW1lIHRoaW5nLCBhbmQgcmV0dXJuICg/Onh8eXx6KS5cclxuICAgKiBhbnlPZih4KSBvciBhbnlPZih4KSBvbiBpdHMgb3duIHNpbXBsaWZpZXMgdG8ganVzdCB4LlxyXG4gICAqIGFyZ3MgbWF5IGJlIHN0cmluZ3Mgb3IgUmVnRXhwLCBhbHRob3VnaCBhbnkgYWRkaXRpb25hbCBtYXJrZXJzIHRvIFJlZ0V4cFxyXG4gICAqIGxpa2UgL2luc2Vuc2l0aXZlL2kgYXJlIGRyb3BwZWQuXHJcbiAgICovXHJcbiAgc3RhdGljIGFueU9mKC4uLmFyZ3M6IChzdHJpbmcgfCByZWFkb25seSBzdHJpbmdbXSB8IFJlZ0V4cClbXSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBhbnlPZkFycmF5ID0gKGFycmF5OiByZWFkb25seSAoc3RyaW5nIHwgUmVnRXhwKVtdKTogc3RyaW5nID0+IHtcclxuICAgICAgY29uc3QgW2VsZW1dID0gYXJyYXk7XHJcbiAgICAgIGlmIChlbGVtICE9PSB1bmRlZmluZWQgJiYgYXJyYXkubGVuZ3RoID09PSAxKVxyXG4gICAgICAgIHJldHVybiBgJHtlbGVtIGluc3RhbmNlb2YgUmVnRXhwID8gZWxlbS5zb3VyY2UgOiBlbGVtfWA7XHJcbiAgICAgIHJldHVybiBgKD86JHthcnJheS5tYXAoKGVsZW0pID0+IGVsZW0gaW5zdGFuY2VvZiBSZWdFeHAgPyBlbGVtLnNvdXJjZSA6IGVsZW0pLmpvaW4oJ3wnKX0pYDtcclxuICAgIH07XHJcbiAgICBsZXQgYXJyYXk6IHJlYWRvbmx5IChzdHJpbmcgfCBSZWdFeHApW10gPSBbXTtcclxuICAgIGNvbnN0IFtmaXJzdEFyZ10gPSBhcmdzO1xyXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09ICdzdHJpbmcnIHx8IGZpcnN0QXJnIGluc3RhbmNlb2YgUmVnRXhwKVxyXG4gICAgICAgIGFycmF5ID0gW2ZpcnN0QXJnXTtcclxuICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShmaXJzdEFyZykpXHJcbiAgICAgICAgYXJyYXkgPSBmaXJzdEFyZztcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGFycmF5ID0gW107XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBUT0RPOiBtb3JlIGFjY3VyYXRlIHR5cGUgaW5zdGVhZCBvZiBgYXNgIGNhc3RcclxuICAgICAgYXJyYXkgPSBhcmdzIGFzIHJlYWRvbmx5IHN0cmluZ1tdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFueU9mQXJyYXkoYXJyYXkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHBhcnNlKHJlZ2V4cFN0cmluZzogUmVnRXhwIHwgc3RyaW5nIHwgQ2FjdGJvdEJhc2VSZWdFeHA8J05vbmUnPik6IFJlZ0V4cCB7XHJcbiAgICBjb25zdCBrQ2FjdGJvdENhdGVnb3JpZXMgPSB7XHJcbiAgICAgIFRpbWVzdGFtcDogJ14uezE0fScsXHJcbiAgICAgIE5ldFRpbWVzdGFtcDogJy57MzN9JyxcclxuICAgICAgTmV0RmllbGQ6ICcoPzpbXnxdKlxcXFx8KScsXHJcbiAgICAgIExvZ1R5cGU6ICdbMC05QS1GYS1mXXsyfScsXHJcbiAgICAgIEFiaWxpdHlDb2RlOiAnWzAtOUEtRmEtZl17MSw4fScsXHJcbiAgICAgIE9iamVjdElkOiAnWzAtOUEtRl17OH0nLFxyXG4gICAgICAvLyBNYXRjaGVzIGFueSBjaGFyYWN0ZXIgbmFtZSAoaW5jbHVkaW5nIGVtcHR5IHN0cmluZ3Mgd2hpY2ggdGhlIEZGWElWXHJcbiAgICAgIC8vIEFDVCBwbHVnaW4gY2FuIGdlbmVyYXRlIHdoZW4gdW5rbm93bikuXHJcbiAgICAgIE5hbWU6ICcoPzpbXlxcXFxzOnxdKyg/OiBbXlxcXFxzOnxdKyk/fCknLFxyXG4gICAgICAvLyBGbG9hdHMgY2FuIGhhdmUgY29tbWEgYXMgc2VwYXJhdG9yIGluIEZGWElWIHBsdWdpbiBvdXRwdXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9yYXZhaG4vRkZYSVZfQUNUX1BsdWdpbi9pc3N1ZXMvMTM3XHJcbiAgICAgIEZsb2F0OiAnLT9bMC05XSsoPzpbLixdWzAtOV0rKT8oPzpFLT9bMC05XSspPycsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEFsbCByZWdleGVzIGluIGNhY3Rib3QgYXJlIGNhc2UgaW5zZW5zaXRpdmUuXHJcbiAgICAvLyBUaGlzIGF2b2lkcyBoZWFkYWNoZXMgYXMgdGhpbmdzIGxpa2UgYFZpY2UgYW5kIFZhbml0eWAgdHVybnMgaW50b1xyXG4gICAgLy8gYFZpY2UgQW5kIFZhbml0eWAsIGVzcGVjaWFsbHkgZm9yIEZyZW5jaCBhbmQgR2VybWFuLiAgSXQgYXBwZWFycyB0b1xyXG4gICAgLy8gaGF2ZSBhIH4yMCUgcmVnZXggcGFyc2luZyBvdmVyaGVhZCwgYnV0IGF0IGxlYXN0IHRoZXkgd29yay5cclxuICAgIGxldCBtb2RpZmllcnMgPSAnaSc7XHJcbiAgICBpZiAocmVnZXhwU3RyaW5nIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgIG1vZGlmaWVycyArPSAocmVnZXhwU3RyaW5nLmdsb2JhbCA/ICdnJyA6ICcnKSArXHJcbiAgICAgICAgKHJlZ2V4cFN0cmluZy5tdWx0aWxpbmUgPyAnbScgOiAnJyk7XHJcbiAgICAgIHJlZ2V4cFN0cmluZyA9IHJlZ2V4cFN0cmluZy5zb3VyY2U7XHJcbiAgICB9XHJcbiAgICByZWdleHBTdHJpbmcgPSByZWdleHBTdHJpbmcucmVwbGFjZSgvXFxcXHlcXHsoLio/KVxcfS9nLCAobWF0Y2gsIGdyb3VwKSA9PiB7XHJcbiAgICAgIHJldHVybiBrQ2FjdGJvdENhdGVnb3JpZXNbZ3JvdXAgYXMga2V5b2YgdHlwZW9mIGtDYWN0Ym90Q2F0ZWdvcmllc10gfHwgbWF0Y2g7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4cFN0cmluZywgbW9kaWZpZXJzKTtcclxuICB9XHJcblxyXG4gIC8vIExpa2UgUmVnZXguUmVnZXhlcy5wYXJzZSwgYnV0IGZvcmNlIGdsb2JhbCBmbGFnLlxyXG4gIHN0YXRpYyBwYXJzZUdsb2JhbChyZWdleHBTdHJpbmc6IFJlZ0V4cCB8IHN0cmluZyk6IFJlZ0V4cCB7XHJcbiAgICBjb25zdCByZWdleCA9IFJlZ2V4ZXMucGFyc2UocmVnZXhwU3RyaW5nKTtcclxuICAgIGxldCBtb2RpZmllcnMgPSAnZ2knO1xyXG4gICAgaWYgKHJlZ2V4cFN0cmluZyBpbnN0YW5jZW9mIFJlZ0V4cClcclxuICAgICAgbW9kaWZpZXJzICs9IHJlZ2V4cFN0cmluZy5tdWx0aWxpbmUgPyAnbScgOiAnJztcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4LnNvdXJjZSwgbW9kaWZpZXJzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0cnVlSWZVbmRlZmluZWQodmFsdWU/OiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJylcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gISF2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2YWxpZGF0ZVBhcmFtcyhcclxuICAgIGY6IFJlYWRvbmx5PHsgW3M6IHN0cmluZ106IHVua25vd24gfT4sXHJcbiAgICBmdW5jTmFtZTogc3RyaW5nLFxyXG4gICAgcGFyYW1zOiBSZWFkb25seTxzdHJpbmdbXT4sXHJcbiAgKTogdm9pZCB7XHJcbiAgICBpZiAoZiA9PT0gbnVsbClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKHR5cGVvZiBmICE9PSAnb2JqZWN0JylcclxuICAgICAgcmV0dXJuO1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGYpO1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgICBpZiAoIXBhcmFtcy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgYCR7ZnVuY05hbWV9OiBpbnZhbGlkIHBhcmFtZXRlciAnJHtrZXl9Jy4gIGAgK1xyXG4gICAgICAgICAgICBgVmFsaWQgcGFyYW1zOiAke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YCxcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8vIFRoaXMgaXMgbWVhbnQgdG8gYmUgdXNlZCBpbiBhIHRyaWdnZXIgYXMgc3VjaDpcclxuLy8ge1xyXG4vLyAgIGlkOiAnU29tZSB0YW5rYnVzdGVyJyxcclxuLy8gICByZWdleDogUmVnZXhlcy5zdGFydHNVc2luZyh7c291cmNlOiAnWWUgT2xkZSBCb3NzZScsIGlkOiAnNjY2J30pLFxyXG4vLyAgIGNvbmRpdGlvbjogQ29uZGl0aW9ucy5jYXJlc0Fib3V0TWFnaWNhbChkYXRhKSxcclxuLy8gICByZXNwb25zZTogUmVzcG9uc2VzLnRhbmtidXN0ZXIoKSxcclxuLy8gfSxcclxuLy9cclxuLy8gTm90ZTogQnJlYWtpbmcgb3V0IHRoZSBjb25kaXRpb24gbGlrZSB0aGlzIGxldHMgcGVvcGxlIG92ZXJyaWRlIGl0IGlmIHRoZXlcclxuLy8gYWx3YXlzIChvciBuZXZlcikgd2FudCB0byBrbm93IGFib3V0IGl0LCByYXRoZXIgdGhhbiBoaWRpbmcgdGhlIGxvZ2ljIGluc2lkZVxyXG4vLyB0aGUgdGFua2J1c3RlciBjYWxsYmFjayB3aXRoIGEgXCJpcyBoZWFsZXJcIiBjaGVjay5cclxuLy9cclxuLy8gSWYgZGF0YS5yb2xlIGlzIHVzZWQsIGl0IHNob3VsZCBiZSBvbmx5IHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBhbGVydCBsZXZlbHMsXHJcbi8vIGFuZCBub3Qgd2hldGhlciBhIG1lc3NhZ2UgaXMgc2VudCBhdCBhbGwuXHJcbi8vXHJcbi8vIEFsdGhvdWdoIHRoaXMgaXMgbm90IHRydWUgb2YgYHJlc3BvbnNlOiBgIGZpZWxkcyBvbiB0cmlnZ2VycyBpbiBnZW5lcmFsLFxyXG4vLyBhbGwgcmVzcG9uc2VzIGluIHRoaXMgZmlsZSBzaG91bGQgZWl0aGVyIHJldHVybiBhbiBvYmplY3Qgb3IgYSBzaW5nbGVcclxuLy8gZnVuY3Rpb24gdGhhdCBzZXRzIG91dHB1dFN0cmluZ3MgYW5kIHJldHVybnMgYW4gb2JqZWN0IHdpdGhvdXQgZG9pbmdcclxuLy8gYW55dGhpbmcgd2l0aCBkYXRhIG9yIG1hdGNoZXMuICBTZWUgYHJlc3BvbnNlc190ZXN0LmpzYC5cclxuXHJcbmltcG9ydCB7IFJhaWRib3NzRGF0YSBhcyBEYXRhIH0gZnJvbSAnLi4vdHlwZXMvZGF0YSc7XHJcbmltcG9ydCB7IE1hdGNoZXMgfSBmcm9tICcuLi90eXBlcy9uZXRfbWF0Y2hlcyc7XHJcbmltcG9ydCB7XHJcbiAgTG9jYWxlVGV4dCxcclxuICBMb29zZVRyaWdnZXIsXHJcbiAgT3V0cHV0LFxyXG4gIFJlc3BvbnNlRnVuYyxcclxuICBSZXNwb25zZU91dHB1dCxcclxuICBUYXJnZXRlZE1hdGNoZXMsXHJcbiAgVHJpZ2dlckZ1bmMsXHJcbiAgVHJpZ2dlck91dHB1dCxcclxufSBmcm9tICcuLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbmltcG9ydCBPdXRwdXRzIGZyb20gJy4vb3V0cHV0cyc7XHJcblxyXG50eXBlIFRhcmdldGVkUmVzcG9uc2VPdXRwdXQgPSBSZXNwb25zZU91dHB1dDxEYXRhLCBUYXJnZXRlZE1hdGNoZXM+O1xyXG50eXBlIFRhcmdldGVkUmVzcG9uc2VGdW5jID0gUmVzcG9uc2VGdW5jPERhdGEsIFRhcmdldGVkTWF0Y2hlcz47XHJcbnR5cGUgVGFyZ2V0ZWRGdW5jID0gVHJpZ2dlckZ1bmM8RGF0YSwgVGFyZ2V0ZWRNYXRjaGVzLCBUcmlnZ2VyT3V0cHV0PERhdGEsIFRhcmdldGVkTWF0Y2hlcz4+O1xyXG50eXBlIFN0YXRpY1Jlc3BvbnNlRnVuYyA9IFJlc3BvbnNlRnVuYzxEYXRhLCBNYXRjaGVzPjtcclxuXHJcbmV4cG9ydCBjb25zdCBzZXZlcml0eUxpc3QgPSBbJ2luZm8nLCAnYWxlcnQnLCAnYWxhcm0nXSBhcyBjb25zdDtcclxuZXhwb3J0IHR5cGUgU2V2ZXJpdHkgPSB0eXBlb2Ygc2V2ZXJpdHlMaXN0W251bWJlcl07XHJcbmV4cG9ydCB0eXBlIFNldlRleHQgPSAnaW5mb1RleHQnIHwgJ2FsZXJ0VGV4dCcgfCAnYWxhcm1UZXh0JztcclxuXHJcbmV4cG9ydCBjb25zdCBidWlsdEluUmVzcG9uc2VTdHIgPSAnY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlJztcclxuXHJcbi8vIEFsbCB2YWxpZCB0cmlnZ2VyIGZpZWxkcy5cclxuZXhwb3J0IGNvbnN0IHRyaWdnZXJGdW5jdGlvbnM6IChrZXlvZiBMb29zZVRyaWdnZXIpW10gPSBbXHJcbiAgJ2FsYXJtVGV4dCcsXHJcbiAgJ2FsZXJ0VGV4dCcsXHJcbiAgJ2NvbmRpdGlvbicsXHJcbiAgJ2RlbGF5U2Vjb25kcycsXHJcbiAgJ2Rpc2FibGVkJyxcclxuICAnZHVyYXRpb25TZWNvbmRzJyxcclxuICAnaWQnLFxyXG4gICd0eXBlJyxcclxuICAnaW5mb1RleHQnLFxyXG4gICdwcmVSdW4nLFxyXG4gICdwcm9taXNlJyxcclxuICAncmVzcG9uc2UnLFxyXG4gICdydW4nLFxyXG4gICdzb3VuZCcsXHJcbiAgJ3NvdW5kVm9sdW1lJyxcclxuICAnc3VwcHJlc3NTZWNvbmRzJyxcclxuICAndHRzJyxcclxuICAnb3V0cHV0U3RyaW5ncycsXHJcbl07XHJcblxyXG4vLyBUcmlnZ2VyIGZpZWxkcyB0aGF0IGNhbiBwcm9kdWNlIHRleHQgb3V0cHV0LlxyXG5leHBvcnQgY29uc3QgdHJpZ2dlclRleHRPdXRwdXRGdW5jdGlvbnM6IChrZXlvZiBMb29zZVRyaWdnZXIpW10gPSBbXHJcbiAgJ2FsYXJtVGV4dCcsXHJcbiAgJ2FsZXJ0VGV4dCcsXHJcbiAgJ2luZm9UZXh0JyxcclxuICAncmVzcG9uc2UnLFxyXG4gICd0dHMnLFxyXG5dO1xyXG5cclxuLy8gSWYgYSB0cmlnZ2VyIGhhcyBhbnkgb2YgdGhlc2UsIHRoZW4gaXQgaGFzIGEgdmlzaWJsZS9hdWRpbyBlZmZlY3QuXHJcbmV4cG9ydCBjb25zdCB0cmlnZ2VyT3V0cHV0RnVuY3Rpb25zOiAoa2V5b2YgTG9vc2VUcmlnZ2VyKVtdID0gW1xyXG4gIC4uLnRyaWdnZXJUZXh0T3V0cHV0RnVuY3Rpb25zLFxyXG4gICdzb3VuZCcsXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3Qgc2V2ZXJpdHlNYXA6IHsgW3NldiBpbiBTZXZlcml0eV06IFNldlRleHQgfSA9IHtcclxuICAnaW5mbyc6ICdpbmZvVGV4dCcsXHJcbiAgJ2FsZXJ0JzogJ2FsZXJ0VGV4dCcsXHJcbiAgJ2FsYXJtJzogJ2FsYXJtVGV4dCcsXHJcbn07XHJcblxyXG5jb25zdCBnZXRUZXh0ID0gKHNldjogU2V2ZXJpdHkpOiBTZXZUZXh0ID0+IHtcclxuICBpZiAoIShzZXYgaW4gc2V2ZXJpdHlNYXApKVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNldmVyaXR5OiAke3Nldn0uYCk7XHJcbiAgcmV0dXJuIHNldmVyaXR5TWFwW3Nldl07XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0SW5mb1RleHQgPSAoc2V2PzogU2V2ZXJpdHkpOiBTZXZUZXh0ID0+IHtcclxuICBpZiAoIXNldilcclxuICAgIHJldHVybiAnaW5mb1RleHQnO1xyXG4gIHJldHVybiBnZXRUZXh0KHNldik7XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0QWxlcnRUZXh0ID0gKHNldj86IFNldmVyaXR5KTogU2V2VGV4dCA9PiB7XHJcbiAgaWYgKCFzZXYpXHJcbiAgICByZXR1cm4gJ2FsZXJ0VGV4dCc7XHJcbiAgcmV0dXJuIGdldFRleHQoc2V2KTtcclxufTtcclxuXHJcbmNvbnN0IGRlZmF1bHRBbGFybVRleHQgPSAoc2V2PzogU2V2ZXJpdHkpOiBTZXZUZXh0ID0+IHtcclxuICBpZiAoIXNldilcclxuICAgIHJldHVybiAnYWxhcm1UZXh0JztcclxuICByZXR1cm4gZ2V0VGV4dChzZXYpO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0VGFyZ2V0ID0gKG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcykgPT4ge1xyXG4gIC8vIE9mdGVuIHRhbmtidXN0ZXJzIGNhbiBiZSBjYXN0ZWQgYnkgdGhlIGJvc3Mgb24gdGhlIGJvc3MuXHJcbiAgLy8gQ29uc2lkZXIgdGhpcyBhcyBcIm5vdCBoYXZpbmcgYSB0YXJnZXRcIi5cclxuICBpZiAobWF0Y2hlcy50YXJnZXQgPT09IG1hdGNoZXMuc291cmNlKVxyXG4gICAgcmV0dXJuO1xyXG4gIC8vIEluIGh1bnRzLCBzb21ldGltZXMgdGhlcmUgYXJlIHRvbyBtYW55IHBlb3BsZSBmb3IgdGhlIHRhcmdldFxyXG4gIC8vIHRvIGhhdmUgYSBuYW1lLiAgVHJlYXQgdGhpcyBhcyBcIm5vIHRhcmdldFwiLlxyXG4gIGlmIChtYXRjaGVzLnRhcmdldCA9PT0gJycpXHJcbiAgICByZXR1cm47XHJcbiAgcmV0dXJuIG1hdGNoZXMudGFyZ2V0O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0U291cmNlID0gKG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcykgPT4ge1xyXG4gIHJldHVybiBtYXRjaGVzPy5zb3VyY2U7XHJcbn07XHJcblxyXG4vLyBGSVhNRTogbWFrZSB0aGlzIHdvcmsgZm9yIGFueSBudW1iZXIgb2YgcGFpcnMgb2YgcGFyYW1zXHJcbmNvbnN0IGNvbWJpbmVGdW5jcyA9IGZ1bmN0aW9uKFxyXG4gIHRleHQxOiBTZXZUZXh0LFxyXG4gIGZ1bmMxOiBUYXJnZXRlZEZ1bmMsXHJcbiAgdGV4dDI6IFNldlRleHQsXHJcbiAgZnVuYzI6IFRhcmdldGVkRnVuYyxcclxuKSB7XHJcbiAgY29uc3Qgb2JqOiBUYXJnZXRlZFJlc3BvbnNlT3V0cHV0ID0ge307XHJcblxyXG4gIGlmICh0ZXh0MSAhPT0gdGV4dDIpIHtcclxuICAgIG9ialt0ZXh0MV0gPSBmdW5jMTtcclxuICAgIG9ialt0ZXh0Ml0gPSBmdW5jMjtcclxuICB9IGVsc2Uge1xyXG4gICAgb2JqW3RleHQxXSA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIHJldHVybiBmdW5jMShkYXRhLCBtYXRjaGVzLCBvdXRwdXQpID8/IGZ1bmMyKGRhdGEsIG1hdGNoZXMsIG91dHB1dCk7XHJcbiAgICB9O1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG5cclxuY29uc3QgaXNQbGF5ZXJJZCA9IChpZD86IHN0cmluZykgPT4ge1xyXG4gIHJldHVybiBpZCAhPT0gdW5kZWZpbmVkICYmICFpZC5zdGFydHNXaXRoKCc0Jyk7XHJcbn07XHJcblxyXG4vLyBGb3IgcmVzcG9uc2VzIHRoYXQgdW5jb25kaXRpb25hbGx5IHJldHVybiBzdGF0aWMgdGV4dC5cclxuY29uc3Qgc3RhdGljUmVzcG9uc2UgPSAoZmllbGQ6IFNldlRleHQsIHRleHQ6IExvY2FsZVRleHQpOiBTdGF0aWNSZXNwb25zZUZ1bmMgPT4ge1xyXG4gIHJldHVybiAoX2RhdGE6IHVua25vd24sIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICB0ZXh0OiB0ZXh0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtmaWVsZF06IChfZGF0YTogdW5rbm93biwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiBvdXRwdXQudGV4dD8uKCksXHJcbiAgICB9O1xyXG4gIH07XHJcbn07XHJcblxyXG50eXBlIFNpbmdsZVNldlRvUmVzcG9uc2VGdW5jID0gKHNldj86IFNldmVyaXR5KSA9PiBUYXJnZXRlZFJlc3BvbnNlRnVuYyB8IFN0YXRpY1Jlc3BvbnNlRnVuYztcclxudHlwZSBEb3VibGVTZXZUb1Jlc3BvbnNlRnVuYyA9ICh0YXJnZXRTZXY/OiBTZXZlcml0eSwgb3RoZXJTZXY/OiBTZXZlcml0eSkgPT4gVGFyZ2V0ZWRSZXNwb25zZUZ1bmM7XHJcbnR5cGUgUmVzcG9uc2VzTWFwID0ge1xyXG4gIFtyZXNwb25zZTogc3RyaW5nXTogU2luZ2xlU2V2VG9SZXNwb25zZUZ1bmMgfCBEb3VibGVTZXZUb1Jlc3BvbnNlRnVuYztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBSZXNwb25zZXMgPSB7XHJcbiAgdGFua0J1c3RlcjogKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBub1RhcmdldDogT3V0cHV0cy50YW5rQnVzdGVyLFxyXG4gICAgICBidXN0ZXJPbllvdTogT3V0cHV0cy50YW5rQnVzdGVyT25Zb3UsXHJcbiAgICAgIGJ1c3Rlck9uVGFyZ2V0OiBPdXRwdXRzLnRhbmtCdXN0ZXJPblBsYXllcixcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0RnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEucm9sZSAhPT0gJ3RhbmsnICYmIGRhdGEucm9sZSAhPT0gJ2hlYWxlcicpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5ub1RhcmdldD8uKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5idXN0ZXJPbllvdT8uKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG90aGVyRnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEucm9sZSA9PT0gJ2hlYWxlcicpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5ub1RhcmdldD8uKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICByZXR1cm4gb3V0cHV0LmJ1c3Rlck9uVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEucGFydHkubWVtYmVyKHRhcmdldCkgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbWJpbmVkID0gY29tYmluZUZ1bmNzKFxyXG4gICAgICBkZWZhdWx0QWxlcnRUZXh0KHRhcmdldFNldiksXHJcbiAgICAgIHRhcmdldEZ1bmMsXHJcbiAgICAgIGRlZmF1bHRJbmZvVGV4dChvdGhlclNldiksXHJcbiAgICAgIG90aGVyRnVuYyxcclxuICAgICk7XHJcbiAgICByZXR1cm4gKF9kYXRhOiB1bmtub3duLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpOiBUYXJnZXRlZFJlc3BvbnNlT3V0cHV0ID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSBvdXRwdXRTdHJpbmdzO1xyXG4gICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgdGFua0J1c3RlclN3YXA6IChidXN0ZXJTZXY/OiBTZXZlcml0eSwgc3dhcFNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBub1RhcmdldDogT3V0cHV0cy50YW5rQnVzdGVyLFxyXG4gICAgICB0YW5rU3dhcDogT3V0cHV0cy50YW5rU3dhcCxcclxuICAgICAgYnVzdGVyT25Zb3U6IE91dHB1dHMudGFua0J1c3Rlck9uWW91LFxyXG4gICAgICBidXN0ZXJPblRhcmdldDogT3V0cHV0cy50YW5rQnVzdGVyT25QbGF5ZXIsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIE5vdGU6IGJ1c3RlclNldiBhbmQgc3dhcFNldiBjYW4gYmUgdGhlIHNhbWUgcHJpb3JpdHkuXHJcbiAgICBjb25zdCB0YW5rU3dhcEZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgIGlmIChkYXRhLnJvbGUgPT09ICd0YW5rJyAmJiB0YXJnZXQgIT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC50YW5rU3dhcD8uKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgYnVzdGVyRnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuXHJcbiAgICAgIGlmIChkYXRhLnJvbGUgPT09ICd0YW5rJyAmJiB0YXJnZXQgIT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm4gb3V0cHV0LmJ1c3Rlck9uWW91Py4oKTtcclxuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQubm9UYXJnZXQ/LigpO1xyXG4gICAgICByZXR1cm4gb3V0cHV0LmJ1c3Rlck9uVGFyZ2V0Py4oeyBwbGF5ZXI6IGRhdGEucGFydHkubWVtYmVyKHRhcmdldCkgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbWJpbmVkID0gY29tYmluZUZ1bmNzKFxyXG4gICAgICBkZWZhdWx0QWxhcm1UZXh0KHN3YXBTZXYpLFxyXG4gICAgICB0YW5rU3dhcEZ1bmMsXHJcbiAgICAgIGRlZmF1bHRBbGVydFRleHQoYnVzdGVyU2V2KSxcclxuICAgICAgYnVzdGVyRnVuYyxcclxuICAgICk7XHJcbiAgICByZXR1cm4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSBvdXRwdXRTdHJpbmdzO1xyXG4gICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgdGFua0NsZWF2ZTogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBjbGVhdmVPbllvdTogT3V0cHV0cy50YW5rQ2xlYXZlT25Zb3UsXHJcbiAgICAgIGNsZWF2ZU5vVGFyZ2V0OiBPdXRwdXRzLnRhbmtDbGVhdmUsXHJcbiAgICAgIGF2b2lkQ2xlYXZlOiBPdXRwdXRzLmF2b2lkVGFua0NsZWF2ZSxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEluZm9UZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBkYXRhLm1lKVxyXG4gICAgICAgICAgcmV0dXJuIG91dHB1dC5jbGVhdmVPbllvdT8uKCk7XHJcbiAgICAgICAgaWYgKGRhdGEucm9sZSA9PT0gJ3RhbmsnIHx8IGRhdGEuam9iID09PSAnQkxVJykge1xyXG4gICAgICAgICAgLy8gdGFyZ2V0bGVzcyB0YW5rIGNsZWF2ZVxyXG4gICAgICAgICAgLy8gQkxVIHBsYXllcnMgc2hvdWxkIGFsd2F5cyBnZXQgdGhpcyBnZW5lcmljIGNsZWF2ZSBtZXNzYWdlLlxyXG4gICAgICAgICAgLy8gV2UgaGF2ZSBubyByb2J1c3Qgd2F5IHRvIGRldGVybWluZSB3aGV0aGVyIHRoZXkgaGF2ZSB0YW5rIE1pbWljcnkgb24sXHJcbiAgICAgICAgICAvLyBhbmQgaXQncyByZWFsbHkgYW5ub3lpbmcgZm9yIGEgQkxVIHRhbmsgdG8gYmUgdG9sZCB0byBhdm9pZCBjbGVhdmVzIHdoZW4gdGhleSBjYW4ndC5cclxuICAgICAgICAgIHJldHVybiBvdXRwdXQuY2xlYXZlTm9UYXJnZXQ/LigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3V0cHV0LmF2b2lkQ2xlYXZlPy4oKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBzaGFyZWRUYW5rQnVzdGVyOiAodGFyZ2V0U2V2PzogU2V2ZXJpdHksIG90aGVyU2V2PzogU2V2ZXJpdHkpID0+IHtcclxuICAgIGNvbnN0IG91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIHNoYXJlZFRhbmtidXN0ZXJPbllvdTogT3V0cHV0cy5zaGFyZWRUYW5rYnVzdGVyT25Zb3UsXHJcbiAgICAgIHNoYXJlZFRhbmtidXN0ZXJPblRhcmdldDogT3V0cHV0cy5zaGFyZWRUYW5rYnVzdGVyT25QbGF5ZXIsXHJcbiAgICAgIHNoYXJlZFRhbmtidXN0ZXI6IE91dHB1dHMuc2hhcmVkVGFua2J1c3RlcixcclxuICAgICAgYXZvaWRDbGVhdmU6IE91dHB1dHMuYXZvaWRUYW5rQ2xlYXZlLFxyXG4gICAgfTtcclxuICAgIGNvbnN0IHRhcmdldEZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChkYXRhLnJvbGUgIT09ICd0YW5rJyAmJiBkYXRhLnJvbGUgIT09ICdoZWFsZXInKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuc2hhcmVkVGFua2J1c3Rlcj8uKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5zaGFyZWRUYW5rYnVzdGVyT25Zb3U/LigpO1xyXG4gICAgICBpZiAoZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5yb2xlID09PSAnaGVhbGVyJylcclxuICAgICAgICByZXR1cm4gb3V0cHV0LnNoYXJlZFRhbmtidXN0ZXJPblRhcmdldD8uKHsgcGxheWVyOiBkYXRhLnBhcnR5Lm1lbWJlcih0YXJnZXQpIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBvdGhlckZ1bmMgPSAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChkYXRhLnJvbGUgPT09ICd0YW5rJyB8fCBkYXRhLnJvbGUgPT09ICdoZWFsZXInKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuYXZvaWRDbGVhdmU/LigpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUgfHwgZGF0YS5yb2xlID09PSAndGFuaycgfHwgZGF0YS5yb2xlID09PSAnaGVhbGVyJylcclxuICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICByZXR1cm4gb3V0cHV0LmF2b2lkQ2xlYXZlPy4oKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY29tYmluZWQgPSBjb21iaW5lRnVuY3MoXHJcbiAgICAgIGRlZmF1bHRBbGVydFRleHQodGFyZ2V0U2V2KSxcclxuICAgICAgdGFyZ2V0RnVuYyxcclxuICAgICAgZGVmYXVsdEluZm9UZXh0KG90aGVyU2V2KSxcclxuICAgICAgb3RoZXJGdW5jLFxyXG4gICAgKTtcclxuICAgIHJldHVybiAoX2RhdGE6IHVua25vd24sIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCk6IFRhcmdldGVkUmVzcG9uc2VPdXRwdXQgPT4ge1xyXG4gICAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IG91dHB1dFN0cmluZ3M7XHJcbiAgICAgIHJldHVybiBjb21iaW5lZDtcclxuICAgIH07XHJcbiAgfSxcclxuICBtaW5pQnVzdGVyOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLm1pbmlCdXN0ZXIpLFxyXG4gIGFvZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5hb2UpLFxyXG4gIGJpZ0FvZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5iaWdBb2UpLFxyXG4gIGJsZWVkQW9lOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmJsZWVkQW9lKSxcclxuICBzcHJlYWQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuc3ByZWFkKSxcclxuICAvLyBmb3Igc3RhY2sgbWFya2VyIHNpdHVhdGlvbnMuXHJcbiAgc3RhY2tNYXJrZXI6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLnN0YWNrTWFya2VyKSxcclxuICAvLyBmb3IgZ2V0dGluZyB0b2dldGhlciB3aXRob3V0IHN0YWNrIG1hcmtlclxyXG4gIGdldFRvZ2V0aGVyOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nZXRUb2dldGhlciksXHJcbiAgc3RhY2tNYXJrZXJPbjogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBzdGFja09uWW91OiBPdXRwdXRzLnN0YWNrT25Zb3UsXHJcbiAgICAgIHN0YWNrT25UYXJnZXQ6IE91dHB1dHMuc3RhY2tPblBsYXllcixcclxuICAgICAgc3RhY2tNYXJrZXI6IE91dHB1dHMuc3RhY2tNYXJrZXIsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgW2RlZmF1bHRBbGVydFRleHQoc2V2KV06IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IGRhdGEubWUpXHJcbiAgICAgICAgICByZXR1cm4gb3V0cHV0LnN0YWNrT25Zb3U/LigpO1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHJldHVybiBvdXRwdXQuc3RhY2tNYXJrZXI/LigpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuc3RhY2tPblRhcmdldD8uKHsgcGxheWVyOiBkYXRhLnBhcnR5Lm1lbWJlcih0YXJnZXQpIH0pO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9LFxyXG4gIHN0YWNrTWlkZGxlOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLnN0YWNrTWlkZGxlKSxcclxuICBkb3JpdG9TdGFjazogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuZG9yaXRvU3RhY2spLFxyXG4gIHNwcmVhZFRoZW5TdGFjazogKHNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICByZXR1cm4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLnNwcmVhZFRoZW5TdGFjayk7XHJcbiAgfSxcclxuICBzdGFja1RoZW5TcHJlYWQ6IChzZXY/OiBTZXZlcml0eSkgPT4ge1xyXG4gICAgcmV0dXJuIHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5zdGFja1RoZW5TcHJlYWQpO1xyXG4gIH0sXHJcbiAga25vY2tiYWNrOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5rbm9ja2JhY2spLFxyXG4gIGtub2NrYmFja09uOiAodGFyZ2V0U2V2PzogU2V2ZXJpdHksIG90aGVyU2V2PzogU2V2ZXJpdHkpID0+IHtcclxuICAgIGNvbnN0IG91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIGtub2NrYmFjazogT3V0cHV0cy5rbm9ja2JhY2ssXHJcbiAgICAgIGtub2NrYmFja09uWW91OiBPdXRwdXRzLmtub2NrYmFja09uWW91LFxyXG4gICAgICBrbm9ja2JhY2tPblRhcmdldDogT3V0cHV0cy5rbm9ja2JhY2tPblBsYXllcixcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0RnVuYyA9IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgaWYgKHRhcmdldCA9PT0gZGF0YS5tZSlcclxuICAgICAgICByZXR1cm4gb3V0cHV0Lmtub2NrYmFja09uWW91Py4oKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb3RoZXJGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5rbm9ja2JhY2s/LigpO1xyXG4gICAgICBpZiAodGFyZ2V0ICE9PSBkYXRhLm1lKVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQua25vY2tiYWNrT25UYXJnZXQ/Lih7IHBsYXllcjogZGF0YS5wYXJ0eS5tZW1iZXIodGFyZ2V0KSB9KTtcclxuICAgIH07XHJcbiAgICBjb25zdCBjb21iaW5lZCA9IGNvbWJpbmVGdW5jcyhcclxuICAgICAgZGVmYXVsdEluZm9UZXh0KHRhcmdldFNldiksXHJcbiAgICAgIHRhcmdldEZ1bmMsXHJcbiAgICAgIGRlZmF1bHRJbmZvVGV4dChvdGhlclNldiksXHJcbiAgICAgIG90aGVyRnVuYyxcclxuICAgICk7XHJcbiAgICByZXR1cm4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSBvdXRwdXRTdHJpbmdzO1xyXG4gICAgICByZXR1cm4gY29tYmluZWQ7XHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgZHJhd0luOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmRyYXdJbiksXHJcbiAgbG9va1Rvd2FyZHM6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMubG9va1Rvd2FyZHNCb3NzKSxcclxuICBsb29rQXdheTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5sb29rQXdheSksXHJcbiAgbG9va0F3YXlGcm9tVGFyZ2V0OiAoc2V2PzogU2V2ZXJpdHkpID0+IChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIGxvb2tBd2F5OiBPdXRwdXRzLmxvb2tBd2F5LFxyXG4gICAgICBsb29rQXdheUZyb206IE91dHB1dHMubG9va0F3YXlGcm9tVGFyZ2V0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChtYXRjaGVzKTtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBkYXRhLm1lKVxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHJldHVybiBvdXRwdXQubG9va0F3YXk/LigpO1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBpc1BsYXllcklkKG1hdGNoZXM/LnRhcmdldElkKSA/IGRhdGEucGFydHkubWVtYmVyKHRhcmdldCkgOiB0YXJnZXQ7XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5sb29rQXdheUZyb20/Lih7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgbG9va0F3YXlGcm9tU291cmNlOiAoc2V2PzogU2V2ZXJpdHkpID0+IChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIGxvb2tBd2F5RnJvbTogT3V0cHV0cy5sb29rQXdheUZyb21UYXJnZXQsXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgW2RlZmF1bHRBbGVydFRleHQoc2V2KV06IChkYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlKG1hdGNoZXMpO1xyXG4gICAgICAgIGlmIChzb3VyY2UgPT09IGRhdGEubWUpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IGlzUGxheWVySWQobWF0Y2hlcz8uc291cmNlSWQpID8gZGF0YS5wYXJ0eS5tZW1iZXIoc291cmNlKSA6IHNvdXJjZTtcclxuICAgICAgICByZXR1cm4gb3V0cHV0Lmxvb2tBd2F5RnJvbT8uKHsgbmFtZTogbmFtZSB9KTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBnZXRCZWhpbmQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmdldEJlaGluZCksXHJcbiAgZ29Gcm9udE9yU2lkZXM6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmdvRnJvbnRPclNpZGVzKSxcclxuICAvLyAuZ2V0VW5kZXIoKSBpcyB1c2VkIHdoZW4geW91IGhhdmUgdG8gZ2V0IGludG8gdGhlIGJvc3NlcyBoaXRib3hcclxuICBnZXRVbmRlcjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5nZXRVbmRlciksXHJcbiAgLy8gLmdldEluKCkgaXMgbW9yZSBsaWtlIFwiZ2V0IGNsb3NlIGJ1dCBtYXliZSBldmVuIG1lbGVlIHJhbmdlIGlzIGZpbmVcIlxyXG4gIGdldEluOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5pbiksXHJcbiAgLy8gLmdldE91dCgpIG1lYW5zIGdldCBmYXIgYXdheVxyXG4gIGdldE91dDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMub3V0KSxcclxuICBvdXRPZk1lbGVlOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLm91dE9mTWVsZWUpLFxyXG4gIGdldEluVGhlbk91dDogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5pblRoZW5PdXQpLFxyXG4gIGdldE91dFRoZW5JbjogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5vdXRUaGVuSW4pLFxyXG4gIGdldEJhY2tUaGVuRnJvbnQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMuYmFja1RoZW5Gcm9udCksXHJcbiAgZ2V0RnJvbnRUaGVuQmFjazogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5mcm9udFRoZW5CYWNrKSxcclxuICBnb0Zyb250OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nb0Zyb250KSxcclxuICBnb01pZGRsZTogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuZ29JbnRvTWlkZGxlKSxcclxuICBnb1JpZ2h0OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5yaWdodCksXHJcbiAgZ29MZWZ0OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5sZWZ0KSxcclxuICBnb1dlc3Q6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmdldExlZnRBbmRXZXN0KSxcclxuICBnb0Vhc3Q6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLmdldFJpZ2h0QW5kRWFzdCksXHJcbiAgZ29MZWZ0VGhlblJpZ2h0OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5sZWZ0VGhlblJpZ2h0KSxcclxuICBnb1JpZ2h0VGhlbkxlZnQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsZXJ0VGV4dChzZXYpLCBPdXRwdXRzLnJpZ2h0VGhlbkxlZnQpLFxyXG4gIGdvRnJvbnRCYWNrOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5nb0Zyb250QmFjayksXHJcbiAgZ29TaWRlczogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxlcnRUZXh0KHNldiksIE91dHB1dHMuc2lkZXMpLFxyXG4gIC8vIC5raWxsQWRkcygpIGlzIHVzZWQgZm9yIGFkZHMgdGhhdCB3aWxsIGFsd2F5cyBiZSBhdmFpbGFibGVcclxuICBraWxsQWRkczogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0SW5mb1RleHQoc2V2KSwgT3V0cHV0cy5raWxsQWRkcyksXHJcbiAgLy8gLmtpbGxFeHRyYUFkZCgpIGlzIHVzZWQgZm9yIGFkZHMgdGhhdCBhcHBlYXIgaWYgYSBtZWNoYW5pYyB3YXMgbm90IHBsYXllZCBjb3JyZWN0bHlcclxuICBraWxsRXh0cmFBZGQ6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEluZm9UZXh0KHNldiksIE91dHB1dHMua2lsbEV4dHJhQWRkKSxcclxuICBhd2F5RnJvbUZyb250OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGVydFRleHQoc2V2KSwgT3V0cHV0cy5hd2F5RnJvbUZyb250KSxcclxuICBzbGVlcDogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBzbGVlcDogT3V0cHV0cy5zbGVlcFRhcmdldCxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKF9kYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlKG1hdGNoZXMpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuc2xlZXA/Lih7IG5hbWU6IHNvdXJjZSB9KTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBzdHVuT3JJbnRlcnJ1cHRJZlBvc3NpYmxlOiAoc2V2PzogU2V2ZXJpdHkpID0+IHtcclxuICAgIHJldHVybiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICAgIHN0dW46IE91dHB1dHMuc3R1blRhcmdldCxcclxuICAgICAgICBpbnRlcnJ1cHQ6IE91dHB1dHMuaW50ZXJydXB0VGFyZ2V0LFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGdldFNvdXJjZShtYXRjaGVzKTtcclxuICAgICAgICAgIGlmIChkYXRhLkNhblNpbGVuY2UoKSlcclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5pbnRlcnJ1cHQ/Lih7IG5hbWU6IHNvdXJjZSB9KTtcclxuICAgICAgICAgIGVsc2UgaWYgKGRhdGEuQ2FuU3R1bigpKVxyXG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0LnN0dW4/Lih7IG5hbWU6IHNvdXJjZSB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICB9LFxyXG4gIHN0dW46IChzZXY/OiBTZXZlcml0eSkgPT4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IHtcclxuICAgICAgc3R1bjogT3V0cHV0cy5zdHVuVGFyZ2V0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoX2RhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICBjb25zdCBzb3VyY2UgPSBnZXRTb3VyY2UobWF0Y2hlcyk7XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5zdHVuPy4oeyBuYW1lOiBzb3VyY2UgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgc3R1bklmUG9zc2libGU6IChzZXY/OiBTZXZlcml0eSkgPT4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IHtcclxuICAgICAgc3R1bjogT3V0cHV0cy5zdHVuVGFyZ2V0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGdldFNvdXJjZShtYXRjaGVzKTtcclxuICAgICAgICBpZiAoZGF0YS5DYW5TdHVuKCkpXHJcbiAgICAgICAgICByZXR1cm4gb3V0cHV0LnN0dW4/Lih7IG5hbWU6IHNvdXJjZSB9KTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICBpbnRlcnJ1cHQ6IChzZXY/OiBTZXZlcml0eSkgPT4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IHtcclxuICAgICAgaW50ZXJydXB0OiBPdXRwdXRzLmludGVycnVwdFRhcmdldCxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKF9kYXRhOiBEYXRhLCBtYXRjaGVzOiBUYXJnZXRlZE1hdGNoZXMsIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc291cmNlID0gZ2V0U291cmNlKG1hdGNoZXMpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuaW50ZXJydXB0Py4oeyBuYW1lOiBzb3VyY2UgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgaW50ZXJydXB0SWZQb3NzaWJsZTogKHNldj86IFNldmVyaXR5KSA9PiAoX2RhdGE6IERhdGEsIF9tYXRjaGVzOiB1bmtub3duLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgLy8gY2FjdGJvdC1idWlsdGluLXJlc3BvbnNlXHJcbiAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBpbnRlcnJ1cHQ6IE91dHB1dHMuaW50ZXJydXB0VGFyZ2V0LFxyXG4gICAgfTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIFtkZWZhdWx0QWxlcnRUZXh0KHNldildOiAoZGF0YTogRGF0YSwgbWF0Y2hlczogVGFyZ2V0ZWRNYXRjaGVzLCBvdXRwdXQ6IE91dHB1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGdldFNvdXJjZShtYXRjaGVzKTtcclxuICAgICAgICBpZiAoZGF0YS5DYW5TaWxlbmNlKCkpXHJcbiAgICAgICAgICByZXR1cm4gb3V0cHV0LmludGVycnVwdD8uKHsgbmFtZTogc291cmNlIH0pO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9LFxyXG4gIHByZXlPbjogKHRhcmdldFNldj86IFNldmVyaXR5LCBvdGhlclNldj86IFNldmVyaXR5KSA9PiB7XHJcbiAgICBjb25zdCBvdXRwdXRTdHJpbmdzID0ge1xyXG4gICAgICBwcmV5T25Zb3U6IE91dHB1dHMucHJleU9uWW91LFxyXG4gICAgICBwcmV5T25UYXJnZXQ6IE91dHB1dHMucHJleU9uUGxheWVyLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB0YXJnZXRGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBpZiAoZGF0YS5tZSA9PT0gdGFyZ2V0KVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQucHJleU9uWW91Py4oKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb3RoZXJGdW5jID0gKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG1hdGNoZXMpO1xyXG4gICAgICBjb25zdCBwbGF5ZXIgPSB0YXJnZXQgPT09IHVuZGVmaW5lZCA/IG91dHB1dC51bmtub3duPy4oKSA6IGRhdGEucGFydHkubWVtYmVyKHRhcmdldCk7XHJcbiAgICAgIGlmICh0YXJnZXQgIT09IGRhdGEubWUpXHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5wcmV5T25UYXJnZXQ/Lih7IHBsYXllcjogcGxheWVyIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjb21iaW5lZCA9IGNvbWJpbmVGdW5jcyhcclxuICAgICAgZGVmYXVsdEFsZXJ0VGV4dCh0YXJnZXRTZXYpLFxyXG4gICAgICB0YXJnZXRGdW5jLFxyXG4gICAgICBkZWZhdWx0SW5mb1RleHQob3RoZXJTZXYpLFxyXG4gICAgICBvdGhlckZ1bmMsXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgICBvdXRwdXQucmVzcG9uc2VPdXRwdXRTdHJpbmdzID0gb3V0cHV0U3RyaW5ncztcclxuICAgICAgcmV0dXJuIGNvbWJpbmVkO1xyXG4gICAgfTtcclxuICB9LFxyXG4gIGF3YXlGcm9tOiAoc2V2PzogU2V2ZXJpdHkpID0+IChfZGF0YTogRGF0YSwgX21hdGNoZXM6IHVua25vd24sIG91dHB1dDogT3V0cHV0KSA9PiB7XHJcbiAgICAvLyBjYWN0Ym90LWJ1aWx0aW4tcmVzcG9uc2VcclxuICAgIG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3MgPSB7XHJcbiAgICAgIGF3YXlGcm9tR3JvdXA6IE91dHB1dHMuYXdheUZyb21Hcm91cCxcclxuICAgICAgYXdheUZyb21UYXJnZXQ6IE91dHB1dHMuYXdheUZyb21QbGF5ZXIsXHJcbiAgICAgIHVua25vd246IE91dHB1dHMudW5rbm93bixcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgICAgaWYgKGRhdGEubWUgPT09IHRhcmdldClcclxuICAgICAgICAgIHJldHVybiBvdXRwdXQuYXdheUZyb21Hcm91cD8uKCk7XHJcbiAgICAgICAgY29uc3QgcGxheWVyID0gdGFyZ2V0ID09PSB1bmRlZmluZWQgPyBvdXRwdXQudW5rbm93bj8uKCkgOiBkYXRhLnBhcnR5Lm1lbWJlcih0YXJnZXQpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuYXdheUZyb21UYXJnZXQ/Lih7IHBsYXllcjogcGxheWVyIH0pO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9LFxyXG4gIG1ldGVvck9uWW91OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRBbGFybVRleHQoc2V2KSwgT3V0cHV0cy5tZXRlb3JPbllvdSksXHJcbiAgc3RvcE1vdmluZzogKHNldj86IFNldmVyaXR5KSA9PiBzdGF0aWNSZXNwb25zZShkZWZhdWx0QWxhcm1UZXh0KHNldiksIE91dHB1dHMuc3RvcE1vdmluZyksXHJcbiAgc3RvcEV2ZXJ5dGhpbmc6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsYXJtVGV4dChzZXYpLCBPdXRwdXRzLnN0b3BFdmVyeXRoaW5nKSxcclxuICAvLyBtb3ZlIGF3YXkgdG8gZG9kZ2UgYW9lc1xyXG4gIG1vdmVBd2F5OiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLm1vdmVBd2F5KSxcclxuICAvLyBtb3ZlIGFyb3VuZCAoZS5nLiBqdW1waW5nKSB0byBhdm9pZCBiZWluZyBmcm96ZW5cclxuICBtb3ZlQXJvdW5kOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLm1vdmVBcm91bmQpLFxyXG4gIGJyZWFrQ2hhaW5zOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmJyZWFrQ2hhaW5zKSxcclxuICBtb3ZlQ2hhaW5zVG9nZXRoZXI6IChzZXY/OiBTZXZlcml0eSkgPT5cclxuICAgIHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLm1vdmVDaGFpbnNUb2dldGhlciksXHJcbiAgZWFydGhzaGFrZXI6IChzZXY/OiBTZXZlcml0eSkgPT4gKF9kYXRhOiBEYXRhLCBfbWF0Y2hlczogdW5rbm93biwgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgIC8vIGNhY3Rib3QtYnVpbHRpbi1yZXNwb25zZVxyXG4gICAgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IHtcclxuICAgICAgZWFydGhzaGFrZXI6IE91dHB1dHMuZWFydGhzaGFrZXJPbllvdSxcclxuICAgIH07XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBbZGVmYXVsdEFsZXJ0VGV4dChzZXYpXTogKGRhdGE6IERhdGEsIG1hdGNoZXM6IFRhcmdldGVkTWF0Y2hlcywgb3V0cHV0OiBPdXRwdXQpID0+IHtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQobWF0Y2hlcyk7XHJcbiAgICAgICAgaWYgKHRhcmdldCAhPT0gZGF0YS5tZSlcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICByZXR1cm4gb3V0cHV0LmVhcnRoc2hha2VyPy4oKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfSxcclxuICB3YWtlVXA6IChzZXY/OiBTZXZlcml0eSkgPT4gc3RhdGljUmVzcG9uc2UoZGVmYXVsdEFsYXJtVGV4dChzZXYpLCBPdXRwdXRzLndha2VVcCksXHJcbiAgZ2V0VG93ZXJzOiAoc2V2PzogU2V2ZXJpdHkpID0+IHN0YXRpY1Jlc3BvbnNlKGRlZmF1bHRJbmZvVGV4dChzZXYpLCBPdXRwdXRzLmdldFRvd2VycyksXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBEb24ndCBnaXZlIGBSZXNwb25zZXNgIGEgdHlwZSBpbiBpdHMgZGVjbGFyYXRpb24gc28gdGhhdCBpdCBjYW4gYmUgdHJlYXRlZCBhcyBtb3JlIHN0cmljdFxyXG4vLyB0aGFuIGBSZXNwb25zZXNNYXBgLCBidXQgZG8gYXNzZXJ0IHRoYXQgaXRzIHR5cGUgaXMgY29ycmVjdC4gIFRoaXMgYWxsb3dzIGNhbGxlcnMgdG8ga25vd1xyXG4vLyB3aGljaCBwcm9wZXJ0aWVzIGFyZSBkZWZpbmVkIGluIFJlc3BvbnNlcyB3aXRob3V0IGhhdmluZyB0byBjb25kaXRpb25hbGx5IGNoZWNrIGZvciB1bmRlZmluZWQuXHJcbmNvbnN0IHJlc3BvbnNlTWFwVHlwZUFzc2VydGlvbjogUmVzcG9uc2VzTWFwID0gUmVzcG9uc2VzO1xyXG4vLyBTdXBwcmVzcyB1bnVzZWQgdmFyaWFibGUgd2FybmluZy5cclxuY29uc29sZS5hc3NlcnQocmVzcG9uc2VNYXBUeXBlQXNzZXJ0aW9uKTtcclxuIiwiLy8gVE9ETzogRml4IGltcG9ydC9vcmRlclxyXG4vKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvb3JkZXIgKi9cclxuaW1wb3J0IHsgQmFzZU9wdGlvbnMgfSBmcm9tICcuLi90eXBlcy9kYXRhJztcclxuaW1wb3J0IHsgQ2FjdGJvdExvYWRVc2VyUmV0LCBTYXZlZENvbmZpZywgU2F2ZWRDb25maWdFbnRyeSB9IGZyb20gJy4uL3R5cGVzL2V2ZW50JztcclxuaW1wb3J0IHsgTG9jYWxlT2JqZWN0LCBMb2NhbGVUZXh0IH0gZnJvbSAnLi4vdHlwZXMvdHJpZ2dlcic7XHJcbmltcG9ydCB7IENhY3Rib3RDb25maWd1cmF0b3IgfSBmcm9tICcuLi91aS9jb25maWcvY29uZmlnJztcclxuaW1wb3J0IHsgaXNMYW5nLCBMYW5nLCBsYW5nVG9Mb2NhbGUgfSBmcm9tICcuL2xhbmd1YWdlcyc7XHJcbmltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4vbm90X3JlYWNoZWQnO1xyXG5pbXBvcnQgeyBhZGRPdmVybGF5TGlzdGVuZXIsIGNhbGxPdmVybGF5SGFuZGxlciB9IGZyb20gJy4vb3ZlcmxheV9wbHVnaW5fYXBpJztcclxuXHJcbi8vIFRPRE86XHJcbi8vIFRoZSBjb252ZW50aW9uIG9mIFwiaW1wb3J0IFggYXMgX1g7IGNvbnN0IFggPSBfWDtcIiBpcyBjdXJyZW50bHlcclxuLy8gYmVpbmcgdXNlZCBhcyBhIG1ldGhvZCB0byB3b3JrYXJvdW5kIGZvciBkb3duc3RyZWFtIGNvZGVcclxuLy8gdGhhdCBpcyBydW5uaW5nIHZpYSBldmFsKCkuIEJlY2F1c2UgaW1wb3J0aW5nIHN0YXRlbWVudHMgZG8gbm90XHJcbi8vIGNyZWF0ZSBhIHZhcmlhYmxlIG9mIHRoZSBzYW1lIG5hbWUsIHRoZSBldmFsKCknZCBjb2RlIGRvZXMgbm90IGtub3dcclxuLy8gYWJvdXQgdGhlIGltcG9ydCwgYW5kIHRodXMgdGhyb3dzIFJlZmVyZW5jZUVycm9ycy5cclxuLy8gVXNlZCBieSBkb3duc3RyZWFtIGV2YWxcclxuaW1wb3J0IF9Db25kaXRpb25zIGZyb20gJy4vY29uZGl0aW9ucyc7XHJcbmNvbnN0IENvbmRpdGlvbnMgPSBfQ29uZGl0aW9ucztcclxuaW1wb3J0IF9Db250ZW50VHlwZSBmcm9tICcuL2NvbnRlbnRfdHlwZSc7XHJcbmNvbnN0IENvbnRlbnRUeXBlID0gX0NvbnRlbnRUeXBlO1xyXG5pbXBvcnQgX05ldFJlZ2V4ZXMgZnJvbSAnLi9uZXRyZWdleGVzJztcclxuY29uc3QgTmV0UmVnZXhlcyA9IF9OZXRSZWdleGVzO1xyXG5pbXBvcnQgX1JlZ2V4ZXMgZnJvbSAnLi9yZWdleGVzJztcclxuY29uc3QgUmVnZXhlcyA9IF9SZWdleGVzO1xyXG5pbXBvcnQgeyBSZXNwb25zZXMgYXMgX1Jlc3BvbnNlcyB9IGZyb20gJy4vcmVzcG9uc2VzJztcclxuY29uc3QgUmVzcG9uc2VzID0gX1Jlc3BvbnNlcztcclxuaW1wb3J0IF9PdXRwdXRzIGZyb20gJy4vb3V0cHV0cyc7XHJcbmNvbnN0IE91dHB1dHMgPSBfT3V0cHV0cztcclxuaW1wb3J0IF9VdGlsLCB7IERpcmVjdGlvbnMgYXMgX0RpcmVjdGlvbnMgfSBmcm9tICcuL3V0aWwnO1xyXG5jb25zdCBVdGlsID0gX1V0aWw7XHJcbmNvbnN0IERpcmVjdGlvbnMgPSBfRGlyZWN0aW9ucztcclxuaW1wb3J0IF9ab25lSWQgZnJvbSAnLi96b25lX2lkJztcclxuY29uc3QgWm9uZUlkID0gX1pvbmVJZDtcclxuaW1wb3J0IF9ab25lSW5mbyBmcm9tICcuL3pvbmVfaW5mbyc7XHJcbmNvbnN0IFpvbmVJbmZvID0gX1pvbmVJbmZvO1xyXG5cclxuLy8gQ29udmluY2UgVHlwZVNjcmlwdCBhbmQgZXNsaW50IHRoYXQgdGhlc2UgYXJlIHVzZWQuICBUeXBlU2NyaXB0IGRvZXNuJ3QgaGF2ZSBhIGdyZWF0IHdheVxyXG4vLyB0byBkaXNhYmxlIGluZGl2aWR1YWwgcnVsZXMsIHNvIHRoaXMgaXMgc2FmZXIgdGhhbiBkaXNhYmxpbmcgYWxsIHJ1bGVzLlxyXG5jb25zb2xlLmFzc2VydChDb25kaXRpb25zKTtcclxuY29uc29sZS5hc3NlcnQoQ29udGVudFR5cGUpO1xyXG5jb25zb2xlLmFzc2VydChOZXRSZWdleGVzKTtcclxuY29uc29sZS5hc3NlcnQoUmVnZXhlcyk7XHJcbmNvbnNvbGUuYXNzZXJ0KFJlc3BvbnNlcyk7XHJcbmNvbnNvbGUuYXNzZXJ0KE91dHB1dHMpO1xyXG5jb25zb2xlLmFzc2VydChVdGlsKTtcclxuY29uc29sZS5hc3NlcnQoRGlyZWN0aW9ucyk7XHJcbmNvbnNvbGUuYXNzZXJ0KFpvbmVJZCk7XHJcbmNvbnNvbGUuYXNzZXJ0KFpvbmVJbmZvKTtcclxuXHJcbi8vIFRPRE86IG1vdmUgYWxsIG9mIHRoZXNlIHRvIGNvbmZpZy5qcz9cclxuZXhwb3J0IHR5cGUgVXNlckZpbGVDYWxsYmFjayA9IChcclxuICBqc0ZpbGU6IHN0cmluZyxcclxuICBsb2NhbEZpbGVzOiB7IFtmaWxlbmFtZTogc3RyaW5nXTogc3RyaW5nIH0sXHJcbiAgb3B0aW9uczogQmFzZU9wdGlvbnMsXHJcbiAgYmFzZVBhdGg6IHN0cmluZyxcclxuKSA9PiB2b2lkO1xyXG5leHBvcnQgdHlwZSBDb25maWdWYWx1ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW47XHJcbmV4cG9ydCB0eXBlIENvbmZpZ0VudHJ5ID0ge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgY29tbWVudD86IFBhcnRpYWw8TG9jYWxlVGV4dD47XHJcbiAgbmFtZTogTG9jYWxlVGV4dDtcclxuICB0eXBlOiAnY2hlY2tib3gnIHwgJ3NlbGVjdCcgfCAnZmxvYXQnIHwgJ2ludGVnZXInIHwgJ3N0cmluZycgfCAnZGlyZWN0b3J5JyB8ICdodG1sJztcclxuICBodG1sPzogTG9jYWxlVGV4dDtcclxuICAvLyBUaGlzIG11c3QgYmUgYSB2YWxpZCBvcHRpb24gZXZlbiBpZiB0aGVyZSBpcyBhIHNldHRlckZ1bmMsIGFzIGBfZ2V0T3B0aW9uTGVhZkhlbHBlcmBcclxuICAvLyBmb3IgdGhlIGNvbmZpZyB1aSByZWFkcyBmcm9tIHRoZSBTYXZlZENvbmZpZyBkaXJlY3RseSByYXRoZXIgdGhhbiBwb3N0LXNldHRlckZ1bmMuXHJcbiAgZGVmYXVsdDogQ29uZmlnVmFsdWUgfCAoKG9wdGlvbnM6IEJhc2VPcHRpb25zKSA9PiBDb25maWdWYWx1ZSk7XHJcbiAgZGVidWc/OiBib29sZWFuO1xyXG4gIGRlYnVnT25seT86IGJvb2xlYW47XHJcbiAgLy8gRm9yIHNlbGVjdC5cclxuICBvcHRpb25zPzogTG9jYWxlT2JqZWN0PHsgW3NlbGVjdFRleHQ6IHN0cmluZ106IHN0cmluZyB9PjtcclxuICAvLyBBbiBvcHRpb25hbCBmdW5jdGlvbiB0byB0cmFuc2Zvcm0gYSBzYXZlZC9kZWZhdWx0IHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxyXG4gIC8vIGB2YWx1ZWAgaXMgdGhlIHNhdmVkL2RlZmF1bHQgdmFsdWUuICBgaXNEZWZhdWx0YCBpcyB0cnVlIGlmIGB2YWx1ZWAgaXMgaW1wbGljaXRseSB0aGUgZGVmYXVsdC5cclxuICAvLyBUaGUgZGF0YSBmbG93IGhlcmUgaXMgYGRlZmF1bHRgIC0+IHVpIC0+IGBzZXR0ZXJGdW5jYCAtPiBmaW5hbCBkYXRhIGluIG9uZSBkaXJlY3Rpb24gb25seS5cclxuICAvLyBgc2V0dGVyRnVuY2Agc2hvdWxkIGJlIHVzZWQgZm9yIG9uZSBzZXR0aW5nIC0+IG11bHRpcGxlIG9wdGlvbnMsIG9yIGZvciBzZWxlY3Qgb3B0aW9uXHJcbiAgLy8gcmVuYW1pbmcsIG9yIGZvciBkYXRhIGNsZWFudXAgaWYgbmVlZGVkLlxyXG4gIHNldHRlckZ1bmM/OiAoXHJcbiAgICB2YWx1ZTogU2F2ZWRDb25maWdFbnRyeSxcclxuICAgIG9wdGlvbnM6IEJhc2VPcHRpb25zLFxyXG4gICAgaXNEZWZhdWx0OiBib29sZWFuLFxyXG4gICkgPT4gQ29uZmlnVmFsdWUgfCB2b2lkIHwgdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOYW1lZENvbmZpZ0VudHJ5PE5hbWVVbmlvbj4gZXh0ZW5kcyBPbWl0PENvbmZpZ0VudHJ5LCAnaWQnPiB7XHJcbiAgaWQ6IE5hbWVVbmlvbjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgT3B0aW9uc1RlbXBsYXRlID0ge1xyXG4gIGJ1aWxkRXh0cmFVST86IChiYXNlOiBDYWN0Ym90Q29uZmlndXJhdG9yLCBjb250YWluZXI6IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xyXG4gIHByb2Nlc3NFeHRyYU9wdGlvbnM/OiAoXHJcbiAgICBvcHRpb25zOiBCYXNlT3B0aW9ucyxcclxuICAgIHNhdmVkQ29uZmlnOiBTYXZlZENvbmZpZ0VudHJ5LFxyXG4gICkgPT4gdm9pZDtcclxuICBvcHRpb25zOiBDb25maWdFbnRyeVtdO1xyXG59O1xyXG5cclxuY2xhc3MgVXNlckNvbmZpZyB7XHJcbiAgcHVibGljIG9wdGlvblRlbXBsYXRlczogeyBbb3ZlcmxheU5hbWU6IHN0cmluZ106IE9wdGlvbnNUZW1wbGF0ZSB9ID0ge307XHJcbiAgcHVibGljIHVzZXJGaWxlQ2FsbGJhY2tzOiB7IFtvdmVybGF5TmFtZTogc3RyaW5nXTogVXNlckZpbGVDYWxsYmFjayB9ID0ge307XHJcbiAgcHVibGljIHNhdmVkQ29uZmlnOiBTYXZlZENvbmZpZyA9IHt9O1xyXG5cclxuICBnZXREZWZhdWx0QmFzZU9wdGlvbnMoKTogQmFzZU9wdGlvbnMge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgUGFyc2VyTGFuZ3VhZ2U6ICdlbicsXHJcbiAgICAgIFNob3J0TG9jYWxlOiAnZW4nLFxyXG4gICAgICBEaXNwbGF5TGFuZ3VhZ2U6ICdlbicsXHJcbiAgICAgIFRleHRBbGVydHNFbmFibGVkOiB0cnVlLFxyXG4gICAgICBTb3VuZEFsZXJ0c0VuYWJsZWQ6IHRydWUsXHJcbiAgICAgIFNwb2tlbkFsZXJ0c0VuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICBHcm91cFNwb2tlbkFsZXJ0c0VuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICBTeXN0ZW1JbmZvOiB7XHJcbiAgICAgICAgY2FjdGJvdFZlcnNpb246ICcwLjAuMC4wJyxcclxuICAgICAgICBvdmVybGF5UGx1Z2luVmVyc2lvbjogJzAuMC4wLjAnLFxyXG4gICAgICAgIGZmeGl2UGx1Z2luVmVyc2lvbjogJzAuMC4wLjAnLFxyXG4gICAgICAgIGFjdFZlcnNpb246ICcwLjAuMC4wJyxcclxuICAgICAgICBnYW1lUmVnaW9uOiAnSW50ZXJuYXRpb25hbCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIERlYnVnOiBmYWxzZSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBldmFsVXNlckZpbGUoY29udGVudDogc3RyaW5nLCBvcHRpb25zOiBCYXNlT3B0aW9ucyk6IHZvaWQge1xyXG4gICAgY29uc3QgT3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICBjb25zb2xlLmFzc2VydChPcHRpb25zKTsgLy8gVXNlZCBieSBldmFsLlxyXG5cclxuICAgIC8vIFRoaXMgaXMgdGhlIG9uZSBldmFsIGNhY3Rib3Qgc2hvdWxkIGV2ZXIgbmVlZCwgd2hpY2ggaXMgZm9yIGhhbmRsaW5nIHVzZXIgZmlsZXMuXHJcbiAgICAvLyBCZWNhdXNlIHVzZXIgZmlsZXMgY2FuIGJlIGxvY2F0ZWQgYW55d2hlcmUgb24gZGlzayBhbmQgdGhlcmUncyBiYWNrd2FyZHMgY29tcGF0XHJcbiAgICAvLyBpc3N1ZXMsIGl0J3MgdW5saWtlbHkgdGhhdCB0aGVzZSB3aWxsIGJlIGFibGUgdG8gYmUgYW55dGhpbmcgYnV0IGV2YWwgZm9yZXZlci5cclxuICAgIC8vXHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1ldmFsICovXHJcbiAgICBldmFsKGNvbnRlbnQpO1xyXG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1ldmFsICovXHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9wdGlvbnMoXHJcbiAgICBvdmVybGF5TmFtZTogc3RyaW5nLFxyXG4gICAgb3B0aW9uVGVtcGxhdGU6IE9wdGlvbnNUZW1wbGF0ZSxcclxuICAgIHVzZXJGaWxlQ2FsbGJhY2s/OiBVc2VyRmlsZUNhbGxiYWNrLFxyXG4gICkge1xyXG4gICAgdGhpcy5vcHRpb25UZW1wbGF0ZXNbb3ZlcmxheU5hbWVdID0gb3B0aW9uVGVtcGxhdGU7XHJcbiAgICBpZiAodXNlckZpbGVDYWxsYmFjaylcclxuICAgICAgdGhpcy51c2VyRmlsZUNhbGxiYWNrc1tvdmVybGF5TmFtZV0gPSB1c2VyRmlsZUNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgc29ydFVzZXJGaWxlcyhrZXlzOiBzdHJpbmdbXSkge1xyXG4gICAgLy8gSGVscGVyIGRhdGEgc3RydWN0dXJlIGZvciBzdWJkaXJlY3Rvcmllcy5cclxuICAgIGNvbnN0IHNwbGl0S2V5TWFwOiB7IFtrOiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKVxyXG4gICAgICBzcGxpdEtleU1hcFtrZXldID0ga2V5LnRvVXBwZXJDYXNlKCkuc3BsaXQoL1svXFxcXF0vKTtcclxuXHJcbiAgICAvLyBTb3J0IHBhdGhzIGFzIGEgZGVwdGgtZmlyc3QgY2FzZS1pbnNlbnNpdGl2ZSBhbHBoYWJldGljYWwgc3ViZGlyZWN0b3J5IHdhbGssIGZvbGxvd2VkIGJ5XHJcbiAgICAvLyBhbGwgZmlsZXMgc29ydGVkIGNhc2UtaW5zZW5zaXRpdmUgYWxwaGFiZXRpY2FsbHkgb25jZSBhIHN1YmRpciBoYXMgYmVlbiBwcm9jZXNzZWQsIGUuZy5cclxuICAgIC8vICAqIGEvc29tZS5qc1xyXG4gICAgLy8gICogYi9zdWJkaXIxL3ovei96L25lc3RlZF9maWxlLmpzXHJcbiAgICAvLyAgKiBiL3N1YmRpcjEvZmlsZS5qc1xyXG4gICAgLy8gICogYi9zdWJkaXIyL2ZpcnN0LmpzXHJcbiAgICAvLyAgKiBiL3N1YmRpcjIvc2Vjb25kLmpzXHJcbiAgICAvLyAgKiBiL3NvbWVfZmlsZS5qc1xyXG4gICAgLy8gICogcm9vdF9maWxlMS5qc1xyXG4gICAgLy8gICogcm9vdF9maWxlMi5qc1xyXG4gICAgcmV0dXJuIGtleXMuc29ydCgoa2V5QSwga2V5QikgPT4ge1xyXG4gICAgICBjb25zdCBsaXN0QSA9IHNwbGl0S2V5TWFwW2tleUFdO1xyXG4gICAgICBjb25zdCBsaXN0QiA9IHNwbGl0S2V5TWFwW2tleUJdO1xyXG4gICAgICBpZiAobGlzdEEgPT09IHVuZGVmaW5lZCB8fCBsaXN0QiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuXHJcbiAgICAgIGNvbnN0IG1heExlbiA9IE1hdGgubWF4KGxpc3RBLmxlbmd0aCwgbGlzdEIubGVuZ3RoKTtcclxuICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbWF4TGVuOyArK2lkeCkge1xyXG4gICAgICAgIGNvbnN0IGVudHJ5QSA9IGxpc3RBW2lkeF07XHJcbiAgICAgICAgY29uc3QgZW50cnlCID0gbGlzdEJbaWR4XTtcclxuICAgICAgICAvLyBJbiBwcmFjdGljZSwgdGhlcmUncyBhbHdheXMgYXQgbGVhc3Qgb25lIGVudHJ5LlxyXG4gICAgICAgIGlmIChlbnRyeUEgPT09IHVuZGVmaW5lZCB8fCBlbnRyeUIgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuXHJcbiAgICAgICAgLy8gSWYgYm90aCBzdWJkaXJlY3RvcmllcyBvciBib3RoIGZpbGVzLCB0aGVuIGNvbXBhcmUgbmFtZXMuXHJcbiAgICAgICAgY29uc3QgaXNMYXN0QSA9IGxpc3RBLmxlbmd0aCAtIDEgPT09IGlkeDtcclxuICAgICAgICBjb25zdCBpc0xhc3RCID0gbGlzdEIubGVuZ3RoIC0gMSA9PT0gaWR4O1xyXG5cclxuICAgICAgICBpZiAoaXNMYXN0QSAmJiBpc0xhc3RCKSB7XHJcbiAgICAgICAgICAvLyBJZiBib3RoIGxhc3QsIHRoZW4gdGhpcyBpcyBhIGZpbGVuYW1lIGNvbXBhcmlzb24uXHJcblxyXG4gICAgICAgICAgLy8gRmlyc3QsIGNvbXBhcmUgZmlsZW5hbWUgd2l0aG91dCBleHRlbnNpb24uXHJcbiAgICAgICAgICBjb25zdCBmaWxlQSA9IGVudHJ5QS5yZXBsYWNlKC9cXC5bXlxcLl0qJC8sICcnKTtcclxuICAgICAgICAgIGNvbnN0IGZpbGVCID0gZW50cnlCLnJlcGxhY2UoL1xcLlteXFwuXSokLywgJycpO1xyXG4gICAgICAgICAgY29uc3QgZmlsZW5hbWVPbmx5RGlmZiA9IGZpbGVBLmxvY2FsZUNvbXBhcmUoZmlsZUIpO1xyXG4gICAgICAgICAgaWYgKGZpbGVuYW1lT25seURpZmYpXHJcbiAgICAgICAgICAgIHJldHVybiBmaWxlbmFtZU9ubHlEaWZmO1xyXG5cclxuICAgICAgICAgIC8vIFNlY29uZCwgY29tcGFyZSBpbmNsdWRpbmcgdGhlIGV4dGVuc2lvbi5cclxuICAgICAgICAgIC8vIEFsd2F5cyByZXR1cm4gc29tZXRoaW5nIGhlcmUsIHNlZSBub3RlIGJlbG93LlxyXG4gICAgICAgICAgcmV0dXJuIGVudHJ5QS5sb2NhbGVDb21wYXJlKGVudHJ5Qik7XHJcbiAgICAgICAgfSBlbHNlIGlmICghaXNMYXN0QSAmJiAhaXNMYXN0Qikge1xyXG4gICAgICAgICAgLy8gSWYgYm90aCBub3QgbGFzdCwgdGhpcyBpcyBhIHN1YmRpcmVjdG9yeSBjb21wYXJpc29uLlxyXG4gICAgICAgICAgY29uc3QgZGlmZiA9IGVudHJ5QS5sb2NhbGVDb21wYXJlKGVudHJ5Qik7XHJcbiAgICAgICAgICBpZiAoZGlmZilcclxuICAgICAgICAgICAgcmV0dXJuIGRpZmY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCBpZiBpZHggaXMgdGhlIGZpbmFsIGZvciBlYWNoLCB3ZSB3b3VsZCBoYXZlIHJldHVybmVkIGFib3ZlLlxyXG4gICAgICAgIC8vIFNvLCBjaGVjayBpZiBlaXRoZXIgYSBvciBiIGlzIGF0IHRoZSBmaW5hbCBlbnRyeSBpbiBzcGxpdEtleU1hcC5cclxuICAgICAgICAvLyBJZiBzbywgdGhlbiB0aGVyZSdzIGEgbWlzbWF0Y2ggaW4gbnVtYmVyIG9mIGRpcmVjdG9yaWVzLCBhbmQgd2Uga25vdyBvbmVcclxuICAgICAgICAvLyB0aGUgb25lIHdpdGggYSBmaWxlbmFtZSBzaG91bGQgYmUgc29ydGVkIGxhc3QuXHJcblxyXG4gICAgICAgIGlmIChsaXN0QS5sZW5ndGggLSAxIDw9IGlkeCkge1xyXG4gICAgICAgICAgLy8gYSBoYXMgZmV3ZXIgc3ViZGlyZWN0b3JpZXMsIHNvIHNob3VsZCBiZSBzb3J0ZWQgbGFzdC5cclxuICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGlzdEIubGVuZ3RoIC0gMSA8PSBpZHgpIHtcclxuICAgICAgICAgIC8vIGEgaGFzIG1vcmUgc3ViZGlyZWN0b3JpZXMsIHNvIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3QuXHJcbiAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBHaXZlbiBhIHNldCBvZiBwYXRocywgYW4gb3ZlcmxheU5hbWUsIGFuZCBhbiBleHRlbnNpb24sIHJldHVybiBhbGwgcGF0aHMgd2l0aFxyXG4gIC8vIHRoYXQgZXh0ZW5zaW9uIHRoYXQgaGF2ZSBgb3ZlcmxheU5hbWVgIGVpdGhlciBhcyB0aGVpciBlbnRpcmUgZmlsZW5hbWUgKG5vIHN1YmRpcilcclxuICAvLyBvciBhcmUgaW5zaWRlIGEgcm9vdC1sZXZlbCBzdWJkaXJlY3RvcnkgbmFtZWQgYG92ZXJsYXlOYW1lYC8gIFRoZSBleHRlbnNpb24gc2hvdWxkXHJcbiAgLy8gaW5jbHVkZSB0aGUgcGVyaW9kIHNlcGFyYXRvciwgZS5nLiBcIi5qc1wiLiAgQWxsIGNvbXBhcmlzb25zIGFyZSBjYXNlIGluc2Vuc2l0aXZlLlxyXG4gIGZpbHRlclVzZXJGaWxlcyhwYXRoczogc3RyaW5nW10sIG9yaWdPdmVybGF5TmFtZTogc3RyaW5nLCBvcmlnRXh0ZW5zaW9uOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGV4dGVuc2lvbiA9IG9yaWdFeHRlbnNpb24udG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IG92ZXJsYXlOYW1lID0gb3JpZ092ZXJsYXlOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICByZXR1cm4gcGF0aHMuZmlsdGVyKChvcmlnUGF0aCkgPT4ge1xyXG4gICAgICBjb25zdCBwYXRoID0gb3JpZ1BhdGgudG9Mb3dlckNhc2UoKTtcclxuICAgICAgaWYgKCFwYXRoLmVuZHNXaXRoKGV4dGVuc2lvbikpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAocGF0aCA9PT0gYCR7b3ZlcmxheU5hbWV9JHtleHRlbnNpb259YClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgaWYgKHBhdGguc3RhcnRzV2l0aChgJHtvdmVybGF5TmFtZX0vYCkgfHwgcGF0aC5zdGFydHNXaXRoKGAke292ZXJsYXlOYW1lfVxcXFxgKSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VyQ29uZmlnTG9jYXRpb24ob3ZlcmxheU5hbWU6IHN0cmluZywgb3B0aW9uczogQmFzZU9wdGlvbnMsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XHJcbiAgICBsZXQgY3VycmVudGx5UmVsb2FkaW5nID0gZmFsc2U7XHJcbiAgICBjb25zdCByZWxvYWRPbmNlID0gKCkgPT4ge1xyXG4gICAgICBpZiAoY3VycmVudGx5UmVsb2FkaW5nKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgY3VycmVudGx5UmVsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhZGRPdmVybGF5TGlzdGVuZXIoJ29uVXNlckZpbGVDaGFuZ2VkJywgKCkgPT4ge1xyXG4gICAgICByZWxvYWRPbmNlKCk7XHJcbiAgICB9KTtcclxuICAgIGFkZE92ZXJsYXlMaXN0ZW5lcignb25Gb3JjZVJlbG9hZCcsICgpID0+IHtcclxuICAgICAgcmVsb2FkT25jZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5sb2FkVXNlckZpbGVzKG92ZXJsYXlOYW1lLCBvcHRpb25zLCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBsb2FkVXNlckZpbGVzKG92ZXJsYXlOYW1lOiBzdHJpbmcsIG9wdGlvbnM6IEJhc2VPcHRpb25zLCBjYWxsYmFjazogKCkgPT4gdm9pZCwgbG9hZENzcyA9IHRydWUpIHtcclxuICAgIGNvbnN0IHJlYWRPcHRpb25zID0gY2FsbE92ZXJsYXlIYW5kbGVyKHtcclxuICAgICAgY2FsbDogJ2NhY3Rib3RMb2FkRGF0YScsXHJcbiAgICAgIG92ZXJsYXk6ICdvcHRpb25zJyxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGxvYWRVc2VyID0gYXN5bmMgKGU6IHsgZGV0YWlsOiBDYWN0Ym90TG9hZFVzZXJSZXQgfSkgPT4ge1xyXG4gICAgICAvLyBUaGUgYmFzZVBhdGggaXNuJ3QgdXNpbmcgZm9yIGFueXRoaW5nIG90aGVyIHRoYW4gY29zbWV0aWMgcHJpbnRpbmcgb2YgZnVsbCBwYXRocyxcclxuICAgICAgLy8gc28gcmVwbGFjZSBhbnkgc2xhc2hlcyBoZXJlIGZvciB1bmlmb3JtaXR5LiAgSW4gY2FzZSBhbnlib2R5IGlzIHVzaW5nIGNhY3Rib3Qgb25cclxuICAgICAgLy8gTGludXggKD8hPyksIHN1cHBvcnQgYW55IHN0eWxlIG9mIHNsYXNoZXMgZWxzZXdoZXJlLlxyXG4gICAgICBjb25zdCBiYXNlUGF0aCA9IGAke2UuZGV0YWlsLnVzZXJMb2NhdGlvbi5yZXBsYWNlKC9bL1xcXFxdKiQvLCAnJyl9XFxcXGA7XHJcbiAgICAgIGNvbnN0IGxvY2FsRmlsZXMgPSBlLmRldGFpbC5sb2NhbFVzZXJGaWxlcztcclxuXHJcbiAgICAgIG9wdGlvbnMuU3lzdGVtSW5mbyA9IHtcclxuICAgICAgICBjYWN0Ym90VmVyc2lvbjogZS5kZXRhaWwuY2FjdGJvdFZlcnNpb24sXHJcbiAgICAgICAgb3ZlcmxheVBsdWdpblZlcnNpb246IGUuZGV0YWlsLm92ZXJsYXlQbHVnaW5WZXJzaW9uLFxyXG4gICAgICAgIGZmeGl2UGx1Z2luVmVyc2lvbjogZS5kZXRhaWwuZmZ4aXZQbHVnaW5WZXJzaW9uLFxyXG4gICAgICAgIGFjdFZlcnNpb246IGUuZGV0YWlsLmFjdFZlcnNpb24sXHJcbiAgICAgICAgZ2FtZVJlZ2lvbjogZS5kZXRhaWwuZ2FtZVJlZ2lvbixcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIFRoZSBwbHVnaW4gYXV0by1kZXRlY3RzIHRoZSBsYW5ndWFnZSwgc28gc2V0IHRoaXMgZmlyc3QuXHJcbiAgICAgIC8vIElmIG9wdGlvbnMgZmlsZXMgd2FudCB0byBvdmVycmlkZSBpdCwgdGhleSBjYW4gZm9yIHRlc3RpbmcuXHJcblxyXG4gICAgICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IChsYW5ndWFnZSBpcyBub3cgc2VwYXJhdGVkIHRvIHRocmVlIHR5cGVzLilcclxuICAgICAgLyogZXNsaW50LWRpc2FibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cclxuICAgICAgaWYgKGUuZGV0YWlsLmxhbmd1YWdlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5QYXJzZXJMYW5ndWFnZSA9IGUuZGV0YWlsLmxhbmd1YWdlO1xyXG4gICAgICAgIG9wdGlvbnMuU2hvcnRMb2NhbGUgPSBlLmRldGFpbC5sYW5ndWFnZTtcclxuICAgICAgICBvcHRpb25zLkRpc3BsYXlMYW5ndWFnZSA9IGUuZGV0YWlsLmxhbmd1YWdlO1xyXG4gICAgICB9XHJcbiAgICAgIC8qIGVzbGludC1lbmFibGUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cclxuXHJcbiAgICAgIC8vIFBhcnNlciBMYW5ndWFnZVxyXG4gICAgICBpZiAoZS5kZXRhaWwucGFyc2VyTGFuZ3VhZ2UpIHtcclxuICAgICAgICBvcHRpb25zLlBhcnNlckxhbmd1YWdlID0gZS5kZXRhaWwucGFyc2VyTGFuZ3VhZ2U7XHJcbiAgICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZXZlcnl0aGluZyBcIkxhbmd1YWdlXCIgc2hvdWxkIGJlIGNoYW5nZWQgdG8gXCJQYXJzZXJMYW5ndWFnZVwiXHJcbiAgICAgICAgb3B0aW9ucy5MYW5ndWFnZSA9IGUuZGV0YWlsLnBhcnNlckxhbmd1YWdlO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFN5c3RlbSBMYW5ndWFnZVxyXG4gICAgICBpZiAoZS5kZXRhaWwuc3lzdGVtTG9jYWxlKSB7XHJcbiAgICAgICAgb3B0aW9ucy5TeXN0ZW1Mb2NhbGUgPSBlLmRldGFpbC5zeXN0ZW1Mb2NhbGU7XHJcbiAgICAgICAgbGV0IHNob3J0TG9jYWxlID0gZS5kZXRhaWwuc3lzdGVtTG9jYWxlLnNsaWNlKDAsIDIpO1xyXG4gICAgICAgIGlmIChzaG9ydExvY2FsZSA9PT0gJ3poJylcclxuICAgICAgICAgIHNob3J0TG9jYWxlID0gJ2NuJztcclxuICAgICAgICBpZiAoaXNMYW5nKHNob3J0TG9jYWxlKSlcclxuICAgICAgICAgIG9wdGlvbnMuU2hvcnRMb2NhbGUgPSBzaG9ydExvY2FsZTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICBvcHRpb25zLlNob3J0TG9jYWxlID0gb3B0aW9ucy5QYXJzZXJMYW5ndWFnZTtcclxuICAgICAgfVxyXG4gICAgICAvLyBVc2VyJ3Mgc2V0dGluZyBMYW5ndWFnZVxyXG4gICAgICBjb25zdCBkaXNwbGF5TGFuZyA9IGUuZGV0YWlsLmRpc3BsYXlMYW5ndWFnZTtcclxuICAgICAgaWYgKGlzTGFuZyhkaXNwbGF5TGFuZykpXHJcbiAgICAgICAgb3B0aW9ucy5EaXNwbGF5TGFuZ3VhZ2UgPSBkaXNwbGF5TGFuZztcclxuICAgICAgZWxzZVxyXG4gICAgICAgIG9wdGlvbnMuRGlzcGxheUxhbmd1YWdlID0gb3B0aW9ucy5QYXJzZXJMYW5ndWFnZSB8fCAnZW4nO1xyXG5cclxuICAgICAgLy8gVE9ETzogbGVmdCBmb3Igbm93IGFzIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggdXNlciBjc3MuICBSZW1vdmUgdGhpcyBsYXRlcj8/XHJcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKGBsYW5nLSR7b3B0aW9ucy5EaXNwbGF5TGFuZ3VhZ2V9YCk7XHJcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nID0gbGFuZ1RvTG9jYWxlKG9wdGlvbnMuRGlzcGxheUxhbmd1YWdlKTtcclxuICAgICAgdGhpcy5hZGRVbmxvY2tUZXh0KG9wdGlvbnMuRGlzcGxheUxhbmd1YWdlKTtcclxuXHJcbiAgICAgIC8vIEhhbmRsZSBwcm9jZXNzT3B0aW9ucyBhZnRlciBkZWZhdWx0IGxhbmd1YWdlIHNlbGVjdGlvbiBhYm92ZSxcclxuICAgICAgLy8gYnV0IGJlZm9yZSBjc3MgYmVsb3cgd2hpY2ggbWF5IGxvYWQgc2tpbiBmaWxlcy5cclxuICAgICAgLy8gcHJvY2Vzc09wdGlvbnMgbmVlZHMgdG8gYmUgY2FsbGVkIHdoZXRoZXIgb3Igbm90IHRoZXJlIGFyZVxyXG4gICAgICAvLyBhbnkgdXNlck9wdGlvbnMgc2F2ZWQsIGFzIGl0IHNldHMgdXAgdGhlIGRlZmF1bHRzLlxyXG4gICAgICB0aGlzLnNhdmVkQ29uZmlnID0gKGF3YWl0IHJlYWRPcHRpb25zKT8uZGF0YSA/PyB7fTtcclxuXHJcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5vcHRpb25UZW1wbGF0ZXNbb3ZlcmxheU5hbWVdO1xyXG4gICAgICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnN0IHNhdmVkQ29uZmlnID0gdGhpcy5zYXZlZENvbmZpZ1tvdmVybGF5TmFtZV0gPz8ge307XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzT3B0aW9ucyhcclxuICAgICAgICAgIG9wdGlvbnMsXHJcbiAgICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgICAgc2F2ZWRDb25maWcsXHJcbiAgICAgICAgICB0ZW1wbGF0ZS5vcHRpb25zLFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIEZvciB0aGluZ3MgbGlrZSByYWlkYm9zcyB0aGF0IGJ1aWxkIGV4dHJhIFVJLCBhbHNvIGdpdmUgdGhlbSBhIGNoYW5jZVxyXG4gICAgICAgIC8vIHRvIGhhbmRsZSBhbnl0aGluZyB0aGF0IGhhcyBiZWVuIHNldCBvbiB0aGF0IFVJLlxyXG4gICAgICAgIGlmICh0ZW1wbGF0ZS5wcm9jZXNzRXh0cmFPcHRpb25zKVxyXG4gICAgICAgICAgdGVtcGxhdGUucHJvY2Vzc0V4dHJhT3B0aW9ucyhvcHRpb25zLCBzYXZlZENvbmZpZyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIHRoZSBvdmVybGF5IGhhcyBhIFwiRGVidWdcIiBzZXR0aW5nLCBzZXQgdG8gdHJ1ZSB2aWEgdGhlIGNvbmZpZyB0b29sLFxyXG4gICAgICAvLyB0aGVuIGFsc28gcHJpbnQgb3V0IHVzZXIgZmlsZXMgdGhhdCBoYXZlIGJlZW4gbG9hZGVkLlxyXG4gICAgICBjb25zdCBkZWJ1ZyA9IG9wdGlvbnMuRGVidWcgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLkRlYnVnICE9PSBmYWxzZTtcclxuICAgICAgY29uc3QgcHJpbnRVc2VyRmlsZSA9IGRlYnVnID8gKHg6IHN0cmluZykgPT4gY29uc29sZS5sb2coeCkgOiAoKSA9PiB7Lyogbm9vcCAqL307XHJcblxyXG4gICAgICAvLyBXaXRoIHVzZXIgZmlsZXMgYmVpbmcgYXJiaXRyYXJ5IGphdmFzY3JpcHQsIGFuZCBoYXZpbmcgbXVsdGlwbGUgZmlsZXNcclxuICAgICAgLy8gaW4gdXNlciBmb2xkZXJzLCBpdCdzIHBvc3NpYmxlIGZvciBsYXRlciBmaWxlcyB0byBhY2NpZGVudGFsbHkgcmVtb3ZlXHJcbiAgICAgIC8vIHRoaW5ncyB0aGF0IHByZXZpb3VzIGZpbGVzIGhhdmUgYWRkZWQuICBXYXJuIGFib3V0IHRoaXMsIHNpbmNlIG1vc3RcclxuICAgICAgLy8gdXNlcnMgYXJlIG5vdCBwcm9ncmFtbWVycy5cclxuICAgICAgY29uc3Qgd2Fybk9uVmFyaWFibGVSZXNldE1hcDogeyBbb3ZlcmxheU5hbWU6IHN0cmluZ106IHN0cmluZ1tdIH0gPSB7XHJcbiAgICAgICAgcmFpZGJvc3M6IFtcclxuICAgICAgICAgICdUcmlnZ2VycycsXHJcbiAgICAgICAgXSxcclxuICAgICAgfTtcclxuICAgICAgd2Fybk9uVmFyaWFibGVSZXNldE1hcFtvdmVybGF5TmFtZV0gPSB3YXJuT25WYXJpYWJsZVJlc2V0TWFwW292ZXJsYXlOYW1lXSB8fCBbXTtcclxuXHJcbiAgICAgIC8vIFRoZSB2YWx1ZXMgb2YgZWFjaCBgd2Fybk9uVmFyaWFibGVSZXNldE1hcGAgZmllbGQgYXJlIGluaXRpYWxseSBzZXRcclxuICAgICAgLy8gYWZ0ZXIgdGhlIGZpcnN0IGZpbGUsIHNvIHRoYXQgaWYgdGhlcmUgaXMgb25seSBvbmUgZmlsZSwgdGhlcmUgYXJlXHJcbiAgICAgIC8vIG5vdCBhbnkgd2FybmluZ3MuXHJcblxyXG4gICAgICAvLyBUaGUgZmllbGRzIHRoYXQgYSB1c2VyIGZpbGUgc2V0cyBpbiBPcHRpb25zIGNhbiBiZSBhbnl0aGluZyAocHVuIG5vdCBpbnRlbmRlZClcclxuICAgICAgLy8gYW5kIHNvIHdlIHVzZSBgYW55YCBoZXJlLiAgVGhlIG9ubHkgb3BlcmF0aW9uIGRvbmUgb24gdGhpcyBmaWVsZCBpcyBhICE9PVxyXG4gICAgICAvLyBmb3IgY2hhbmdlIGRldGVjdGlvbiB0byBzZWUgaWYgdGhlIHRoZSB1c2VyIGZpbGUgaGFzIG1vZGlmaWVkIGl0LlxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICBjb25zdCB2YXJpYWJsZVRyYWNrZXI6IHsgW2ZpZWxkTmFtZTogc3RyaW5nXTogdW5rbm93biB9ID0ge307XHJcblxyXG4gICAgICBpZiAobG9jYWxGaWxlcykge1xyXG4gICAgICAgIC8vIGxvY2FsRmlsZXMgbWF5IGJlIG51bGwgaWYgdGhlcmUgaXMgbm8gdmFsaWQgdXNlciBkaXJlY3RvcnkuXHJcbiAgICAgICAgY29uc3Qgc29ydGVkRmlsZXMgPSB0aGlzLnNvcnRVc2VyRmlsZXMoT2JqZWN0LmtleXMobG9jYWxGaWxlcykpO1xyXG4gICAgICAgIGNvbnN0IGpzRmlsZXMgPSB0aGlzLmZpbHRlclVzZXJGaWxlcyhzb3J0ZWRGaWxlcywgb3ZlcmxheU5hbWUsICcuanMnKTtcclxuICAgICAgICBjb25zdCBjc3NGaWxlcyA9IGxvYWRDc3MgPyB0aGlzLmZpbHRlclVzZXJGaWxlcyhzb3J0ZWRGaWxlcywgb3ZlcmxheU5hbWUsICcuY3NzJykgOiBbXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBqc0ZpbGUgb2YganNGaWxlcykge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcHJpbnRVc2VyRmlsZShgbG9jYWwgdXNlciBmaWxlOiAke2Jhc2VQYXRofSR7anNGaWxlfWApO1xyXG4gICAgICAgICAgICB0aGlzLmV2YWxVc2VyRmlsZShsb2NhbEZpbGVzW2pzRmlsZV0gPz8gJycsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB3YXJuT25WYXJpYWJsZVJlc2V0TWFwW292ZXJsYXlOYW1lXSA/PyBbXSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFyaWFibGVUcmFja2VyW2ZpZWxkXTtcclxuICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gb3B0aW9uc1tmaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgIC8vIElkZWFsbHkgdXNlcnMgc2hvdWxkIGRvIHNvbWV0aGluZyBsaWtlIGBPcHRpb25zLlRyaWdnZXJzLnB1c2goW2V0Y10pO2BcclxuICAgICAgICAgICAgICAgIC8vIGluc3RlYWQgb2YgYE9wdGlvbnMuVHJpZ2dlcnMgPSBbZXRjXTtgXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICAgICAgYCoqKiBXQVJOSU5HOiAke2Jhc2VQYXRofSR7anNGaWxlfSBvdmVyd3JpdGVzIE9wdGlvbnMuJHtmaWVsZH0gZnJvbSBwcmV2aW91cyBmaWxlcy5gLFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgdmFyaWFibGVUcmFja2VyW2ZpZWxkXSA9IG9wdGlvbnNbZmllbGRdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVzZXJGaWxlQ2FsbGJhY2tzW292ZXJsYXlOYW1lXT8uKGpzRmlsZSwgbG9jYWxGaWxlcywgb3B0aW9ucywgYmFzZVBhdGgpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAvLyBCZSB2ZXJ5IHZpc2libGUgZm9yIHVzZXJzLlxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnKioqIEVSUk9SIElOIFVTRVIgRklMRSAqKionKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGlzIGlzIGEgYml0IGF3a3dhcmQgdG8gaGFuZGxlIHNraW4gc2V0dGluZ3MgaGVyZSwgYnV0XHJcbiAgICAgICAgLy8gZG9pbmcgaXQgYWZ0ZXIgdXNlciBjb25maWcgZmlsZXMgYW5kIGJlZm9yZSB1c2VyIGNzcyBmaWxlc1xyXG4gICAgICAgIC8vIGFsbG93cyB1c2VyIGNzcyB0byBvdmVycmlkZSBza2luLXNwZWNpZmljIGNzcyBhcyB3ZWxsLlxyXG4gICAgICAgIGlmIChvcHRpb25zLlNraW4gIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHRoaXMuaGFuZGxlU2tpbihvcHRpb25zLlNraW4pO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNzc0ZpbGUgb2YgY3NzRmlsZXMpIHtcclxuICAgICAgICAgIHByaW50VXNlckZpbGUoYGxvY2FsIHVzZXIgZmlsZTogJHtiYXNlUGF0aH0ke2Nzc0ZpbGV9YCk7XHJcbiAgICAgICAgICBjb25zdCB1c2VyQ3NzVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgICAgICAgICBjb25zdCBjb250ZW50cyA9IGxvY2FsRmlsZXNbY3NzRmlsZV07XHJcbiAgICAgICAgICBpZiAoY29udGVudHMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdXNlckNzc1RleHQuaW5uZXJUZXh0ID0gY29udGVudHM7XHJcbiAgICAgICAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcclxuICAgICAgICAgIGlmIChoZWFkKVxyXG4gICAgICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHVzZXJDc3NUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFBvc3QgdGhpcyBjYWxsYmFjayBzbyB0aGF0IHRoZSBqcyBhbmQgY3NzIGNhbiBiZSBleGVjdXRlZCBmaXJzdC5cclxuICAgICAgY2FsbGJhY2soKTtcclxuXHJcbiAgICAgIHZvaWQgY2FsbE92ZXJsYXlIYW5kbGVyKHsgY2FsbDogJ2NhY3Rib3RSZXF1ZXN0U3RhdGUnIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2b2lkIGNhbGxPdmVybGF5SGFuZGxlcih7XHJcbiAgICAgIGNhbGw6ICdjYWN0Ym90TG9hZFVzZXInLFxyXG4gICAgICBzb3VyY2U6IGxvY2F0aW9uLmhyZWYsXHJcbiAgICAgIG92ZXJsYXlOYW1lOiBvdmVybGF5TmFtZSxcclxuICAgIH0pLnRoZW4oKGU6IHsgZGV0YWlsOiBDYWN0Ym90TG9hZFVzZXJSZXQgfSkgPT4ge1xyXG4gICAgICAvLyBXYWl0IGZvciBET01Db250ZW50TG9hZGVkIGlmIG5lZWRlZC5cclxuICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdsb2FkaW5nJykge1xyXG4gICAgICAgIHZvaWQgbG9hZFVzZXIoZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICAgICAgdm9pZCBsb2FkVXNlcihlKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVNraW4oc2tpbk5hbWU6IHN0cmluZykge1xyXG4gICAgaWYgKCFza2luTmFtZSB8fCBza2luTmFtZSA9PT0gJ2RlZmF1bHQnKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBjb25zdCBza2luQ1NTUmVsYXRpdmVIcmVmID0gYHNraW5zLyR7c2tpbk5hbWV9LyR7c2tpbk5hbWV9LmNzc2A7XHJcbiAgICB0aGlzLmFwcGVuZENTU0xpbmsoc2tpbkNTU1JlbGF0aXZlSHJlZik7XHJcbiAgfVxyXG4gIGFwcGVuZEpTTGluayhzcmM6IHN0cmluZykge1xyXG4gICAgY29uc3QgdXNlckpTID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICB1c2VySlMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvamF2YXNjcmlwdCcpO1xyXG4gICAgdXNlckpTLnNldEF0dHJpYnV0ZSgnc3JjJywgc3JjKTtcclxuICAgIHVzZXJKUy5zZXRBdHRyaWJ1dGUoJ2FzeW5jJywgJ2ZhbHNlJyk7XHJcbiAgICBjb25zdCBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcclxuICAgIGlmIChoZWFkKVxyXG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHVzZXJKUyk7XHJcbiAgfVxyXG4gIGFwcGVuZENTU0xpbmsoaHJlZjogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB1c2VyQ1NTID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG4gICAgdXNlckNTUy5zZXRBdHRyaWJ1dGUoJ3JlbCcsICdzdHlsZXNoZWV0Jyk7XHJcbiAgICB1c2VyQ1NTLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xyXG4gICAgdXNlckNTUy5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcclxuICAgIGNvbnN0IGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xyXG4gICAgaWYgKGhlYWQpXHJcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQodXNlckNTUyk7XHJcbiAgfVxyXG4gIHByb2Nlc3NPcHRpb25zKFxyXG4gICAgb3B0aW9uczogQmFzZU9wdGlvbnMsXHJcbiAgICBvdXRwdXQ6IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9LFxyXG4gICAgc2F2ZWRDb25maWc6IFNhdmVkQ29uZmlnRW50cnksXHJcbiAgICB0ZW1wbGF0ZU9wdGlvbnM/OiBDb25maWdFbnRyeVtdLFxyXG4gICkge1xyXG4gICAgLy8gVGFrZSBvcHRpb25zIGZyb20gdGhlIHRlbXBsYXRlLCBmaW5kIHRoZW0gaW4gc2F2ZWRDb25maWcsXHJcbiAgICAvLyBhbmQgYXBwbHkgdGhlbSB0byBvcHRpb25zLiBUaGlzIGFsc28gaGFuZGxlcyBzZXR0aW5nXHJcbiAgICAvLyBkZWZhdWx0cyBmb3IgYW55dGhpbmcgaW4gdGhlIHRlbXBsYXRlLCBldmVuIGlmIGl0IGRvZXMgbm90XHJcbiAgICAvLyBleGlzdCBpbiBzYXZlZENvbmZpZy5cclxuXHJcbiAgICAvLyBOb3QgYWxsIG92ZXJsYXlzIGhhdmUgb3B0aW9uIHRlbXBsYXRlcy5cclxuICAgIGlmICh0ZW1wbGF0ZU9wdGlvbnMgPT09IHVuZGVmaW5lZClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGZvciAoY29uc3Qgb3B0IG9mIHRlbXBsYXRlT3B0aW9ucykge1xyXG4gICAgICAvLyBHcmFiIHRoZSBzYXZlZCB2YWx1ZSBvciB0aGUgZGVmYXVsdCB0byBzZXQgaW4gb3B0aW9ucy5cclxuXHJcbiAgICAgIGxldCB2YWx1ZTogU2F2ZWRDb25maWdFbnRyeTtcclxuICAgICAgaWYgKHR5cGVvZiBvcHQuZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICB2YWx1ZSA9IG9wdC5kZWZhdWx0KG9wdGlvbnMpO1xyXG4gICAgICBlbHNlXHJcbiAgICAgICAgdmFsdWUgPSBvcHQuZGVmYXVsdDtcclxuXHJcbiAgICAgIGxldCBpc0RlZmF1bHQgPSB0cnVlO1xyXG4gICAgICBpZiAodHlwZW9mIHNhdmVkQ29uZmlnID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShzYXZlZENvbmZpZykpIHtcclxuICAgICAgICBpZiAob3B0LmlkIGluIHNhdmVkQ29uZmlnKSB7XHJcbiAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHNhdmVkQ29uZmlnW29wdC5pZF07XHJcbiAgICAgICAgICAvLyBFbXB0eSBzdHJpbmdzIGFyZSBhbHdheXMgdHJlYXRlZCBhcyBkZWZhdWx0IHZhbHVlcy5cclxuICAgICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgdXNlciBoYXMgZW50ZXJlZCBzb21ldGhpbmcgYW5kIHRoZW4gY2xlYXJlZCBpdC5cclxuICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIG5ld1ZhbHVlICE9PSAnJykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICBpc0RlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE9wdGlvbnMgY2FuIHByb3ZpZGUgY3VzdG9tIGxvZ2ljIHRvIHR1cm4gYSB2YWx1ZSBpbnRvIG9wdGlvbnMgc2V0dGluZ3MuXHJcbiAgICAgIC8vIElmIHRoaXMgZG9lc24ndCBleGlzdCwganVzdCBzZXQgdGhlIHZhbHVlIGRpcmVjdGx5LlxyXG4gICAgICAvLyBPcHRpb24gdGVtcGxhdGUgaWRzIGFyZSBpZGVudGljYWwgdG8gZmllbGQgbmFtZXMgb24gT3B0aW9ucy5cclxuICAgICAgaWYgKG9wdC5zZXR0ZXJGdW5jKSB7XHJcbiAgICAgICAgY29uc3Qgc2V0VmFsdWUgPSBvcHQuc2V0dGVyRnVuYyh2YWx1ZSwgb3B0aW9ucywgaXNEZWZhdWx0KTtcclxuICAgICAgICBpZiAoc2V0VmFsdWUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIG91dHB1dFtvcHQuaWRdID0gc2V0VmFsdWU7XHJcbiAgICAgIH0gZWxzZSBpZiAob3B0LnR5cGUgPT09ICdpbnRlZ2VyJykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxyXG4gICAgICAgICAgb3V0cHV0W29wdC5pZF0gPSBNYXRoLmZsb29yKHZhbHVlKTtcclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgb3V0cHV0W29wdC5pZF0gPSBwYXJzZUludCh2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAob3B0LnR5cGUgPT09ICdmbG9hdCcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgICAgIG91dHB1dFtvcHQuaWRdID0gdmFsdWU7XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJylcclxuICAgICAgICAgIG91dHB1dFtvcHQuaWRdID0gcGFyc2VGbG9hdCh2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgb3V0cHV0W29wdC5pZF0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBhZGRVbmxvY2tUZXh0KGxhbmc6IExhbmcpIHtcclxuICAgIGNvbnN0IHVubG9ja1RleHQgPSB7XHJcbiAgICAgIGVuOiAn8J+UkyBVbmxvY2tlZCAobG9jayBvdmVybGF5IGJlZm9yZSB1c2luZyknLFxyXG4gICAgICBkZTogJ/CflJMgRW50c3BlcnJ0IChTcGVycmUgZGFzIE92ZXJsYXkgdm9yIGRlciBOdXR6dW5nKScsXHJcbiAgICAgIGZyOiAn8J+UkyBEw6libG9xdcOpIChCbG9xdWV6IGxcXCdvdmVybGF5IGF2YW50IHV0aWxpc2F0aW9uKScsXHJcbiAgICAgIGphOiAn8J+UkyDjg63jg4Pjgq/op6PpmaQgKOOCquODvOODkOODvOODrOOCpOOCkuS9v+eUqOOBmeOCi+WJjeOBq+ODreODg+OCr+OBl+OBpuOBj+OBoOOBleOBhCknLFxyXG4gICAgICBjbjogJ/CflJMg5bey6Kej6Zmk6ZSB5a6aICjkvaDpnIDopoHlsIbmraTmgqzmta7nqpfplIHlrprlkI7mlrnlj6/kvb/nlKgpJyxcclxuICAgICAga286ICfwn5STIOychOy5mCDsnqDquIgg7ZW07KCc65CoICjsgqzsmqntlZjquLAg7KCE7JeQIOychOy5mCDsnqDquIjsnYQg7ISk7KCV7ZWY7IS47JqUKScsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGlkID0gJ2NhY3Rib3QtdW5sb2NrZWQtdGV4dCc7XHJcbiAgICBsZXQgdGV4dEVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICBpZiAoIXRleHRFbGVtKSB7XHJcbiAgICAgIHRleHRFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRleHRFbGVtLmlkID0gaWQ7XHJcbiAgICAgIHRleHRFbGVtLmNsYXNzTGlzdC5hZGQoJ3RleHQnKTtcclxuICAgICAgLy8gU2V0IGVsZW1lbnQgZGlzcGxheSB0byBub25lIGluIGNhc2UgdGhlIHBhZ2UgaGFzIG5vdCBpbmNsdWRlZCBkZWZhdWx0cy5jc3MuXHJcbiAgICAgIHRleHRFbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRleHRFbGVtKTtcclxuICAgIH1cclxuICAgIHRleHRFbGVtLmlubmVySFRNTCA9IHVubG9ja1RleHRbbGFuZ10gfHwgdW5sb2NrVGV4dFsnZW4nXTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBVc2VyQ29uZmlnKCk7XHJcblxyXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG4gIC8vIFRoaXMgZXZlbnQgY29tZXMgZWFybHkgYW5kIGlzIG5vdCBjYWNoZWQsIHNvIHNldCB1cCBldmVudCBsaXN0ZW5lciBpbW1lZGlhdGVseS5cclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdvbk92ZXJsYXlTdGF0ZVVwZGF0ZScsIChlKSA9PiB7XHJcbiAgICBjb25zdCBkb2NDbGFzc0xpc3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0O1xyXG4gICAgaWYgKGUuZGV0YWlsLmlzTG9ja2VkKVxyXG4gICAgICBkb2NDbGFzc0xpc3QucmVtb3ZlKCdyZXNpemUtaGFuZGxlJywgJ3VubG9ja2VkJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIGRvY0NsYXNzTGlzdC5hZGQoJ3Jlc2l6ZS1oYW5kbGUnLCAndW5sb2NrZWQnKTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQge1xyXG4gIE92ZXJsYXlIYW5kbGVyUmVxdWVzdHMsXHJcbiAgT3ZlcmxheUhhbmRsZXJSZXNwb25zZVR5cGVzLFxyXG4gIFBsdWdpbkNvbWJhdGFudFN0YXRlLFxyXG59IGZyb20gJy4uL3R5cGVzL2V2ZW50JztcclxuaW1wb3J0IHsgSm9iLCBSb2xlIH0gZnJvbSAnLi4vdHlwZXMvam9iJztcclxuaW1wb3J0IHsgTmV0TWF0Y2hlcyB9IGZyb20gJy4uL3R5cGVzL25ldF9tYXRjaGVzJztcclxuaW1wb3J0IHsgT3V0cHV0U3RyaW5ncyB9IGZyb20gJy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxuaW1wb3J0IHsgZ2FtZUxvZ0NvZGVzIH0gZnJvbSAnLi9uZXRyZWdleGVzJztcclxuaW1wb3J0IE91dHB1dHMgZnJvbSAnLi9vdXRwdXRzJztcclxuaW1wb3J0IHsgY2FsbE92ZXJsYXlIYW5kbGVyIH0gZnJvbSAnLi9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5cclxuLy8gVE9ETzogaXQnZCBiZSBuaWNlIHRvIG5vdCByZXBlYXQgam9iIG5hbWVzLCBidXQgYXQgbGVhc3QgUmVjb3JkIGVuZm9yY2VzIHRoYXQgYWxsIGFyZSBzZXQuXHJcbmNvbnN0IG5hbWVUb0pvYkVudW06IFJlY29yZDxKb2IsIG51bWJlcj4gPSB7XHJcbiAgTk9ORTogMCxcclxuICBHTEE6IDEsXHJcbiAgUEdMOiAyLFxyXG4gIE1SRDogMyxcclxuICBMTkM6IDQsXHJcbiAgQVJDOiA1LFxyXG4gIENOSjogNixcclxuICBUSE06IDcsXHJcbiAgQ1JQOiA4LFxyXG4gIEJTTTogOSxcclxuICBBUk06IDEwLFxyXG4gIEdTTTogMTEsXHJcbiAgTFRXOiAxMixcclxuICBXVlI6IDEzLFxyXG4gIEFMQzogMTQsXHJcbiAgQ1VMOiAxNSxcclxuICBNSU46IDE2LFxyXG4gIEJUTjogMTcsXHJcbiAgRlNIOiAxOCxcclxuICBQTEQ6IDE5LFxyXG4gIE1OSzogMjAsXHJcbiAgV0FSOiAyMSxcclxuICBEUkc6IDIyLFxyXG4gIEJSRDogMjMsXHJcbiAgV0hNOiAyNCxcclxuICBCTE06IDI1LFxyXG4gIEFDTjogMjYsXHJcbiAgU01OOiAyNyxcclxuICBTQ0g6IDI4LFxyXG4gIFJPRzogMjksXHJcbiAgTklOOiAzMCxcclxuICBNQ0g6IDMxLFxyXG4gIERSSzogMzIsXHJcbiAgQVNUOiAzMyxcclxuICBTQU06IDM0LFxyXG4gIFJETTogMzUsXHJcbiAgQkxVOiAzNixcclxuICBHTkI6IDM3LFxyXG4gIEROQzogMzgsXHJcbiAgUlBSOiAzOSxcclxuICBTR0U6IDQwLFxyXG59O1xyXG5cclxuY29uc3QgYWxsSm9icyA9IE9iamVjdC5rZXlzKG5hbWVUb0pvYkVudW0pIGFzIEpvYltdO1xyXG5jb25zdCBhbGxSb2xlcyA9IFsndGFuaycsICdoZWFsZXInLCAnZHBzJywgJ2NyYWZ0ZXInLCAnZ2F0aGVyZXInLCAnbm9uZSddIGFzIFJvbGVbXTtcclxuXHJcbmNvbnN0IHRhbmtKb2JzOiBKb2JbXSA9IFsnR0xBJywgJ1BMRCcsICdNUkQnLCAnV0FSJywgJ0RSSycsICdHTkInXTtcclxuY29uc3QgaGVhbGVySm9iczogSm9iW10gPSBbJ0NOSicsICdXSE0nLCAnU0NIJywgJ0FTVCcsICdTR0UnXTtcclxuY29uc3QgbWVsZWVEcHNKb2JzOiBKb2JbXSA9IFsnUEdMJywgJ01OSycsICdMTkMnLCAnRFJHJywgJ1JPRycsICdOSU4nLCAnU0FNJywgJ1JQUiddO1xyXG5jb25zdCByYW5nZWREcHNKb2JzOiBKb2JbXSA9IFsnQVJDJywgJ0JSRCcsICdETkMnLCAnTUNIJ107XHJcbmNvbnN0IGNhc3RlckRwc0pvYnM6IEpvYltdID0gWydCTFUnLCAnUkRNJywgJ0JMTScsICdTTU4nLCAnQUNOJywgJ1RITSddO1xyXG5jb25zdCBkcHNKb2JzOiBKb2JbXSA9IFsuLi5tZWxlZURwc0pvYnMsIC4uLnJhbmdlZERwc0pvYnMsIC4uLmNhc3RlckRwc0pvYnNdO1xyXG5jb25zdCBjcmFmdGluZ0pvYnM6IEpvYltdID0gWydDUlAnLCAnQlNNJywgJ0FSTScsICdHU00nLCAnTFRXJywgJ1dWUicsICdBTEMnLCAnQ1VMJ107XHJcbmNvbnN0IGdhdGhlcmluZ0pvYnM6IEpvYltdID0gWydNSU4nLCAnQlROJywgJ0ZTSCddO1xyXG5cclxuY29uc3Qgc3R1bkpvYnM6IEpvYltdID0gWydCTFUnLCAuLi50YW5rSm9icywgLi4ubWVsZWVEcHNKb2JzXTtcclxuY29uc3Qgc2lsZW5jZUpvYnM6IEpvYltdID0gWydCTFUnLCAuLi50YW5rSm9icywgLi4ucmFuZ2VkRHBzSm9ic107XHJcbmNvbnN0IHNsZWVwSm9iczogSm9iW10gPSBbLi4uY2FzdGVyRHBzSm9icywgLi4uaGVhbGVySm9ic107XHJcbmNvbnN0IGZlaW50Sm9iczogSm9iW10gPSBbLi4ubWVsZWVEcHNKb2JzXTtcclxuY29uc3QgYWRkbGVKb2JzOiBKb2JbXSA9IFsuLi5jYXN0ZXJEcHNKb2JzXTtcclxuY29uc3QgY2xlYW5zZUpvYnM6IEpvYltdID0gWydCTFUnLCAnQlJEJywgLi4uaGVhbGVySm9ic107XHJcblxyXG5jb25zdCBqb2JUb1JvbGVNYXA6IE1hcDxKb2IsIFJvbGU+ID0gKCgpID0+IHtcclxuICBjb25zdCBhZGRUb01hcCA9IChtYXA6IE1hcDxKb2IsIFJvbGU+LCBqb2JzOiBKb2JbXSwgcm9sZTogUm9sZSkgPT4ge1xyXG4gICAgam9icy5mb3JFYWNoKChqb2IpID0+IG1hcC5zZXQoam9iLCByb2xlKSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgbWFwOiBNYXA8Sm9iLCBSb2xlPiA9IG5ldyBNYXAoW1snTk9ORScsICdub25lJ11dKTtcclxuICBhZGRUb01hcChtYXAsIHRhbmtKb2JzLCAndGFuaycpO1xyXG4gIGFkZFRvTWFwKG1hcCwgaGVhbGVySm9icywgJ2hlYWxlcicpO1xyXG4gIGFkZFRvTWFwKG1hcCwgZHBzSm9icywgJ2RwcycpO1xyXG4gIGFkZFRvTWFwKG1hcCwgY3JhZnRpbmdKb2JzLCAnY3JhZnRlcicpO1xyXG4gIGFkZFRvTWFwKG1hcCwgZ2F0aGVyaW5nSm9icywgJ2dhdGhlcmVyJyk7XHJcblxyXG4gIHJldHVybiBtYXA7XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgdHlwZSBXYXRjaENvbWJhdGFudFBhcmFtcyA9IHtcclxuICBpZHM/OiBudW1iZXJbXTtcclxuICBuYW1lcz86IHN0cmluZ1tdO1xyXG4gIHByb3BzPzogc3RyaW5nW107XHJcbiAgZGVsYXk/OiBudW1iZXI7XHJcbiAgbWF4RHVyYXRpb24/OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBXYXRjaENvbWJhdGFudEZ1bmMgPSAoXHJcbiAgcGFyYW1zOiBXYXRjaENvbWJhdGFudFBhcmFtcyxcclxuICBmdW5jOiAocmV0OiBPdmVybGF5SGFuZGxlclJlc3BvbnNlVHlwZXNbJ2dldENvbWJhdGFudHMnXSkgPT4gYm9vbGVhbixcclxuKSA9PiBQcm9taXNlPHZvaWQ+O1xyXG5cclxudHlwZSBXYXRjaENvbWJhdGFudE1hcEVudHJ5ID0ge1xyXG4gIGNhbmNlbDogYm9vbGVhbjtcclxuICBzdGFydDogbnVtYmVyO1xyXG59O1xyXG5cclxuY29uc3Qgd2F0Y2hDb21iYXRhbnRNYXA6IFdhdGNoQ29tYmF0YW50TWFwRW50cnlbXSA9IFtdO1xyXG5cclxuY29uc3Qgc2hvdWxkQ2FuY2VsV2F0Y2ggPSAoXHJcbiAgcGFyYW1zOiBXYXRjaENvbWJhdGFudFBhcmFtcyxcclxuICBlbnRyeTogV2F0Y2hDb21iYXRhbnRNYXBFbnRyeSxcclxuKTogYm9vbGVhbiA9PiB7XHJcbiAgaWYgKGVudHJ5LmNhbmNlbClcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIGlmIChwYXJhbXMubWF4RHVyYXRpb24gIT09IHVuZGVmaW5lZCAmJiBEYXRlLm5vdygpIC0gZW50cnkuc3RhcnQgPiBwYXJhbXMubWF4RHVyYXRpb24pXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICByZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5jb25zdCBkZWZhdWx0V2F0Y2hDb21iYXRhbnQ6IFdhdGNoQ29tYmF0YW50RnVuYyA9IChwYXJhbXMsIGZ1bmMpID0+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlcywgcmVqKSA9PiB7XHJcbiAgICBjb25zdCBkZWxheSA9IHBhcmFtcy5kZWxheSA/PyAxMDAwO1xyXG5cclxuICAgIGNvbnN0IGNhbGw6IE92ZXJsYXlIYW5kbGVyUmVxdWVzdHNbJ2dldENvbWJhdGFudHMnXSA9IHtcclxuICAgICAgY2FsbDogJ2dldENvbWJhdGFudHMnLFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAocGFyYW1zLmlkcylcclxuICAgICAgY2FsbC5pZHMgPSBwYXJhbXMuaWRzO1xyXG5cclxuICAgIGlmIChwYXJhbXMubmFtZXMpXHJcbiAgICAgIGNhbGwubmFtZXMgPSBwYXJhbXMubmFtZXM7XHJcblxyXG4gICAgaWYgKHBhcmFtcy5wcm9wcylcclxuICAgICAgY2FsbC5wcm9wcyA9IHBhcmFtcy5wcm9wcztcclxuXHJcbiAgICBjb25zdCBlbnRyeTogV2F0Y2hDb21iYXRhbnRNYXBFbnRyeSA9IHtcclxuICAgICAgY2FuY2VsOiBmYWxzZSxcclxuICAgICAgc3RhcnQ6IERhdGUubm93KCksXHJcbiAgICB9O1xyXG5cclxuICAgIHdhdGNoQ29tYmF0YW50TWFwLnB1c2goZW50cnkpO1xyXG5cclxuICAgIGNvbnN0IGNoZWNrRnVuYyA9ICgpID0+IHtcclxuICAgICAgaWYgKHNob3VsZENhbmNlbFdhdGNoKHBhcmFtcywgZW50cnkpKSB7XHJcbiAgICAgICAgcmVqKG5ldyBFcnJvcignY2FuY2VsbGVkJykpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB2b2lkIGNhbGxPdmVybGF5SGFuZGxlcihjYWxsKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgIGlmIChlbnRyeS5jYW5jZWwpIHtcclxuICAgICAgICAgIHJlaihuZXcgRXJyb3IoJ3dhcyBjYW5jZWxsZWQnKSk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmdW5jKHJlc3BvbnNlKSlcclxuICAgICAgICAgIHJlcygpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNoZWNrRnVuYywgZGVsYXkpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LnNldFRpbWVvdXQoY2hlY2tGdW5jLCBkZWxheSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5sZXQgd2F0Y2hDb21iYXRhbnRPdmVycmlkZTogV2F0Y2hDb21iYXRhbnRGdW5jIHwgdW5kZWZpbmVkO1xyXG5sZXQgY2xlYXJDb21iYXRhbnRzT3ZlcnJpZGU6ICgpID0+IHZvaWQgfCB1bmRlZmluZWQ7XHJcblxyXG5jb25zdCBkZWZhdWx0Q2xlYXJDb21iYXRhbnRzID0gKCkgPT4ge1xyXG4gIHdoaWxlICh3YXRjaENvbWJhdGFudE1hcC5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCB3YXRjaCA9IHdhdGNoQ29tYmF0YW50TWFwLnBvcCgpO1xyXG4gICAgaWYgKHdhdGNoKVxyXG4gICAgICB3YXRjaC5jYW5jZWwgPSB0cnVlO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHdhdGNoQ29tYmF0YW50OiBXYXRjaENvbWJhdGFudEZ1bmMgPSAocGFyYW1zLCBmdW5jKSA9PiB7XHJcbiAgaWYgKHdhdGNoQ29tYmF0YW50T3ZlcnJpZGUpXHJcbiAgICByZXR1cm4gd2F0Y2hDb21iYXRhbnRPdmVycmlkZShwYXJhbXMsIGZ1bmMpO1xyXG5cclxuICByZXR1cm4gZGVmYXVsdFdhdGNoQ29tYmF0YW50KHBhcmFtcywgZnVuYyk7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBEaXJlY3Rpb25PdXRwdXQxNiA9XHJcbiAgfCAnZGlyTidcclxuICB8ICdkaXJOTkUnXHJcbiAgfCAnZGlyTkUnXHJcbiAgfCAnZGlyRU5FJ1xyXG4gIHwgJ2RpckUnXHJcbiAgfCAnZGlyRVNFJ1xyXG4gIHwgJ2RpclNFJ1xyXG4gIHwgJ2RpclNTRSdcclxuICB8ICdkaXJTJ1xyXG4gIHwgJ2RpclNTVydcclxuICB8ICdkaXJTVydcclxuICB8ICdkaXJXU1cnXHJcbiAgfCAnZGlyVydcclxuICB8ICdkaXJXTlcnXHJcbiAgfCAnZGlyTlcnXHJcbiAgfCAnZGlyTk5XJ1xyXG4gIHwgJ3Vua25vd24nO1xyXG5cclxuZXhwb3J0IHR5cGUgRGlyZWN0aW9uT3V0cHV0OCA9XHJcbiAgfCAnZGlyTidcclxuICB8ICdkaXJORSdcclxuICB8ICdkaXJFJ1xyXG4gIHwgJ2RpclNFJ1xyXG4gIHwgJ2RpclMnXHJcbiAgfCAnZGlyU1cnXHJcbiAgfCAnZGlyVydcclxuICB8ICdkaXJOVydcclxuICB8ICd1bmtub3duJztcclxuXHJcbmV4cG9ydCB0eXBlIERpcmVjdGlvbk91dHB1dENhcmRpbmFsID1cclxuICB8ICdkaXJOJ1xyXG4gIHwgJ2RpckUnXHJcbiAgfCAnZGlyUydcclxuICB8ICdkaXJXJ1xyXG4gIHwgJ3Vua25vd24nO1xyXG5cclxuZXhwb3J0IHR5cGUgRGlyZWN0aW9uT3V0cHV0SW50ZXJjYXJkID1cclxuICB8ICdkaXJORSdcclxuICB8ICdkaXJTRSdcclxuICB8ICdkaXJTVydcclxuICB8ICdkaXJOVydcclxuICB8ICd1bmtub3duJztcclxuXHJcbmNvbnN0IG91dHB1dDhEaXI6IERpcmVjdGlvbk91dHB1dDhbXSA9IFtcclxuICAnZGlyTicsXHJcbiAgJ2Rpck5FJyxcclxuICAnZGlyRScsXHJcbiAgJ2RpclNFJyxcclxuICAnZGlyUycsXHJcbiAgJ2RpclNXJyxcclxuICAnZGlyVycsXHJcbiAgJ2Rpck5XJyxcclxuXTtcclxuXHJcbmNvbnN0IG91dHB1dDE2RGlyOiBEaXJlY3Rpb25PdXRwdXQxNltdID0gW1xyXG4gICdkaXJOJyxcclxuICAnZGlyTk5FJyxcclxuICAnZGlyTkUnLFxyXG4gICdkaXJFTkUnLFxyXG4gICdkaXJFJyxcclxuICAnZGlyRVNFJyxcclxuICAnZGlyU0UnLFxyXG4gICdkaXJTU0UnLFxyXG4gICdkaXJTJyxcclxuICAnZGlyU1NXJyxcclxuICAnZGlyU1cnLFxyXG4gICdkaXJXU1cnLFxyXG4gICdkaXJXJyxcclxuICAnZGlyV05XJyxcclxuICAnZGlyTlcnLFxyXG4gICdkaXJOTlcnLFxyXG5dO1xyXG5cclxuY29uc3Qgb3V0cHV0Q2FyZGluYWxEaXI6IERpcmVjdGlvbk91dHB1dENhcmRpbmFsW10gPSBbJ2Rpck4nLCAnZGlyRScsICdkaXJTJywgJ2RpclcnXTtcclxuY29uc3Qgb3V0cHV0SW50ZXJjYXJkRGlyOiBEaXJlY3Rpb25PdXRwdXRJbnRlcmNhcmRbXSA9IFsnZGlyTkUnLCAnZGlyU0UnLCAnZGlyU1cnLCAnZGlyTlcnXTtcclxuXHJcbmNvbnN0IG91dHB1dFN0cmluZ3MxNkRpcjogT3V0cHV0U3RyaW5ncyA9IHtcclxuICBkaXJOOiBPdXRwdXRzLmRpck4sXHJcbiAgZGlyTk5FOiBPdXRwdXRzLmRpck5ORSxcclxuICBkaXJORTogT3V0cHV0cy5kaXJORSxcclxuICBkaXJFTkU6IE91dHB1dHMuZGlyRU5FLFxyXG4gIGRpckU6IE91dHB1dHMuZGlyRSxcclxuICBkaXJFU0U6IE91dHB1dHMuZGlyRVNFLFxyXG4gIGRpclNFOiBPdXRwdXRzLmRpclNFLFxyXG4gIGRpclNTRTogT3V0cHV0cy5kaXJTU0UsXHJcbiAgZGlyUzogT3V0cHV0cy5kaXJTLFxyXG4gIGRpclNTVzogT3V0cHV0cy5kaXJTU1csXHJcbiAgZGlyU1c6IE91dHB1dHMuZGlyU1csXHJcbiAgZGlyV1NXOiBPdXRwdXRzLmRpcldTVyxcclxuICBkaXJXOiBPdXRwdXRzLmRpclcsXHJcbiAgZGlyV05XOiBPdXRwdXRzLmRpcldOVyxcclxuICBkaXJOVzogT3V0cHV0cy5kaXJOVyxcclxuICBkaXJOTlc6IE91dHB1dHMuZGlyTk5XLFxyXG4gIHVua25vd246IE91dHB1dHMudW5rbm93bixcclxufTtcclxuXHJcbmNvbnN0IG91dHB1dFN0cmluZ3M4RGlyOiBPdXRwdXRTdHJpbmdzID0ge1xyXG4gIGRpck46IE91dHB1dHMuZGlyTixcclxuICBkaXJORTogT3V0cHV0cy5kaXJORSxcclxuICBkaXJFOiBPdXRwdXRzLmRpckUsXHJcbiAgZGlyU0U6IE91dHB1dHMuZGlyU0UsXHJcbiAgZGlyUzogT3V0cHV0cy5kaXJTLFxyXG4gIGRpclNXOiBPdXRwdXRzLmRpclNXLFxyXG4gIGRpclc6IE91dHB1dHMuZGlyVyxcclxuICBkaXJOVzogT3V0cHV0cy5kaXJOVyxcclxuICB1bmtub3duOiBPdXRwdXRzLnVua25vd24sXHJcbn07XHJcblxyXG5jb25zdCBvdXRwdXRTdHJpbmdzQ2FyZGluYWxEaXI6IE91dHB1dFN0cmluZ3MgPSB7XHJcbiAgZGlyTjogT3V0cHV0cy5kaXJOLFxyXG4gIGRpckU6IE91dHB1dHMuZGlyRSxcclxuICBkaXJTOiBPdXRwdXRzLmRpclMsXHJcbiAgZGlyVzogT3V0cHV0cy5kaXJXLFxyXG4gIHVua25vd246IE91dHB1dHMudW5rbm93bixcclxufTtcclxuXHJcbmNvbnN0IG91dHB1dFN0cmluZ3NJbnRlcmNhcmREaXI6IE91dHB1dFN0cmluZ3MgPSB7XHJcbiAgZGlyTkU6IE91dHB1dHMuZGlyTkUsXHJcbiAgZGlyU0U6IE91dHB1dHMuZGlyU0UsXHJcbiAgZGlyU1c6IE91dHB1dHMuZGlyU1csXHJcbiAgZGlyTlc6IE91dHB1dHMuZGlyTlcsXHJcbiAgdW5rbm93bjogT3V0cHV0cy51bmtub3duLFxyXG59O1xyXG5cclxuLy8gVE9ETzogQWNjZXB0ICdub3J0aCcgYXMgYSBmdW5jdGlvbiBpbnB1dCBhbmQgYWRqdXN0IG91dHB1dCBhY2NvcmRpbmdseS5cclxuLy8gRS5nLiBNYXRoLnJvdW5kKChub3J0aCArIDQpIC0gNCAqIE1hdGguYXRhbjIoeCwgeSkgLyBNYXRoLlBJKSAlIDg7XHJcbi8vIFdpbGwgbmVlZCB0byBhZGp1c3QgdGhlIG91dHB1dCBhcnJheXMgYXMgd2VsbCB0aG91Z2guXHJcblxyXG5jb25zdCB4eVRvMTZEaXJOdW0gPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNlbnRlclg6IG51bWJlciwgY2VudGVyWTogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICAvLyBOID0gMCwgTk5FID0gMSwgLi4uLCBOTlcgPSAxNVxyXG4gIHggPSB4IC0gY2VudGVyWDtcclxuICB5ID0geSAtIGNlbnRlclk7XHJcbiAgcmV0dXJuIE1hdGgucm91bmQoOCAtIDggKiBNYXRoLmF0YW4yKHgsIHkpIC8gTWF0aC5QSSkgJSAxNjtcclxufTtcclxuXHJcbmNvbnN0IHh5VG84RGlyTnVtID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCBjZW50ZXJYOiBudW1iZXIsIGNlbnRlclk6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgLy8gTiA9IDAsIE5FID0gMSwgLi4uLCBOVyA9IDdcclxuICB4ID0geCAtIGNlbnRlclg7XHJcbiAgeSA9IHkgLSBjZW50ZXJZO1xyXG4gIHJldHVybiBNYXRoLnJvdW5kKDQgLSA0ICogTWF0aC5hdGFuMih4LCB5KSAvIE1hdGguUEkpICUgODtcclxufTtcclxuXHJcbmNvbnN0IHh5VG80RGlyTnVtID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCBjZW50ZXJYOiBudW1iZXIsIGNlbnRlclk6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgLy8gTiA9IDAsIEUgPSAxLCBTID0gMiwgVyA9IDNcclxuICB4ID0geCAtIGNlbnRlclg7XHJcbiAgeSA9IHkgLSBjZW50ZXJZO1xyXG4gIHJldHVybiBNYXRoLnJvdW5kKDIgLSAyICogTWF0aC5hdGFuMih4LCB5KSAvIE1hdGguUEkpICUgNDtcclxufTtcclxuXHJcbmNvbnN0IGhkZ1RvOERpck51bSA9IChoZWFkaW5nOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gIC8vIE4gPSAwLCBORSA9IDEsIC4uLiwgTlcgPSA3XHJcbiAgcmV0dXJuIChNYXRoLnJvdW5kKDQgLSA0ICogaGVhZGluZyAvIE1hdGguUEkpICUgOCArIDgpICUgODtcclxufTtcclxuXHJcbmNvbnN0IGhkZ1RvNERpck51bSA9IChoZWFkaW5nOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gIC8vIE4gPSAwLCBFID0gMSwgUyA9IDIsIFcgPSAzXHJcbiAgcmV0dXJuIChNYXRoLnJvdW5kKDIgLSBoZWFkaW5nICogMiAvIE1hdGguUEkpICUgNCArIDQpICUgNDtcclxufTtcclxuXHJcbmNvbnN0IG91dHB1dEZyb204RGlyTnVtID0gKGRpck51bTogbnVtYmVyKTogRGlyZWN0aW9uT3V0cHV0OCA9PiB7XHJcbiAgcmV0dXJuIG91dHB1dDhEaXJbZGlyTnVtXSA/PyAndW5rbm93bic7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgRGlyZWN0aW9ucyA9IHtcclxuICBvdXRwdXQ4RGlyOiBvdXRwdXQ4RGlyLFxyXG4gIG91dHB1dDE2RGlyOiBvdXRwdXQxNkRpcixcclxuICBvdXRwdXRDYXJkaW5hbERpcjogb3V0cHV0Q2FyZGluYWxEaXIsXHJcbiAgb3V0cHV0SW50ZXJjYXJkRGlyOiBvdXRwdXRJbnRlcmNhcmREaXIsXHJcbiAgb3V0cHV0U3RyaW5nczE2RGlyOiBvdXRwdXRTdHJpbmdzMTZEaXIsXHJcbiAgb3V0cHV0U3RyaW5nczhEaXI6IG91dHB1dFN0cmluZ3M4RGlyLFxyXG4gIG91dHB1dFN0cmluZ3NDYXJkaW5hbERpcjogb3V0cHV0U3RyaW5nc0NhcmRpbmFsRGlyLFxyXG4gIG91dHB1dFN0cmluZ3NJbnRlcmNhcmREaXI6IG91dHB1dFN0cmluZ3NJbnRlcmNhcmREaXIsXHJcbiAgeHlUbzE2RGlyTnVtOiB4eVRvMTZEaXJOdW0sXHJcbiAgeHlUbzhEaXJOdW06IHh5VG84RGlyTnVtLFxyXG4gIHh5VG80RGlyTnVtOiB4eVRvNERpck51bSxcclxuICBoZGdUbzhEaXJOdW06IGhkZ1RvOERpck51bSxcclxuICBoZGdUbzREaXJOdW06IGhkZ1RvNERpck51bSxcclxuICBvdXRwdXRGcm9tOERpck51bTogb3V0cHV0RnJvbThEaXJOdW0sXHJcbiAgY29tYmF0YW50U3RhdGVQb3NUbzhEaXI6IChcclxuICAgIGNvbWJhdGFudDogUGx1Z2luQ29tYmF0YW50U3RhdGUsXHJcbiAgICBjZW50ZXJYOiBudW1iZXIsXHJcbiAgICBjZW50ZXJZOiBudW1iZXIsXHJcbiAgKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiB4eVRvOERpck51bShjb21iYXRhbnQuUG9zWCwgY29tYmF0YW50LlBvc1ksIGNlbnRlclgsIGNlbnRlclkpO1xyXG4gIH0sXHJcbiAgY29tYmF0YW50U3RhdGVQb3NUbzhEaXJPdXRwdXQ6IChcclxuICAgIGNvbWJhdGFudDogUGx1Z2luQ29tYmF0YW50U3RhdGUsXHJcbiAgICBjZW50ZXJYOiBudW1iZXIsXHJcbiAgICBjZW50ZXJZOiBudW1iZXIsXHJcbiAgKTogRGlyZWN0aW9uT3V0cHV0OCA9PiB7XHJcbiAgICBjb25zdCBkaXJOdW0gPSB4eVRvOERpck51bShjb21iYXRhbnQuUG9zWCwgY29tYmF0YW50LlBvc1ksIGNlbnRlclgsIGNlbnRlclkpO1xyXG4gICAgcmV0dXJuIG91dHB1dEZyb204RGlyTnVtKGRpck51bSk7XHJcbiAgfSxcclxuICBjb21iYXRhbnRTdGF0ZUhkZ1RvOERpcjogKGNvbWJhdGFudDogUGx1Z2luQ29tYmF0YW50U3RhdGUpOiBudW1iZXIgPT4ge1xyXG4gICAgcmV0dXJuIGhkZ1RvOERpck51bShjb21iYXRhbnQuSGVhZGluZyk7XHJcbiAgfSxcclxuICBjb21iYXRhbnRTdGF0ZUhkZ1RvOERpck91dHB1dDogKGNvbWJhdGFudDogUGx1Z2luQ29tYmF0YW50U3RhdGUpOiBEaXJlY3Rpb25PdXRwdXQ4ID0+IHtcclxuICAgIGNvbnN0IGRpck51bSA9IGhkZ1RvOERpck51bShjb21iYXRhbnQuSGVhZGluZyk7XHJcbiAgICByZXR1cm4gb3V0cHV0RnJvbThEaXJOdW0oZGlyTnVtKTtcclxuICB9LFxyXG4gIGFkZGVkQ29tYmF0YW50UG9zVG84RGlyOiAoXHJcbiAgICBjb21iYXRhbnQ6IE5ldE1hdGNoZXNbJ0FkZGVkQ29tYmF0YW50J10sXHJcbiAgICBjZW50ZXJYOiBudW1iZXIsXHJcbiAgICBjZW50ZXJZOiBudW1iZXIsXHJcbiAgKTogbnVtYmVyID0+IHtcclxuICAgIGNvbnN0IHggPSBwYXJzZUZsb2F0KGNvbWJhdGFudC54KTtcclxuICAgIGNvbnN0IHkgPSBwYXJzZUZsb2F0KGNvbWJhdGFudC55KTtcclxuICAgIHJldHVybiB4eVRvOERpck51bSh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZKTtcclxuICB9LFxyXG4gIGFkZGVkQ29tYmF0YW50UG9zVG84RGlyT3V0cHV0OiAoXHJcbiAgICBjb21iYXRhbnQ6IE5ldE1hdGNoZXNbJ0FkZGVkQ29tYmF0YW50J10sXHJcbiAgICBjZW50ZXJYOiBudW1iZXIsXHJcbiAgICBjZW50ZXJZOiBudW1iZXIsXHJcbiAgKTogRGlyZWN0aW9uT3V0cHV0OCA9PiB7XHJcbiAgICBjb25zdCB4ID0gcGFyc2VGbG9hdChjb21iYXRhbnQueCk7XHJcbiAgICBjb25zdCB5ID0gcGFyc2VGbG9hdChjb21iYXRhbnQueSk7XHJcbiAgICBjb25zdCBkaXJOdW0gPSB4eVRvOERpck51bSh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZKTtcclxuICAgIHJldHVybiBvdXRwdXRGcm9tOERpck51bShkaXJOdW0pO1xyXG4gIH0sXHJcbiAgYWRkZWRDb21iYXRhbnRIZGdUbzhEaXI6IChjb21iYXRhbnQ6IE5ldE1hdGNoZXNbJ0FkZGVkQ29tYmF0YW50J10pOiBudW1iZXIgPT4ge1xyXG4gICAgY29uc3QgaGVhZGluZyA9IHBhcnNlRmxvYXQoY29tYmF0YW50LmhlYWRpbmcpO1xyXG4gICAgcmV0dXJuIGhkZ1RvOERpck51bShoZWFkaW5nKTtcclxuICB9LFxyXG4gIGFkZGVkQ29tYmF0YW50SGRnVG84RGlyT3V0cHV0OiAoY29tYmF0YW50OiBOZXRNYXRjaGVzWydBZGRlZENvbWJhdGFudCddKTogRGlyZWN0aW9uT3V0cHV0OCA9PiB7XHJcbiAgICBjb25zdCBoZWFkaW5nID0gcGFyc2VGbG9hdChjb21iYXRhbnQuaGVhZGluZyk7XHJcbiAgICBjb25zdCBkaXJOdW0gPSBoZGdUbzhEaXJOdW0oaGVhZGluZyk7XHJcbiAgICByZXR1cm4gb3V0cHV0RnJvbThEaXJOdW0oZGlyTnVtKTtcclxuICB9LFxyXG4gIHh5VG84RGlyT3V0cHV0OiAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNlbnRlclg6IG51bWJlciwgY2VudGVyWTogbnVtYmVyKTogRGlyZWN0aW9uT3V0cHV0OCA9PiB7XHJcbiAgICBjb25zdCBkaXJOdW0gPSB4eVRvOERpck51bSh4LCB5LCBjZW50ZXJYLCBjZW50ZXJZKTtcclxuICAgIHJldHVybiBvdXRwdXRGcm9tOERpck51bShkaXJOdW0pO1xyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCBVdGlsID0ge1xyXG4gIGpvYkVudW1Ub0pvYjogKGlkOiBudW1iZXIpID0+IHtcclxuICAgIGNvbnN0IGpvYiA9IGFsbEpvYnMuZmluZCgoam9iOiBKb2IpID0+IG5hbWVUb0pvYkVudW1bam9iXSA9PT0gaWQpO1xyXG4gICAgcmV0dXJuIGpvYiA/PyAnTk9ORSc7XHJcbiAgfSxcclxuICBqb2JUb0pvYkVudW06IChqb2I6IEpvYikgPT4gbmFtZVRvSm9iRW51bVtqb2JdLFxyXG4gIGpvYlRvUm9sZTogKGpvYjogSm9iKSA9PiB7XHJcbiAgICBjb25zdCByb2xlID0gam9iVG9Sb2xlTWFwLmdldChqb2IpO1xyXG4gICAgcmV0dXJuIHJvbGUgPz8gJ25vbmUnO1xyXG4gIH0sXHJcbiAgZ2V0QWxsUm9sZXM6ICgpOiByZWFkb25seSBSb2xlW10gPT4gYWxsUm9sZXMsXHJcbiAgaXNUYW5rSm9iOiAoam9iOiBKb2IpID0+IHRhbmtKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNIZWFsZXJKb2I6IChqb2I6IEpvYikgPT4gaGVhbGVySm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzTWVsZWVEcHNKb2I6IChqb2I6IEpvYikgPT4gbWVsZWVEcHNKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNSYW5nZWREcHNKb2I6IChqb2I6IEpvYikgPT4gcmFuZ2VkRHBzSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGlzQ2FzdGVyRHBzSm9iOiAoam9iOiBKb2IpID0+IGNhc3RlckRwc0pvYnMuaW5jbHVkZXMoam9iKSxcclxuICBpc0Rwc0pvYjogKGpvYjogSm9iKSA9PiBkcHNKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNDcmFmdGluZ0pvYjogKGpvYjogSm9iKSA9PiBjcmFmdGluZ0pvYnMuaW5jbHVkZXMoam9iKSxcclxuICBpc0dhdGhlcmluZ0pvYjogKGpvYjogSm9iKSA9PiBnYXRoZXJpbmdKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgaXNDb21iYXRKb2I6IChqb2I6IEpvYikgPT4ge1xyXG4gICAgcmV0dXJuICFjcmFmdGluZ0pvYnMuaW5jbHVkZXMoam9iKSAmJiAhZ2F0aGVyaW5nSm9icy5pbmNsdWRlcyhqb2IpO1xyXG4gIH0sXHJcbiAgY2FuU3R1bjogKGpvYjogSm9iKSA9PiBzdHVuSm9icy5pbmNsdWRlcyhqb2IpLFxyXG4gIGNhblNpbGVuY2U6IChqb2I6IEpvYikgPT4gc2lsZW5jZUpvYnMuaW5jbHVkZXMoam9iKSxcclxuICBjYW5TbGVlcDogKGpvYjogSm9iKSA9PiBzbGVlcEpvYnMuaW5jbHVkZXMoam9iKSxcclxuICBjYW5DbGVhbnNlOiAoam9iOiBKb2IpID0+IGNsZWFuc2VKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgY2FuRmVpbnQ6IChqb2I6IEpvYikgPT4gZmVpbnRKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgY2FuQWRkbGU6IChqb2I6IEpvYikgPT4gYWRkbGVKb2JzLmluY2x1ZGVzKGpvYiksXHJcbiAgd2F0Y2hDb21iYXRhbnQ6IHdhdGNoQ29tYmF0YW50LFxyXG4gIGNsZWFyV2F0Y2hDb21iYXRhbnRzOiAoKSA9PiB7XHJcbiAgICBpZiAoY2xlYXJDb21iYXRhbnRzT3ZlcnJpZGUgIT09IHVuZGVmaW5lZClcclxuICAgICAgY2xlYXJDb21iYXRhbnRzT3ZlcnJpZGUoKTtcclxuICAgIGVsc2VcclxuICAgICAgZGVmYXVsdENsZWFyQ29tYmF0YW50cygpO1xyXG4gIH0sXHJcbiAgc2V0V2F0Y2hDb21iYXRhbnRPdmVycmlkZTogKHdhdGNoRnVuYzogV2F0Y2hDb21iYXRhbnRGdW5jLCBjbGVhckZ1bmM6ICgpID0+IHZvaWQpID0+IHtcclxuICAgIHdhdGNoQ29tYmF0YW50T3ZlcnJpZGUgPSB3YXRjaEZ1bmM7XHJcbiAgICBjbGVhckNvbWJhdGFudHNPdmVycmlkZSA9IGNsZWFyRnVuYztcclxuICB9LFxyXG4gIGdhbWVMb2dDb2RlczogZ2FtZUxvZ0NvZGVzLFxyXG4gIHNob3J0TmFtZTogKFxyXG4gICAgbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxyXG4gICAgcGxheWVyTmlja3M6IHsgW25hbWU6IHN0cmluZ106IHN0cmluZyB9LFxyXG4gICk6IHN0cmluZyA9PiB7XHJcbiAgICAvLyBUT0RPOiBtYWtlIHRoaXMgdW5pcXVlIGFtb25nIHRoZSBwYXJ0eSBpbiBjYXNlIG9mIGZpcnN0IG5hbWUgY29sbGlzaW9ucy5cclxuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAndW5kZWZpbmVkJylcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdjYWxsZWQgU2hvcnROYW1pZnkgd2l0aCBub24tc3RyaW5nJyk7XHJcbiAgICAgIHJldHVybiAnPz8/JztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBuaWNrID0gcGxheWVyTmlja3NbbmFtZV07XHJcbiAgICBpZiAobmljayAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm4gbmljaztcclxuXHJcbiAgICBjb25zdCBpZHggPSBuYW1lLmluZGV4T2YoJyAnKTtcclxuICAgIHJldHVybiBpZHggPCAwID8gbmFtZSA6IG5hbWUuc2xpY2UoMCwgaWR4KTtcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVXRpbDtcclxuIiwiLy8gQXV0by1nZW5lcmF0ZWQgZnJvbSBnZW5fem9uZV9pZF9hbmRfaW5mby5weVxyXG4vLyBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFlcclxuXHJcbmNvbnN0IGRhdGEgPSB7XHJcbiAgJ0FCbG9vZHlSZXVuaW9uJzogNTYwLFxyXG4gICdBRnJvc3R5UmVjZXB0aW9uJzogMTAxMCxcclxuICAnQVBhdGhVbnZlaWxlZCc6IDEwMTUsXHJcbiAgJ0FSZWxpY1JlYm9yblRoZUNoaW1lcmEnOiAzNjgsXHJcbiAgJ0FSZWxpY1JlYm9yblRoZUh5ZHJhJzogMzY5LFxyXG4gICdBUmVxdWllbUZvckhlcm9lcyc6IDgzMCxcclxuICAnQVNsZWVwRGlzdHVyYmVkJzogOTE0LFxyXG4gICdBU3BlY3RhY2xlRm9yVGhlQWdlcyc6IDUzMyxcclxuICAnQWJ5c3Nvc1RoZUVpZ2h0aENpcmNsZSc6IDEwODcsXHJcbiAgJ0FieXNzb3NUaGVFaWdodGhDaXJjbGVTYXZhZ2UnOiAxMDg4LFxyXG4gICdBYnlzc29zVGhlRmlmdGhDaXJjbGUnOiAxMDgxLFxyXG4gICdBYnlzc29zVGhlRmlmdGhDaXJjbGVTYXZhZ2UnOiAxMDgyLFxyXG4gICdBYnlzc29zVGhlU2V2ZW50aENpcmNsZSc6IDEwODUsXHJcbiAgJ0FieXNzb3NUaGVTZXZlbnRoQ2lyY2xlU2F2YWdlJzogMTA4NixcclxuICAnQWJ5c3Nvc1RoZVNpeHRoQ2lyY2xlJzogMTA4MyxcclxuICAnQWJ5c3Nvc1RoZVNpeHRoQ2lyY2xlU2F2YWdlJzogMTA4NCxcclxuICAnQWNjcnVlRW5taXR5RnJvbU11bHRpcGxlVGFyZ2V0cyc6IDU0MCxcclxuICAnQWdsYWlhJzogMTA1NCxcclxuICAnQWlyRm9yY2VPbmUnOiA4MzIsXHJcbiAgJ0FrYWRhZW1pYUFueWRlcic6IDg0MSxcclxuICAnQWxhTWhpZ28nOiAxMTQ2LFxyXG4gICdBbGFNaGlnbzYzJzogNjg5LFxyXG4gICdBbGV4YW5kZXJUaGVBcm1PZlRoZUZhdGhlcic6IDQ0NCxcclxuICAnQWxleGFuZGVyVGhlQXJtT2ZUaGVGYXRoZXJTYXZhZ2UnOiA0NTEsXHJcbiAgJ0FsZXhhbmRlclRoZUFybU9mVGhlU29uJzogNTIyLFxyXG4gICdBbGV4YW5kZXJUaGVBcm1PZlRoZVNvblNhdmFnZSc6IDUzMSxcclxuICAnQWxleGFuZGVyVGhlQnJlYXRoT2ZUaGVDcmVhdG9yJzogNTgxLFxyXG4gICdBbGV4YW5kZXJUaGVCcmVhdGhPZlRoZUNyZWF0b3JTYXZhZ2UnOiA1ODUsXHJcbiAgJ0FsZXhhbmRlclRoZUJ1cmRlbk9mVGhlRmF0aGVyJzogNDQ1LFxyXG4gICdBbGV4YW5kZXJUaGVCdXJkZW5PZlRoZUZhdGhlclNhdmFnZSc6IDQ1MixcclxuICAnQWxleGFuZGVyVGhlQnVyZGVuT2ZUaGVTb24nOiA1MjMsXHJcbiAgJ0FsZXhhbmRlclRoZUJ1cmRlbk9mVGhlU29uU2F2YWdlJzogNTMyLFxyXG4gICdBbGV4YW5kZXJUaGVDdWZmT2ZUaGVGYXRoZXInOiA0NDMsXHJcbiAgJ0FsZXhhbmRlclRoZUN1ZmZPZlRoZUZhdGhlclNhdmFnZSc6IDQ1MCxcclxuICAnQWxleGFuZGVyVGhlQ3VmZk9mVGhlU29uJzogNTIxLFxyXG4gICdBbGV4YW5kZXJUaGVDdWZmT2ZUaGVTb25TYXZhZ2UnOiA1MzAsXHJcbiAgJ0FsZXhhbmRlclRoZUV5ZXNPZlRoZUNyZWF0b3InOiA1ODAsXHJcbiAgJ0FsZXhhbmRlclRoZUV5ZXNPZlRoZUNyZWF0b3JTYXZhZ2UnOiA1ODQsXHJcbiAgJ0FsZXhhbmRlclRoZUZpc3RPZlRoZUZhdGhlcic6IDQ0MixcclxuICAnQWxleGFuZGVyVGhlRmlzdE9mVGhlRmF0aGVyU2F2YWdlJzogNDQ5LFxyXG4gICdBbGV4YW5kZXJUaGVGaXN0T2ZUaGVTb24nOiA1MjAsXHJcbiAgJ0FsZXhhbmRlclRoZUZpc3RPZlRoZVNvblNhdmFnZSc6IDUyOSxcclxuICAnQWxleGFuZGVyVGhlSGVhcnRPZlRoZUNyZWF0b3InOiA1ODIsXHJcbiAgJ0FsZXhhbmRlclRoZUhlYXJ0T2ZUaGVDcmVhdG9yU2F2YWdlJzogNTg2LFxyXG4gICdBbGV4YW5kZXJUaGVTb3VsT2ZUaGVDcmVhdG9yJzogNTgzLFxyXG4gICdBbGV4YW5kZXJUaGVTb3VsT2ZUaGVDcmVhdG9yU2F2YWdlJzogNTg3LFxyXG4gICdBbGxzV2VsbFRoYXRFbmRzSW5UaGVXZWxsJzogMjIwLFxyXG4gICdBbG9hbG9Jc2xhbmQnOiAxMTc2LFxyXG4gICdBbHBoYXNjYXBlVjEwJzogNzk4LFxyXG4gICdBbHBoYXNjYXBlVjEwU2F2YWdlJzogODAyLFxyXG4gICdBbHBoYXNjYXBlVjIwJzogNzk5LFxyXG4gICdBbHBoYXNjYXBlVjIwU2F2YWdlJzogODAzLFxyXG4gICdBbHBoYXNjYXBlVjMwJzogODAwLFxyXG4gICdBbHBoYXNjYXBlVjMwU2F2YWdlJzogODA0LFxyXG4gICdBbHBoYXNjYXBlVjQwJzogODAxLFxyXG4gICdBbHBoYXNjYXBlVjQwU2F2YWdlJzogODA1LFxyXG4gICdBbHphZGFhbHNMZWdhY3knOiAxMDUwLFxyXG4gICdBbWF1cm90JzogODM4LFxyXG4gICdBbWRhcG9yS2VlcCc6IDE2NyxcclxuICAnQW1kYXBvcktlZXBIYXJkJzogMTg5LFxyXG4gICdBbWhBcmFlbmcnOiA4MTUsXHJcbiAgJ0FuVW5mb3Jlc2VlbkJhcmdhaW4nOiAxMTIwLFxyXG4gICdBbmFiYXNlaW9zVGhlRWxldmVudGhDaXJjbGUnOiAxMTUxLFxyXG4gICdBbmFiYXNlaW9zVGhlRWxldmVudGhDaXJjbGVTYXZhZ2UnOiAxMTUyLFxyXG4gICdBbmFiYXNlaW9zVGhlTmludGhDaXJjbGUnOiAxMTQ3LFxyXG4gICdBbmFiYXNlaW9zVGhlTmludGhDaXJjbGVTYXZhZ2UnOiAxMTQ4LFxyXG4gICdBbmFiYXNlaW9zVGhlVGVudGhDaXJjbGUnOiAxMTQ5LFxyXG4gICdBbmFiYXNlaW9zVGhlVGVudGhDaXJjbGVTYXZhZ2UnOiAxMTUwLFxyXG4gICdBbmFiYXNlaW9zVGhlVHdlbGZ0aENpcmNsZSc6IDExNTMsXHJcbiAgJ0FuYWJhc2Vpb3NUaGVUd2VsZnRoQ2lyY2xlU2F2YWdlJzogMTE1NCxcclxuICAnQW5hbW5lc2lzQW55ZGVyJzogODk4LFxyXG4gICdBbm5veVRoZVZvaWQnOiAyMjIsXHJcbiAgJ0Fub3RoZXJBbG9hbG9Jc2xhbmQnOiAxMTc5LFxyXG4gICdBbm90aGVyQWxvYWxvSXNsYW5kU2F2YWdlJzogMTE4MCxcclxuICAnQW5vdGhlck1vdW50Um9ra29uJzogMTE1NSxcclxuICAnQW5vdGhlck1vdW50Um9ra29uU2F2YWdlJzogMTE1NixcclxuICAnQW5vdGhlclNpbGRpaG5TdWJ0ZXJyYW5lJzogMTA3NSxcclxuICAnQW5vdGhlclNpbGRpaG5TdWJ0ZXJyYW5lU2F2YWdlJzogMTA3NixcclxuICAnQXNUaGVIZWFydEJpZHMnOiA4OTQsXHJcbiAgJ0FzVGhlSGVhdmVuc0J1cm4nOiAxMDEyLFxyXG4gICdBc3Bob2RlbG9zVGhlRmlyc3RDaXJjbGUnOiAxMDAyLFxyXG4gICdBc3Bob2RlbG9zVGhlRmlyc3RDaXJjbGVTYXZhZ2UnOiAxMDAzLFxyXG4gICdBc3Bob2RlbG9zVGhlRm91cnRoQ2lyY2xlJzogMTAwOCxcclxuICAnQXNwaG9kZWxvc1RoZUZvdXJ0aENpcmNsZVNhdmFnZSc6IDEwMDksXHJcbiAgJ0FzcGhvZGVsb3NUaGVTZWNvbmRDaXJjbGUnOiAxMDA0LFxyXG4gICdBc3Bob2RlbG9zVGhlU2Vjb25kQ2lyY2xlU2F2YWdlJzogMTAwNSxcclxuICAnQXNwaG9kZWxvc1RoZVRoaXJkQ2lyY2xlJzogMTAwNixcclxuICAnQXNwaG9kZWxvc1RoZVRoaXJkQ2lyY2xlU2F2YWdlJzogMTAwNyxcclxuICAnQXNzaXN0QWxsaWVzSW5EZWZlYXRpbmdBVGFyZ2V0JzogNTQ0LFxyXG4gICdBc3RyYWdhbG9zJzogNzI5LFxyXG4gICdBdm9pZEFyZWFPZkVmZmVjdEF0dGFja3MnOiA1MzcsXHJcbiAgJ0F6eXNMbGEnOiA0MDIsXHJcbiAgJ0JhZWxzYXJzV2FsbCc6IDExMTQsXHJcbiAgJ0JhZWxzYXJzV2FsbDYyJzogNjE1LFxyXG4gICdCYXJkYW1zTWV0dGxlJzogMTE0MyxcclxuICAnQmFyZGFtc01ldHRsZTYzJzogNjIzLFxyXG4gICdCYXNpY1RyYWluaW5nRW5lbXlQYXJ0aWVzJzogMjE0LFxyXG4gICdCYXNpY1RyYWluaW5nRW5lbXlTdHJvbmdob2xkcyc6IDIxNSxcclxuICAnQmF0dGxlSW5UaGVCaWdLZWVwJzogMzk2LFxyXG4gICdCYXR0bGVPblRoZUJpZ0JyaWRnZSc6IDM2NixcclxuICAnQmxvb2RPblRoZURlY2snOiA3MDgsXHJcbiAgJ0JsdW5kZXJ2aWxsZSc6IDExNjUsXHJcbiAgJ0JyYXlmbG94c0xvbmdzdG9wJzogMTA0MSxcclxuICAnQnJheWZsb3hzTG9uZ3N0b3BIYXJkJzogMzYyLFxyXG4gICdDYXBlV2VzdHdpbmQnOiAxMDQ5LFxyXG4gICdDYXN0cnVtQWJhbmlhJzogMTE0NSxcclxuICAnQ2FzdHJ1bUFiYW5pYTYzJzogNjYxLFxyXG4gICdDYXN0cnVtRmx1bWluaXMnOiA3NzgsXHJcbiAgJ0Nhc3RydW1NYXJpbnVtJzogOTM0LFxyXG4gICdDYXN0cnVtTWFyaW51bUV4dHJlbWUnOiA5MzUsXHJcbiAgJ0Nhc3RydW1NZXJpZGlhbnVtJzogMTA0MyxcclxuICAnQ2VudHJhbFNocm91ZCc6IDE0OCxcclxuICAnQ2VudHJhbFRoYW5hbGFuJzogMTQxLFxyXG4gICdDaG9jb2JvUmFjZUNvc3RhRGVsU29sJzogMzg5LFxyXG4gICdDaG9jb2JvUmFjZVNhZ29saWlSb2FkJzogMzkwLFxyXG4gICdDaG9jb2JvUmFjZVRyYW5xdWlsUGF0aHMnOiAzOTEsXHJcbiAgJ0Nob2NvYm9SYWNlVHV0b3JpYWwnOiA0MTcsXHJcbiAgJ0NpbmRlckRyaWZ0JzogODk3LFxyXG4gICdDaW5kZXJEcmlmdEV4dHJlbWUnOiA5MTIsXHJcbiAgJ0NvZXJ0aGFzQ2VudHJhbEhpZ2hsYW5kcyc6IDE1NSxcclxuICAnQ29lcnRoYXNXZXN0ZXJuSGlnaGxhbmRzJzogMzk3LFxyXG4gICdDb21pbmdDbGVhbic6IDg2MCxcclxuICAnQ29udGFpbm1lbnRCYXlQMVQ2JzogNTc2LFxyXG4gICdDb250YWlubWVudEJheVAxVDZFeHRyZW1lJzogNTc3LFxyXG4gICdDb250YWlubWVudEJheVAxVDZVbnJlYWwnOiAxMTIxLFxyXG4gICdDb250YWlubWVudEJheVMxVDcnOiA1MTcsXHJcbiAgJ0NvbnRhaW5tZW50QmF5UzFUN0V4dHJlbWUnOiA1MjQsXHJcbiAgJ0NvbnRhaW5tZW50QmF5UzFUN1VucmVhbCc6IDEwOTAsXHJcbiAgJ0NvbnRhaW5tZW50QmF5WjFUOSc6IDYzNyxcclxuICAnQ29udGFpbm1lbnRCYXlaMVQ5RXh0cmVtZSc6IDYzOCxcclxuICAnQ29udGFpbm1lbnRCYXlaMVQ5VW5yZWFsJzogMTE1NyxcclxuICAnQ29wcGVyYmVsbE1pbmVzJzogMTAzOCxcclxuICAnQ29wcGVyYmVsbE1pbmVzSGFyZCc6IDM0OSxcclxuICAnQ3J5c3RhbGxpbmVDb25mbGljdEN1c3RvbU1hdGNoQ2xvdWROaW5lJzogMTA2MCxcclxuICAnQ3J5c3RhbGxpbmVDb25mbGljdEN1c3RvbU1hdGNoVGhlQ2xvY2t3b3JrQ2FzdGxldG93bic6IDExMTcsXHJcbiAgJ0NyeXN0YWxsaW5lQ29uZmxpY3RDdXN0b21NYXRjaFRoZVBhbGFpc3RyYSc6IDEwNTgsXHJcbiAgJ0NyeXN0YWxsaW5lQ29uZmxpY3RDdXN0b21NYXRjaFRoZVJlZFNhbmRzJzogMTEzOSxcclxuICAnQ3J5c3RhbGxpbmVDb25mbGljdEN1c3RvbU1hdGNoVGhlVm9sY2FuaWNIZWFydCc6IDEwNTksXHJcbiAgJ0N1cmlvdXNHb3JnZU1lZXRzSGlzTWF0Y2gnOiA3MTcsXHJcbiAgJ0N1dHRlcnNDcnknOiAxNzAsXHJcbiAgJ0RhcmtBc1RoZU5pZ2h0U2t5JzogNzEzLFxyXG4gICdEZWF0aFVudG9EYXduJzogOTc3LFxyXG4gICdEZWZlYXRBbk9jY3VwaWVkVGFyZ2V0JzogNTQ1LFxyXG4gICdEZWx0YXNjYXBlVjEwJzogNjkxLFxyXG4gICdEZWx0YXNjYXBlVjEwU2F2YWdlJzogNjk1LFxyXG4gICdEZWx0YXNjYXBlVjIwJzogNjkyLFxyXG4gICdEZWx0YXNjYXBlVjIwU2F2YWdlJzogNjk2LFxyXG4gICdEZWx0YXNjYXBlVjMwJzogNjkzLFxyXG4gICdEZWx0YXNjYXBlVjMwU2F2YWdlJzogNjk3LFxyXG4gICdEZWx0YXNjYXBlVjQwJzogNjk0LFxyXG4gICdEZWx0YXNjYXBlVjQwU2F2YWdlJzogNjk4LFxyXG4gICdEZWx1YnJ1bVJlZ2luYWUnOiA5MzYsXHJcbiAgJ0RlbHVicnVtUmVnaW5hZVNhdmFnZSc6IDkzNyxcclxuICAnRGV2YXN0YXRpb24nOiAxMDUyLFxyXG4gICdEb2huTWhlZyc6IDgyMSxcclxuICAnRG9tYUNhc3RsZSc6IDExNDQsXHJcbiAgJ0RvbWFDYXN0bGU2Myc6IDY2MCxcclxuICAnRHJhZ29uU291bmQnOiA3MTQsXHJcbiAgJ0RyYWdvbnNvbmdzUmVwcmlzZVVsdGltYXRlJzogOTY4LFxyXG4gICdEdW5TY2FpdGgnOiA2MjcsXHJcbiAgJ0R6ZW1hZWxEYXJraG9sZCc6IDE3MSxcclxuICAnRWFzdFNocm91ZCc6IDE1MixcclxuICAnRWFzdGVybkxhTm9zY2VhJzogMTM3LFxyXG4gICdFYXN0ZXJuVGhhbmFsYW4nOiAxNDUsXHJcbiAgJ0VkZW5zR2F0ZURlc2NlbnQnOiA4NTAsXHJcbiAgJ0VkZW5zR2F0ZURlc2NlbnRTYXZhZ2UnOiA4NTQsXHJcbiAgJ0VkZW5zR2F0ZUludW5kYXRpb24nOiA4NTEsXHJcbiAgJ0VkZW5zR2F0ZUludW5kYXRpb25TYXZhZ2UnOiA4NTUsXHJcbiAgJ0VkZW5zR2F0ZVJlc3VycmVjdGlvbic6IDg0OSxcclxuICAnRWRlbnNHYXRlUmVzdXJyZWN0aW9uU2F2YWdlJzogODUzLFxyXG4gICdFZGVuc0dhdGVTZXB1bHR1cmUnOiA4NTIsXHJcbiAgJ0VkZW5zR2F0ZVNlcHVsdHVyZVNhdmFnZSc6IDg1NixcclxuICAnRWRlbnNQcm9taXNlQW5hbW9ycGhvc2lzJzogOTQ0LFxyXG4gICdFZGVuc1Byb21pc2VBbmFtb3JwaG9zaXNTYXZhZ2UnOiA5NDgsXHJcbiAgJ0VkZW5zUHJvbWlzZUV0ZXJuaXR5JzogOTQ1LFxyXG4gICdFZGVuc1Byb21pc2VFdGVybml0eVNhdmFnZSc6IDk0OSxcclxuICAnRWRlbnNQcm9taXNlTGl0YW55JzogOTQzLFxyXG4gICdFZGVuc1Byb21pc2VMaXRhbnlTYXZhZ2UnOiA5NDcsXHJcbiAgJ0VkZW5zUHJvbWlzZVVtYnJhJzogOTQyLFxyXG4gICdFZGVuc1Byb21pc2VVbWJyYVNhdmFnZSc6IDk0NixcclxuICAnRWRlbnNWZXJzZUZ1bG1pbmF0aW9uJzogOTAyLFxyXG4gICdFZGVuc1ZlcnNlRnVsbWluYXRpb25TYXZhZ2UnOiA5MDYsXHJcbiAgJ0VkZW5zVmVyc2VGdXJvcic6IDkwMyxcclxuICAnRWRlbnNWZXJzZUZ1cm9yU2F2YWdlJzogOTA3LFxyXG4gICdFZGVuc1ZlcnNlSWNvbm9jbGFzbSc6IDkwNCxcclxuICAnRWRlbnNWZXJzZUljb25vY2xhc21TYXZhZ2UnOiA5MDgsXHJcbiAgJ0VkZW5zVmVyc2VSZWZ1bGdlbmNlJzogOTA1LFxyXG4gICdFZGVuc1ZlcnNlUmVmdWxnZW5jZVNhdmFnZSc6IDkwOSxcclxuICAnRWxwaXMnOiA5NjEsXHJcbiAgJ0VtYW5hdGlvbic6IDcxOSxcclxuICAnRW1hbmF0aW9uRXh0cmVtZSc6IDcyMCxcclxuICAnRW1pc3NhcnlPZlRoZURhd24nOiA3NjksXHJcbiAgJ0VuZHdhbGtlcic6IDEwMTMsXHJcbiAgJ0VuZ2FnZU11bHRpcGxlVGFyZ2V0cyc6IDU0MSxcclxuICAnRXVsbW9yZSc6IDgyMCxcclxuICAnRXVwaHJvc3luZSc6IDExMTgsXHJcbiAgJ0V1cmVrYU9ydGhvc0Zsb29yczExXzIwJzogMTEwMCxcclxuICAnRXVyZWthT3J0aG9zRmxvb3JzMV8xMCc6IDEwOTksXHJcbiAgJ0V1cmVrYU9ydGhvc0Zsb29yczIxXzMwJzogMTEwMSxcclxuICAnRXVyZWthT3J0aG9zRmxvb3JzMzFfNDAnOiAxMTAyLFxyXG4gICdFdXJla2FPcnRob3NGbG9vcnM0MV81MCc6IDExMDMsXHJcbiAgJ0V1cmVrYU9ydGhvc0Zsb29yczUxXzYwJzogMTEwNCxcclxuICAnRXVyZWthT3J0aG9zRmxvb3JzNjFfNzAnOiAxMTA1LFxyXG4gICdFdXJla2FPcnRob3NGbG9vcnM3MV84MCc6IDExMDYsXHJcbiAgJ0V1cmVrYU9ydGhvc0Zsb29yczgxXzkwJzogMTEwNyxcclxuICAnRXVyZWthT3J0aG9zRmxvb3JzOTFfMTAwJzogMTEwOCxcclxuICAnRXZlck1hcmNoSGVhdmVuc3dhcmQnOiAxMDE4LFxyXG4gICdFeGVjdXRlQUNvbWJvSW5CYXR0bGUnOiA1MzksXHJcbiAgJ0V4ZWN1dGVBQ29tYm9Ub0luY3JlYXNlRW5taXR5JzogNTM4LFxyXG4gICdFeGVjdXRlQVJhbmdlZEF0dGFja1RvSW5jcmVhc2VFbm1pdHknOiA1NDIsXHJcbiAgJ0ZhZGVkTWVtb3JpZXMnOiA5MzIsXHJcbiAgJ0ZpbmFsRXhlcmNpc2UnOiA1NTIsXHJcbiAgJ0ZpdEZvckFRdWVlbic6IDk1NSxcclxuICAnRmxpY2tpbmdTdGlja3NBbmRUYWtpbmdOYW1lcyc6IDIxOSxcclxuICAnRm9ybG9ybkdsb3J5JzogMTA1MSxcclxuICAnRm91bmRhdGlvbic6IDQxOCxcclxuICAnRm91clBsYXllck1haGpvbmdRdWlja01hdGNoS3VpdGFuRGlzYWJsZWQnOiA4MzEsXHJcbiAgJ0dhcmxlbWFsZCc6IDk1OCxcclxuICAnR2VuZXJhdGlvbmFsQm9uZGluZyc6IDExMTUsXHJcbiAgJ0hhbGF0YWxpJzogMTYyLFxyXG4gICdIYWxhdGFsaUhhcmQnOiAzNjAsXHJcbiAgJ0hhdWtrZU1hbm9yJzogMTA0MCxcclxuICAnSGF1a2tlTWFub3JIYXJkJzogMzUwLFxyXG4gICdIZWFsQW5BbGx5JzogNTQ5LFxyXG4gICdIZWFsTXVsdGlwbGVBbGxpZXMnOiA1NTAsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczExXzIwJzogNzcxLFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnMxXzEwJzogNzcwLFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnMyMV8zMCc6IDc3MixcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzMzFfNDAnOiA3ODIsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczQxXzUwJzogNzczLFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnM1MV82MCc6IDc4MyxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzNjFfNzAnOiA3NzQsXHJcbiAgJ0hlYXZlbk9uSGlnaEZsb29yczcxXzgwJzogNzg0LFxyXG4gICdIZWF2ZW5PbkhpZ2hGbG9vcnM4MV85MCc6IDc3NSxcclxuICAnSGVhdmVuT25IaWdoRmxvb3JzOTFfMTAwJzogNzg1LFxyXG4gICdIZWxsc0tpZXInOiA4MTAsXHJcbiAgJ0hlbGxzS2llckV4dHJlbWUnOiA4MTEsXHJcbiAgJ0hlbGxzTGlkJzogNzQyLFxyXG4gICdIZXJvT25UaGVIYWxmU2hlbGwnOiAyMTYsXHJcbiAgJ0hpZGRlbkdvcmdlJzogNzkxLFxyXG4gICdIb2xtaW5zdGVyU3dpdGNoJzogODM3LFxyXG4gICdIdWxsYnJlYWtlcklzbGUnOiAzNjEsXHJcbiAgJ0h1bGxicmVha2VySXNsZUhhcmQnOiA1NTcsXHJcbiAgJ0lkeWxsc2hpcmUnOiA0NzgsXHJcbiAgJ0lsTWhlZyc6IDgxNixcclxuICAnSW5Gcm9tVGhlQ29sZCc6IDEwMTEsXHJcbiAgJ0luVGhhbHNOYW1lJzogNzA1LFxyXG4gICdJbnRlcmFjdFdpdGhUaGVCYXR0bGVmaWVsZCc6IDU0OCxcclxuICAnSW50ZXJkaW1lbnNpb25hbFJpZnQnOiA2OTAsXHJcbiAgJ0l0c1Byb2JhYmx5QVRyYXAnOiA2NjUsXHJcbiAgJ0tob2x1c2lhJzogODE0LFxyXG4gICdLdGlzaXNIeXBlcmJvcmVpYSc6IDk3NCxcclxuICAnS3VnYW5lJzogNjI4LFxyXG4gICdLdWdhbmVDYXN0bGUnOiA2NjIsXHJcbiAgJ0t1Z2FuZU9oYXNoaSc6IDgwNixcclxuICAnTGFieXJpbnRob3MnOiA5NTYsXHJcbiAgJ0xhaWRUb1Jlc3QnOiAxMDE3LFxyXG4gICdMYWtlbGFuZCc6IDgxMyxcclxuICAnTGFwaXNNYW5hbGlzJzogMTA5NyxcclxuICAnTGVnZW5kT2ZUaGVOb3RTb0hpZGRlblRlbXBsZSc6IDg1OSxcclxuICAnTGlmZUVwaGVtZXJhbFBhdGhFdGVybmFsJzogMTAyMyxcclxuICAnTGltc2FMb21pbnNhTG93ZXJEZWNrcyc6IDEyOSxcclxuICAnTGltc2FMb21pbnNhVXBwZXJEZWNrcyc6IDEyOCxcclxuICAnTG9uZ0xpdmVUaGVRdWVlbic6IDI5OCxcclxuICAnTG92bU1hc3RlclRvdXJuYW1lbnQnOiA1MDYsXHJcbiAgJ0xvdm1QbGF5ZXJCYXR0bGVOb25ScCc6IDU5MSxcclxuICAnTG92bVBsYXllckJhdHRsZVJwJzogNTg5LFxyXG4gICdMb3ZtVG91cm5hbWVudCc6IDU5MCxcclxuICAnTG93ZXJMYU5vc2NlYSc6IDEzNSxcclxuICAnTWFsaWthaHNXZWxsJzogODM2LFxyXG4gICdNYXJlTGFtZW50b3J1bSc6IDk1OSxcclxuICAnTWF0Y2hBbGwnOiBudWxsLFxyXG4gICdNYXRveWFzUmVsaWN0JzogOTMzLFxyXG4gICdNYXRzdWJhTWF5aGVtJzogNzEwLFxyXG4gICdNZW1vcmlhTWlzZXJhRXh0cmVtZSc6IDkxMyxcclxuICAnTWVzc2VuZ2VyT2ZUaGVXaW5kcyc6IDgzNCxcclxuICAnTWlkZGxlTGFOb3NjZWEnOiAxMzQsXHJcbiAgJ01pc3QnOiAxMzYsXHJcbiAgJ01vckRob25hJzogMTU2LFxyXG4gICdNb3JlVGhhbkFGZWVsZXInOiAyMjEsXHJcbiAgJ01vdW50T3JkZWFscyc6IDEwOTUsXHJcbiAgJ01vdW50T3JkZWFsc0V4dHJlbWUnOiAxMDk2LFxyXG4gICdNb3VudFJva2tvbic6IDExMzcsXHJcbiAgJ010R3VsZyc6IDgyMixcclxuICAnTmFhZGFtJzogNjg4LFxyXG4gICdOZXZlcnJlYXAnOiA0MjAsXHJcbiAgJ05ld0dyaWRhbmlhJzogMTMyLFxyXG4gICdOb3J0aFNocm91ZCc6IDE1NCxcclxuICAnTm9ydGhlcm5UaGFuYWxhbic6IDE0NyxcclxuICAnTnllbGJlcnRzTGFtZW50JzogODc2LFxyXG4gICdPbGRHcmlkYW5pYSc6IDEzMyxcclxuICAnT2xkU2hhcmxheWFuJzogOTYyLFxyXG4gICdPbmVMaWZlRm9yT25lV29ybGQnOiA1OTIsXHJcbiAgJ09uc2FsSGFrYWlyRGFuc2hpZ05hYWRhbSc6IDg4OCxcclxuICAnT3VyQ29tcHJvbWlzZSc6IDcxNixcclxuICAnT3VyVW5zdW5nSGVyb2VzJzogNzIyLFxyXG4gICdPdXRlckxhTm9zY2VhJzogMTgwLFxyXG4gICdQYWdsdGhhbic6IDkzOCxcclxuICAnUGhhcm9zU2lyaXVzJzogMTYwLFxyXG4gICdQaGFyb3NTaXJpdXNIYXJkJzogNTEwLFxyXG4gICdQdWxsaW5nUG9pc29uUG9zaWVzJzogMTkxLFxyXG4gICdSYWR6QXRIYW4nOiA5NjMsXHJcbiAgJ1JhaXNpbmdUaGVTd29yZCc6IDcwNixcclxuICAnUmV0dXJuT2ZUaGVCdWxsJzogNDAzLFxyXG4gICdSaGFsZ3JzUmVhY2gnOiA2MzUsXHJcbiAgJ1NhZ2VzRm9jdXMnOiAxMDIyLFxyXG4gICdTYWludE1vY2lhbm5lc0FyYm9yZXR1bSc6IDUxMSxcclxuICAnU2FpbnRNb2NpYW5uZXNBcmJvcmV0dW1IYXJkJzogNzg4LFxyXG4gICdTYXN0YXNoYSc6IDEwMzYsXHJcbiAgJ1Nhc3Rhc2hhSGFyZCc6IDM4NyxcclxuICAnU2VhbFJvY2tTZWl6ZSc6IDQzMSxcclxuICAnU2hhZG93QW5kQ2xhdyc6IDIyMyxcclxuICAnU2hpc3VpT2ZUaGVWaW9sZXRUaWRlcyc6IDYxNixcclxuICAnU2lnbWFzY2FwZVYxMCc6IDc0OCxcclxuICAnU2lnbWFzY2FwZVYxMFNhdmFnZSc6IDc1MixcclxuICAnU2lnbWFzY2FwZVYyMCc6IDc0OSxcclxuICAnU2lnbWFzY2FwZVYyMFNhdmFnZSc6IDc1MyxcclxuICAnU2lnbWFzY2FwZVYzMCc6IDc1MCxcclxuICAnU2lnbWFzY2FwZVYzMFNhdmFnZSc6IDc1NCxcclxuICAnU2lnbWFzY2FwZVY0MCc6IDc1MSxcclxuICAnU2lnbWFzY2FwZVY0MFNhdmFnZSc6IDc1NSxcclxuICAnU21pbGV0b24nOiA5NzYsXHJcbiAgJ1Nub3djbG9hayc6IDEwNjIsXHJcbiAgJ1Nub3djbG9hazYxJzogMzcxLFxyXG4gICdTb2htQWwnOiAxMDY0LFxyXG4gICdTb2htQWw2MSc6IDQ0MSxcclxuICAnU29obUFsSGFyZCc6IDYxNyxcclxuICAnU29ocktoYWknOiAxMTEyLFxyXG4gICdTb2hyS2hhaTYyJzogNTU1LFxyXG4gICdTb2xlbW5UcmluaXR5JzogMzAwLFxyXG4gICdTb3V0aFNocm91ZCc6IDE1MyxcclxuICAnU291dGhlcm5UaGFuYWxhbic6IDE0NixcclxuICAnU3BlY2lhbEV2ZW50SSc6IDM1MyxcclxuICAnU3BlY2lhbEV2ZW50SWknOiAzNTQsXHJcbiAgJ1N0aW5naW5nQmFjayc6IDE5MixcclxuICAnU3Rvcm1zQ3Jvd24nOiAxMDcxLFxyXG4gICdTdG9ybXNDcm93bkV4dHJlbWUnOiAxMDcyLFxyXG4gICdTeXJjdXNUb3dlcic6IDM3MixcclxuICAnVGhhbGVpYSc6IDExNzgsXHJcbiAgJ1RoYXZuYWlyJzogOTU3LFxyXG4gICdUaGVBYnlzc2FsRnJhY3R1cmUnOiAxMTY4LFxyXG4gICdUaGVBYnlzc2FsRnJhY3R1cmVFeHRyZW1lJzogMTE2OSxcclxuICAnVGhlQWVyeSc6IDEwNjUsXHJcbiAgJ1RoZUFlcnk2MSc6IDQzNSxcclxuICAnVGhlQWV0aGVyZm9udCc6IDExMjYsXHJcbiAgJ1RoZUFldGhlcm9jaGVtaWNhbFJlc2VhcmNoRmFjaWxpdHknOiAxMTEwLFxyXG4gICdUaGVBZXRoZXJvY2hlbWljYWxSZXNlYXJjaEZhY2lsaXR5NjInOiA0MzgsXHJcbiAgJ1RoZUFpdGlhc2NvcGUnOiA5NzgsXHJcbiAgJ1RoZUFraEFmYWhBbXBoaXRoZWF0cmVFeHRyZW1lJzogMzc4LFxyXG4gICdUaGVBa2hBZmFoQW1waGl0aGVhdHJlSGFyZCc6IDM3NyxcclxuICAnVGhlQWtoQWZhaEFtcGhpdGhlYXRyZVVucmVhbCc6IDkzMCxcclxuICAnVGhlQW50aXRvd2VyJzogMTExMSxcclxuICAnVGhlQW50aXRvd2VyNjInOiA1MTYsXHJcbiAgJ1RoZUFxdWFwb2xpcyc6IDU1OCxcclxuICAnVGhlQXVydW1WYWxlJzogMTcyLFxyXG4gICdUaGVBemltU3RlcHBlJzogNjIyLFxyXG4gICdUaGVCYXR0bGVPbkJla2tvJzogNzExLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm4xJzogMjQxLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm4yJzogMjQyLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm4zJzogMjQzLFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm40JzogMjQ0LFxyXG4gICdUaGVCaW5kaW5nQ29pbE9mQmFoYW11dFR1cm41JzogMjQ1LFxyXG4gICdUaGVCb3JkZXJsYW5kUnVpbnNTZWN1cmUnOiAzNzYsXHJcbiAgJ1RoZUJvd2xPZkVtYmVycyc6IDEwNDUsXHJcbiAgJ1RoZUJvd2xPZkVtYmVyc0V4dHJlbWUnOiAyOTUsXHJcbiAgJ1RoZUJvd2xPZkVtYmVyc0hhcmQnOiAyOTIsXHJcbiAgJ1RoZUJvemphSW5jaWRlbnQnOiA5MTEsXHJcbiAgJ1RoZUJvemphblNvdXRoZXJuRnJvbnQnOiA5MjAsXHJcbiAgJ1RoZUJ1cm4nOiAxMTczLFxyXG4gICdUaGVCdXJuNjQnOiA3ODksXHJcbiAgJ1RoZUNhbGFtaXR5UmV0b2xkJzogNzkwLFxyXG4gICdUaGVDYXJ0ZW5lYXVGbGF0c0hlbGlvZHJvbWUnOiA2MzMsXHJcbiAgJ1RoZUNocnlzYWxpcyc6IDQyNixcclxuICAnVGhlQ2h1cm5pbmdNaXN0cyc6IDQwMCxcclxuICAnVGhlQ2xvY2t3b3JrQ2FzdGxldG93bic6IDExMTYsXHJcbiAgJ1RoZUNsb3VkRGVjayc6IDk1MCxcclxuICAnVGhlQ2xvdWREZWNrRXh0cmVtZSc6IDk1MSxcclxuICAnVGhlQ29waWVkRmFjdG9yeSc6IDg4MixcclxuICAnVGhlQ3Jvd25PZlRoZUltbWFjdWxhdGUnOiA4NDYsXHJcbiAgJ1RoZUNyb3duT2ZUaGVJbW1hY3VsYXRlRXh0cmVtZSc6IDg0OCxcclxuICAnVGhlQ3J5c3Rhcml1bSc6IDgxOSxcclxuICAnVGhlRGFuY2luZ1BsYWd1ZSc6IDg0NSxcclxuICAnVGhlRGFuY2luZ1BsYWd1ZUV4dHJlbWUnOiA4NTgsXHJcbiAgJ1RoZURhcmtJbnNpZGUnOiA5OTIsXHJcbiAgJ1RoZURlYWRFbmRzJzogOTczLFxyXG4gICdUaGVEaWFkZW0nOiA5MjksXHJcbiAgJ1RoZURpYWRlbUVhc3knOiA1MTIsXHJcbiAgJ1RoZURpYWRlbUhhcmQnOiA1MTUsXHJcbiAgJ1RoZURpYWRlbUh1bnRpbmdHcm91bmRzJzogNjI1LFxyXG4gICdUaGVEaWFkZW1IdW50aW5nR3JvdW5kc0Vhc3knOiA2MjQsXHJcbiAgJ1RoZURpYWRlbVRyaWFsc09mVGhlRnVyeSc6IDYzMCxcclxuICAnVGhlRGlhZGVtVHJpYWxzT2ZUaGVNYXRyb24nOiA2NTYsXHJcbiAgJ1RoZURvbWFuRW5jbGF2ZSc6IDc1OSxcclxuICAnVGhlRHJhZ29uc05lY2snOiAxNDIsXHJcbiAgJ1RoZURyYXZhbmlhbkZvcmVsYW5kcyc6IDM5OCxcclxuICAnVGhlRHJhdmFuaWFuSGludGVybGFuZHMnOiAzOTksXHJcbiAgJ1RoZURyb3duZWRDaXR5T2ZTa2FsbGEnOiA3MzEsXHJcbiAgJ1RoZUR1bmdlb25zT2ZMeWhlR2hpYWgnOiA4NzksXHJcbiAgJ1RoZUR1c2tWaWdpbCc6IDQzNCxcclxuICAnVGhlRHlpbmdHYXNwJzogODQ3LFxyXG4gICdUaGVFcGljT2ZBbGV4YW5kZXJVbHRpbWF0ZSc6IDg4NyxcclxuICAnVGhlRXhjaXRhdHJvbjYwMDAnOiAxMDAwLFxyXG4gICdUaGVGYWNlT2ZUcnVlRXZpbCc6IDcwOSxcclxuICAnVGhlRmVsbENvdXJ0T2ZUcm9pYSc6IDEwNzAsXHJcbiAgJ1RoZUZpZWxkc09mR2xvcnlTaGF0dGVyJzogNTU0LFxyXG4gICdUaGVGaW5hbENvaWxPZkJhaGFtdXRUdXJuMSc6IDE5MyxcclxuICAnVGhlRmluYWxDb2lsT2ZCYWhhbXV0VHVybjInOiAxOTQsXHJcbiAgJ1RoZUZpbmFsQ29pbE9mQmFoYW11dFR1cm4zJzogMTk1LFxyXG4gICdUaGVGaW5hbENvaWxPZkJhaGFtdXRUdXJuNCc6IDE5NixcclxuICAnVGhlRmluYWxEYXknOiA5OTcsXHJcbiAgJ1RoZUZpbmFsU3RlcHNPZkZhaXRoJzogNTU5LFxyXG4gICdUaGVGb3JiaWRkZW5MYW5kRXVyZWthQW5lbW9zJzogNzMyLFxyXG4gICdUaGVGb3JiaWRkZW5MYW5kRXVyZWthSHlkYXRvcyc6IDgyNyxcclxuICAnVGhlRm9yYmlkZGVuTGFuZEV1cmVrYVBhZ29zJzogNzYzLFxyXG4gICdUaGVGb3JiaWRkZW5MYW5kRXVyZWthUHlyb3MnOiA3OTUsXHJcbiAgJ1RoZUZyYWN0YWxDb250aW51dW0nOiA0MzAsXHJcbiAgJ1RoZUZyYWN0YWxDb250aW51dW1IYXJkJzogNzQzLFxyXG4gICdUaGVGcmluZ2VzJzogNjEyLFxyXG4gICdUaGVHaGltbHl0RGFyayc6IDExNzQsXHJcbiAgJ1RoZUdoaW1seXREYXJrNjQnOiA3OTMsXHJcbiAgJ1RoZUdpZnRPZk1lcmN5JzogMTAxOSxcclxuICAnVGhlR3JhbmRDb3Ntb3MnOiA4ODQsXHJcbiAgJ1RoZUdyZWF0R3ViYWxMaWJyYXJ5JzogMTEwOSxcclxuICAnVGhlR3JlYXRHdWJhbExpYnJhcnk2Mic6IDQxNixcclxuICAnVGhlR3JlYXRHdWJhbExpYnJhcnlIYXJkJzogNTc4LFxyXG4gICdUaGVHcmVhdEh1bnQnOiA3NjEsXHJcbiAgJ1RoZUdyZWF0SHVudEV4dHJlbWUnOiA3NjIsXHJcbiAgJ1RoZUdyZWF0U2hpcFZ5bGJyYW5kJzogOTU0LFxyXG4gICdUaGVIYXJkZW5lZEhlYXJ0JzogODczLFxyXG4gICdUaGVIYXJ2ZXN0QmVnaW5zJzogMTAyMCxcclxuICAnVGhlSGF1bnRlZE1hbm9yJzogNTcxLFxyXG4gICdUaGVIZWFydE9mVGhlUHJvYmxlbSc6IDcxOCxcclxuICAnVGhlSGVyb2VzR2F1bnRsZXQnOiA5MTYsXHJcbiAgJ1RoZUhpZGRlbkNhbmFsc09mVXpuYWlyJzogNzI1LFxyXG4gICdUaGVIb3dsaW5nRXllJzogMTA0NyxcclxuICAnVGhlSG93bGluZ0V5ZUV4dHJlbWUnOiAyOTcsXHJcbiAgJ1RoZUhvd2xpbmdFeWVIYXJkJzogMjk0LFxyXG4gICdUaGVIdW50ZXJzTGVnYWN5JzogODc1LFxyXG4gICdUaGVKYWRlU3RvYSc6IDc0NixcclxuICAnVGhlSmFkZVN0b2FFeHRyZW1lJzogNzU4LFxyXG4gICdUaGVLZWVwZXJPZlRoZUxha2UnOiAxMDYzLFxyXG4gICdUaGVLZWVwZXJPZlRoZUxha2U2MSc6IDE1MCxcclxuICAnVGhlS2lsbGluZ0FydCc6IDEwMjEsXHJcbiAgJ1RoZUxhYnlyaW50aE9mVGhlQW5jaWVudHMnOiAxNzQsXHJcbiAgJ1RoZUxpbWl0bGVzc0JsdWVFeHRyZW1lJzogNDQ3LFxyXG4gICdUaGVMaW1pdGxlc3NCbHVlSGFyZCc6IDQzNixcclxuICAnVGhlTG9jaHMnOiA2MjEsXHJcbiAgJ1RoZUxvc3RBbmRUaGVGb3VuZCc6IDg3NCxcclxuICAnVGhlTG9zdENhbmFsc09mVXpuYWlyJzogNzEyLFxyXG4gICdUaGVMb3N0Q2l0eU9mQW1kYXBvcic6IDM2MyxcclxuICAnVGhlTG9zdENpdHlPZkFtZGFwb3JIYXJkJzogNTE5LFxyXG4gICdUaGVMdW5hclN1YnRlcnJhbmUnOiAxMTY0LFxyXG4gICdUaGVNYXNrZWRDYXJuaXZhbGUnOiA3OTYsXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZEVuZHNpbmdlcnNBcmlhJzogOTk4LFxyXG4gICdUaGVNaW5zdHJlbHNCYWxsYWRIYWRlc3NFbGVneSc6IDg4NSxcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkSHlkYWVseW5zQ2FsbCc6IDk5NixcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkTmlkaG9nZ3NSYWdlJzogNTY2LFxyXG4gICdUaGVNaW5zdHJlbHNCYWxsYWRTaGlucnl1c0RvbWFpbic6IDczMCxcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkVGhvcmRhbnNSZWlnbic6IDQ0OCxcclxuICAnVGhlTWluc3RyZWxzQmFsbGFkVHN1a3V5b21pc1BhaW4nOiA3NzksXHJcbiAgJ1RoZU1pbnN0cmVsc0JhbGxhZFVsdGltYXNCYW5lJzogMzQ4LFxyXG4gICdUaGVNaW5zdHJlbHNCYWxsYWRab2RpYXJrc0ZhbGwnOiA5OTMsXHJcbiAgJ1RoZU1vdGhlcmNyeXN0YWwnOiA5OTUsXHJcbiAgJ1RoZU5hdmVsJzogMTA0NixcclxuICAnVGhlTmF2ZWxFeHRyZW1lJzogMjk2LFxyXG4gICdUaGVOYXZlbEhhcmQnOiAyOTMsXHJcbiAgJ1RoZU5hdmVsVW5yZWFsJzogOTUzLFxyXG4gICdUaGVPbWVnYVByb3RvY29sVWx0aW1hdGUnOiAxMTIyLFxyXG4gICdUaGVPcmJvbm5lTW9uYXN0ZXJ5JzogODI2LFxyXG4gICdUaGVPcnBoYW5zQW5kVGhlQnJva2VuQmxhZGUnOiA3MTUsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczEwMV8xMTAnOiA1OTgsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczExMV8xMjAnOiA1OTksXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczExXzIwJzogNTYyLFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMjFfMTMwJzogNjAwLFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxMzFfMTQwJzogNjAxLFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxNDFfMTUwJzogNjAyLFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxNTFfMTYwJzogNjAzLFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxNjFfMTcwJzogNjA0LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxNzFfMTgwJzogNjA1LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxODFfMTkwJzogNjA2LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxOTFfMjAwJzogNjA3LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMxXzEwJzogNTYxLFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnMyMV8zMCc6IDU2MyxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzMzFfNDAnOiA1NjQsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczQxXzUwJzogNTY1LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnM1MV82MCc6IDU5MyxcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzNjFfNzAnOiA1OTQsXHJcbiAgJ1RoZVBhbGFjZU9mVGhlRGVhZEZsb29yczcxXzgwJzogNTk1LFxyXG4gICdUaGVQYWxhY2VPZlRoZURlYWRGbG9vcnM4MV85MCc6IDU5NixcclxuICAnVGhlUGFsYWNlT2ZUaGVEZWFkRmxvb3JzOTFfMTAwJzogNTk3LFxyXG4gICdUaGVQZWFrcyc6IDYyMCxcclxuICAnVGhlUGhhbnRvbXNGZWFzdCc6IDk5NCxcclxuICAnVGhlUGlsbGFycyc6IDQxOSxcclxuICAnVGhlUG9vbE9mVHJpYnV0ZSc6IDY3NCxcclxuICAnVGhlUG9vbE9mVHJpYnV0ZUV4dHJlbWUnOiA2NzcsXHJcbiAgJ1RoZVBvcnRhRGVjdW1hbmEnOiAxMDQ4LFxyXG4gICdUaGVQcmFldG9yaXVtJzogMTA0NCxcclxuICAnVGhlUHVwcGV0c0J1bmtlcic6IDkxNyxcclxuICAnVGhlUWl0YW5hUmF2ZWwnOiA4MjMsXHJcbiAgJ1RoZVJha3Rpa2FHcmVhdHdvb2QnOiA4MTcsXHJcbiAgJ1RoZVJlZFNhbmRzJzogMTEzOCxcclxuICAnVGhlUmVzb25hbnQnOiA2ODQsXHJcbiAgJ1RoZVJpZG9yYW5hTGlnaHRob3VzZSc6IDc3NixcclxuICAnVGhlUm95YWxDaXR5T2ZSYWJhbmFzdHJlJzogNzM0LFxyXG4gICdUaGVSb3lhbE1lbmFnZXJpZSc6IDY3OSxcclxuICAnVGhlUnVieVNlYSc6IDYxMyxcclxuICAnVGhlU2VhT2ZDbG91ZHMnOiA0MDEsXHJcbiAgJ1RoZVNlYXRPZlNhY3JpZmljZSc6IDkyMixcclxuICAnVGhlU2VhdE9mU2FjcmlmaWNlRXh0cmVtZSc6IDkyMyxcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFNhdmFnZVR1cm4xJzogMzgwLFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0U2F2YWdlVHVybjInOiAzODEsXHJcbiAgJ1RoZVNlY29uZENvaWxPZkJhaGFtdXRTYXZhZ2VUdXJuMyc6IDM4MixcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFNhdmFnZVR1cm40JzogMzgzLFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0VHVybjEnOiAzNTUsXHJcbiAgJ1RoZVNlY29uZENvaWxPZkJhaGFtdXRUdXJuMic6IDM1NixcclxuICAnVGhlU2Vjb25kQ29pbE9mQmFoYW11dFR1cm4zJzogMzU3LFxyXG4gICdUaGVTZWNvbmRDb2lsT2ZCYWhhbXV0VHVybjQnOiAzNTgsXHJcbiAgJ1RoZVNoaWZ0aW5nQWx0YXJzT2ZVem5haXInOiA3OTQsXHJcbiAgJ1RoZVNoaWZ0aW5nR3ltbmFzaW9uQWdvbm9uJzogMTEyMyxcclxuICAnVGhlU2hpZnRpbmdPdWJsaWV0dGVzT2ZMeWhlR2hpYWgnOiA5MjQsXHJcbiAgJ1RoZVNpbGRpaG5TdWJ0ZXJyYW5lJzogMTA2OSxcclxuICAnVGhlU2luZ3VsYXJpdHlSZWFjdG9yJzogNDM3LFxyXG4gICdUaGVTaW5ndWxhcml0eVJlYWN0b3JVbnJlYWwnOiAxMTc1LFxyXG4gICdUaGVTaXJlbnNvbmdTZWEnOiAxMTQyLFxyXG4gICdUaGVTaXJlbnNvbmdTZWE2Myc6IDYyNixcclxuICAnVGhlU3RlcHNPZkZhaXRoJzogMTA2OCxcclxuICAnVGhlU3RlcHNPZkZhaXRoNjEnOiAxNDMsXHJcbiAgJ1RoZVN0aWdtYURyZWFtc2NhcGUnOiA5ODYsXHJcbiAgJ1RoZVN0b25lVmlnaWwnOiAxMDQyLFxyXG4gICdUaGVTdG9uZVZpZ2lsSGFyZCc6IDM2NSxcclxuICAnVGhlU3RyaWtpbmdUcmVlRXh0cmVtZSc6IDM3NSxcclxuICAnVGhlU3RyaWtpbmdUcmVlSGFyZCc6IDM3NCxcclxuICAnVGhlU3Vua2VuVGVtcGxlT2ZRYXJuJzogMTYzLFxyXG4gICdUaGVTdW5rZW5UZW1wbGVPZlFhcm5IYXJkJzogMzY3LFxyXG4gICdUaGVTd2FsbG93c0NvbXBhc3MnOiA3NjgsXHJcbiAgJ1RoZVRhbVRhcmFEZWVwY3JvZnQnOiAxMDM3LFxyXG4gICdUaGVUYW1UYXJhRGVlcGNyb2Z0SGFyZCc6IDM3MyxcclxuICAnVGhlVGVtcGVzdCc6IDgxOCxcclxuICAnVGhlVGVtcGxlT2ZUaGVGaXN0JzogNjYzLFxyXG4gICdUaGVUaG91c2FuZE1hd3NPZlRvdG9SYWsnOiAxMDM5LFxyXG4gICdUaGVUb3dlckF0UGFyYWRpZ21zQnJlYWNoJzogOTY2LFxyXG4gICdUaGVUb3dlck9mQmFiaWwnOiA5NjksXHJcbiAgJ1RoZVRvd2VyT2Zab3QnOiA5NTIsXHJcbiAgJ1RoZVRyaXBsZVRyaWFkQmF0dGxlaGFsbCc6IDU3OSxcclxuICAnVGhlVHdpbm5pbmcnOiA4NDAsXHJcbiAgJ1RoZVVuZW5kaW5nQ29pbE9mQmFoYW11dFVsdGltYXRlJzogNzMzLFxyXG4gICdUaGVWYWxlbnRpb25lc0NlcmVtb255JzogNzQxLFxyXG4gICdUaGVWYXVsdCc6IDEwNjYsXHJcbiAgJ1RoZVZhdWx0NjEnOiA0MjEsXHJcbiAgJ1RoZVZvaWRBcmsnOiA1MDgsXHJcbiAgJ1RoZVZvaWRjYXN0RGFpcyc6IDExNDAsXHJcbiAgJ1RoZVZvaWRjYXN0RGFpc0V4dHJlbWUnOiAxMTQxLFxyXG4gICdUaGVXYW5kZXJlcnNQYWxhY2UnOiAxNTksXHJcbiAgJ1RoZVdhbmRlcmVyc1BhbGFjZUhhcmQnOiAxODgsXHJcbiAgJ1RoZVdlYXBvbnNSZWZyYWluVWx0aW1hdGUnOiA3NzcsXHJcbiAgJ1RoZVdlZXBpbmdDaXR5T2ZNaGFjaCc6IDU1NixcclxuICAnVGhlV2hvcmxlYXRlckV4dHJlbWUnOiAzNTksXHJcbiAgJ1RoZVdob3JsZWF0ZXJIYXJkJzogMjgxLFxyXG4gICdUaGVXaG9ybGVhdGVyVW5yZWFsJzogOTcyLFxyXG4gICdUaGVXaWxsT2ZUaGVNb29uJzogNzk3LFxyXG4gICdUaGVXb3JsZE9mRGFya25lc3MnOiAxNTEsXHJcbiAgJ1RoZVdyZWF0aE9mU25ha2VzJzogODI0LFxyXG4gICdUaGVXcmVhdGhPZlNuYWtlc0V4dHJlbWUnOiA4MjUsXHJcbiAgJ1Rob2tBc3RUaG9rRXh0cmVtZSc6IDQ0NixcclxuICAnVGhva0FzdFRob2tIYXJkJzogNDMyLFxyXG4gICdUaG9ybm1hcmNoRXh0cmVtZSc6IDM2NCxcclxuICAnVGhvcm5tYXJjaEhhcmQnOiAxMDY3LFxyXG4gICdUaG9ybm1hcmNoSGFyZDYxJzogMjA3LFxyXG4gICdUb0NhbG1lclNlYXMnOiAxMDE2LFxyXG4gICdUcmlwbGVUcmlhZEludml0YXRpb25hbFBhcmxvcic6IDk0MSxcclxuICAnVHJpcGxlVHJpYWRPcGVuVG91cm5hbWVudCc6IDk0MCxcclxuICAnVWxkYWhTdGVwc09mTmFsZCc6IDEzMCxcclxuICAnVWxkYWhTdGVwc09mVGhhbCc6IDEzMSxcclxuICAnVWx0aW1hVGh1bGUnOiA5NjAsXHJcbiAgJ1VsdGltYXNCYW5lVW5yZWFsJzogMTAzNSxcclxuICAnVW5kZXJUaGVBcm1vcic6IDE5MCxcclxuICAnVXBwZXJMYU5vc2NlYSc6IDEzOSxcclxuICAnVXJ0aHNGb3VudCc6IDM5NCxcclxuICAnVmFuYXNwYXRpJzogOTcwLFxyXG4gICdWb3dzT2ZWaXJ0dWVEZWVkc09mQ3J1ZWx0eSc6IDg5MyxcclxuICAnV2FyZFVwJzogMjk5LFxyXG4gICdXZXN0ZXJuTGFOb3NjZWEnOiAxMzgsXHJcbiAgJ1dlc3Rlcm5UaGFuYWxhbic6IDE0MCxcclxuICAnV2hlbkNsYW5zQ29sbGlkZSc6IDcyMyxcclxuICAnV2hlcmVFdmVyeXRoaW5nQmVnaW5zJzogMTA5MSxcclxuICAnV2l0aEhlYXJ0QW5kU3RlZWwnOiA3MDcsXHJcbiAgJ1dvbHZlc0RlblBpZXInOiAyNTAsXHJcbiAgJ1dvcnRoeU9mSGlzQmFjayc6IDEwMTQsXHJcbiAgJ1hlbHBoYXRvbCc6IDExMTMsXHJcbiAgJ1hlbHBoYXRvbDYyJzogNTcyLFxyXG4gICdZYW54aWEnOiA2MTQsXHJcbiAgJ1phZG5vcic6IDk3NSxcclxufSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRhdGE7XHJcbiIsIi8vIEF1dG8tZ2VuZXJhdGVkIGZyb20gZ2VuX3pvbmVfaWRfYW5kX2luZm8ucHlcclxuLy8gRE8gTk9UIEVESVQgVEhJUyBGSUxFIERJUkVDVExZXHJcblxyXG5pbXBvcnQgeyBMb2NhbGVUZXh0IH0gZnJvbSAnLi4vdHlwZXMvdHJpZ2dlcic7XHJcblxyXG50eXBlIFpvbmVJbmZvVHlwZSA9IHtcclxuICBbem9uZUlkOiBudW1iZXJdOiB7XHJcbiAgICByZWFkb25seSBleFZlcnNpb246IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IGNvbnRlbnRUeXBlPzogbnVtYmVyO1xyXG4gICAgcmVhZG9ubHkgbmFtZTogTG9jYWxlVGV4dDtcclxuICAgIHJlYWRvbmx5IG9mZnNldFg6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IG9mZnNldFk6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNpemVGYWN0b3I6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHdlYXRoZXJSYXRlOiBudW1iZXI7XHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IGRhdGE6IFpvbmVJbmZvVHlwZSA9IHtcclxuICAxMDAwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aDiuWlh+eZvuWuneWfjicsXHJcbiAgICAgICdkZSc6ICdFdXBob3JhdHJvbicsXHJcbiAgICAgICdlbic6ICdUaGUgRXhjaXRhdHJvbiA2MDAwJyxcclxuICAgICAgJ2ZyJzogJ0xlIEx1ZG9kcm9tZScsXHJcbiAgICAgICdqYSc6ICflrp3nianluqsg44Ko44Kt44K144Kk44OI44Ot44OzJyxcclxuICAgICAgJ2tvJzogJ+uztOusvOqzoCDsnbXsgqzsnbTtirjroaAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwMDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LiH6a2U5q6/IOi+ueWig+S5i+eLsTEnLFxyXG4gICAgICAnZGUnOiAnQXNwaG9kZWxvcyAtIEVyc3RlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBc3Bob2RlbG9zOiBUaGUgRmlyc3QgQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBMaW1iZXMgZHUgUGFuZMOmbW9uaXVtIC0gUGFydmlzJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoO+8mui+uueNhOe3qDEnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwMDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Zu25byP5LiH6a2U5q6/IOi+ueWig+S5i+eLsTEnLFxyXG4gICAgICAnZGUnOiAnQXNwaG9kZWxvcyAtIEVyc3RlciBLcmVpcyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBc3Bob2RlbG9zOiBUaGUgRmlyc3QgQ2lyY2xlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBMaW1iZXMgZHUgUGFuZMOmbW9uaXVtIC0gUGFydmlzIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6Dpm7blvI/vvJrovrrnjYTnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDrs4DsmKXtjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwMDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LiH6a2U5q6/IOi+ueWig+S5i+eLsTInLFxyXG4gICAgICAnZGUnOiAnQXNwaG9kZWxvcyAtIFp3ZWl0ZXIgS3JlaXMnLFxyXG4gICAgICAnZW4nOiAnQXNwaG9kZWxvczogVGhlIFNlY29uZCBDaXJjbGUnLFxyXG4gICAgICAnZnInOiAnTGVzIExpbWJlcyBkdSBQYW5kw6Ztb25pdW0gLSBDbG9hcXVlJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoO+8mui+uueNhOe3qDInLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwMDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Zu25byP5LiH6a2U5q6/IOi+ueWig+S5i+eLsTInLFxyXG4gICAgICAnZGUnOiAnQXNwaG9kZWxvcyAtIFp3ZWl0ZXIgS3JlaXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQXNwaG9kZWxvczogVGhlIFNlY29uZCBDaXJjbGUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGVzIExpbWJlcyBkdSBQYW5kw6Ztb25pdW0gLSBDbG9hcXVlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6Dpm7blvI/vvJrovrrnjYTnt6gyJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDrs4DsmKXtjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwMDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LiH6a2U5q6/IOi+ueWig+S5i+eLsTMnLFxyXG4gICAgICAnZGUnOiAnQXNwaG9kZWxvcyAtIERyaXR0ZXIgS3JlaXMnLFxyXG4gICAgICAnZW4nOiAnQXNwaG9kZWxvczogVGhlIFRoaXJkIENpcmNsZScsXHJcbiAgICAgICdmcic6ICdMZXMgTGltYmVzIGR1IFBhbmTDpm1vbml1bSAtIEZvdXJuYWlzZScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6DvvJrovrrnjYTnt6gzJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDrs4DsmKXtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMDA3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbtuW8j+S4h+mtlOauvyDovrnlooPkuYvni7EzJyxcclxuICAgICAgJ2RlJzogJ0FzcGhvZGVsb3MgLSBEcml0dGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FzcGhvZGVsb3M6IFRoZSBUaGlyZCBDaXJjbGUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGVzIExpbWJlcyBkdSBQYW5kw6Ztb25pdW0gLSBGb3VybmFpc2UgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoOmbtuW8j++8mui+uueNhOe3qDMnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOuzgOyYpe2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTAwODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g6L655aKD5LmL54uxNCcsXHJcbiAgICAgICdkZSc6ICdBc3Bob2RlbG9zIC0gVmllcnRlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBc3Bob2RlbG9zOiBUaGUgRm91cnRoIENpcmNsZScsXHJcbiAgICAgICdmcic6ICdMZXMgTGltYmVzIGR1IFBhbmTDpm1vbml1bSAtIEFiw65tZScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6DvvJrovrrnjYTnt6g0JyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDrs4DsmKXtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMDA5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbtuW8j+S4h+mtlOauvyDovrnlooPkuYvni7E0JyxcclxuICAgICAgJ2RlJzogJ0FzcGhvZGVsb3MgLSBWaWVydGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FzcGhvZGVsb3M6IFRoZSBGb3VydGggQ2lyY2xlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBMaW1iZXMgZHUgUGFuZMOmbW9uaXVtIC0gQWLDrm1lIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6Dpm7blvI/vvJrovrrnjYTnt6g0JyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDrs4DsmKXtjrgo7JiB7JuFKSA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwMTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6LiP56C06aOO6ZuqJyxcclxuICAgICAgJ2RlJzogJ0VpbiBmcm9zdGlnZXIgRW1wZmFuZycsXHJcbiAgICAgICdlbic6ICdBIEZyb3N0eSBSZWNlcHRpb24nLFxyXG4gICAgICAnZnInOiAnVW4gYWNjdWVpbCBnbGFjaWFsJyxcclxuICAgICAgJ2phJzogJ+mcnOmbquOCkui4j+OBv+OBl+OCgeOBpicsXHJcbiAgICAgICdrbyc6ICfriIjshJzrpqzrpbwg67Cf6rOgJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDExOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aXoOWwveWvkuWknCcsXHJcbiAgICAgICdkZSc6ICdJbiBmcmVtZGVyIEhhdXQnLFxyXG4gICAgICAnZW4nOiAnSW4gZnJvbSB0aGUgQ29sZCcsXHJcbiAgICAgICdmcic6ICdMZSB2b2xldXIgZGUgY29ycHMnLFxyXG4gICAgICAnamEnOiAn5a+S5aSc44Gu44GT44GoJyxcclxuICAgICAgJ2tvJzogJ+yWtOuKkCDstpTsmrQg67Ck7JeQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI3LFxyXG4gIH0sXHJcbiAgMTAxMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmianmlaPnmoTmnKvml6UnLFxyXG4gICAgICAnZGUnOiAnUm90ZSBIaW1tZWwsIHJvdGVyIFNjaG5lZScsXHJcbiAgICAgICdlbic6ICdBcyB0aGUgSGVhdmVucyBCdXJuJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdhcsOobmUgZGVzIG5laWdlcycsXHJcbiAgICAgICdqYSc6ICfmi6HjgYzjgovntYLmnKsnLFxyXG4gICAgICAna28nOiAn7Y287KC46rCA64qUIOyiheunkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDEsXHJcbiAgfSxcclxuICAxMDEzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aZk+aciOS5i+e7iOmAlCcsXHJcbiAgICAgICdkZSc6ICdFbmRzY2hyZWl0ZXInLFxyXG4gICAgICAnZW4nOiAnRW5kd2Fsa2VyJyxcclxuICAgICAgJ2ZyJzogJ0FycGVudGV1ciBkZXMgZmluaXR1ZGVzJyxcclxuICAgICAgJ2phJzogJ+aageaciOOBruODleOCo+ODiuODvOODrCcsXHJcbiAgICAgICdrbyc6ICftmqjsm5TsnZgg7KKF7Ja4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0MyxcclxuICB9LFxyXG4gIDEwMTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LiK5LiA5Lu76Zi/6LCi5aeG55qE5pWZ5a+8JyxcclxuICAgICAgJ2RlJzogJyBFcyByZWltdCBzaWNoIGF1ZiBHZWJlbGwnLFxyXG4gICAgICAnZW4nOiAnV29ydGh5IG9mIEhpcyBCYWNrJyxcclxuICAgICAgJ2ZyJzogJ0xlIGTDqWZpIGRlIGxcXCdhbmNpZW5uZSBBemVtJyxcclxuICAgICAgJ2phJzogJ+WJjeS7o+OCouOCvOODoOOBruaJi+OBu+OBqeOBjScsXHJcbiAgICAgICdrbyc6ICfshKDrjIAg7JWE7KCs6rO87J2YIOuMgOugqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMzQsXHJcbiAgfSxcclxuICAxMDE1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acquadpeS5i+i3rycsXHJcbiAgICAgICdkZSc6ICdPZmZlbiBmw7xyIG5ldWUgV2VnZScsXHJcbiAgICAgICdlbic6ICdBIFBhdGggVW52ZWlsZWQnLFxyXG4gICAgICAnZnInOiAnRGVzIGVzcHJpdHMgZXQgZGVzIGhvbW1lcycsXHJcbiAgICAgICdqYSc6ICfplovjgYvjgozjgZ/pgZPjga7lhYjjgbgnLFxyXG4gICAgICAna28nOiAn7Je066awIOq4uCDsoIDtjrjsnLzroZwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMyxcclxuICB9LFxyXG4gIDEwMTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6am25ZCR6J6N5ZCI55qE5beo6L2uJyxcclxuICAgICAgJ2RlJzogJ0ltIEhhZmVuIGRlcyBGcmllZGVucycsXHJcbiAgICAgICdlbic6ICdUbyBDYWxtZXIgU2VhcycsXHJcbiAgICAgICdmcic6ICdDYXAgc3VyIGxhIHBhaXgnLFxyXG4gICAgICAnamEnOiAn6J6N5ZKM44G444Gu6Ii55Ye6JyxcclxuICAgICAgJ2tvJzogJ+2ZlO2VqeydhCDtlqXtlZwg7Lac7ZWtJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDE3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iLsemtguWuieaBrycsXHJcbiAgICAgICdkZSc6ICdEb21hbmlzY2hlcyBCZWdyw6RibmlzJyxcclxuICAgICAgJ2VuJzogJ0xhaWQgdG8gUmVzdCcsXHJcbiAgICAgICdmcic6ICdEZXMgYWRpZXV4IGRvbWllbnMnLFxyXG4gICAgICAnamEnOiAn44OJ44Oe44Gu5byU44GEJyxcclxuICAgICAgJ2tvJzogJ+uPhOuniOydmCDstpTrj4QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjQwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAxODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfku7DmnJvoi43nqbnvvIzkuI3mlq3ov4jov5snLFxyXG4gICAgICAnZGUnOiAnRGVyIFdlZyB6dXIgRXJuZXVlcnVuZycsXHJcbiAgICAgICdlbic6ICdFdmVyIE1hcmNoIEhlYXZlbnN3YXJkJyxcclxuICAgICAgJ2ZyJzogJ0xhIHZvaWUgZHUgcmVub3V2ZWF1JyxcclxuICAgICAgJ2phJzogJ+iSvOWkqeOCkuS7sOOBjuOAgeatqeOBv+e2muOBkeOCiycsXHJcbiAgICAgICdrbyc6ICfssL3sspzsnYQg67O066mwIOuCmOyVhOqwgOyekCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTQsXHJcbiAgfSxcclxuICAxMDE5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ebrumAgeeUn+iAheWJjeihjCcsXHJcbiAgICAgICdkZSc6ICdUcmF1ZXIgdW5kIEhvZmZudW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHaWZ0IG9mIE1lcmN5JyxcclxuICAgICAgJ2ZyJzogJ0FjY2VwdGF0aW9uJyxcclxuICAgICAgJ2phJzogJ+WDleOBn+OBoeOBr+mChOOCiuOAgeWQm+OCkuimi+mAgeOCjeOBhicsXHJcbiAgICAgICdrbyc6ICfsmrDrpqzripQg64+M7JWE6rCAIOq3uOuMgOulvCDrs7TrgrTrpqwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwMjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSn6ZWw55qE5oSP5LmJJyxcclxuICAgICAgJ2RlJzogJ0RpZSBCZWRldXR1bmcgZGVyIFNlbnNlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIYXJ2ZXN0IEJlZ2lucycsXHJcbiAgICAgICdmcic6ICdMYSB2cmFpZSBwdWlzc2FuY2UgZGUgbGEgZmF1eCcsXHJcbiAgICAgICdqYSc6ICflpKfpjozjga7mhI/lkbMnLFxyXG4gICAgICAna28nOiAn7YGw64Kr7J2YIOydmOuvuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAyMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmmpfmnYDpgZMnLFxyXG4gICAgICAnZGUnOiAnRGllIEt1bnN0IGRlcyBUw7Z0ZW5zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBLaWxsaW5nIEFydCcsXHJcbiAgICAgICdmcic6ICdMYSB2b2llIGR1IG7DqWFudCcsXHJcbiAgICAgICdqYSc6ICfmmpfmrrrpgZMnLFxyXG4gICAgICAna28nOiAn7JWU7IK07J2YIOq4uCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MixcclxuICB9LFxyXG4gIDEwMjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6LSk6ICF55qE55+t5p2WJyxcclxuICAgICAgJ2RlJzogJ0RlcyBXZWlzZW4gd3VuZGVyc2FtZXMgV2Vya3pldWcnLFxyXG4gICAgICAnZW4nOiAnU2FnZVxcJ3MgRm9jdXMnLFxyXG4gICAgICAnZnInOiAnTGVzIGFybWVzIGR1IHNhZ2UnLFxyXG4gICAgICAnamEnOiAn6LOi6ICF44Gu55+t5p2WJyxcclxuICAgICAgJ2tvJzogJ+2YhOyekOydmCDsp6fsnYAg7KeA7Yyh7J20JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDQwLFxyXG4gICAgJ29mZnNldFknOiA2LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnlJ/lkb3nnqzpgJ3vvIzmnK/pgZPmgZLkuYUnLFxyXG4gICAgICAnZGUnOiAnRGFzIExlYmVuIGlzdCBrdXJ6LCBkaWUgS3Vuc3QgaXN0IGxhbmcnLFxyXG4gICAgICAnZW4nOiAnTGlmZSBFcGhlbWVyYWwsIFBhdGggRXRlcm5hbCcsXHJcbiAgICAgICdmcic6ICdFeGlzdGVuY2VzIMOpcGjDqW3DqHJlcyBldCBzYXZvaXIgw6l0ZXJuZWwnLFxyXG4gICAgICAnamEnOiAn5Lq65ZG944Gv5YSa44GP44CB6KGT44Gu44G/44Gh44Gv5rC45LmF44GrJyxcclxuICAgICAgJ2tvJzogJ+yDneuqheydgCDrjafsl4bsnLzrgpgg6riw7Iig7J2AIOyYgeybkO2VmOumrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA5NSxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDUwLFxyXG4gIH0sXHJcbiAgMTAzNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqbbmnoHnpZ7lhbXlubvlt6fmiJgnLFxyXG4gICAgICAnZGUnOiAnVHJhdW1wcsO8ZnVuZyAtIFVsdGltYScsXHJcbiAgICAgICdlbic6ICdVbHRpbWFcXCdzIEJhbmUgKFVucmVhbCknLFxyXG4gICAgICAnZnInOiAnTGUgZmzDqWF1IGRcXCdVbHRpbWEgKGlycsOpZWwpJyxcclxuICAgICAgJ2phJzogJ+W5u+OCouODq+ODhuODnuOCpuOCp+ODneODs+egtOWjiuS9nOaIpicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzMSxcclxuICB9LFxyXG4gIDEwMzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp54S26KaB5a6z5rKZ5pav5aGU5aSP5rq25rSeJyxcclxuICAgICAgJ2RlJzogJ1Nhc3Rhc2hhJyxcclxuICAgICAgJ2VuJzogJ1Nhc3Rhc2hhJyxcclxuICAgICAgJ2ZyJzogJ1Nhc3Rhc2hhJyxcclxuICAgICAgJ2phJzogJ+WkqeeEtuimgeWusyDjgrXjgrnjgr/jgrfjg6Pmtbjpo5/mtJ4nLFxyXG4gICAgICAna28nOiAn7IKs7Iqk7YOA7IOkIOy5qOyLnSDrj5nqtbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwMzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Zyw5LiL54G15q6/5aGU5aeGwrfloZTmi4nlopPlm60nLFxyXG4gICAgICAnZGUnOiAnVG90ZW5hY2tlciBUYW0tVGFyYScsXHJcbiAgICAgICdlbic6ICdUaGUgVGFt4oCTVGFyYSBEZWVwY3JvZnQnLFxyXG4gICAgICAnZnInOiAnTFxcJ0h5cG9nw6llIGRlIFRhbS1UYXJhJyxcclxuICAgICAgJ2phJzogJ+WcsOS4i+mciuauvyDjgr/jg6Djgr/jg6njga7lopPmiYAnLFxyXG4gICAgICAna28nOiAn7YOQ7YOA6528IOusmOyGjCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAzMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTAzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflsIHplIHlnZHpgZPpk5zpk4Ppk5zlsbEnLFxyXG4gICAgICAnZGUnOiAnS3VwZmVyZ2xvY2tlbi1NaW5lJyxcclxuICAgICAgJ2VuJzogJ0NvcHBlcmJlbGwgTWluZXMnLFxyXG4gICAgICAnZnInOiAnTGVzIE1pbmVzIGRlIENsb2NoZWN1aXZyZScsXHJcbiAgICAgICdqYSc6ICflsIHpjpblnZHpgZMg44Kr44OD44OR44O844OZ44Or6YqF5bGxJyxcclxuICAgICAgJ2tvJzogJ+q1rOumrOyihSDqtJHsgrAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwMzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn55uR54ux5bqf5aKf5omY5omYwrfmi4nlhYvljYPni7EnLFxyXG4gICAgICAnZGUnOiAnVGF1c2VuZCBMw7ZjaGVyIHZvbiBUb3RvLVJhaycsXHJcbiAgICAgICdlbic6ICdUaGUgVGhvdXNhbmQgTWF3cyBvZiBUb3Rv4oCTUmFrJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNaWxsZSBHdWV1bGVzIGRlIFRvdG8tUmFrJyxcclxuICAgICAgJ2phJzogJ+ebo+eNhOW7g+WinyDjg4jjg4jjg6njgq/jga7ljYPnjYQnLFxyXG4gICAgICAna28nOiAn7Yag7Yag65287YGsIOqwkOyYpScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA0MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflkI3pl6jlupzpgrjpnZnor63luoTlm60nLFxyXG4gICAgICAnZGUnOiAnSGF1a2tlLUhlcnJlbmhhdXMnLFxyXG4gICAgICAnZW4nOiAnSGF1a2tlIE1hbm9yJyxcclxuICAgICAgJ2ZyJzogJ0xlIE1hbm9pciBkZXMgSGF1a2tlJyxcclxuICAgICAgJ2phJzogJ+WQjemWgOWxi+aVtyDjg4/jgqbjgrHjgr/lvqHnlKjpgrgnLFxyXG4gICAgICAna28nOiAn7ZWY7Jqw7LyA7YOAIOuzhOq2gScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA0MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvJHlhbvog5zlnLDluIPpm7fnpo/mtJvlhYvmlq/ph47okKXlnLAnLFxyXG4gICAgICAnZGUnOiAnQnLDvGxsdm9seFxcJyBMYW5ncmFzdCcsXHJcbiAgICAgICdlbic6ICdCcmF5ZmxveFxcJ3MgTG9uZ3N0b3AnLFxyXG4gICAgICAnZnInOiAnTGUgQml2b3VhYyBkZSBCcmF5ZmxveCcsXHJcbiAgICAgICdqYSc6ICflparpgoTmlK/mj7Qg44OW44Os44Kk44OV44Ot44Kv44K544Gu6YeO5Za25ZywJyxcclxuICAgICAgJ2tvJzogJ+u4jOugiOydtO2UjOuhneyKpOydmCDslbzsmIHsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwNDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5a+56b6Z5Z+O5aGe55+z5Y2r5aGUJyxcclxuICAgICAgJ2RlJzogJ1N0ZWluZXJuZSBXYWNodCcsXHJcbiAgICAgICdlbic6ICdUaGUgU3RvbmUgVmlnaWwnLFxyXG4gICAgICAnZnInOiAnTGUgVmlnaWxlIGRlIFBpZXJyZScsXHJcbiAgICAgICdqYSc6ICfln47loZ7mlLvnlaUg44K544OI44O844Oz44O044Kj44K444OrJyxcclxuICAgICAgJ2tvJzogJ+uPjOuwqe2MqCDqsr3qs4TstIjshownLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjcsXHJcbiAgfSxcclxuICAxMDQzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnuWFteimgeWhnuW4neWbveWNl+aWueWgoScsXHJcbiAgICAgICdkZSc6ICdDYXN0cnVtIE1lcmlkaWFudW0gLSBBdcOfZW5iZXJlaWNoJyxcclxuICAgICAgJ2VuJzogJ0Nhc3RydW0gTWVyaWRpYW51bScsXHJcbiAgICAgICdmcic6ICdDYXN0cnVtIE1lcmlkaWFudW0nLFxyXG4gICAgICAnamEnOiAn5aSW6YOt5pS755WlIOOCq+OCueODiOODq+ODoOODu+ODoeODquODh+OCo+OCouODjOODoCcsXHJcbiAgICAgICdrbyc6ICfsubTsiqTtirjro7gg66mU66as65SU7JWE64iUJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDQ0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acgOe7iOWGs+aImOWkqeW5lemtlOWvvOWfjicsXHJcbiAgICAgICdkZSc6ICdDYXN0cnVtIE1lcmlkaWFudW0gLSBQcmFldG9yaXVtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQcmFldG9yaXVtJyxcclxuICAgICAgJ2ZyJzogJ0xlIFByYWV0b3JpdW0nLFxyXG4gICAgICAnamEnOiAn5pyA57WC5rG65oimIOmtlOWwjuWfjuODl+ODqeOCqOODiOODquOCpuODoCcsXHJcbiAgICAgICdrbyc6ICfrp4jrj4TshLEg7ZSE65287J207Yag66as7JuAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iuW8l+WIqeeJueiuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdEYXMgR3JhYiBkZXIgTG9oZScsXHJcbiAgICAgICdlbic6ICdUaGUgQm93bCBvZiBFbWJlcnMnLFxyXG4gICAgICAnZnInOiAnTGUgQ3JhdMOocmUgZGVzIHRpc29ucycsXHJcbiAgICAgICdqYSc6ICfjgqTjg5Xjg6rjg7zjg4joqI7kvJDmiKYnLFxyXG4gICAgICAna28nOiAn7J207ZSE66as7Yq4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNSxcclxuICB9LFxyXG4gIDEwNDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rOw5Z2m6K6o5LyQ5oiYJyxcclxuICAgICAgJ2RlJzogJ0RlciBOYWJlbCcsXHJcbiAgICAgICdlbic6ICdUaGUgTmF2ZWwnLFxyXG4gICAgICAnZnInOiAnTGUgTm9tYnJpbCcsXHJcbiAgICAgICdqYSc6ICfjgr/jgqTjgr/jg7PoqI7kvJDmiKYnLFxyXG4gICAgICAna28nOiAn7YOA7J207YOEIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDEwNDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+m5qW8572X6K6o5LyQ5oiYJyxcclxuICAgICAgJ2RlJzogJ0RhcyBUb3NlbmRlIEF1Z2UnLFxyXG4gICAgICAnZW4nOiAnVGhlIEhvd2xpbmcgRXllJyxcclxuICAgICAgJ2ZyJzogJ0h1cmzFk2lsJyxcclxuICAgICAgJ2phJzogJ+OCrOODq+ODvOODgOiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICfqsIDro6jri6Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI2LFxyXG4gIH0sXHJcbiAgMTA0ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqbbmnoHnpZ7lhbXnoLTlnY/kvZzmiJgnLFxyXG4gICAgICAnZGUnOiAnUG9ydGEgRGVjdW1hbmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIFBvcnRhIERlY3VtYW5hJyxcclxuICAgICAgJ2ZyJzogJ1BvcnRhIERlY3VtYW5hJyxcclxuICAgICAgJ2phJzogJ+OCouODq+ODhuODnuOCpuOCp+ODneODs+egtOWjiuS9nOaIpicsXHJcbiAgICAgICdrbyc6ICfslYzthYzrp4gg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3NzIsXHJcbiAgICAnb2Zmc2V0WSc6IDYwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwNDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6YeM5aGU5o+Q5oGp5by65pS75oiYJyxcclxuICAgICAgJ2RlJzogJ0thcCBXZXN0d2luZCcsXHJcbiAgICAgICdlbic6ICdDYXBlIFdlc3R3aW5kJyxcclxuICAgICAgJ2ZyJzogJ0xlIENhcCBWZW5kb3Vlc3QnLFxyXG4gICAgICAnamEnOiAn44Oq44OD44OI44Ki44OG44Kj44Oz5by36KWy5oimJyxcclxuICAgICAgJ2tvJzogJ+umrO2KuOyVhO2LtCDqsJXsirXsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwNTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+R5Lic56eY5a6d6Zi/5bCU5omO6L6+5bCU5rW35bqV6YGX6L+5576kJyxcclxuICAgICAgJ2RlJzogJ0FsemFkYWFscyBWZXJtw6RjaHRuaXMnLFxyXG4gICAgICAnZW4nOiAnQWx6YWRhYWxcXCdzIExlZ2FjeScsXHJcbiAgICAgICdmcic6ICdMZSBsZWdzIGRcXCdBbHphZGFhbCcsXHJcbiAgICAgICdqYSc6ICfov5HmnbHnp5jlrp0g44Ki44Or44K244OA44O844Or5rW35bqV6YG66Leh576kJyxcclxuICAgICAgJ2tvJzogJ+yVjOyekOuLrCDtlbTsoIAg7Jyg7KCBJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE1LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtoXlsJTnk6bnmoTluJ3lm70nLFxyXG4gICAgICAnZGUnOiAnTmVydmFzIFJlaWNoJyxcclxuICAgICAgJ2VuJzogJ0Zvcmxvcm4gR2xvcnknLFxyXG4gICAgICAnZnInOiAnTmVydmEsIGxlIHBhdHJpb3RlJyxcclxuICAgICAgJ2phJzogJ+ODjeODq+OCpuOCoeOBruW4neWbvScsXHJcbiAgICAgICdrbyc6ICfrhKTrpbTrsJTsnZgg7KCc6rWtJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0yMzAsXHJcbiAgICAnb2Zmc2V0WSc6IC0yNTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTA1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4nlk4jluIPpm7fkuprorqjkvJDmiJgnLFxyXG4gICAgICAnZGUnOiAnRGFzIEFudGxpdHogZGVyIEthbHRibMO8dGlna2VpdCcsXHJcbiAgICAgICdlbic6ICdEZXZhc3RhdGlvbicsXHJcbiAgICAgICdmcic6ICdMZSBQcmFldG9yaXVtIGVuIGZsYW1tZXMnLFxyXG4gICAgICAnamEnOiAn44Ki44K344Ko44Oz44O744Op44OP44OW44Os44Ki6KiO5LyQ5oimJyxcclxuICAgICAgJ2tvJzogJ+yVhOyUqOyXlCDrnbztlZjruIzroIjslYQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDcwNCxcclxuICAgICdvZmZzZXRZJzogLTQ4MCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwNTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54G/54OC56We5Z+f6Zi/5qC86I6x5LqaJyxcclxuICAgICAgJ2RlJzogJ0FnbGFpYScsXHJcbiAgICAgICdlbic6ICdBZ2xhaWEnLFxyXG4gICAgICAnZnInOiAnRG9tYWluZSBkaXZpbiAtIEFnbGHDqScsXHJcbiAgICAgICdqYSc6ICfovJ3jgZHjgovnpZ7ln58g44Ki44Kw44Op44Kk44KiJyxcclxuICAgICAgJ2tvJzogJ+ywrOuegO2VnCDsi6Dsl60g7JWE6riA65287J207JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC04MCxcclxuICAgICdvZmZzZXRZJzogLTU1MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ3LFxyXG4gIH0sXHJcbiAgMTA1ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsLTmmbblhrLnqoHvvIjop5LlipvlrabmoKHvvJroh6rlrprotZvvvIknLFxyXG4gICAgICAnZGUnOiAnQ3J5c3RhbGxpbmUgQ29uZmxpY3Q6IERpZSBQYWzDpHN0cmEgKFNjaGF1a2FtcGYpJyxcclxuICAgICAgJ2VuJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0IChDdXN0b20gTWF0Y2ggLSBUaGUgUGFsYWlzdHJhKScsXHJcbiAgICAgICdmcic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAocGFydGllIHBlcnNvbm5hbGlzw6llIC0gTGUgUGFsZXN0cmUpJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCs+ODs+ODleODquOCr+ODiCjjg5Hjg6njgqTjgrnjg4jjg6nvvJrjgqvjgrnjgr/jg6Djg57jg4Pjg4EpJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DiOudvOyduCDsu6jtlIzrpq3tirgo7YyU65287J207Iqk7Yq46528OiDsuZzshKAg6rK96riwKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA1OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsLTmmbblhrLnqoHvvIjngavlsbHkuYvlv4PvvJroh6rlrprotZvvvIknLFxyXG4gICAgICAnZGUnOiAnQ3J5c3RhbGxpbmUgQ29uZmxpY3Q6IERhcyBIZXJ6IGRlcyBWdWxrYW5zIChTY2hhdWthbXBmKScsXHJcbiAgICAgICdlbic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAoQ3VzdG9tIE1hdGNoIC0gVGhlIFZvbGNhbmljIEhlYXJ0KScsXHJcbiAgICAgICdmcic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAocGFydGllIHBlcnNvbm5hbGlzw6llIC0gTGUgQ8WTdXIgdm9sY2FuaXF1ZSknLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Or44Kz44Oz44OV44Oq44Kv44OIKOODtOOCqeODq+OCq+ODi+ODg+OCr+ODu+ODj+ODvOODiO+8muOCq+OCueOCv+ODoOODnuODg+ODgSknLFxyXG4gICAgICAna28nOiAn7YGs66as7Iqk7YOI65287J24IOy7qO2UjOumre2KuCjtmZTsgrDsi6zsnqU6IOy5nOyEoCDqsr3quLApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDYwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOaZtuWGsueqge+8iOS5nemchOS6keS4iu+8muiHquWumui1m++8iScsXHJcbiAgICAgICdkZSc6ICdDcnlzdGFsbGluZSBDb25mbGljdDogV29sa2UgU2llYmVuIChTY2hhdWthbXBmKScsXHJcbiAgICAgICdlbic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAoQ3VzdG9tIE1hdGNoIC0gQ2xvdWQgTmluZSknLFxyXG4gICAgICAnZnInOiAnQ3J5c3RhbGxpbmUgQ29uZmxpY3QgKHBhcnRpZSBwZXJzb25uYWxpc8OpZSAtIExlIFBldGl0IE51YWdlKScsXHJcbiAgICAgICdqYSc6ICfjgq/jg6rjgrnjgr/jg6vjgrPjg7Pjg5Xjg6rjgq/jg4go44Kv44Op44Km44OJ44OK44Kk44Oz77ya44Kr44K544K/44Og44Oe44OD44OBKScsXHJcbiAgICAgICdrbyc6ICftgazrpqzsiqTtg4jrnbzsnbgg7Luo7ZSM66at7Yq4KOygiOygleydmCDqtazrpoQ6IOy5nOyEoCDqsr3quLApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WHm+WGvea0nuWkqeaKq+mbquWkp+WGsOWjgScsXHJcbiAgICAgICdkZSc6ICdEYXMgU2NobmVla2xlaWQnLFxyXG4gICAgICAnZW4nOiAnU25vd2Nsb2FrJyxcclxuICAgICAgJ2ZyJzogJ01hbnRlbmVpZ2UnLFxyXG4gICAgICAnamEnOiAn5rC357WQ5r2c56qfIOOCueODjuODvOOCr+ODreODvOOCr+Wkp+awt+WjgScsXHJcbiAgICAgICdrbyc6ICfslrzsnYzsmbjtiKwg64yA67mZ67K9JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQyLFxyXG4gIH0sXHJcbiAgMTA2Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflubvpvpnmrovpqrjlr4bnuqbkuYvloZQnLFxyXG4gICAgICAnZGUnOiAnSMO8dGVyIGRlcyBTZWVzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBLZWVwZXIgb2YgdGhlIExha2UnLFxyXG4gICAgICAnZnInOiAnTGUgR2FyZGllbiBkdSBsYWMnLFxyXG4gICAgICAnamEnOiAn5bm76b6N5q6L6aq4IOm7mee0hOOBruWhlCcsXHJcbiAgICAgICdrbyc6ICfrrLXslb3snZgg7YORJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc0LFxyXG4gIH0sXHJcbiAgMTA2NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnlsbHnu53pobbntKLlp4bpmL/lsJTngbXls7AnLFxyXG4gICAgICAnZGUnOiAnU29obSBBbCcsXHJcbiAgICAgICdlbic6ICdTb2htIEFsJyxcclxuICAgICAgJ2ZyJzogJ1NvaG0gQWwnLFxyXG4gICAgICAnamEnOiAn6ZyK5bOw6LiP56C0IOOCveODvOODoOODu+OCouODqycsXHJcbiAgICAgICdrbyc6ICfshpwg7JWMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE4NSxcclxuICAgICdvZmZzZXRZJzogNTEsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDY1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCqum+meeOi+W6p+m+meW3ouelnuauvycsXHJcbiAgICAgICdkZSc6ICdOZXN0IGRlcyBEcmFjaGVuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBZXJ5JyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBaXJlJyxcclxuICAgICAgJ2phJzogJ+mCquernOihgOaIpiDjg4njg6njgrTjg7PjgrrjgqjjgqLjg6rjg7wnLFxyXG4gICAgICAna28nOiAn7Jqp7J2YIOuRpeyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNDAsXHJcbiAgICAnb2Zmc2V0WSc6IDU1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDEwNjY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Zyj5pWZ5Lit5p6i5LyK5L+u5Yqg5b635pWZ55qH5Y6FJyxcclxuICAgICAgJ2RlJzogJ0VyemJhc2lsaWthJyxcclxuICAgICAgJ2VuJzogJ1RoZSBWYXVsdCcsXHJcbiAgICAgICdmcic6ICdMYSBWb8O7dGUnLFxyXG4gICAgICAnamEnOiAn5by356Gs56qB5YWlIOOCpOOCt+ODpeOCrOODq+ODieaVmeeah+W6gScsXHJcbiAgICAgICdrbyc6ICfsnbTsiojqsIDrpbTrk5wg6rWQ7Zmp7LKtJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDY3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iOq+WPpOWKm+i0pOeOi+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdLw7ZuaWdsaWNoZSBLb25mcm9udGF0aW9uIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1Rob3JubWFyY2ggKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xhIExpc2nDqHJlIGRlIHJvbmNlcyAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICflloTnjovjg6LjgrDjg6vjg7vjg6LjgrBYSUnkuJboqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ISg7JmVIOuqqOq3uOujqCDrqqjqt7ggWElJ7IS4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzMCxcclxuICB9LFxyXG4gIDEwNjg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn55qH6YO95LyK5L+u5Yqg5b635L+d5Y2r5oiYJyxcclxuICAgICAgJ2RlJzogJ0RlciBTY2hpY2tzYWxzd2VnJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdGVwcyBvZiBGYWl0aCcsXHJcbiAgICAgICdmcic6ICdMZSBTacOoZ2UgZGUgbGEgc2FpbnRlIENpdMOpIGRcXCdJc2hnYXJkJyxcclxuICAgICAgJ2phJzogJ+eah+mDveOCpOOCt+ODpeOCrOODq+ODiemYsuihm+aIpicsXHJcbiAgICAgICdrbyc6ICfshLHrj4Qg7J207IqI6rCA66W065OcIOuwqeyWtOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDEwNjk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkmuWPmOi/t+WuqyDluIzmi4nni4Tlk4jmsLTpgZMnLFxyXG4gICAgICAnZGUnOiAnRGllIFVudGVyc3RhZHQgdm9uIFNpbFxcJ2RpaCcsXHJcbiAgICAgICdlbic6ICdUaGUgU2lsXFwnZGlobiBTdWJ0ZXJyYW5lJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBjYW5hbGlzYXRpb25zIHNpbGRpZW5uZXMgLSBEb25qb24gw6AgZW1icmFuY2hlbWVudHMnLFxyXG4gICAgICAnamEnOiAn44O044Kh44Oq44Ki44Oz44OI44OA44Oz44K444On44OzIOOCt+ODqeODh+OCo+ODj+awtOmBkycsXHJcbiAgICAgICdrbyc6ICfrs4DtmJUg642Y7KCEOiDsi6TrlJTtlZgg7KeA7ZWY7IiY64+EJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDcwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W8gueVjOWtpOWfjueJuee9l+S6muWuq+W7tycsXHJcbiAgICAgICdkZSc6ICdEZXIgU2Nod2FyemUgSG9mIHZvbiBUcm9pYScsXHJcbiAgICAgICdlbic6ICdUaGUgRmVsbCBDb3VydCBvZiBUcm9pYScsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkZSBUcm/Dr2EnLFxyXG4gICAgICAnamEnOiAn55Ww55WM5a2k5Z+OIOODiOODreOCpOOCouOCs+ODvOODiCcsXHJcbiAgICAgICdrbyc6ICftirjroZzsnbTslYQg6raB7KCVJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC03NixcclxuICAgICdvZmZzZXRZJzogLTE4MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ5LFxyXG4gIH0sXHJcbiAgMTA3MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7TlsJTlt7TojonluIzlqIXmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnUHJvcGhldGllIC0gQmFyYmFyaXppYScsXHJcbiAgICAgICdlbic6ICdTdG9ybVxcJ3MgQ3Jvd24nLFxyXG4gICAgICAnZnInOiAnTGEgVG9pc29uIGRlcyB0ZW1ww6p0ZXMnLFxyXG4gICAgICAnamEnOiAn44OQ44Or44OQ44Oq44K344Ki6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+uwlOultOuwlOumrOywqCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ5LFxyXG4gIH0sXHJcbiAgMTA3Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7TlsJTlt7TojonluIzlqIXmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnRXNjaGF0b3MgLSBCYXJiYXJpemlhJyxcclxuICAgICAgJ2VuJzogJ1N0b3JtXFwncyBDcm93biAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgVG9pc29uIGRlcyB0ZW1ww6p0ZXMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg5Djg6vjg5Djg6rjgrfjgqLoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOuwlOultOuwlOumrOywqCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ5LFxyXG4gIH0sXHJcbiAgMTA3NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMzAsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5byC6Ze76L+35a6rIOW8gumXu+W4jOaLieeLhOWTiOawtOmBkycsXHJcbiAgICAgICdkZSc6ICdEaWUga3VyaW9zZSBVbnRlcnN0YWR0IHZvbiBTaWxcXCdkaWgnLFxyXG4gICAgICAnZW4nOiAnQW5vdGhlciBTaWxcXCdkaWhuIFN1YnRlcnJhbmUnLFxyXG4gICAgICAnZnInOiAnTGVzIGNhbmFsaXNhdGlvbnMgc2lsZGllbm5lcyBhbm5leGVzIC0gRG9uam9uIGFsdGVybmF0aWYnLFxyXG4gICAgICAnamEnOiAn44Ki44OK44K244O844OA44Oz44K444On44OzIOeVsOiBnuOCt+ODqeODh+OCo+ODj+awtOmBkycsXHJcbiAgICAgICdrbyc6ICftjIzsg50g642Y7KCEOiDrsojsmbgg7Iuk65SU7ZWYIOyngO2VmOyImOuPhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAzMzUsXHJcbiAgICAnb2Zmc2V0WSc6IDEwMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDEwNzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W8gumXu+i/t+WuqyDpm7blvI/lvILpl7vluIzmi4nni4Tlk4jmsLTpgZMnLFxyXG4gICAgICAnZGUnOiAnRGllIGt1cmlvc2UgVW50ZXJzdGFkdCB2b24gU2lsXFwnZGloIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0Fub3RoZXIgU2lsXFwnZGlobiBTdWJ0ZXJyYW5lIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBjYW5hbGlzYXRpb25zIHNpbGRpZW5uZXMgYW5uZXhlcyAtIERvbmpvbiBhbHRlcm5hdGlmIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg4rjgrbjg7zjg4Djg7Pjgrjjg6fjg7Mg55Ww6IGe44K344Op44OH44Kj44OP5rC06YGTIOmbtuW8jycsXHJcbiAgICAgICdrbyc6ICftjIzsg50g642Y7KCEOiDrsojsmbgg7Iuk65SU7ZWYIOyngO2VmOyImOuPhCjsmIHsm4UpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDMzNSxcclxuICAgICdvZmZzZXRZJzogMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTA4MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g54K85YeA5LmL54uxMScsXHJcbiAgICAgICdkZSc6ICdBYnlzc29zIC0gRsO8bmZ0ZXIgS3JlaXMnLFxyXG4gICAgICAnZW4nOiAnQWJ5c3NvczogVGhlIEZpZnRoIENpcmNsZScsXHJcbiAgICAgICdmcic6ICdMZSBQdXJnYXRvaXJlIGR1IFBhbmTDpm1vbml1bSAtIENhZ2VzJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoO+8mueFieeNhOe3qDEnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOyXsOyYpe2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwODI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Zu25byP5LiH6a2U5q6/IOeCvOWHgOS5i+eLsTEnLFxyXG4gICAgICAnZGUnOiAnQWJ5c3NvcyAtIEbDvG5mdGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FieXNzb3M6IFRoZSBGaWZ0aCBDaXJjbGUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGUgUHVyZ2F0b2lyZSBkdSBQYW5kw6Ztb25pdW0gLSBDYWdlcyAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og6Zu25byP77ya54WJ542E57eoMScsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog7Jew7Jil7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMDgzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4h+mtlOauvyDngrzlh4DkuYvni7EyJyxcclxuICAgICAgJ2RlJzogJ0FieXNzb3MgLSBTZWNoc3RlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBYnlzc29zOiBUaGUgU2l4dGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFB1cmdhdG9pcmUgZHUgUGFuZMOmbW9uaXVtIC0gQ3JvaXNlbWVudHMnLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og77ya54WJ542E57eoMicsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog7Jew7Jil7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTA4NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/kuIfprZTmrr8g54K85YeA5LmL54uxMicsXHJcbiAgICAgICdkZSc6ICdBYnlzc29zIC0gU2VjaHN0ZXIgS3JlaXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWJ5c3NvczogVGhlIFNpeHRoIENpcmNsZSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZSBQdXJnYXRvaXJlIGR1IFBhbmTDpm1vbml1bSAtIENyb2lzZW1lbnRzIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6Dpm7blvI/vvJrnhYnnjYTnt6gyJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDsl7DsmKXtjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDEwODU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LiH6a2U5q6/IOeCvOWHgOS5i+eLsTMnLFxyXG4gICAgICAnZGUnOiAnQWJ5c3NvcyAtIFNpZWJ0ZXIgS3JlaXMnLFxyXG4gICAgICAnZW4nOiAnQWJ5c3NvczogVGhlIFNldmVudGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFB1cmdhdG9pcmUgZHUgUGFuZMOmbW9uaXVtIC0gUmFjaW5lcycsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6DvvJrnhYnnjYTnt6gzJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDsl7DsmKXtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMDg2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbtuW8j+S4h+mtlOauvyDngrzlh4DkuYvni7EzJyxcclxuICAgICAgJ2RlJzogJ0FieXNzb3MgLSBTaWVidGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FieXNzb3M6IFRoZSBTZXZlbnRoIENpcmNsZSAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZSBQdXJnYXRvaXJlIGR1IFBhbmTDpm1vbml1bSAtIFJhY2luZXMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoOmbtuW8j++8mueFieeNhOe3qDMnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOyXsOyYpe2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTA4Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g54K85YeA5LmL54uxNCcsXHJcbiAgICAgICdkZSc6ICdBYnlzc29zIC0gQWNodGVyIEtyZWlzJyxcclxuICAgICAgJ2VuJzogJ0FieXNzb3M6IFRoZSBFaWdodGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFB1cmdhdG9pcmUgZHUgUGFuZMOmbW9uaXVtIC0gSMOpcsOpZGl0w6knLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og77ya54WJ542E57eoNCcsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog7Jew7Jil7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTA4ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/kuIfprZTmrr8g54K85YeA5LmL54uxNCcsXHJcbiAgICAgICdkZSc6ICdBYnlzc29zIC0gQWNodGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FieXNzb3M6IFRoZSBFaWdodGggQ2lyY2xlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFB1cmdhdG9pcmUgZHUgUGFuZMOmbW9uaXVtIC0gSMOpcsOpZGl0w6kgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+S4h+mtlOauv+ODkeODs+ODh+ODouODi+OCpuODoOmbtuW8j++8mueFieeNhOe3qDQnLFxyXG4gICAgICAna28nOiAn66eI7J2YIOyghOuLuSDtjJDrjbDrqqjri4jsm4A6IOyXsOyYpe2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTA5MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokKjoj7LmtJvnibnlubvlt6fmiJgnLFxyXG4gICAgICAnZGUnOiAnVHJhdW1wcsO8ZnVuZyAtIFNlcGhpcm90JyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBTMVQ3IChVbnJlYWwpJyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFMxUDcgKGlycsOpZWwpJyxcclxuICAgICAgJ2phJzogJ+W5u+mtlOelnuOCu+ODleOCo+ODreODiOiojua7heaIpicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2NixcclxuICB9LFxyXG4gIDEwOTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSx5Lyg55qE5Yqb6YePJyxcclxuICAgICAgJ2RlJzogJ1dvIGFsbGVzIHNlaW5lbiBBbmZhbmcgbmltbXQnLFxyXG4gICAgICAnZW4nOiAnV2hlcmUgRXZlcnl0aGluZyBCZWdpbnMnLFxyXG4gICAgICAnZnInOiAnQXUgY29tbWVuY2VtZW50IMOpdGFpdCBaZXJvJyxcclxuICAgICAgJ2phJzogJ+WkseOCj+OCjOOBn+WKmycsXHJcbiAgICAgICdrbyc6ICfsnoPslrTrsoTrprAg7Z6YJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE0MyxcclxuICAgICdvZmZzZXRZJzogLTY0LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDksXHJcbiAgfSxcclxuICAxMDk1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WNouavlOWdjueJueatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdQcm9waGV0aWUgLSBSdWJpY2FudGUnLFxyXG4gICAgICAnZW4nOiAnTW91bnQgT3JkZWFscycsXHJcbiAgICAgICdmcic6ICdMZSBNb250IGR1IFN1cHBsaWNlJyxcclxuICAgICAgJ2phJzogJ+ODq+ODk+OCq+ODs+ODhuiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfro6jruYTsubjthYwg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WNouavlOWdjueJueatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdFc2NoYXRvcyAtIFJ1YmljYW50ZScsXHJcbiAgICAgICdlbic6ICdNb3VudCBPcmRlYWxzIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMZSBNb250IGR1IFN1cHBsaWNlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Or44OT44Kr44Oz44OG6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDro6jruYTsubjthYwg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMDk3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbquWxseWlpeeqn+WGpemtguefs+a0nicsXHJcbiAgICAgICdkZSc6ICdMYXBpcyBNYW5hbGlzJyxcclxuICAgICAgJ2VuJzogJ0xhcGlzIE1hbmFsaXMnLFxyXG4gICAgICAnZnInOiAnTGFwaXMgTWFuYWxpcycsXHJcbiAgICAgICdqYSc6ICfpm6rlsbHlhqXmtJ4g44Op44OU44K544O744Oe44OK44Oq44K5JyxcclxuICAgICAgJ2tvJzogJ+udvO2UvOyKpCDrp4jrgqDrpqzsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTQ2LFxyXG4gICAgJ29mZnNldFknOiA1NzAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQyLFxyXG4gIH0sXHJcbiAgMTA5OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2j57uf5LyY6Zu35Y2hIOWcsOS4izHvvZ4xMOWxgicsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgT3J0aG9zIChFYmVuZW4gMS0xMCknLFxyXG4gICAgICAnZW4nOiAnRXVyZWthIE9ydGhvcyAoRmxvb3JzIDEtMTApJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgT3J0aG9zIChzb3VzLXNvbHMgMS0xMCknLFxyXG4gICAgICAnamEnOiAn44Kq44Or44OI44O744Ko44Km44Os44KrIEIx772eQjEwJyxcclxuICAgICAgJ2tvJzogJ+yXkOyasOugiOy5tCDsmKTrpbTthqDsiqQgQjF+QjEwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTAwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmraPnu5/kvJjpm7fljaEg5Zyw5LiLMTHvvZ4yMOWxgicsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgT3J0aG9zIChFYmVuZW4gMTEtMjApJyxcclxuICAgICAgJ2VuJzogJ0V1cmVrYSBPcnRob3MgKEZsb29ycyAxMS0yMCknLFxyXG4gICAgICAnZnInOiAnRXVyw6prYSBPcnRob3MgKHNvdXMtc29scyAxMS0yMCknLFxyXG4gICAgICAnamEnOiAn44Kq44Or44OI44O744Ko44Km44Os44KrIEIxMe+9nkIyMCcsXHJcbiAgICAgICdrbyc6ICfsl5DsmrDroIjsubQg7Jik66W07Yag7IqkIEIxMX5CMjAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ato+e7n+S8mOmbt+WNoSDlnLDkuIsyMe+9njMw5bGCJyxcclxuICAgICAgJ2RlJzogJ0V1cmVrYSBPcnRob3MgKEViZW5lbiAyMS0zMCknLFxyXG4gICAgICAnZW4nOiAnRXVyZWthIE9ydGhvcyAoRmxvb3JzIDIxLTMwKScsXHJcbiAgICAgICdmcic6ICdFdXLDqmthIE9ydGhvcyAoc291cy1zb2xzIDIxLTMwKScsXHJcbiAgICAgICdqYSc6ICfjgqrjg6vjg4jjg7vjgqjjgqbjg6zjgqsgQjIx772eQjMwJyxcclxuICAgICAgJ2tvJzogJ+yXkOyasOugiOy5tCDsmKTrpbTthqDsiqQgQjIxfkIzMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTEwMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2j57uf5LyY6Zu35Y2hIOWcsOS4izMx772eNDDlsYInLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIE9ydGhvcyAoRWJlbmVuIDMxLTQwKScsXHJcbiAgICAgICdlbic6ICdFdXJla2EgT3J0aG9zIChGbG9vcnMgMzEtNDApJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgT3J0aG9zIChzb3VzLXNvbHMgMzEtNDApJyxcclxuICAgICAgJ2phJzogJ+OCquODq+ODiOODu+OCqOOCpuODrOOCqyBCMzHvvZ5CNDAnLFxyXG4gICAgICAna28nOiAn7JeQ7Jqw66CI7Lm0IOyYpOultO2GoOyKpCBCMzF+QjQwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTAzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmraPnu5/kvJjpm7fljaEg5Zyw5LiLNDHvvZ41MOWxgicsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgT3J0aG9zIChFYmVuZW4gNDEtNTApJyxcclxuICAgICAgJ2VuJzogJ0V1cmVrYSBPcnRob3MgKEZsb29ycyA0MS01MCknLFxyXG4gICAgICAnZnInOiAnRXVyw6prYSBPcnRob3MgKHNvdXMtc29scyA0MS01MCknLFxyXG4gICAgICAnamEnOiAn44Kq44Or44OI44O744Ko44Km44Os44KrIEI0Me+9nkI1MCcsXHJcbiAgICAgICdrbyc6ICfsl5DsmrDroIjsubQg7Jik66W07Yag7IqkIEI0MX5CNTAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ato+e7n+S8mOmbt+WNoSDlnLDkuIs1Me+9njYw5bGCJyxcclxuICAgICAgJ2RlJzogJ0V1cmVrYSBPcnRob3MgKEViZW5lbiA1MS02MCknLFxyXG4gICAgICAnZW4nOiAnRXVyZWthIE9ydGhvcyAoRmxvb3JzIDUxLTYwKScsXHJcbiAgICAgICdmcic6ICdFdXLDqmthIE9ydGhvcyAoc291cy1zb2xzIDUxLTYwKScsXHJcbiAgICAgICdqYSc6ICfjgqrjg6vjg4jjg7vjgqjjgqbjg6zjgqsgQjUx772eQjYwJyxcclxuICAgICAgJ2tvJzogJ+yXkOyasOugiOy5tCDsmKTrpbTthqDsiqQgQjUxfkI2MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTEwNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2j57uf5LyY6Zu35Y2hIOWcsOS4izYx772eNzDlsYInLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIE9ydGhvcyAoRWJlbmVuIDYxLTcwKScsXHJcbiAgICAgICdlbic6ICdFdXJla2EgT3J0aG9zIChGbG9vcnMgNjEtNzApJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgT3J0aG9zIChzb3VzLXNvbHMgNjEtNzApJyxcclxuICAgICAgJ2phJzogJ+OCquODq+ODiOODu+OCqOOCpuODrOOCqyBCNjHvvZ5CNzAnLFxyXG4gICAgICAna28nOiAn7JeQ7Jqw66CI7Lm0IOyYpOultO2GoOyKpCBCNjF+QjcwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTA2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmraPnu5/kvJjpm7fljaEg5Zyw5LiLNzHvvZ44MOWxgicsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgT3J0aG9zIChFYmVuZW4gNzEtODApJyxcclxuICAgICAgJ2VuJzogJ0V1cmVrYSBPcnRob3MgKEZsb29ycyA3MS04MCknLFxyXG4gICAgICAnZnInOiAnRXVyw6prYSBPcnRob3MgKHNvdXMtc29scyA3MS04MCknLFxyXG4gICAgICAnamEnOiAn44Kq44Or44OI44O744Ko44Km44Os44KrIEI3Me+9nkI4MCcsXHJcbiAgICAgICdrbyc6ICfsl5DsmrDroIjsubQg7Jik66W07Yag7IqkIEI3MX5CODAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ato+e7n+S8mOmbt+WNoSDlnLDkuIs4Me+9njkw5bGCJyxcclxuICAgICAgJ2RlJzogJ0V1cmVrYSBPcnRob3MgKEViZW5lbiA4MS05MCknLFxyXG4gICAgICAnZW4nOiAnRXVyZWthIE9ydGhvcyAoRmxvb3JzIDgxLTkwKScsXHJcbiAgICAgICdmcic6ICdFdXLDqmthIE9ydGhvcyAoc291cy1zb2xzIDgxLTkwKScsXHJcbiAgICAgICdqYSc6ICfjgqrjg6vjg4jjg7vjgqjjgqbjg6zjgqsgQjgx772eQjkwJyxcclxuICAgICAgJ2tvJzogJ+yXkOyasOugiOy5tCDsmKTrpbTthqDsiqQgQjgxfkI5MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTEwODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2j57uf5LyY6Zu35Y2hIOWcsOS4izkx772eMTAw5bGCJyxcclxuICAgICAgJ2RlJzogJ0V1cmVrYSBPcnRob3MgKEViZW5lbiA5MS0xMDApJyxcclxuICAgICAgJ2VuJzogJ0V1cmVrYSBPcnRob3MgKEZsb29ycyA5MS0xMDApJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgT3J0aG9zIChzb3VzLXNvbHMgOTEtMTAwKScsXHJcbiAgICAgICdqYSc6ICfjgqrjg6vjg4jjg7vjgqjjgqbjg6zjgqsgQjkx772eQjEwMCcsXHJcbiAgICAgICdrbyc6ICfsl5DsmrDroIjsubQg7Jik66W07Yag7IqkIEI5MX5CMTAwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTA5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WtpuivhuWuneW6k+i/puW3tOWLkuW5u+aDs+WbvuS5pummhicsXHJcbiAgICAgICdkZSc6ICdHcm/Dn2UgR3ViYWwtQmlibGlvdGhlaycsXHJcbiAgICAgICdlbic6ICdUaGUgR3JlYXQgR3ViYWwgTGlicmFyeScsXHJcbiAgICAgICdmcic6ICdMYSBHcmFuZGUgYmlibGlvdGjDqHF1ZSBkZSBHdWJhbCcsXHJcbiAgICAgICdqYSc6ICfnpoHmm7jlm57lj44g44Kw44OW44Op5bm75oOz5Zuz5pu46aSoJyxcclxuICAgICAgJ2tvJzogJ+q1rOu4jOudvCDtmZjsg4Hrj4TshJzqtIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KGA5oiY6IuN56m56a2U56eR5a2m56CU56m25omAJyxcclxuICAgICAgJ2RlJzogJ8OEdGhlcm9jaGVtaXNjaGVzIEZvcjxTb2Z0SHlwaGVuLz5zY2h1bmdzPFNvZnRIeXBoZW4vPmxhYm9yJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBZXRoZXJvY2hlbWljYWwgUmVzZWFyY2ggRmFjaWxpdHknLFxyXG4gICAgICAnZnInOiAnTGUgTGFib3JhdG9pcmUgZGUgbWFnaXNtb2xvZ2llJyxcclxuICAgICAgJ2phJzogJ+iSvOWkqeiBluaIpiDprZTnp5HlrabnoJTnqbbmiYAnLFxyXG4gICAgICAna28nOiAn66eI6rO87ZWZIOyXsOq1rOyGjCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTgsXHJcbiAgICAnb2Zmc2V0WSc6IDE0OSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pif5rW356m66Ze06aKg5YCS5aGUJyxcclxuICAgICAgJ2RlJzogJ0FudGl0dXJtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBbnRpdG93ZXInLFxyXG4gICAgICAnZnInOiAnTFxcJ0FudGl0b3VyJyxcclxuICAgICAgJ2phJzogJ+aYn+a1t+ims+a4rCDpgIbjgZXjga7loZQnLFxyXG4gICAgICAna28nOiAn6rGw6r6466GcIOyEoCDtg5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp6b6Z5a6r5q6/5b+G572q5a6rJyxcclxuICAgICAgJ2RlJzogJ1NvaHIgS2hhaScsXHJcbiAgICAgICdlbic6ICdTb2hyIEtoYWknLFxyXG4gICAgICAnZnInOiAnU29ociBLaGFpJyxcclxuICAgICAgJ2phJzogJ+WkqeernOWuruauvyDjgr3jg7zjg6vjg7vjgqvjgqQnLFxyXG4gICAgICAna28nOiAn7IaM66W0IOy5tOydtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAzNzAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTEzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mZqeWzu+Wzoeiwt+WhnuWwlOazleeJueWwlOa6quiwtycsXHJcbiAgICAgICdkZSc6ICdYZWxwaGF0b2wnLFxyXG4gICAgICAnZW4nOiAnWGVscGhhdG9sJyxcclxuICAgICAgJ2ZyJzogJ1hlbHBoYXRvbCcsXHJcbiAgICAgICdqYSc6ICfls7vljrPmuJPosLcg44K844Or44OV44Kh44OI44OrJyxcclxuICAgICAgJ2tvJzogJ+ygpO2MjO2GqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTQ4LFxyXG4gICAgJ29mZnNldFknOiAzNSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICAxMTE0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WdmueJoumTgeWjgeW3tOWfg+iQqOmVv+WfjicsXHJcbiAgICAgICdkZSc6ICdCYWVsc2FyLVdhbGwnLFxyXG4gICAgICAnZW4nOiAnQmFlbHNhclxcJ3MgV2FsbCcsXHJcbiAgICAgICdmcic6ICdMYSBNdXJhaWxsZSBkZSBCYWVsc2FyJyxcclxuICAgICAgJ2phJzogJ+W3qOWkp+mYsuWjgSDjg5DjgqjjgrXjg6vjga7plbfln44nLFxyXG4gICAgICAna28nOiAn67CU7J287IKs66W0IOyepeyEsScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAxODIsXHJcbiAgICAnb2Zmc2V0WSc6IDMyLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MCxcclxuICB9LFxyXG4gIDExMTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5YWF5ruh5rS75Yqb55qE54i25a2QJyxcclxuICAgICAgJ2RlJzogJ1bDpHRlcmxpY2hlIExpZWJlJyxcclxuICAgICAgJ2VuJzogJ0dlbmVyYXRpb25hbCBCb25kaW5nJyxcclxuICAgICAgJ2ZyJzogJ1RlbCBnZW50aWxob21tZSwgdGVsIGdlbnRpbGhvbW1lJyxcclxuICAgICAgJ2phJzogJ+OBr+OBpOOCieOBpOOBqOOBl+OBn+imquWtkCcsXHJcbiAgICAgICdrbyc6ICfsnYDrsIDtlZwg7J2M66qoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0yMzAsXHJcbiAgICAnb2Zmc2V0WSc6IC0yNTAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTExNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnLrlhbPlpKfmrr8nLFxyXG4gICAgICAnZGUnOiAnRGllIE1lY2hhbmlzY2hlIE1lbmFnZXJpZScsXHJcbiAgICAgICdlbic6ICdUaGUgQ2xvY2t3b3JrIENhc3RsZXRvd24nLFxyXG4gICAgICAnZnInOiAnTGUgVHJhcXVlbmFyZCBvcmllbnRhbCcsXHJcbiAgICAgICdqYSc6ICfmnbHmlrnntaHnubDlvqHmrr8nLFxyXG4gICAgICAna28nOiAn64+Z67CpIOq8reuRkOqwgeyLnCDslrTsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05pm25Yay56qB77yI5py65YWz5aSn5q6/77ya6Ieq5a6a6LWb77yJJyxcclxuICAgICAgJ2RlJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0OiBEaWUgTWVjaGFuaXNjaGUgTWVuYWdlcmllIChTY2hhdWthbXBmKScsXHJcbiAgICAgICdlbic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAoQ3VzdG9tIE1hdGNoIC0gVGhlIENsb2Nrd29yayBDYXN0bGV0b3duKScsXHJcbiAgICAgICdmcic6ICdDcnlzLiBDb25mbGljdCAocGFydGllIHBlcnNvLiAtIExlIFRyYXF1ZW5hcmQgb3JpZW50YWwpJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCs+ODs+ODleODquOCr+ODiCjmnbHmlrnntaHnubDlvqHmrr/vvJrjgqvjgrnjgr/jg6Djg57jg4Pjg4EpJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DiOudvOyduCDsu6jtlIzrpq3tirgo64+Z67CpIOq8reuRkOqwgeyLnCDslrTsoIQ6IOy5nOyEoCDqsr3quLApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTE4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WWnOaCpuelnuWfn+asp+iKmea0m+e7qua2hScsXHJcbiAgICAgICdkZSc6ICdFdXBocm9zeW5lJyxcclxuICAgICAgJ2VuJzogJ0V1cGhyb3N5bmUnLFxyXG4gICAgICAnZnInOiAnRG9tYWluZSBkaXZpbiAtIEV1cGhyb3N5bmUnLFxyXG4gICAgICAnamEnOiAn5Zac44Gz44Gu56We5Z+fIOOCqOOCpuODl+ODreOCt+ODpeODjScsXHJcbiAgICAgICdrbyc6ICftmZjtnazsnZgg7Iug7JetIOyXkOyasO2UhOuhnOyLnOuEpCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiA0ODAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NyxcclxuICB9LFxyXG4gIDExMjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyq5paZ5oOz6L+H55qE5Lqk5piTJyxcclxuICAgICAgJ2RlJzogJ0RlciBXZXJ0IGVpbmVyIEJ1dWRzJyxcclxuICAgICAgJ2VuJzogJ0FuIFVuZm9yZXNlZW4gQmFyZ2FpbicsXHJcbiAgICAgICdmcic6ICdQb3VyIHVuZSBib3VjaMOpZSBkZSBwYWluJyxcclxuICAgICAgJ2phJzogJ+ODkeODs+OBsuOBqOOBpOOBqOW8leOBjeaPm+OBiOOBqycsXHJcbiAgICAgICdrbyc6ICfrubUg7ZWY64KY7JmAIOuwlOq+uOyWtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1OCxcclxuICB9LFxyXG4gIDExMjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57Si6I+y5aiF5bm75ben5oiYJyxcclxuICAgICAgJ2RlJzogJ1RyYXVtcHLDvGZ1bmcgLSBTb3BoaWEnLFxyXG4gICAgICAnZW4nOiAnQ29udGFpbm1lbnQgQmF5IFAxVDYgKFVucmVhbCknLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gUDFQNiAoaXJyw6llbCknLFxyXG4gICAgICAnamEnOiAn5bm75aWz56We44K944OV44Kj44Ki6KiO5ruF5oimJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY5LFxyXG4gIH0sXHJcbiAgMTEyMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjgsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE57ud5aKD6aqM6K+B5oiYJyxcclxuICAgICAgJ2RlJzogJ09tZWdhIChmYXRhbCknLFxyXG4gICAgICAnZW4nOiAnVGhlIE9tZWdhIFByb3RvY29sIChVbHRpbWF0ZSknLFxyXG4gICAgICAnZnInOiAnTGUgUHJvdG9jb2xlIE9tw6lnYSAoZmF0YWwpJyxcclxuICAgICAgJ2phJzogJ+e1tuOCquODoeOCrOaknOiovOaIpicsXHJcbiAgICAgICdrbyc6ICfsoIgg7Jik66mU6rCAIOqygOymneyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNTAsXHJcbiAgfSxcclxuICAxMTIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WOhOWwlOW6h+aWr+iCsuS9k+WuneauvycsXHJcbiAgICAgICdkZSc6ICdHeW1uYXNpb24gQWdvbm9uJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTaGlmdGluZyBHeW1uYXNpb24gQWdvbm9uJyxcclxuICAgICAgJ2ZyJzogJ0VscGlzIEd5bW5hc2lvbicsXHJcbiAgICAgICdqYSc6ICflrp3nianluqsg44Ko44Or44OU44K544O744Ku44Ol44Og44OK44K344Kq44Oz56Wt5q6/JyxcclxuICAgICAgJ2tvJzogJ+uztOusvOqzoCDsl5jtlLzsiqQg6rmA64KY7Iuc7JioIOygnOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTEyNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpl7TmrYfngbXms4nlk4jlp4blspsnLFxyXG4gICAgICAnZGUnOiAnw4R0aGVyYm9ybicsXHJcbiAgICAgICdlbic6ICdUaGUgQWV0aGVyZm9udCcsXHJcbiAgICAgICdmcic6ICdMXFwnw65sZSBkZSBIYWFtJyxcclxuICAgICAgJ2phJzogJ+aYn+mciumWk+asoCDjg4/jg7zjg6Dls7YnLFxyXG4gICAgICAna28nOiAn7ZWoIOyErCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAzNjgsXHJcbiAgICAnb2Zmc2V0WSc6IC0yNzcsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTM3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzMCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpJrlj5jov7flrqsg5YWt5qC55bGxJyxcclxuICAgICAgJ2RlJzogJ0RlciBSb2trb24nLFxyXG4gICAgICAnZW4nOiAnTW91bnQgUm9ra29uJyxcclxuICAgICAgJ2ZyJzogJ0xlIG1vbnQgUm9ra29uIC0gRG9uam9uIMOgIGVtYnJhbmNoZW1lbnRzJyxcclxuICAgICAgJ2phJzogJ+ODtOOCoeODquOCouODs+ODiOODgOODs+OCuOODp+ODsyDlha3moLnlsbEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTE0NSxcclxuICAgICdvZmZzZXRZJzogLTgyMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExMzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnRGllIFJvdGVuIFNhbmRlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBSZWQgU2FuZHMnLFxyXG4gICAgICAnZnInOiAnTGVzIFNhYmxlcyBzYW5nbGFudHMnLFxyXG4gICAgICAnamEnOiAn44Os44OD44OJ44O744K144Oz44K6JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTM5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0OiBEaWUgUm90ZW4gU2FuZGUgKFNjaGF1a2FtcGYpJyxcclxuICAgICAgJ2VuJzogJ0NyeXN0YWxsaW5lIENvbmZsaWN0IChDdXN0b20gTWF0Y2ggLSBUaGUgUmVkIFNhbmRzKScsXHJcbiAgICAgICdmcic6ICdDcnlzdGFsbGluZSBDb25mbGljdCAocGFydGllIHBlcnNvbm5hbGlzw6llIC0gTGVzIFNhYmxlcyBzYW5nbGFudHMpJyxcclxuICAgICAgJ2phJzogJ+OCr+ODquOCueOCv+ODq+OCs+ODs+ODleODquOCr+ODiCjjg6zjg4Pjg4njg7vjgrXjg7PjgrrvvJrjgqvjgrnjgr/jg6Djg57jg4Pjg4EpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMTQwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mrmOi0neaJjuatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdQcm9waGV0aWUgLSBHb2xiZXonLFxyXG4gICAgICAnZW4nOiAnVGhlIFZvaWRjYXN0IERhaXMnLFxyXG4gICAgICAnZnInOiAnTGEgQ2hhaXJlIGRlIGxcXCdFeGlsw6llJyxcclxuICAgICAgJ2phJzogJ+OCtOODq+ODmeODvOOCtuiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqs6jrsqDsnpAg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0OSxcclxuICB9LFxyXG4gIDExNDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6auY6LSd5omO5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ0VzY2hhdG9zIC0gR29sYmV6JyxcclxuICAgICAgJ2VuJzogJ1RoZSBWb2lkY2FzdCBEYWlzIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMYSBDaGFpcmUgZGUgbFxcJ0V4aWzDqWUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgrTjg6vjg5njg7zjgrboqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOqzqOuyoOyekCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ5LFxyXG4gIH0sXHJcbiAgMTE0Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmvILmtYHmtbfln5/lppbmrYzmtbcnLFxyXG4gICAgICAnZGUnOiAnU2lyZW5lbi1TZWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNpcmVuc29uZyBTZWEnLFxyXG4gICAgICAnZnInOiAnTGEgTWVyIGR1IENoYW50IGRlcyBzaXLDqG5lcycsXHJcbiAgICAgICdqYSc6ICfmvILmtYHmtbfln58g44K744Kk44Os44O844Oz5rW3JyxcclxuICAgICAgJ2tvJzogJ+yEuOydtOugjCDtlbQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzYsXHJcbiAgfSxcclxuICAxMTQzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ivleeCvOihjOi3r+W3tOWEv+i+vuacqOmcuOmBkycsXHJcbiAgICAgICdkZSc6ICdCYXJkYW1zIFByb2JlJyxcclxuICAgICAgJ2VuJzogJ0JhcmRhbVxcJ3MgTWV0dGxlJyxcclxuICAgICAgJ2ZyJzogJ0xhIEZvcmNlIGRlIEJhcmRhbScsXHJcbiAgICAgICdqYSc6ICfkvJ3ntbHoqabnt7Qg44OQ44Or44OA44Og6KaH6YGTJyxcclxuICAgICAgJ2tvJzogJ+uwlOultOuLtCDtjKjrj4QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExNDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Kej5pS+5Yaz5oiY5aSa546b546L5Z+OJyxcclxuICAgICAgJ2RlJzogJ0J1cmcgRG9tYScsXHJcbiAgICAgICdlbic6ICdEb21hIENhc3RsZScsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkZSBEb21hJyxcclxuICAgICAgJ2phJzogJ+ino+aUvuaxuuaIpiDjg4njg57ln44nLFxyXG4gICAgICAna28nOiAn64+E66eIIOyEsScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE0NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt6jngq7opoHloZ7luJ3lm73nmb3lsbHloKEnLFxyXG4gICAgICAnZGUnOiAnQ2FzdHJ1bSBBYmFuaWEnLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBBYmFuaWEnLFxyXG4gICAgICAnZnInOiAnQ2FzdHJ1bSBBYmFuaWEnLFxyXG4gICAgICAnamEnOiAn5beo56Cy6KaB5aGeIOOCq+OCueODiOODq+ODoOODu+OCouODkOODi+OCoicsXHJcbiAgICAgICdrbyc6ICfsubTsiqTtirjro7gg7JWE67CU64uI7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDcyLFxyXG4gICAgJ29mZnNldFknOiAtMTg2LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpj5bmiJjnuqLojrLpmL/mi4nnsbPmoLwnLFxyXG4gICAgICAnZGUnOiAnQWxhIE1oaWdvJyxcclxuICAgICAgJ2VuJzogJ0FsYSBNaGlnbycsXHJcbiAgICAgICdmcic6ICdBbGEgTWhpZ28nLFxyXG4gICAgICAnamEnOiAn57SF6JOu5rG65oimIOOCouODqeODn+OCtCcsXHJcbiAgICAgICdrbyc6ICfslYzrnbzrr7jqs6AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjkyLFxyXG4gICAgJ29mZnNldFknOiAtMTYzLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE0Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g6I2S5aSp5LmL54uxMScsXHJcbiAgICAgICdkZSc6ICdBbmFiYXNlaW9zIC0gTmV1bnRlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBbmFiYXNlaW9zOiBUaGUgTmludGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhcmFkaXMgZHUgUGFuZMOmbW9uaXVtIC0gTcOpdGVtcHN5Y29zZScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6DvvJrlpKnnjYTnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDsspzsmKXtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE0ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/kuIfprZTmrr8g6I2S5aSp5LmL54uxMScsXHJcbiAgICAgICdkZSc6ICdBbmFiYXNlaW9zIC0gTmV1bnRlciBLcmVpcyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbmFiYXNlaW9zOiBUaGUgTmludGggQ2lyY2xlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhcmFkaXMgZHUgUGFuZMOmbW9uaXVtIC0gTcOpdGVtcHN5Y29zZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og6Zu25byP77ya5aSp542E57eoMScsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog7LKc7Jil7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuIfprZTmrr8g6I2S5aSp5LmL54uxMicsXHJcbiAgICAgICdkZSc6ICdBbmFiYXNlaW9zIC0gWmVobnRlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBbmFiYXNlaW9zOiBUaGUgVGVudGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhcmFkaXMgZHUgUGFuZMOmbW9uaXVtIC0gTW9ub2Nocm9tZScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6DvvJrlpKnnjYTnt6gyJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDsspzsmKXtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMTUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbtuW8j+S4h+mtlOauvyDojZLlpKnkuYvni7EyJyxcclxuICAgICAgJ2RlJzogJ0FuYWJhc2Vpb3MgLSBaZWhudGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FuYWJhc2Vpb3M6IFRoZSBUZW50aCBDaXJjbGUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGUgUGFyYWRpcyBkdSBQYW5kw6Ztb25pdW0gLSBNb25vY2hyb21lIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6Dpm7blvI/vvJrlpKnnjYTnt6gyJyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDsspzsmKXtjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0NSxcclxuICB9LFxyXG4gIDExNTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LiH6a2U5q6/IOiNkuWkqeS5i+eLsTMnLFxyXG4gICAgICAnZGUnOiAnQW5hYmFzZWlvcyAtIEVsZnRlciBLcmVpcycsXHJcbiAgICAgICdlbic6ICdBbmFiYXNlaW9zOiBUaGUgRWxldmVudGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhcmFkaXMgZHUgUGFuZMOmbW9uaXVtIC0gVHJpYnVuYWwnLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og77ya5aSp542E57eoMycsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog7LKc7Jil7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ1LFxyXG4gIH0sXHJcbiAgMTE1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/kuIfprZTmrr8g6I2S5aSp5LmL54uxMycsXHJcbiAgICAgICdkZSc6ICdBbmFiYXNlaW9zIC0gRWxmdGVyIEtyZWlzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FuYWJhc2Vpb3M6IFRoZSBFbGV2ZW50aCBDaXJjbGUgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGUgUGFyYWRpcyBkdSBQYW5kw6Ztb25pdW0gLSBUcmlidW5hbCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og6Zu25byP77ya5aSp542E57eoMycsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog7LKc7Jil7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMTUzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4h+mtlOauvyDojZLlpKnkuYvni7E0JyxcclxuICAgICAgJ2RlJzogJ0FuYWJhc2Vpb3MgLSBad8O2bGZ0ZXIgS3JlaXMnLFxyXG4gICAgICAnZW4nOiAnQW5hYmFzZWlvczogVGhlIFR3ZWxmdGggQ2lyY2xlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhcmFkaXMgZHUgUGFuZMOmbW9uaXVtIC0gQXBvdGjDqW9zZScsXHJcbiAgICAgICdqYSc6ICfkuIfprZTmrr/jg5Hjg7Pjg4fjg6Ljg4vjgqbjg6DvvJrlpKnnjYTnt6g0JyxcclxuICAgICAgJ2tvJzogJ+uniOydmCDsoITri7kg7YyQ642w66qo64uI7JuAOiDsspzsmKXtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMTU0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbtuW8j+S4h+mtlOauvyDojZLlpKnkuYvni7E0JyxcclxuICAgICAgJ2RlJzogJ0FuYWJhc2Vpb3MgLSBad8O2bGZ0ZXIgS3JlaXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQW5hYmFzZWlvczogVGhlIFR3ZWxmdGggQ2lyY2xlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhcmFkaXMgZHUgUGFuZMOmbW9uaXVtIC0gQXBvdGjDqW9zZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5LiH6a2U5q6/44OR44Oz44OH44Oi44OL44Km44Og6Zu25byP77ya5aSp542E57eoNCcsXHJcbiAgICAgICdrbyc6ICfrp4jsnZgg7KCE64u5IO2MkOuNsOuqqOuLiOybgDog7LKc7Jil7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDUsXHJcbiAgfSxcclxuICAxMTU1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzMCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflvILpl7vov7flrqsg5byC6Ze75YWt5qC55bGxJyxcclxuICAgICAgJ2RlJzogJ0RlciBrdXJpb3NlIFJva2tvbicsXHJcbiAgICAgICdlbic6ICdBbm90aGVyIE1vdW50IFJva2tvbicsXHJcbiAgICAgICdmcic6ICdMZSBtb250IFJva2tvbiBhbm5leGUgLSBEb25qb24gYWx0ZXJuYXRpZicsXHJcbiAgICAgICdqYSc6ICfjgqLjg4rjgrbjg7zjg4Djg7Pjgrjjg6fjg7Mg55Ww6IGe5YWt5qC55bGxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDQwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NCxcclxuICB9LFxyXG4gIDExNTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W8gumXu+i/t+WuqyDpm7blvI/lvILpl7vlha3moLnlsbEnLFxyXG4gICAgICAnZGUnOiAnRGVyIGt1cmlvc2UgUm9ra29uIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0Fub3RoZXIgTW91bnQgUm9ra29uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlIG1vbnQgUm9ra29uIGFubmV4ZSAtIERvbmpvbiBhbHRlcm5hdGlmIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg4rjgrbjg7zjg4Djg7Pjgrjjg6fjg7Mg55Ww6IGe5YWt5qC55bGxIOmbtuW8jycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiA0MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzQsXHJcbiAgfSxcclxuICAxMTU3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elluWwlOWum+W5u+W3p+aImCcsXHJcbiAgICAgICdkZSc6ICdUcmF1bXByw7xmdW5nIC0gWnVydmFuJyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBaMVQ5IChVbnJlYWwpJyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFoxUDkgKGlycsOpZWwpJyxcclxuICAgICAgJ2phJzogJ+W5u+msvOelnuOCuuODq+ODr+ODvOODs+iojua7heaIpicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NSxcclxuICB9LFxyXG4gIDExNjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnTW9uZHVudGVyZ3J1bmQnLFxyXG4gICAgICAnZW4nOiAnVGhlIEx1bmFyIFN1YnRlcnJhbmUnLFxyXG4gICAgICAnZnInOiAnTGUgU291dGVycmFpbiBsdW5haXJlJyxcclxuICAgICAgJ2phJzogJ+a3sea3tea9nOihjCDmnIjjga7lnLDkuIvmuJPosLcnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNDQwLFxyXG4gICAgJ29mZnNldFknOiAxMzAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0OSxcclxuICB9LFxyXG4gIDExNjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ1N0b2xwZXJ2aWxsZScsXHJcbiAgICAgICdlbic6ICdCbHVuZGVydmlsbGUnLFxyXG4gICAgICAnZnInOiAnQmx1bmRlcnZpbGxlJyxcclxuICAgICAgJ2phJzogJ+ODluODqeODs+ODgOODvOODtOOCo+ODqycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMjAwLFxyXG4gICAgJ29mZnNldFknOiAtMTMzLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE2ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdQcm9waGV0aWUgLSBaZXJvbXVzJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBYnlzc2FsIEZyYWN0dXJlJyxcclxuICAgICAgJ2ZyJzogJ0xhIEZyYWN0dXJlIGFieXNzYWxlJyxcclxuICAgICAgJ2phJzogJ+OCvOODreODoOOCueiojua7heaIpicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDksXHJcbiAgfSxcclxuICAxMTY5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2RlJzogJ0VzY2hhdG9zIC0gWmVyb211cycsXHJcbiAgICAgICdlbic6ICdUaGUgQWJ5c3NhbCBGcmFjdHVyZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgRnJhY3R1cmUgYWJ5c3NhbGUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgrzjg63jg6DjgrnoqI7mu4XmiKYnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ5LFxyXG4gIH0sXHJcbiAgMTE3Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvkuqHlpKflnLDnu4jmnKvnhKblnJ8nLFxyXG4gICAgICAnZGUnOiAnRGFzIEthcmdsYW5kJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCdXJuJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdFc2NhcnJlJyxcclxuICAgICAgJ2phJzogJ+awuOS5heeEpuWcnyDjgrbjg7vjg5Djg7zjg7MnLFxyXG4gICAgICAna28nOiAn7JiB6rWsIOy0iO2GoOyngOuMgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5NyxcclxuICB9LFxyXG4gIDExNzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Zu95aKD6Ziy57q/5Z+65aeG5Yip54m55pqX5Yy6JyxcclxuICAgICAgJ2RlJzogJ0RpZSBHaGltbHl0LUZpbnN0ZXJuaXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEdoaW1seXQgRGFyaycsXHJcbiAgICAgICdmcic6ICdMZXMgVMOpbsOoYnJlcyBkZSBHaGltbHl0JyxcclxuICAgICAgJ2phJzogJ+Wig+eVjOaIpue3miDjgq7jg6Djg6rjg4jjg4Djg7zjgq8nLFxyXG4gICAgICAna28nOiAn6rmA66as7Yq4IO2ZqeyVvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE3NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdUcmF1bXByw7xmdW5nIC0gU2luZ3VsYXJpdMOkdHMtUmVha3RvcicsXHJcbiAgICAgICdlbic6ICdUaGUgU2luZ3VsYXJpdHkgUmVhY3RvciAoVW5yZWFsKScsXHJcbiAgICAgICdmcic6ICdMZSBSw6lhY3RldXIgZGUgc2luZ3VsYXJpdMOpIChpcnLDqWVsKScsXHJcbiAgICAgICdqYSc6ICflubvjg4rjgqTjg4Tjg7vjgqrjg5bjg7vjg6njgqbjg7Pjg4noqI7mu4XmiKYnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTYsXHJcbiAgfSxcclxuICAxMTc2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzMCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdkZSc6ICdBbG9hbG8nLFxyXG4gICAgICAnZW4nOiAnQWxvYWxvIElzbGFuZCcsXHJcbiAgICAgICdmcic6ICdMXFwnw65sZSBkXFwnQWxvYWxvIC0gRG9uam9uIMOgIGVtYnJhbmNoZW1lbnRzJyxcclxuICAgICAgJ2phJzogJ+ODtOOCoeODquOCouODs+ODiOODgOODs+OCuOODp+ODsyDjgqLjg63jgqLjg63ls7YnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTc4NSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDExNzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnVGhhbGVpYScsXHJcbiAgICAgICdlbic6ICdUaGFsZWlhJyxcclxuICAgICAgJ2ZyJzogJ0RvbWFpbmUgZGl2aW4gLSBUaGFsaWUnLFxyXG4gICAgICAnamEnOiAn6I+v44KB44GP56We5Z+fIOOCv+ODrOOCpOOCoicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA4MDAsXHJcbiAgICAnb2Zmc2V0WSc6IDc4MyxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ3LFxyXG4gIH0sXHJcbiAgMTE3OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMzAsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnS3VyaW9zZXMgQWxvYWxvJyxcclxuICAgICAgJ2VuJzogJ0Fub3RoZXIgQWxvYWxvIElzbGFuZCcsXHJcbiAgICAgICdmcic6ICdMXFwnw65sZSBkXFwnQWxvYWxvIGFubmV4ZSAtIERvbmpvbiBhbHRlcm5hdGlmJyxcclxuICAgICAgJ2phJzogJ+OCouODiuOCtuODvOODgOODs+OCuOODp+ODsyDnlbDogZ7jgqLjg63jgqLjg63ls7YnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTYwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTE4MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMzAsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnZGUnOiAnS3VyaW9zZXMgQWxvYWxvIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0Fub3RoZXIgQWxvYWxvIElzbGFuZCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMXFwnw65sZSBkXFwnQWxvYWxvIGFubmV4ZSAtIERvbmpvbiBhbHRlcm5hdGlmIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg4rjgrbjg7zjg4Djg7Pjgrjjg6fjg7Mg55Ww6IGe44Ki44Ot44Ki44Ot5bO2IOmbtuW8jycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtNjAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxMjg6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliKnlp4bokKjCt+e9l+aVj+iQqOS4iuWxgueUsuadvycsXHJcbiAgICAgICdkZSc6ICdPYmVyZSBEZWNrcycsXHJcbiAgICAgICdlbic6ICdMaW1zYSBMb21pbnNhIFVwcGVyIERlY2tzJyxcclxuICAgICAgJ2ZyJzogJ0xpbXNhIExvbWluc2EgLSBMZSBUaWxsYWMnLFxyXG4gICAgICAnamEnOiAn44Oq44Og44K144O744Ot44Of44Oz44K177ya5LiK55Sy5p2/5bGkJyxcclxuICAgICAgJ2tvJzogJ+umvOyCrCDroZzrr7zsgqwg7IOB7Li1IOqwke2MkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNCxcclxuICB9LFxyXG4gIDEyOToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WIqeWnhuiQqMK3572X5pWP6JCo5LiL5bGC55Sy5p2/JyxcclxuICAgICAgJ2RlJzogJ1VudGVyZSBEZWNrcycsXHJcbiAgICAgICdlbic6ICdMaW1zYSBMb21pbnNhIExvd2VyIERlY2tzJyxcclxuICAgICAgJ2ZyJzogJ0xpbXNhIExvbWluc2EgLSBMXFwnRW50cmVwb250JyxcclxuICAgICAgJ2phJzogJ+ODquODoOOCteODu+ODreODn+ODs+OCte+8muS4i+eUsuadv+WxpCcsXHJcbiAgICAgICdrbyc6ICfrprzsgqwg66Gc66+87IKsIO2VmOy4tSDqsJHtjJAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTUsXHJcbiAgfSxcclxuICAxMzA6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuYzlsJTovr7lk4jnjrDkuJblm57lu4onLFxyXG4gICAgICAnZGUnOiAnTmFsZC1LcmV1emdhbmcnLFxyXG4gICAgICAnZW4nOiAnVWxcXCdkYWggLSBTdGVwcyBvZiBOYWxkJyxcclxuICAgICAgJ2ZyJzogJ1VsXFwnZGFoIC0gRmF1Ym91cmcgZGUgTmFsZCcsXHJcbiAgICAgICdqYSc6ICfjgqbjg6vjg4Djg4/vvJrjg4rjg6vlm57lu4onLFxyXG4gICAgICAna28nOiAn7Jq464uk7ZWYIOuCoCDtmozrnpEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNyxcclxuICB9LFxyXG4gIDEzMToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S5jOWwlOi+vuWTiOadpeeUn+WbnuW7iicsXHJcbiAgICAgICdkZSc6ICdUaGFsLUtyZXV6Z2FuZycsXHJcbiAgICAgICdlbic6ICdVbFxcJ2RhaCAtIFN0ZXBzIG9mIFRoYWwnLFxyXG4gICAgICAnZnInOiAnVWxcXCdkYWggLSBGYXVib3VyZyBkZSBUaGFsJyxcclxuICAgICAgJ2phJzogJ+OCpuODq+ODgOODj++8muOCtuODq+WbnuW7iicsXHJcbiAgICAgICdrbyc6ICfsmrjri6TtlZgg64usIO2ajOuekScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4LFxyXG4gIH0sXHJcbiAgMTMyOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qC86YeM6L6+5bC85Lqa5paw6KGXJyxcclxuICAgICAgJ2RlJzogJ05ldS1HcmlkYW5pYScsXHJcbiAgICAgICdlbic6ICdOZXcgR3JpZGFuaWEnLFxyXG4gICAgICAnZnInOiAnTm91dmVsbGUgR3JpZGFuaWEnLFxyXG4gICAgICAnamEnOiAn44Kw44Oq44OA44OL44Ki77ya5paw5biC6KGXJyxcclxuICAgICAgJ2tvJzogJ+q3uOumrOuLpOuLiOyVhCDsi6Dsi5zqsIDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMSxcclxuICB9LFxyXG4gIDEzMzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+agvOmHjOi+vuWwvOS6muaXp+ihlycsXHJcbiAgICAgICdkZSc6ICdBbHQtR3JpZGFuaWEnLFxyXG4gICAgICAnZW4nOiAnT2xkIEdyaWRhbmlhJyxcclxuICAgICAgJ2ZyJzogJ1ZpZWlsbGUgR3JpZGFuaWEnLFxyXG4gICAgICAnamEnOiAn44Kw44Oq44OA44OL44Ki77ya5pen5biC6KGXJyxcclxuICAgICAgJ2tvJzogJ+q3uOumrOuLpOuLiOyVhCDqtazsi5zqsIDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMixcclxuICB9LFxyXG4gIDEzNDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4reaLieivuuilv+S6micsXHJcbiAgICAgICdkZSc6ICdaZW50cmFsZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ01pZGRsZSBMYSBOb3NjZWEnLFxyXG4gICAgICAnZnInOiAnTm9zY2VhIGNlbnRyYWxlJyxcclxuICAgICAgJ2phJzogJ+S4reWkruODqeODjuOCt+OCoicsXHJcbiAgICAgICdrbyc6ICfspJHrtoAg652864W47Iuc7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE2LFxyXG4gIH0sXHJcbiAgMTM1OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ouJ6K+66KW/5Lqa5L2O5ZywJyxcclxuICAgICAgJ2RlJzogJ1VudGVyZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ0xvd2VyIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdCYXNzZS1Ob3NjZWEnLFxyXG4gICAgICAnamEnOiAn5L2O5Zyw44Op44OO44K344KiJyxcclxuICAgICAgJ2tvJzogJ+yggOyngCDrnbzrhbjsi5zslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTcsXHJcbiAgfSxcclxuICAxMzY6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtbfpm77mnZEnLFxyXG4gICAgICAnZGUnOiAnRG9yZiBkZXMgTmViZWxzJyxcclxuICAgICAgJ2VuJzogJ01pc3QnLFxyXG4gICAgICAnZnInOiAnQnJ1bcOpZScsXHJcbiAgICAgICdqYSc6ICfjg5/jgrnjg4jjg7vjg7TjgqPjg6zjg4PjgrgnLFxyXG4gICAgICAna28nOiAn7JWI6rCv67mbIOuniOydhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNCxcclxuICB9LFxyXG4gIDEzNzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4nOaLieivuuilv+S6micsXHJcbiAgICAgICdkZSc6ICfDlnN0bGljaGVzIExhIE5vc2NlYScsXHJcbiAgICAgICdlbic6ICdFYXN0ZXJuIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdOb3NjZWEgb3JpZW50YWxlJyxcclxuICAgICAgJ2phJzogJ+adseODqeODjuOCt+OCoicsXHJcbiAgICAgICdrbyc6ICfrj5nrtoAg652864W47Iuc7JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE4LFxyXG4gIH0sXHJcbiAgMTM4OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KW/5ouJ6K+66KW/5LqaJyxcclxuICAgICAgJ2RlJzogJ1dlc3RsaWNoZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ1dlc3Rlcm4gTGEgTm9zY2VhJyxcclxuICAgICAgJ2ZyJzogJ05vc2NlYSBvY2NpZGVudGFsZScsXHJcbiAgICAgICdqYSc6ICfopb/jg6njg47jgrfjgqInLFxyXG4gICAgICAna28nOiAn7ISc67aAIOudvOuFuOyLnOyVhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxOSxcclxuICB9LFxyXG4gIDEzOToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieivuuilv+S6mumrmOWcsCcsXHJcbiAgICAgICdkZSc6ICdPYmVyZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ1VwcGVyIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdIYXV0ZS1Ob3NjZWEnLFxyXG4gICAgICAnamEnOiAn6auY5Zyw44Op44OO44K344KiJyxcclxuICAgICAgJ2tvJzogJ+qzoOyngCDrnbzrhbjsi5zslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjAsXHJcbiAgfSxcclxuICAxNDA6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfopb/okKjnurPlhbAnLFxyXG4gICAgICAnZGUnOiAnV2VzdGxpY2hlcyBUaGFuYWxhbicsXHJcbiAgICAgICdlbic6ICdXZXN0ZXJuIFRoYW5hbGFuJyxcclxuICAgICAgJ2ZyJzogJ1RoYW5hbGFuIG9jY2lkZW50YWwnLFxyXG4gICAgICAnamEnOiAn6KW/44K244OK44Op44O844OzJyxcclxuICAgICAgJ2tvJzogJ+yEnOu2gCDri6TrgqDrnoAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOSxcclxuICB9LFxyXG4gIDE0MToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S4reiQqOe6s+WFsCcsXHJcbiAgICAgICdkZSc6ICdaZW50cmFsZXMgVGhhbmFsYW4nLFxyXG4gICAgICAnZW4nOiAnQ2VudHJhbCBUaGFuYWxhbicsXHJcbiAgICAgICdmcic6ICdUaGFuYWxhbiBjZW50cmFsJyxcclxuICAgICAgJ2phJzogJ+S4reWkruOCtuODiuODqeODvOODsycsXHJcbiAgICAgICdrbyc6ICfspJHrtoAg64uk64Kg656AJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwLFxyXG4gIH0sXHJcbiAgMTQyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iJvueOm+WQieWonOadr+aWl+aKgOWkp+S8muWGs+i1mycsXHJcbiAgICAgICdkZSc6ICdEYXMgRHJhY2hlbmhhbHMtS29sb3NzZXVtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEcmFnb25cXCdzIE5lY2snLFxyXG4gICAgICAnZnInOiAnTGUgQ29sIGR1IGRyYWdvbicsXHJcbiAgICAgICdqYSc6ICfjgqLjg57jgrjjg4rmna/pl5jmioDkvJrmsbrli53miKYnLFxyXG4gICAgICAna28nOiAn7JWE66eI7KeA64KY67CwIO2IrOq4sOuMgO2ajCDqsrDsirnsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICcoNi4xKeeah+mDveS8iuS/ruWKoOW+t+S/neWNq+aImCcsXHJcbiAgICAgICdkZSc6ICcoNi4xKURlciBTY2hpY2tzYWxzd2VnJyxcclxuICAgICAgJ2VuJzogJyg2LjEpVGhlIFN0ZXBzIG9mIEZhaXRoJyxcclxuICAgICAgJ2ZyJzogJyg2LjEpTGUgU2nDqGdlIGRlIGxhIHNhaW50ZSBDaXTDqSBkXFwnSXNoZ2FyZCcsXHJcbiAgICAgICdqYSc6ICcoNi4xKeeah+mDveOCpOOCt+ODpeOCrOODq+ODiemYsuihm+aIpicsXHJcbiAgICAgICdrbyc6ICcoNi4xKeyEseuPhCDsnbTsiojqsIDrpbTrk5wg67Cp7Ja07KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTQ1OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lic6JCo57qz5YWwJyxcclxuICAgICAgJ2RlJzogJ8OWc3RsaWNoZXMgVGhhbmFsYW4nLFxyXG4gICAgICAnZW4nOiAnRWFzdGVybiBUaGFuYWxhbicsXHJcbiAgICAgICdmcic6ICdUaGFuYWxhbiBvcmllbnRhbCcsXHJcbiAgICAgICdqYSc6ICfmnbHjgrbjg4rjg6njg7zjg7MnLFxyXG4gICAgICAna28nOiAn64+Z67aAIOuLpOuCoOuegCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMSxcclxuICB9LFxyXG4gIDE0Njoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WNl+iQqOe6s+WFsCcsXHJcbiAgICAgICdkZSc6ICdTw7xkbGljaGVzIFRoYW5hbGFuJyxcclxuICAgICAgJ2VuJzogJ1NvdXRoZXJuIFRoYW5hbGFuJyxcclxuICAgICAgJ2ZyJzogJ1RoYW5hbGFuIG3DqXJpZGlvbmFsJyxcclxuICAgICAgJ2phJzogJ+WNl+OCtuODiuODqeODvOODsycsXHJcbiAgICAgICdrbyc6ICfrgqjrtoAg64uk64Kg656AJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEyLFxyXG4gIH0sXHJcbiAgMTQ3OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5YyX6JCo57qz5YWwJyxcclxuICAgICAgJ2RlJzogJ07DtnJkbGljaGVzIFRoYW5hbGFuJyxcclxuICAgICAgJ2VuJzogJ05vcnRoZXJuIFRoYW5hbGFuJyxcclxuICAgICAgJ2ZyJzogJ1RoYW5hbGFuIHNlcHRlbnRyaW9uYWwnLFxyXG4gICAgICAnamEnOiAn5YyX44K244OK44Op44O844OzJyxcclxuICAgICAgJ2tvJzogJ+u2geu2gCDri6TrgqDrnoAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTMsXHJcbiAgfSxcclxuICAxNDg6IHtcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu5HooaPmo67mnpfkuK3lpK7mnpfljLonLFxyXG4gICAgICAnZGUnOiAnVGllZmVyIFdhbGQnLFxyXG4gICAgICAnZW4nOiAnQ2VudHJhbCBTaHJvdWQnLFxyXG4gICAgICAnZnInOiAnRm9yw6p0IGNlbnRyYWxlJyxcclxuICAgICAgJ2phJzogJ+m7kuiho+ajru+8muS4reWkruajruaelycsXHJcbiAgICAgICdrbyc6ICfqsoDsnYDsnqXrp4kg7IiyIOykkeu2gOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzLFxyXG4gIH0sXHJcbiAgMTUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJyg2LjEp5bm76b6Z5q6L6aq45a+G57qm5LmL5aGUJyxcclxuICAgICAgJ2RlJzogJyg2LjEpSMO8dGVyIGRlcyBTZWVzJyxcclxuICAgICAgJ2VuJzogJyg2LjEpVGhlIEtlZXBlciBvZiB0aGUgTGFrZScsXHJcbiAgICAgICdmcic6ICcoNi4xKUxlIEdhcmRpZW4gZHUgbGFjJyxcclxuICAgICAgJ2phJzogJyg2LjEp5bm76b6N5q6L6aq4IOm7mee0hOOBruWhlCcsXHJcbiAgICAgICdrbyc6ICcoNi4xKeusteyVveydmCDtg5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzQsXHJcbiAgfSxcclxuICAxNTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05pm25aGUIOaal+S5i+S4lueVjCcsXHJcbiAgICAgICdkZSc6ICdEaWUgV2VsdCBkZXIgRHVua2VsaGVpdCcsXHJcbiAgICAgICdlbic6ICdUaGUgV29ybGQgb2YgRGFya25lc3MnLFxyXG4gICAgICAnZnInOiAnTGEgVG91ciBkZSBDcmlzdGFsIC0gTW9uZGUgZGVzIFTDqW7DqGJyZXMnLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Or44K/44Ov44O877ya6ZeH44Gu5LiW55WMJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DiCDtg4Dsm4w6IOyWtOuRoOydmCDshLjqs4QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE1Mjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7keiho+ajruael+S4nOmDqOael+WMuicsXHJcbiAgICAgICdkZSc6ICdPc3R3YWxkJyxcclxuICAgICAgJ2VuJzogJ0Vhc3QgU2hyb3VkJyxcclxuICAgICAgJ2ZyJzogJ0ZvcsOqdCBkZSBsXFwnZXN0JyxcclxuICAgICAgJ2phJzogJ+m7kuiho+ajru+8muadsemDqOajruaelycsXHJcbiAgICAgICdrbyc6ICfqsoDsnYDsnqXrp4kg7IiyIOuPmeu2gOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0LFxyXG4gIH0sXHJcbiAgMTUzOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buR6KGj5qOu5p6X5Y2X6YOo5p6X5Yy6JyxcclxuICAgICAgJ2RlJzogJ1PDvGR3YWxkJyxcclxuICAgICAgJ2VuJzogJ1NvdXRoIFNocm91ZCcsXHJcbiAgICAgICdmcic6ICdGb3LDqnQgZHUgc3VkJyxcclxuICAgICAgJ2phJzogJ+m7kuiho+ajru+8muWNl+mDqOajruaelycsXHJcbiAgICAgICdrbyc6ICfqsoDsnYDsnqXrp4kg7IiyIOuCqOu2gOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1LFxyXG4gIH0sXHJcbiAgMTU0OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6buR6KGj5qOu5p6X5YyX6YOo5p6X5Yy6JyxcclxuICAgICAgJ2RlJzogJ05vcmR3YWxkJyxcclxuICAgICAgJ2VuJzogJ05vcnRoIFNocm91ZCcsXHJcbiAgICAgICdmcic6ICdGb3LDqnQgZHUgbm9yZCcsXHJcbiAgICAgICdqYSc6ICfpu5LooaPmo67vvJrljJfpg6jmo67mnpcnLFxyXG4gICAgICAna28nOiAn6rKA7J2A7J6l66eJIOyIsiDrtoHrtoDsgrzrprwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNixcclxuICB9LFxyXG4gIDE1NToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W6k+WwlOacreaWr+S4reWkrumrmOWcsCcsXHJcbiAgICAgICdkZSc6ICdaZW50cmFsZXMgSG9jaGxhbmQgdm9uIENvZXJ0aGFzJyxcclxuICAgICAgJ2VuJzogJ0NvZXJ0aGFzIENlbnRyYWwgSGlnaGxhbmRzJyxcclxuICAgICAgJ2ZyJzogJ0hhdXRlcyB0ZXJyZXMgZHUgQ29lcnRoYXMgY2VudHJhbCcsXHJcbiAgICAgICdqYSc6ICfjgq/jg6vjgrbjgrnkuK3lpK7pq5jlnLAnLFxyXG4gICAgICAna28nOiAn7Luk66W064uk7IqkIOykkeyVmeqzoOyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMSxcclxuICB9LFxyXG4gIDE1Njoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aRqeadnOe6sycsXHJcbiAgICAgICdkZSc6ICdNb3IgRGhvbmEnLFxyXG4gICAgICAnZW4nOiAnTW9yIERob25hJyxcclxuICAgICAgJ2ZyJzogJ01vciBEaG9uYScsXHJcbiAgICAgICdqYSc6ICfjg6Ljg7zjg4njgqXjg4onLFxyXG4gICAgICAna28nOiAn66qo66W064+E64KYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIyLFxyXG4gIH0sXHJcbiAgMTU5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnueBteWco+Wfn+aUvua1quelnuWPpOelnuauvycsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVzIFdhbmRlcmVycycsXHJcbiAgICAgICdlbic6ICdUaGUgV2FuZGVyZXJcXCdzIFBhbGFjZScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZHUgVmFnYWJvbmQnLFxyXG4gICAgICAnamEnOiAn5peF56We6IGW5Z+fIOODr+ODs+ODgOODqeODvOODkeODrOOCuScsXHJcbiAgICAgICdrbyc6ICfrsKnrnpHsnpDsnZgg6raB7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aKG6Iiq5piO54Gv5aSp54u85pif54Gv5aGUJyxcclxuICAgICAgJ2RlJzogJ1BoYXJvcyBTaXJpdXMnLFxyXG4gICAgICAnZW4nOiAnUGhhcm9zIFNpcml1cycsXHJcbiAgICAgICdmcic6ICdMZSBQaGFyZSBkZSBTaXJpdXMnLFxyXG4gICAgICAnamEnOiAn5oCq6bOl5beo5aGUIOOCt+ODquOCpuOCueWkp+eBr+WPsCcsXHJcbiAgICAgICdrbyc6ICfsi5zrpqzsmrDsiqQg64yA65Ox64yAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOWFvemihuWfn+aXpeW9seWcsOS/rueCvOaJgCcsXHJcbiAgICAgICdkZSc6ICdIYWxhdGFsaScsXHJcbiAgICAgICdlbic6ICdIYWxhdGFsaScsXHJcbiAgICAgICdmcic6ICdIYWxhdGFsaScsXHJcbiAgICAgICdqYSc6ICfprZTnjaPpoJjln58g44OP44Op44K/44Oq5L+u57e05omAJyxcclxuICAgICAgJ2tvJzogJ+2VoOudvO2DiOumrCDsiJjroKjsnqUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE2Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflj6Tku6PpgZfov7nlloDmganln4vmsqHlnKPloIInLFxyXG4gICAgICAnZGUnOiAnVmVyc3Vua2VuZXIgVGVtcGVsIHZvbiBRYXJuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdW5rZW4gVGVtcGxlIG9mIFFhcm4nLFxyXG4gICAgICAnZnInOiAnTGUgVGVtcGxlIGVuc2V2ZWxpIGRlIFFhcm4nLFxyXG4gICAgICAnamEnOiAn6YG66Leh5o6i57SiIOOCq+ODq+ODs+Wfi+ayoeWvuumZoicsXHJcbiAgICAgICdrbyc6ICfsubTrpbjsnZgg66y064SI7KeEIOyCrOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTY3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCquaVmempu+WcsOaXoOmZkOWfjuWPpOWgoScsXHJcbiAgICAgICdkZSc6ICdEaWUgUnVpbmVuIHZvbiBBbWRhcG9yJyxcclxuICAgICAgJ2VuJzogJ0FtZGFwb3IgS2VlcCcsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkXFwnQW1kYXBvcicsXHJcbiAgICAgICdqYSc6ICfpgqrmlZnmjpLmkoMg5Y+k5Z+O44Ki44Og44OA44OX44O844OrJyxcclxuICAgICAgJ2tvJzogJ+yYmyDslZTri6Ttj6zrpbQg7ISxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMTcwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a1geaymei/t+Wuq+aotem4o+a0nicsXHJcbiAgICAgICdkZSc6ICdTw6RnZXJzY2hyZWknLFxyXG4gICAgICAnZW4nOiAnQ3V0dGVyXFwncyBDcnknLFxyXG4gICAgICAnZnInOiAnTGUgR291ZmZyZSBodXJsYW50JyxcclxuICAgICAgJ2phJzogJ+a1geeggui/t+WuriDjgqvjg4Pjgr/jg7zjgrrjgq/jg6njgqQnLFxyXG4gICAgICAna28nOiAn64KY66y06r687J2YIOu5hOuqhScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTcxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WxseS4reaImOe6v+azveaiheWwlOimgeWhnicsXHJcbiAgICAgICdkZSc6ICdEaWUgRmVzdGUgRHplbWFlbCcsXHJcbiAgICAgICdlbic6ICdEemVtYWVsIERhcmtob2xkJyxcclxuICAgICAgJ2ZyJzogJ0xhIEZvcnRlcmVzc2UgZGUgRHplbWFlbCcsXHJcbiAgICAgICdqYSc6ICfmjoPoqI7kvZzmiKYg44K844O844Oh44Or6KaB5aGeJyxcclxuICAgICAgJ2tvJzogJ+ygnOupnCDsmpTsg4gnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE3Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmr5Lpm77mtJ7nqp/pu4Tph5HosLcnLFxyXG4gICAgICAnZGUnOiAnR29sZGtsYW1tJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBdXJ1bSBWYWxlJyxcclxuICAgICAgJ2ZyJzogJ0xlIFZhbCBkXFwnQXVydW0nLFxyXG4gICAgICAnamEnOiAn6Zyn5Lit6KGM6LuNIOOCquODvOODqeODoOODtOOCp+OCpOODqycsXHJcbiAgICAgICdrbyc6ICfquIjruZsg6rOo7Kec6riwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxNzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05pm25aGUIOWPpOS7o+S6uui/t+WuqycsXHJcbiAgICAgICdkZSc6ICdLcmlzdGFsbHR1cm0gLSBEYXMgTGFieXJpbnRoIGRlciBBbHRlbicsXHJcbiAgICAgICdlbic6ICdUaGUgTGFieXJpbnRoIG9mIHRoZSBBbmNpZW50cycsXHJcbiAgICAgICdmcic6ICdMYSBUb3VyIGRlIENyaXN0YWwgLSBEw6lkYWxlIGFudGlxdWUnLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Or44K/44Ov44O877ya5Y+k5Luj44Gu5rCR44Gu6L+35a6uJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DiCDtg4Dsm4w6IOqzoOuMgOyduOydmCDrr7jqtoEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDE4MDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieivuuilv+S6muWkluWcsCcsXHJcbiAgICAgICdkZSc6ICfDhHXDn2VyZXMgTGEgTm9zY2VhJyxcclxuICAgICAgJ2VuJzogJ091dGVyIExhIE5vc2NlYScsXHJcbiAgICAgICdmcic6ICdOb3NjZWEgZXh0w6lyaWV1cmUnLFxyXG4gICAgICAnamEnOiAn5aSW5Zyw44Op44OO44K344KiJyxcclxuICAgICAgJ2tvJzogJ+yZuOyngCDrnbzrhbjsi5zslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjQsXHJcbiAgfSxcclxuICAxODg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2m6KOF5Zyj5Z+f5pS+5rWq56We5Y+k56We5q6/JyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXMgV2FuZGVyZXJzIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBXYW5kZXJlclxcJ3MgUGFsYWNlIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZHUgVmFnYWJvbmQgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5q2m6KOF6IGW5Z+fIOODr+ODs+ODgOODqeODvOODkeODrOOCuSAoSGFyZCknLFxyXG4gICAgICAna28nOiAn67Cp656R7J6Q7J2YIOq2geyghCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQwLFxyXG4gIH0sXHJcbiAgMTg5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCquW/teWmluWcsOaXoOmZkOWfjuWPpOWgoScsXHJcbiAgICAgICdkZSc6ICdEaWUgUnVpbmVuIHZvbiBBbWRhcG9yIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ0FtZGFwb3IgS2VlcCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgQ2jDonRlYXUgZFxcJ0FtZGFwb3IgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn6YKq5b+15o6S5pKDIOWPpOWfjuOCouODoOODgOODl+ODvOODqyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7JibIOyVlOuLpO2PrOultCDshLEo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MCxcclxuICB9LFxyXG4gIDE5MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICforqjkvJDlvbflvqjmrbvngbXvvIEnLFxyXG4gICAgICAnZGUnOiAnQm9ja21hbm5zIEdlZm9sZ2UnLFxyXG4gICAgICAnZW4nOiAnVW5kZXIgdGhlIEFybW9yJyxcclxuICAgICAgJ2ZyJzogJ0NoYXNzZSBhdSBmYW50w7RtZSBmYW50b2NoZScsXHJcbiAgICAgICdqYSc6ICflvbflvqjjgYbmrbvpnIrjgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn67Cp7Zmp7ZWY64qUIOyCrOugueydhCDsk7Drn6zrnKjroKTrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDMsXHJcbiAgfSxcclxuICAxOTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6amx6Zmk5Ymn5q+S5aaW6Iqx77yBJyxcclxuICAgICAgJ2RlJzogJ1Vua3JhdXQgasOkdGVuJyxcclxuICAgICAgJ2VuJzogJ1B1bGxpbmcgUG9pc29uIFBvc2llcycsXHJcbiAgICAgICdmcic6ICdPcMOpcmF0aW9uIGZsZXVycyBkdSBtYWwnLFxyXG4gICAgICAnamEnOiAn5pyJ5q+S5aaW6Iqx44KS6aeG6Zmk44Gb44KI77yBJyxcclxuICAgICAgJ2tvJzogJ+uPheyEsSDsmpTqtLTqvYPsnYQg7KCc6rGw7ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0LFxyXG4gIH0sXHJcbiAgMTkyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a2iOeBreaBtuW+kuWbouS8meWvhOeUn+icguWbou+8gScsXHJcbiAgICAgICdkZSc6ICdJbnMgV2VzcGVubmVzdCBzdGVjaGVuJyxcclxuICAgICAgJ2VuJzogJ1N0aW5naW5nIEJhY2snLFxyXG4gICAgICAnZnInOiAnRXhww6lkaXRpb24gcHVuaXRpdmUgY29udHJlIGxlcyBWZW50cmVyb3VnZScsXHJcbiAgICAgICdqYSc6ICfnhKHms5XogIXjgIzkvLzmiJHonILlm6PjgI3jgpLmkoPmu4XjgZvjgojvvIEnLFxyXG4gICAgICAna28nOiAn66y067KV7J6QIOynkeuLqCBcXCfrgpjrgpjri4jri6hcXCfsnYQg7ISs66m47ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1LFxyXG4gIH0sXHJcbiAgMTkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDnnJ/mupDkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMyAtIDEnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpbmFsIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMXFwnQWLDrm1lIGRlIEJhaGFtdXQgSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrnnJ/miJDnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOynhOyEse2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxOTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOecn+a6kOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAzIC0gMicsXHJcbiAgICAgICdlbic6ICdUaGUgRmluYWwgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAyJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBYsOubWUgZGUgQmFoYW11dCBJSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrnnJ/miJDnt6gyJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOynhOyEse2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAxOTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOecn+a6kOS5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAzIC0gMycsXHJcbiAgICAgICdlbic6ICdUaGUgRmluYWwgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBYsOubWUgZGUgQmFoYW11dCBJSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya55yf5oiQ57eoMycsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsp4TshLHtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMTk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDnnJ/mupDkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMyAtIDQnLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpbmFsIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gNCcsXHJcbiAgICAgICdmcic6ICdMXFwnQWLDrm1lIGRlIEJhaGFtdXQgSVYnLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya55yf5oiQ57eoNCcsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsp4TshLHtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNDQ4LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0NCxcclxuICB9LFxyXG4gIDIwNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICcoNi4xKeiOq+WPpOWKm+i0pOeOi+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICcoNi4xKUvDtm5pZ2xpY2hlIEtvbmZyb250YXRpb24gKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnKDYuMSlUaG9ybm1hcmNoIChIYXJkKScsXHJcbiAgICAgICdmcic6ICcoNi4xKUxhIExpc2nDqHJlIGRlIHJvbmNlcyAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICcoNi4xKeWWhOeOi+ODouOCsOODq+ODu+ODouOCsFhJSeS4luiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICcoNi4xKeyEoOyZlSDrqqjqt7jro6gg66qo6re4IFhJSeyEuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzAsXHJcbiAgfSxcclxuICAyMTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5a6M5oiQ6ZuG5Zui5oiY6K6t57uD77yBJyxcclxuICAgICAgJ2RlJzogJ0VpbmVyIGbDvHIgYWxsZSwgYWxsZSBmw7xyIGVpbmVuJyxcclxuICAgICAgJ2VuJzogJ0Jhc2ljIFRyYWluaW5nOiBFbmVteSBQYXJ0aWVzJyxcclxuICAgICAgJ2ZyJzogJ0VudHJhw65uZW1lbnQ8SW5kZW50Lz46IGdyb3VwZXMgZFxcJ2VubmVtaXMnLFxyXG4gICAgICAnamEnOiAn6ZuG5Zuj5oim6KiT57e044KS44GP44GQ44KK5oqc44GR44KN77yBJyxcclxuICAgICAgJ2tvJzogJ+ynkeuLqOyghCDtm4jroKjsnYQg7JmE7IiY7ZWY6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNixcclxuICB9LFxyXG4gIDIxNToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqoHnoLTmiYDmnInlhbPpl6jvvIzorqjkvJDmnIDmt7HlpITnmoTmlYzkurrvvIEnLFxyXG4gICAgICAnZGUnOiAnU3R1cm1rb21tYW5kbycsXHJcbiAgICAgICdlbic6ICdCYXNpYyBUcmFpbmluZzogRW5lbXkgU3Ryb25naG9sZHMnLFxyXG4gICAgICAnZnInOlxyXG4gICAgICAgICdFbnRyYcOubmVtZW50PEluZGVudC8+OiBpbjxTb2Z0SHlwaGVuLz5maWw8U29mdEh5cGhlbi8+dHJhPFNvZnRIeXBoZW4vPnRpb24gZW4gYmFzZSBlbm5lbWllJyxcclxuICAgICAgJ2phJzogJ+WFqOmWoumWgOOCkueqgeegtOOBl+OAgeacgOa3semDqOOBruaVteOCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfqtIDrrLjsnYQg64+M7YyM7ZWY6rOgIOy1nOyLrOu2gOydmCDsoIHsnYQg7JOw65+s65yo66Ck6528IScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5LFxyXG4gIH0sXHJcbiAgMjE2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aNleiOt+mHkeW4gem+n++8gScsXHJcbiAgICAgICdkZSc6ICdHaWwgb2RlciBMZWJlbicsXHJcbiAgICAgICdlbic6ICdIZXJvIG9uIHRoZSBIYWxmIFNoZWxsJyxcclxuICAgICAgJ2ZyJzogJ1JlY29ucXXDqnRlIGRcXCd1bmUgY2FyYXBhY2UgZXNjYW1vdMOpZScsXHJcbiAgICAgICdqYSc6ICfjgq7jg6vjgqzjg6HjgpLmjZXnjbLjgZvjgojvvIEnLFxyXG4gICAgICAna28nOiAn6ri46rGw67aB7J2EIOyCrOuhnOyeoeyVhOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAsXHJcbiAgfSxcclxuICAyMTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Ye75rqD5ZOl5biD5p6X54K45by55Yab5Zui77yBJyxcclxuICAgICAgJ2RlJzogJ0JvbWJpZ2UgR29ibGlucycsXHJcbiAgICAgICdlbic6ICdGbGlja2luZyBTdGlja3MgYW5kIFRha2luZyBOYW1lcycsXHJcbiAgICAgICdmcic6ICdMZXMgR29iZWxpbnMgYm9tYmFyZGllcnMnLFxyXG4gICAgICAnamEnOiAn54iG5by+6a2U44K044OW44Oq44Oz6LuN5Zuj44KS5pKD5ruF44Gb44KI77yBJyxcclxuICAgICAgJ2tvJzogJ+2Pre2DhOq0kSDqs6DruJTrprAg6rWw64uo7J2EIOyErOupuO2VmOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMyxcclxuICB9LFxyXG4gIDIyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICforqjkvJDmoqblubvkuYvluIPmi4nlpYfluIzlpaXvvIEnLFxyXG4gICAgICAnZGUnOiAnQnJpYXhpbyBhdXNzY2hhbHRlbicsXHJcbiAgICAgICdlbic6ICdBbGxcXCdzIFdlbGwgdGhhdCBFbmRzIGluIHRoZSBXZWxsJyxcclxuICAgICAgJ2ZyJzogJ0JyaWF4aW8gw6AgYnJhcyByYWNjb3VyY2lzJyxcclxuICAgICAgJ2phJzogJ+WkouW5u+OBruODluODqeOCreOCt+OCquOCkuiojuOBpu+8gScsXHJcbiAgICAgICdrbyc6ICfrqr3tmZjsnZgg67iM65287YGs7Iuc7Jik66W8IOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNSxcclxuICB9LFxyXG4gIDIyMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICforqjkvJDmsaHmn5PmupDlpLTprZTnlYzoirHvvIEnLFxyXG4gICAgICAnZGUnOiAnVMO2ZGxpY2hlcyBSYW5rZW5zcGllbCcsXHJcbiAgICAgICdlbic6ICdNb3JlIHRoYW4gYSBGZWVsZXInLFxyXG4gICAgICAnZnInOiAnU3VzIGF1IG1vcmJvbCBwb2xsdWV1cicsXHJcbiAgICAgICdqYSc6ICfmsZrmn5PmupDjg6Ljg6vjg5zjg6vjgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn7Jik7Je87JuQIOuqsOuzvOydhCDsk7Drn6zrnKjroKTrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIwLFxyXG4gIH0sXHJcbiAgMjIyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iuqOS8kOWdkemBk+S4reWHuueOsOeahOWmluW8gu+8gScsXHJcbiAgICAgICdkZSc6ICdHZWZhaHIgYXVzIGRlbSBOaWNodHMnLFxyXG4gICAgICAnZW4nOiAnQW5ub3kgdGhlIFZvaWQnLFxyXG4gICAgICAnZnInOiAnQnVzbyBsXFwnaW1tb2xhdGV1cicsXHJcbiAgICAgICdqYSc6ICflnZHpgZPjgavnj77jgozjgZ/lppbnlbDjg5bjgr3jgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn6rCx64+E7JeQIOuCmO2DgOuCnCDsmpTrp4gg67aA7IaM66W8IOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTcsXHJcbiAgfSxcclxuICAyMjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rOo5oSP5peg5pWM55qE55y35bGe77yM6K6o5LyQ5aSn5Z6L5aaW5byC77yBJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGdlZ2VuIFNjaGF0dGVuJyxcclxuICAgICAgJ2VuJzogJ1NoYWRvdyBhbmQgQ2xhdycsXHJcbiAgICAgICdmcic6ICdPbWJyZXMgZXQgZ3JpZmZlcycsXHJcbiAgICAgICdqYSc6ICfnhKHmlbXjga7nnLflsZ7jgpLlvpPjgYjjgZfjgIHlpKflnovlppbnlbDjgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn66y07KCB7J2YIOu2gO2VmOulvCDsobDsooXtlZjripQg7JqU66eI66W8IOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjEsXHJcbiAgfSxcclxuICAyNDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOmCgumAheS5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAxJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCaW5kaW5nIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMScsXHJcbiAgICAgICdmcic6ICdMZSBMYWJ5cmludGhlIGRlIEJhaGFtdXQgSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrpgoLpgIXnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IO2VtO2bhO2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAyNDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOmCgumAheS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCaW5kaW5nIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gMicsXHJcbiAgICAgICdmcic6ICdMZSBMYWJ5cmludGhlIGRlIEJhaGFtdXQgSUknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoMicsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjQzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDpgoLpgIXkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMycsXHJcbiAgICAgICdlbic6ICdUaGUgQmluZGluZyBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDMnLFxyXG4gICAgICAnZnInOiAnTGUgTGFieXJpbnRoZSBkZSBCYWhhbXV0IElJSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrpgoLpgIXnt6gzJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IO2VtO2bhO2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAyNDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOmCgumAheS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiA0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBCaW5kaW5nIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gNCcsXHJcbiAgICAgICdmcic6ICdMZSBMYWJ5cmludGhlIGRlIEJhaGFtdXQgSVYnLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoNCcsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDpgoLpgIXkuYvnq6A1JyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gNScsXHJcbiAgICAgICdlbic6ICdUaGUgQmluZGluZyBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDUnLFxyXG4gICAgICAnZnInOiAnTGUgTGFieXJpbnRoZSBkZSBCYWhhbXV0IFYnLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya6YKC6YCF57eoNScsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDtlbTtm4TtjrggNScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMjUwOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54u854ux5YGc6Ii55Zy6JyxcclxuICAgICAgJ2RlJzogJ1dvbGZzaMO2aGxlbi1QaWVyJyxcclxuICAgICAgJ2VuJzogJ1dvbHZlc1xcJyBEZW4gUGllcicsXHJcbiAgICAgICdmcic6ICdKZXTDqWUgZGUgbFxcJ0FudHJlIGRlcyBsb3VwcycsXHJcbiAgICAgICdqYSc6ICfjgqbjg6vjg7TjgrrjgrjjgqfjgqTjg6vkv4LoiLnloLQnLFxyXG4gICAgICAna28nOiAn64qR64yA7Jqw66asIOu2gOuRkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNzcsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI5LFxyXG4gIH0sXHJcbiAgMjgxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WIqee7tOS6muahkeatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIExldmlhdGhhbicsXHJcbiAgICAgICdlbic6ICdUaGUgPEVtcGhhc2lzPldob3JsZWF0ZXI8L0VtcGhhc2lzPiAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgQnJpc2V1ciBkZSBtYXLDqWVzIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+ecn+ODquODtOOCoeOCpOOCouOCteODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg66as67CU7J207Ja07ISgIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDI5Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrlvJfliKnnibnmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBJZnJpdCcsXHJcbiAgICAgICdlbic6ICdUaGUgQm93bCBvZiBFbWJlcnMgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIENyYXTDqHJlIGRlcyB0aXNvbnMgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44Kk44OV44Oq44O844OI6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDsnbTtlITrpqztirgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI1LFxyXG4gIH0sXHJcbiAgMjkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+azsOWdpuatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFRpdGFuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBOYXZlbCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgTm9tYnJpbCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnnJ/jgr/jgqTjgr/jg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIO2DgOydtO2DhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICAyOTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+m5qW8572X5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gR2FydWRhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIb3dsaW5nIEV5ZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnSHVybMWTaWwgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44Ks44Or44O844OA6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDqsIDro6jri6Qg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI2LFxyXG4gIH0sXHJcbiAgMjk1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iuW8l+WIqeeJueatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIElmcml0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBCb3dsIG9mIEVtYmVycyAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGUgQ3JhdMOocmUgZGVzIHRpc29ucyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteOCpOODleODquODvOODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7J207ZSE66as7Yq4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNSxcclxuICB9LFxyXG4gIDI5Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfms7DlnabmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBUaXRhbicsXHJcbiAgICAgICdlbic6ICdUaGUgTmF2ZWwgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIE5vbWJyaWwgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgr/jgqTjgr/jg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IO2DgOydtO2DhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICAyOTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+m5qW8572X5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gR2FydWRhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBIb3dsaW5nIEV5ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnSHVybMWTaWwgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgqzjg6vjg7zjg4DoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOqwgOujqOuLpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjYsXHJcbiAgfSxcclxuICAyOTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6K6o5LyQ54iG5by55oCq55qE5aWz546L77yBJyxcclxuICAgICAgJ2RlJzogJ01pc3MgQm9tYmFzdGljJyxcclxuICAgICAgJ2VuJzogJ0xvbmcgTGl2ZSB0aGUgUXVlZW4nLFxyXG4gICAgICAnZnInOiAnTG9uZ3VlIHZpZSDDoCBsYSBSZWluZScsXHJcbiAgICAgICdqYSc6ICfjg5zjg6DjgpLnjofjgYTjgovjgIzjg5zjg6Djgq/jgqTjg7zjg7PjgI3jgpLoqI7jgabvvIEnLFxyXG4gICAgICAna28nOiAn67SE7J2EIOqxsOuKkOumsCBcXCfrtIQg7Jes7JmVXFwn7J2EIOyTsOufrOucqOugpOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjEsXHJcbiAgfSxcclxuICAyOTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDMsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q2854Gt54m55q6K6Zi15Z6L55qE5aaW5byC77yBJyxcclxuICAgICAgJ2RlJzogJ1VuemVydHJlbm5saWNoJyxcclxuICAgICAgJ2VuJzogJ1dhcmQgVXAnLFxyXG4gICAgICAnZnInOiAnUXVpbnRldHRlcyBpbmZlcm5hdXgnLFxyXG4gICAgICAnamEnOiAn5LiN5rCX5ZGz44Gq6Zmj5b2i44KS57WE44KA5aaW55Ww44KS44Gb44KT5ruF44Gb44KI77yBJyxcclxuICAgICAgJ2tvJzogJ+u2iOq4uO2VnCDsp4TtmJXsnYQg7Kec64qUIOyalOuniOulvCDshKzrqbjtlZjrnbwhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIyLFxyXG4gIH0sXHJcbiAgMzAwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WItuatouS4ieaWuea3t+aImOeahOW3qOS6uuaXj++8jOWuiOS9j+mBl+eJqe+8gScsXHJcbiAgICAgICdkZSc6ICdXdWNodGlnZSBEcmVpZmFsdGlna2VpdCcsXHJcbiAgICAgICdlbic6ICdTb2xlbW4gVHJpbml0eScsXHJcbiAgICAgICdmcic6ICdUcmluaXTDqSBzaW5pc3RyZScsXHJcbiAgICAgICdqYSc6ICfkuInjgaTlt7Tjga7lt6jkurrml4/jgpLliLbjgZfjgIHpgbrnianjgpLlrojjgozvvIEnLFxyXG4gICAgICAna28nOiAn7IS4IOqxsOyduOyhseydhCDsoJzslZXtlZjsl6wg7Jyg66y87J2EIOyngOy8nOuCtOudvCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjIsXHJcbiAgfSxcclxuICAzNDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56m25p6B56We5YW15YGH5oOz5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ0hlbGRlbmxpZWQgdm9uIFVsdGltYScsXHJcbiAgICAgICdlbic6ICdUaGUgTWluc3RyZWxcXCdzIEJhbGxhZDogVWx0aW1hXFwncyBCYW5lJyxcclxuICAgICAgJ2ZyJzogJ0xlIGZsw6lhdSBkXFwnVWx0aW1hJyxcclxuICAgICAgJ2phJzogJ+eptualteW5u+aDsyDjgqLjg6vjg4bjg57jgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn6raB6re57J2YIO2ZmOyDgSDslYzthYzrp4gg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzMSxcclxuICB9LFxyXG4gIDM0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpqprkubHlnZHpgZPpk5zpk4Ppk5zlsbEnLFxyXG4gICAgICAnZGUnOiAnS3VwZmVyZ2xvY2tlbi1NaW5lIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ0NvcHBlcmJlbGwgTWluZXMgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNaW5lcyBkZSBDbG9jaGVjdWl2cmUgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn6aiS5Lmx5Z2R6YGTIOOCq+ODg+ODkeODvOODmeODq+mKheWxsSAoSGFyZCknLFxyXG4gICAgICAna28nOiAn6rWs66as7KKFIOq0keyCsCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oG254G15bqc6YK46Z2Z6K+t5bqE5ZutJyxcclxuICAgICAgJ2RlJzogJ0hhdWtrZS1IZXJyZW5oYXVzIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ0hhdWtrZSBNYW5vciAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgTWFub2lyIGRlcyBIYXVra2UgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5aaW55Ww5bGL5pW3IOODj+OCpuOCseOCv+W+oeeUqOmCuCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7ZWY7Jqw7LyA7YOAIOuzhOq2gSjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rS75Yqo5oyR5oiYMicsXHJcbiAgICAgICdkZSc6ICdFdmVudC1JbmhhbHQgMScsXHJcbiAgICAgICdlbic6ICdTcGVjaWFsIEV2ZW50IEknLFxyXG4gICAgICAnZnInOiAnRMOpZmkgc3DDqWNpYWwgSScsXHJcbiAgICAgICdqYSc6ICfjgqTjg5njg7Pjg4jnlKjjgrPjg7Pjg4bjg7Pjg4TvvJoxJyxcclxuICAgICAgJ2tvJzogJ+ydtOuypO2KuOyaqSDsnoTrrLQ6IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM1NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtLvliqjmjJHmiJgzJyxcclxuICAgICAgJ2RlJzogJ0V2ZW50LUluaGFsdCAyJyxcclxuICAgICAgJ2VuJzogJ1NwZWNpYWwgRXZlbnQgSUknLFxyXG4gICAgICAnZnInOiAnRMOpZmkgc3DDqWNpYWwgSUknLFxyXG4gICAgICAnamEnOiAn44Kk44OZ44Oz44OI55So44Kz44Oz44OG44Oz44OE77yaMicsXHJcbiAgICAgICdrbyc6ICfsnbTrsqTtirjsmqkg7J6E66y0OiAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMyxcclxuICB9LFxyXG4gIDM1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg5YWl5L615LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAxJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAxJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiO+8muS+teaUu+e3qDEnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM1Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnlpKfov7flrqsg5YWl5L615LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IC0gVHVybiAyJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrkvrXmlLvnt6gyJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOy5qOqzte2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMzU3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJueWkp+i/t+WuqyDlhaXkvrXkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMiAtIDMnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlY29uZCBDb2lsIG9mIEJhaGFtdXQgLSBUdXJuIDMnLFxyXG4gICAgICAnZnInOiAnTGVzIE3DqWFuZHJlcyBkZSBCYWhhbXV0IElJSScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jvvJrkvrXmlLvnt6gzJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOy5qOqzte2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m55aSn6L+35a6rIOWFpeS+teS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gNCcsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAtIFR1cm4gNCcsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSVYnLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI77ya5L615pS757eoNCcsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7XtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzU5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WIqee7tOS6muahkeatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIExldmlhdGhhbicsXHJcbiAgICAgICdlbic6ICdUaGUgPEVtcGhhc2lzPldob3JsZWF0ZXI8L0VtcGhhc2lzPiAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGUgQnJpc2V1ciBkZSBtYXLDqWVzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Oq44O044Kh44Kk44Ki44K144Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrpqzrsJTsnbTslrTshKAg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDM4LFxyXG4gIH0sXHJcbiAgMzYwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WJkeaWl+mihuWfn+aXpeW9seWcsOS/rueCvOaJgCcsXHJcbiAgICAgICdkZSc6ICdIYWxhdGFsaSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdIYWxhdGFsaSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnSGFsYXRhbGkgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5Ymj6ZeY6aCY5Z+fIOODj+ODqeOCv+ODquS/rue3tOaJgCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7ZWg65287YOI66asIOyImOugqOyepSjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6LSi5a6d5Lyg6K+056C06Iiw5bKbJyxcclxuICAgICAgJ2RlJzogJ1NjaGlmZmJyZWNoZXItSW5zZWwnLFxyXG4gICAgICAnZW4nOiAnSHVsbGJyZWFrZXIgSXNsZScsXHJcbiAgICAgICdmcic6ICdMXFwnw45sZSBkZSBDcsOodmVjYXLDqG5lJyxcclxuICAgICAgJ2phJzogJ+iyoeWuneS8neiqrCDjg4/jg6vjg5bjg6zjg7zjgqvjg7zjg7vjgqLjgqTjg6snLFxyXG4gICAgICAna28nOiAn64Kc7YyM7ISg7J2YIOyErCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e6t+S6ieimgeWcsOW4g+mbt+emj+a0m+WFi+aWr+mHjuiQpeWcsCcsXHJcbiAgICAgICdkZSc6ICdCcsO8bGx2b2x4XFwnIExhbmdyYXN0IChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ0JyYXlmbG94XFwncyBMb25nc3RvcCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgQml2b3VhYyBkZSBCcmF5ZmxveCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnm5/lj4vmlK/mj7Qg44OW44Os44Kk44OV44Ot44Kv44K544Gu6YeO5Za25ZywIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfruIzroIjsnbTtlIzroZ3siqTsnZgg7JW87JiB7KeAKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzcsXHJcbiAgfSxcclxuICAzNjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6IWQ5Z2P6YGX6L+55peg6ZmQ5Z+O5biC6KGX5Y+k6L+5JyxcclxuICAgICAgJ2RlJzogJ0hpc3RvcmlzY2hlcyBBbWRhcG9yJyxcclxuICAgICAgJ2VuJzogJ1RoZSBMb3N0IENpdHkgb2YgQW1kYXBvcicsXHJcbiAgICAgICdmcic6ICdMZXMgVmVzdGlnZXMgZGUgbGEgY2l0w6kgZFxcJ0FtZGFwb3InLFxyXG4gICAgICAnamEnOiAn6IWQ5pWX6YG66LehIOWPpOOCouODoOODgOODl+ODvOODq+W4guihlycsXHJcbiAgICAgICdrbyc6ICfsmJsg7JWU64uk7Y+s66W0IOyLnOqwgOyngCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MCxcclxuICB9LFxyXG4gIDM2NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfojqvlj6TlipvotKTnjovmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnS8O2bmlnbGljaGUgS29uZnJvbnRhdGlvbiAoZXh0cmVtKScsXHJcbiAgICAgICdlbic6ICdUaG9ybm1hcmNoIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMYSBMaXNpw6hyZSBkZSByb25jZXMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXnjovjg6LjgrDjg6vjg7vjg6LjgrBYSUnkuJboqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re57JmVIOuqqOq3uOujqCDrqqjqt7ggWElJ7IS4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzMCxcclxuICB9LFxyXG4gIDM2NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmv4DmiJjln47loZ7nn7PljavloZQnLFxyXG4gICAgICAnZGUnOiAnU3RlaW5lcm5lIFdhY2h0IChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdG9uZSBWaWdpbCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgVmlnaWxlIGRlIFBpZXJyZSAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfln47loZ7lparlm54g44K544OI44O844Oz44O044Kj44K444OrIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfrj4zrsKntjKgg6rK96rOE7LSI7IaMKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDIsXHJcbiAgfSxcclxuICAzNjY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSn5qGl5LiK55qE5Yaz5paXJyxcclxuICAgICAgJ2RlJzogJ0R1ZWxsIGF1ZiBkZXIgZ3Jvw59lbiBCcsO8Y2tlJyxcclxuICAgICAgJ2VuJzogJ0JhdHRsZSBvbiB0aGUgQmlnIEJyaWRnZScsXHJcbiAgICAgICdmcic6ICdBZmZyb250ZW1lbnQgc3VyIGxlIGdyYW5kIHBvbnQnLFxyXG4gICAgICAnamEnOiAn44Ku44Or44Ks44Oh44OD44K344Ol6KiO5LyQ5oimJyxcclxuICAgICAgJ2tvJzogJ+q4uOqwgOuplOyLnCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM2Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfoi4/phpLpgZfov7nlloDmganln4vmsqHlnKPloIInLFxyXG4gICAgICAnZGUnOiAnVmVyc3Vua2VuZXIgVGVtcGVsIHZvbiBRYXJuIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdW5rZW4gVGVtcGxlIG9mIFFhcm4gKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRlbXBsZSBlbnNldmVsaSBkZSBRYXJuIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+mBuui3oeaVkeaPtCDjgqvjg6vjg7Pln4vmsqHlr7rpmaIgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+y5tOuluOydmCDrrLTrhIjsp4Qg7IKs7JuQKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDEsXHJcbiAgfSxcclxuICAzNjg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q275YyW5aWH576O5ouJ6K6o5LyQ5oiYJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGdlZ2VuIGRpZSBEaG9ybWUtQ2hpbcOkcmEnLFxyXG4gICAgICAnZW4nOiAnQSBSZWxpYyBSZWJvcm46IHRoZSBDaGltZXJhJyxcclxuICAgICAgJ2ZyJzogJ0xhIGNoaW3DqHJlIGRob3JtZSBkdSBDb2VydGhhcycsXHJcbiAgICAgICdqYSc6ICfjg4njg6vjg6Djgq3jg57jgqTjg6noqI7kvJDmiKYnLFxyXG4gICAgICAna28nOiAn64+E66aEIO2CpOuniOydtOudvCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjEsXHJcbiAgfSxcclxuICAzNjk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rW35b635ouJ6K6o5LyQ5oiYJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGdlZ2VuIGRpZSBIeWRyYScsXHJcbiAgICAgICdlbic6ICdBIFJlbGljIFJlYm9ybjogdGhlIEh5ZHJhJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdoeWRyZSBkXFwnSGFsYXRhbGknLFxyXG4gICAgICAnamEnOiAn44OP44Kk44OJ44Op6KiO5LyQ5oimJyxcclxuICAgICAgJ2tvJzogJ+2VmOydtOuTnOudvCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM3MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICcoNi4xKeWHm+WGvea0nuWkqeaKq+mbquWkp+WGsOWjgScsXHJcbiAgICAgICdkZSc6ICcoNi4xKURhcyBTY2huZWVrbGVpZCcsXHJcbiAgICAgICdlbic6ICcoNi4xKVNub3djbG9haycsXHJcbiAgICAgICdmcic6ICcoNi4xKU1hbnRlbmVpZ2UnLFxyXG4gICAgICAnamEnOiAnKDYuMSnmsLfntZDmvZznqp8g44K544OO44O844Kv44Ot44O844Kv5aSn5rC35aOBJyxcclxuICAgICAgJ2tvJzogJyg2LjEp7Ja87J2M7Jm47YisIOuMgOu5meuyvScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0MixcclxuICB9LFxyXG4gIDM3Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsLTmmbbloZQg5biM5bCU56eR5pav5aGUJyxcclxuICAgICAgJ2RlJzogJ0tyaXN0YWxsdHVybSAtIERlciBTeXJjdXMtVHVybScsXHJcbiAgICAgICdlbic6ICdTeXJjdXMgVG93ZXInLFxyXG4gICAgICAnZnInOiAnTGEgVG91ciBkZSBDcmlzdGFsIC0gVG91ciBkZSBTeXJjdXMnLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Or44K/44Ov44O877ya44K344Or44Kv44K544Gu5aGUJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DiCDtg4Dsm4w6IOyLnOultOy/oOyKpCDtg5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM3Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmg6jliafngbXmrr/loZTlp4bCt+WhlOaLieWik+WbrScsXHJcbiAgICAgICdkZSc6ICdUb3RlbmFja2VyIFRhbS1UYXJhIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBUYW3igJNUYXJhIERlZXBjcm9mdCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTFxcJ0h5cG9nw6llIGRlIFRhbS1UYXJhIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+aDqOWKh+mciuauvyDjgr/jg6Djgr/jg6njga7lopPmiYAgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+2DkO2DgOudvCDrrJjshowo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAzMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzc0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieWnhuatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFJhbXVoJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdHJpa2luZyBUcmVlIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMXFwnQXJicmUgZHUganVnZW1lbnQgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44Op44Og44Km6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDrnbzrrLQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQzLFxyXG4gIH0sXHJcbiAgMzc1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieWnhuatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFJhbXVoJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTdHJpa2luZyBUcmVlIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMXFwnQXJicmUgZHUganVnZW1lbnQgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg6njg6DjgqboqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOudvOustCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDMsXHJcbiAgfSxcclxuICAzNzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDYsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ZGo6L656YGX6L+5576k77yI6Zi15Zyw5oiY77yJJyxcclxuICAgICAgJ2RlJzogJ8OEdcOfZXJlIFJ1aW5lbiAoU2ljaGVydW5nKScsXHJcbiAgICAgICdlbic6ICdUaGUgQm9yZGVybGFuZCBSdWlucyAoU2VjdXJlKScsXHJcbiAgICAgICdmcic6ICdMZXMgUnVpbmVzIGZyb250YWxpw6hyZXMgKGFubmV4aW9uKScsXHJcbiAgICAgICdqYSc6ICflpJbnuIHpgbrot6HnvqQgKOWItuWcp+aIpiknLFxyXG4gICAgICAna28nOiAn7Jm46rO9IOycoOyggeyngOuMgCjsoJzslZXsoIQpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzNzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5biM55Om5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gU2hpdmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIEFraCBBZmFoIEFtcGhpdGhlYXRyZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTFxcJ0FtcGhpdGjDqcOidHJlIGRcXCdBa2ggQWZhaCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnnJ/jgrfjg7TjgqHoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIOyLnOuwlCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICAzNzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5biM55Om5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gU2hpdmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIEFraCBBZmFoIEFtcGhpdGhlYXRyZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ0FtcGhpdGjDqcOidHJlIGRcXCdBa2ggQWZhaCAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteOCt+ODtOOCoeiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7Iuc67CUIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0NixcclxuICB9LFxyXG4gIDM4MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnpm7blvI/lpKfov7flrqsg5YWl5L615LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAxIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IChTYXZhZ2UpIC0gVHVybiAxJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICflpKfov7flrq7jg5Djg4/jg6Djg7zjg4jpm7blvI/vvJrkvrXmlLvnt6gxJyxcclxuICAgICAgJ2tvJzogJ+uMgOuvuOq2gSDrsJTtlZjrrLTtirg6IOy5qOqzte2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM4MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflt7Tlk4jlp4bnibnpm7blvI/lpKfov7flrqsg5YWl5L615LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdWZXJzY2hsdW5nZW5lIFNjaGF0dGVuIDIgLSAyIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTZWNvbmQgQ29pbCBvZiBCYWhhbXV0IChTYXZhZ2UpIC0gVHVybiAyJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNw6lhbmRyZXMgZGUgQmFoYW11dCBJSSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI6Zu25byP77ya5L615pS757eoMicsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7Xtjrgo7JiB7JuFKSAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgMzgyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJuembtuW8j+Wkp+i/t+WuqyDlhaXkvrXkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ1ZlcnNjaGx1bmdlbmUgU2NoYXR0ZW4gMiAtIDMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlY29uZCBDb2lsIG9mIEJhaGFtdXQgKFNhdmFnZSkgLSBUdXJuIDMnLFxyXG4gICAgICAnZnInOiAnTGVzIE3DqWFuZHJlcyBkZSBCYWhhbXV0IElJSSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5aSn6L+35a6u44OQ44OP44Og44O844OI6Zu25byP77ya5L615pS757eoMycsXHJcbiAgICAgICdrbyc6ICfrjIDrr7jqtoEg67CU7ZWY66y07Yq4OiDsuajqs7Xtjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICAzODM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5be05ZOI5aeG54m56Zu25byP5aSn6L+35a6rIOWFpeS+teS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnVmVyc2NobHVuZ2VuZSBTY2hhdHRlbiAyIC0gNCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdUaGUgU2Vjb25kIENvaWwgb2YgQmFoYW11dCAoU2F2YWdlKSAtIFR1cm4gNCcsXHJcbiAgICAgICdmcic6ICdMZXMgTcOpYW5kcmVzIGRlIEJhaGFtdXQgSVYgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+Wkp+i/t+WuruODkOODj+ODoOODvOODiOmbtuW8j++8muS+teaUu+e3qDQnLFxyXG4gICAgICAna28nOiAn64yA66+46raBIOuwlO2VmOustO2KuDog7Lmo6rO17Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzg3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mAhui9rOimgeWus+aymeaWr+WhlOWkj+a6tua0nicsXHJcbiAgICAgICdkZSc6ICdTYXN0YXNoYSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdTYXN0YXNoYSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnU2FzdGFzaGEgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn6YCG6KWy6KaB5a6zIOOCteOCueOCv+OCt+ODo+a1uOmjn+a0niAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7IKs7Iqk7YOA7IOkIOy5qOyLnSDrj5nqtbQo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzg5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpmYbooYzpuJ/nq57otZvvvJrlpKrpmLPmtbflsrgnLFxyXG4gICAgICAnZGUnOiAnQ2hvY29iby1SZW5uZW46IFNvbm5lbmvDvHN0ZScsXHJcbiAgICAgICdlbic6ICdDaG9jb2JvIFJhY2U6IENvc3RhIGRlbCBTb2wnLFxyXG4gICAgICAnZnInOiAnQ291cnNlIGRlIGNob2NvYm9zPEluZGVudC8+OiBDb3N0YSBkZWwgU29sJyxcclxuICAgICAgJ2phJzogJ+ODgeODp+OCs+ODnOODrOODvOOCue+8muOCs+OCueOCv+ODu+ODh+ODq+ODu+OCveODqycsXHJcbiAgICAgICdrbyc6ICfstIjsvZTrs7Qg6rK97KO8OiDsvZTsiqTtg4Ag6424IOyGlCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNDcyLFxyXG4gICAgJ29mZnNldFknOiAtNDI0LFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgMzkwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpmYbooYzpuJ/nq57otZvvvJrojZLph47lpKfpgZMnLFxyXG4gICAgICAnZGUnOiAnQ2hvY29iby1SZW5uZW46IFNhZ29saWktU3RyYcOfZScsXHJcbiAgICAgICdlbic6ICdDaG9jb2JvIFJhY2U6IFNhZ29saWkgUm9hZCcsXHJcbiAgICAgICdmcic6ICdDb3Vyc2UgZGUgY2hvY29ib3M8SW5kZW50Lz46IFJvdXRlIGRlIFNhZ29saWknLFxyXG4gICAgICAnamEnOiAn44OB44On44Kz44Oc44Os44O844K577ya44K144K044Oq44O844Ot44O844OJJyxcclxuICAgICAgJ2tvJzogJ+y0iOy9lOuztCDqsr3so7w6IOyCrOqzqOumrCDsgqzrp4knLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM5MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6ZmG6KGM6bif56ue6LWb77ya5oGs6Z2Z5bCP6LevJyxcclxuICAgICAgJ2RlJzogJ0Nob2NvYm8tUmVubmVuOiBQZmFkIGRlciBTZWVsZW5ydWhlJyxcclxuICAgICAgJ2VuJzogJ0Nob2NvYm8gUmFjZTogVHJhbnF1aWwgUGF0aHMnLFxyXG4gICAgICAnZnInOiAnQ291cnNlIGRlIGNob2NvYm9zPEluZGVudC8+OiBTZW50ZXMgdHJhbnF1aWxsZXMnLFxyXG4gICAgICAnamEnOiAn44OB44On44Kz44Oc44Os44O844K577ya44OI44Op44Oz44Kt44Or44OR44K5JyxcclxuICAgICAgJ2tvJzogJ+y0iOy9lOuztCDqsr3so7w6IOqzoOyalO2VnCDslbzsmIHsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDM5NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpaXkuIHmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnSmVuc2VpdHMgVXJ0aHMgUXVlbGxlJyxcclxuICAgICAgJ2VuJzogJ1VydGhcXCdzIEZvdW50JyxcclxuICAgICAgJ2ZyJzogJ0xhIEZvbnRhaW5lIGRcXCdVcnRoJyxcclxuICAgICAgJ2phJzogJ+mXmOelnuOCquODvOODh+OCo+ODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICftiKzsi6Ag7Jik65SYIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0NSxcclxuICB9LFxyXG4gIDM5Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfml6DpmZDln47nmoTmrbvmlpcnLFxyXG4gICAgICAnZGUnOiAnUmV2YW5jaGUgaW4gZGVuIFJ1aW5lbicsXHJcbiAgICAgICdlbic6ICdCYXR0bGUgaW4gdGhlIEJpZyBLZWVwJyxcclxuICAgICAgJ2ZyJzogJ1JldmFuY2hlIGF1IHZpZXV4IGNow6J0ZWF1JyxcclxuICAgICAgJ2phJzogJ+ecn+OCruODq+OCrOODoeODg+OCt+ODpeiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsp4Qg6ri46rCA66mU7IucIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDM5Nzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W6k+WwlOacreaWr+ilv+mDqOmrmOWcsCcsXHJcbiAgICAgICdkZSc6ICdXZXN0bGljaGVzIEhvY2hsYW5kIHZvbiBDb2VydGhhcycsXHJcbiAgICAgICdlbic6ICdDb2VydGhhcyBXZXN0ZXJuIEhpZ2hsYW5kcycsXHJcbiAgICAgICdmcic6ICdIYXV0ZXMgdGVycmVzIGR1IENvZXJ0aGFzIG9jY2lkZW50YWwnLFxyXG4gICAgICAnamEnOiAn44Kv44Or44K244K56KW/6YOo6auY5ZywJyxcclxuICAgICAgJ2tvJzogJ+y7pOultOuLpOyKpCDshJzrtoDqs6Dsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0OSxcclxuICB9LFxyXG4gIDM5ODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m+meWgoeWPguWkqemrmOWcsCcsXHJcbiAgICAgICdkZSc6ICdEcmF2YW5pc2NoZXMgVm9ybGFuZCcsXHJcbiAgICAgICdlbic6ICdUaGUgRHJhdmFuaWFuIEZvcmVsYW5kcycsXHJcbiAgICAgICdmcic6ICdBdmFudC1wYXlzIGRyYXZhbmllbicsXHJcbiAgICAgICdqYSc6ICfpq5jlnLDjg4njg6njg7TjgqHjg4vjgqInLFxyXG4gICAgICAna28nOiAn6rOg7KeAIOuTnOudvOuwlOuLiOyVhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA5NSxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDUwLFxyXG4gIH0sXHJcbiAgMzk5OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6b6Z5aCh5YaF6ZmG5L2O5ZywJyxcclxuICAgICAgJ2RlJzogJ0RyYXZhbmlzY2hlcyBIaW50ZXJsYW5kJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEcmF2YW5pYW4gSGludGVybGFuZHMnLFxyXG4gICAgICAnZnInOiAnQXJyacOocmUtcGF5cyBkcmF2YW5pZW4nLFxyXG4gICAgICAnamEnOiAn5L2O5Zyw44OJ44Op44O044Kh44OL44KiJyxcclxuICAgICAgJ2tvJzogJ+yggOyngCDrk5zrnbzrsJTri4jslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1MSxcclxuICB9LFxyXG4gIDQwMDoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e/u+S6kembvua1tycsXHJcbiAgICAgICdkZSc6ICdXYWxsZW5kZSBOZWJlbCcsXHJcbiAgICAgICdlbic6ICdUaGUgQ2h1cm5pbmcgTWlzdHMnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OJY3VtZSBkZXMgY2lldXggZGUgRHJhdmFuaWEnLFxyXG4gICAgICAnamEnOiAn44OJ44Op44O044Kh44OL44Ki6Zuy5rW3JyxcclxuICAgICAgJ2tvJzogJ+uTnOudvOuwlOuLiOyVhCDqtazrpoTrsJTri6QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1MixcclxuICB9LFxyXG4gIDQwMToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mYv+W3tOaLieaPkOS6muS6kea1tycsXHJcbiAgICAgICdkZSc6ICdBYmFsYXRoaXNjaGVzIFdvbGtlbm1lZXInLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlYSBvZiBDbG91ZHMnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OJY3VtZSBkZXMgY2lldXggZFxcJ0FiYWxhdGhpYScsXHJcbiAgICAgICdqYSc6ICfjgqLjg5Djg6njgrfjgqLpm7LmtbcnLFxyXG4gICAgICAna28nOiAn7JWE67Cc65287Iuc7JWEIOq1rOumhOuwlOuLpCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA5NSxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDUzLFxyXG4gIH0sXHJcbiAgNDAyOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6a2U5aSn6ZmG6Zi/5rWO5YW55ouJJyxcclxuICAgICAgJ2RlJzogJ0F6eXMgTGxhJyxcclxuICAgICAgJ2VuJzogJ0F6eXMgTGxhJyxcclxuICAgICAgJ2ZyJzogJ0F6eXMgTGxhJyxcclxuICAgICAgJ2phJzogJ+OCouOCuOOCueODu+ODqeODvCcsXHJcbiAgICAgICdrbyc6ICfslYTsp4DsiqQg6528JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTQsXHJcbiAgfSxcclxuICA0MDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Iux6ZuE5b2S5p2lJyxcclxuICAgICAgJ2RlJzogJ1ZlcnJhdCBkZXIgUWFseWFuYScsXHJcbiAgICAgICdlbic6ICdSZXR1cm4gb2YgdGhlIEJ1bGwnLFxyXG4gICAgICAnZnInOiAnUmV0b3VyIGF1IGJlcmNhaWwnLFxyXG4gICAgICAnamEnOiAn6Iux6ZuE44Gu5biw6YKEJyxcclxuICAgICAgJ2tvJzogJ+yYgeybheydmCDqt4DtmZgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTI1MCxcclxuICAgICdvZmZzZXRZJzogMTI4LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDE2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WtpuivhuWuneW6k+i/puW3tOWLkuW5u+aDs+WbvuS5pummhicsXHJcbiAgICAgICdkZSc6ICdHcm/Dn2UgR3ViYWwtQmlibGlvdGhlaycsXHJcbiAgICAgICdlbic6ICdUaGUgR3JlYXQgR3ViYWwgTGlicmFyeScsXHJcbiAgICAgICdmcic6ICdMYSBHcmFuZGUgYmlibGlvdGjDqHF1ZSBkZSBHdWJhbCcsXHJcbiAgICAgICdqYSc6ICfnpoHmm7jlm57lj44g44Kw44OW44Op5bm75oOz5Zuz5pu46aSoJyxcclxuICAgICAgJ2tvJzogJ+q1rOu4jOudvCDtmZjsg4Hrj4TshJzqtIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQxNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6ZmG6KGM6bif56ue6LWb77ya56ue6LWb5pWZ5a2mJyxcclxuICAgICAgJ2RlJzogJ0Nob2NvYm8tUmVubmVuOiDDnGJ1bmdzYmFobicsXHJcbiAgICAgICdlbic6ICdDaG9jb2JvIFJhY2U6IFR1dG9yaWFsJyxcclxuICAgICAgJ2ZyJzogJ0NvdXJzZSBkXFwnYXBwZW50aXNzYWdlJyxcclxuICAgICAgJ2phJzogJ+ODgeODp+OCs+ODnOODrOODvOOCue+8muODgeODpeODvOODiOODquOCouODqycsXHJcbiAgICAgICdrbyc6ICfstIjsvZTrs7Qg6rK97KO8OiDtipzthqDrpqzslrwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTY5MCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQxODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iuS/ruWKoOW+t+WfuuehgOWxgicsXHJcbiAgICAgICdkZSc6ICdGdW5kYW1lbnRlJyxcclxuICAgICAgJ2VuJzogJ0ZvdW5kYXRpb24nLFxyXG4gICAgICAnZnInOiAnSXNoZ2FyZCAtIExcXCdBc3Npc2UnLFxyXG4gICAgICAnamEnOiAn44Kk44K344Ol44Ks44Or44OJ77ya5LiL5bGkJyxcclxuICAgICAgJ2tvJzogJ+ydtOyKiOqwgOultOuTnCDtlZjsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDcsXHJcbiAgfSxcclxuICA0MTk6IHtcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrkv67liqDlvrfnoKXmn7HlsYInLFxyXG4gICAgICAnZGUnOiAnU3RyZWJld2VyaycsXHJcbiAgICAgICdlbic6ICdUaGUgUGlsbGFycycsXHJcbiAgICAgICdmcic6ICdJc2hnYXJkIC0gTGVzIENvbnRyZWZvcnRzJyxcclxuICAgICAgJ2phJzogJ+OCpOOCt+ODpeOCrOODq+ODie+8muS4iuWxpCcsXHJcbiAgICAgICdrbyc6ICfsnbTsiojqsIDrpbTrk5wg7IOB7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQ4LFxyXG4gIH0sXHJcbiAgNDIwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+epuuS4reelnuWfn+S4jeiOt+WymycsXHJcbiAgICAgICdkZSc6ICdOaW1tZXJyZWljaCcsXHJcbiAgICAgICdlbic6ICdOZXZlcnJlYXAnLFxyXG4gICAgICAnZnInOiAnTmFsbG9uY3F1ZXMnLFxyXG4gICAgICAnamEnOiAn56We5Z+f5rWu5bO2IOODjeODkOODvOODquODvOODlycsXHJcbiAgICAgICdrbyc6ICfqsbDrkZDsp4Ag7JWK64qUIOyErCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDIxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJyg2LjEp5Zyj5pWZ5Lit5p6i5LyK5L+u5Yqg5b635pWZ55qH5Y6FJyxcclxuICAgICAgJ2RlJzogJyg2LjEpRXJ6YmFzaWxpa2EnLFxyXG4gICAgICAnZW4nOiAnKDYuMSlUaGUgVmF1bHQnLFxyXG4gICAgICAnZnInOiAnKDYuMSlMYSBWb8O7dGUnLFxyXG4gICAgICAnamEnOiAnKDYuMSnlvLfnoaznqoHlhaUg44Kk44K344Ol44Ks44Or44OJ5pWZ55qH5bqBJyxcclxuICAgICAgJ2tvJzogJyg2LjEp7J207IqI6rCA66W065OcIOq1kO2ZqeyyrScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDI2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCo+W4g+mHjOS6muWLkuaWr+iuqOS8kOaImCcsXHJcbiAgICAgICdkZSc6ICdDaHJ5c2FsaXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIENocnlzYWxpcycsXHJcbiAgICAgICdmcic6ICdMYSBDaHJ5c2FsaWRlJyxcclxuICAgICAgJ2phJzogJ+OCouOCt+OCqOODs+ODu+ODiuODl+ODquOCouODrOOCueiojuS8kOaIpicsXHJcbiAgICAgICdrbyc6ICfslYTslKjsl5Qg64KY67iM66as7JWM66CI7IqkIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WNmueJqeaImOiIsOaXoOmZkOWbnuW7iicsXHJcbiAgICAgICdkZSc6ICdEaWUgRnJha3RhbC1Lb250aW51dW0nLFxyXG4gICAgICAnZW4nOiAnVGhlIEZyYWN0YWwgQ29udGludXVtJyxcclxuICAgICAgJ2ZyJzogJ0xlIENvbnRpbnV1bSBmcmFjdGFsJyxcclxuICAgICAgJ2phJzogJ+WNmueJqeaIpuiJpiDjg5Xjg6njgq/jgr/jg6vjg7vjgrPjg7Pjg4bjgqPjg4vjgqLjg6AnLFxyXG4gICAgICAna28nOiAn66y07ZWc7Jew7IaNIOuwleusvO2VqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtMjEzLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDMxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WwmOWwgeenmOWyqe+8iOS6ieWkuuaImO+8iScsXHJcbiAgICAgICdkZSc6ICdSb2JiZW5ob2xtIChFcm9iZXJ1bmcpJyxcclxuICAgICAgJ2VuJzogJ1NlYWwgUm9jayAoU2VpemUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFJvY2hlciBkZXMgdHLDqWZvbmRzIChpbnZhc2lvbiknLFxyXG4gICAgICAnamEnOiAn44K344O844Or44Ot44OD44KvICjkuonlparmiKYpJyxcclxuICAgICAgJ2tvJzogJ+u0ieyduOuQnCDrsJTsnITshKwo7J+B7YOI7KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1OSxcclxuICB9LFxyXG4gIDQzMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvZfms6LpgqPmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBSYXZhbmEnLFxyXG4gICAgICAnZW4nOiAnVGhvayBhc3QgVGhvayAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnVGhvayBhc3QgVGhvayAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnnJ/jg6njg7zjg7TjgqHjg4roqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIOudvOuwlOuCmCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNTcsXHJcbiAgfSxcclxuICA0MzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yaw6Zuq5bqf5aCh5pqu5Y2r5aGUJyxcclxuICAgICAgJ2RlJzogJ0FiZW5kcm90LVdhY2h0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBEdXNrIFZpZ2lsJyxcclxuICAgICAgJ2ZyJzogJ0xlIFZpZ2lsZSBkdSBDcsOpcHVzY3VsZScsXHJcbiAgICAgICdqYSc6ICflu4PnoKbmjZzntKIg44OA44K544Kv44O044Kj44K444OrJyxcclxuICAgICAgJ2tvJzogJ+yWtOyKpOumhCDsmpTsg4gnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDIsXHJcbiAgfSxcclxuICA0MzU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAnKDYuMSnpgqrpvpnnjovluqfpvpnlt6LnpZ7mrr8nLFxyXG4gICAgICAnZGUnOiAnKDYuMSlOZXN0IGRlcyBEcmFjaGVuJyxcclxuICAgICAgJ2VuJzogJyg2LjEpVGhlIEFlcnknLFxyXG4gICAgICAnZnInOiAnKDYuMSlMXFwnQWlyZScsXHJcbiAgICAgICdqYSc6ICcoNi4xKemCquernOihgOaIpiDjg4njg6njgrTjg7PjgrrjgqjjgqLjg6rjg7wnLFxyXG4gICAgICAna28nOiAnKDYuMSnsmqnsnZgg65Gl7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC00MCxcclxuICAgICdvZmZzZXRZJzogNTUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNDM2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S/vuaWr+m6puatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIEJpc21hcmNrJyxcclxuICAgICAgJ2VuJzogJ1RoZSBMaW1pdGxlc3MgQmx1ZSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTFxcJ0ltbWVuc2l0w6kgYmxldWUgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn55yf44OT44K544Oe44Or44Kv6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+ynhCDruYTsiqTrp4jrpbTtgawg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNDM3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WchuahjOmqkeWjq+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdTaW5ndWxhcml0w6R0cy1SZWFrdG9yJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTaW5ndWxhcml0eSBSZWFjdG9yJyxcclxuICAgICAgJ2ZyJzogJ0xlIFLDqWFjdGV1ciBkZSBzaW5ndWxhcml0w6knLFxyXG4gICAgICAnamEnOiAn44OK44Kk44OE44O744Kq44OW44O744Op44Km44Oz44OJ6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+uCmOydtOy4oCDsmKTruIwg65287Jq065OcIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1NixcclxuICB9LFxyXG4gIDQzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfooYDmiJjoi43nqbnprZTnp5HlrabnoJTnqbbmiYAnLFxyXG4gICAgICAnZGUnOiAnw4R0aGVyb2NoZW1pc2NoZXMgRm9yPFNvZnRIeXBoZW4vPnNjaHVuZ3M8U29mdEh5cGhlbi8+bGFib3InLFxyXG4gICAgICAnZW4nOiAnVGhlIEFldGhlcm9jaGVtaWNhbCBSZXNlYXJjaCBGYWNpbGl0eScsXHJcbiAgICAgICdmcic6ICdMZSBMYWJvcmF0b2lyZSBkZSBtYWdpc21vbG9naWUnLFxyXG4gICAgICAnamEnOiAn6JK85aSp6IGW5oimIOmtlOenkeWtpueglOeptuaJgCcsXHJcbiAgICAgICdrbyc6ICfrp4jqs7ztlZkg7Jew6rWs7IaMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xOCxcclxuICAgICdvZmZzZXRZJzogMTQ5LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDQxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJyg2LjEp5aSp5bGx57ud6aG257Si5aeG6Zi/5bCU54G15bOwJyxcclxuICAgICAgJ2RlJzogJyg2LjEpU29obSBBbCcsXHJcbiAgICAgICdlbic6ICcoNi4xKVNvaG0gQWwnLFxyXG4gICAgICAnZnInOiAnKDYuMSlTb2htIEFsJyxcclxuICAgICAgJ2phJzogJyg2LjEp6ZyK5bOw6LiP56C0IOOCveODvOODoOODu+OCouODqycsXHJcbiAgICAgICdrbyc6ICcoNi4xKeyGnCDslYwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTg1LFxyXG4gICAgJ29mZnNldFknOiA1MSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBGYXVzdCBkZXMgVmF0ZXJzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBGaXN0IG9mIHRoZSBGYXRoZXInLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgUG9pbmcgZHUgUMOocmUnLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya6LW35YuV57eoMScsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDquLDrj5ntjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDQzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlkK/liqjkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEVsbGUgZGVzIFZhdGVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQ3VmZiBvZiB0aGUgRmF0aGVyJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaWduZXQgZHUgUMOocmUnLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya6LW35YuV57eoMicsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDquLDrj5ntjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDQ0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlkK/liqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEFybSBkZXMgVmF0ZXJzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBBcm0gb2YgdGhlIEZhdGhlcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBCcmFzIGR1IFDDqHJlJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8mui1t+WLlee3qDMnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ0NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5ZCv5Yqo5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBMYXN0IGRlcyBWYXRlcnMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEJ1cmRlbiBvZiB0aGUgRmF0aGVyJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEZhcmRlYXUgZHUgUMOocmUnLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya6LW35YuV57eoNCcsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDquLDrj5ntjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDQ2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e9l+azoumCo+atvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFJhdmFuYScsXHJcbiAgICAgICdlbic6ICdUaG9rIGFzdCBUaG9rIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdUaG9rIGFzdCBUaG9rIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Op44O844O044Kh44OK6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrnbzrsJTrgpgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDU3LFxyXG4gIH0sXHJcbiAgNDQ3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S/vuaWr+m6puatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIEJpc21hcmNrJyxcclxuICAgICAgJ2VuJzogJ1RoZSBMaW1pdGxlc3MgQmx1ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ0ltbWVuc2l0w6kgYmxldWUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg5Pjgrnjg57jg6vjgq/oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOu5hOyKpOuniOultO2BrCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjgsXHJcbiAgfSxcclxuICA0NDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ZyG5qGM6aqR5aOr5bm75oOz5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0hlbGRlbmxpZWQgdm9uIFRob3JkYW5zIEZhbGwnLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IFRob3JkYW5cXCdzIFJlaWduJyxcclxuICAgICAgJ2ZyJzogJ0xlIHLDqGduZSBkZSBUaG9yZGFuJyxcclxuICAgICAgJ2phJzogJ+iSvOWkqeW5u+aDsyDjg4rjgqTjg4Tjg7vjgqrjg5bjg7vjg6njgqbjg7Pjg4noqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOuCmOydtOy4oCDsmKTruIwg65287Jq065OcIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1NixcclxuICB9LFxyXG4gIDQ0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5ZCv5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBGYXVzdCBkZXMgVmF0ZXJzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBGaXN0IG9mIHRoZSBGYXRoZXIgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgUG9pbmcgZHUgUMOocmUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8mui1t+WLlee3qDEnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDUwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlkK/liqjkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEVsbGUgZGVzIFZhdGVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQ3VmZiBvZiB0aGUgRmF0aGVyIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFBvaWduZXQgZHUgUMOocmUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8mui1t+WLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDUxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlkK/liqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEFybSBkZXMgVmF0ZXJzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBBcm0gb2YgdGhlIEZhdGhlciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBCcmFzIGR1IFDDqHJlIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrotbfli5Xnt6gzJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOq4sOuPme2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDQ1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5ZCv5Yqo5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBMYXN0IGRlcyBWYXRlcnMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEJ1cmRlbiBvZiB0aGUgRmF0aGVyIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEZhcmRlYXUgZHUgUMOocmUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8mui1t+WLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog6riw64+Z7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNDc4OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn55Sw5Zut6YOhJyxcclxuICAgICAgJ2RlJzogJ0Zyb2hlaGFsZGUnLFxyXG4gICAgICAnZW4nOiAnSWR5bGxzaGlyZScsXHJcbiAgICAgICdmcic6ICdJZHlsbMOpZScsXHJcbiAgICAgICdqYSc6ICfjgqTjg4fjgqPjg6vjgrfjg6PjgqTjgqInLFxyXG4gICAgICAna28nOiAn7J2065Sc7IOk7J207Ja0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDU1LFxyXG4gIH0sXHJcbiAgNTA2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokIzlrqDkuYvnjovvvJrlpKfotZvlr7nmiJjvvIjkurrmnLrlr7nmiJjvvIknLFxyXG4gICAgICAnZGUnOiAnS2FtcGYgZGVyIFRyYWJhbnRlbjogVHVybmllciAoZ2VnZW4gQXJlbmFtZWlzdGVyKScsXHJcbiAgICAgICdlbic6ICdMb1ZNOiBNYXN0ZXIgVG91cm5hbWVudCcsXHJcbiAgICAgICdmcic6ICdCYXRhaWxsZSBkZSB0b3Vybm9pIGNvbnRyZSBsXFwnb3JkaW5hdGV1cicsXHJcbiAgICAgICdqYSc6ICdMb1ZN77ya5aSn5Lya5a++5oimIChDUFXlr77miKYpJyxcclxuICAgICAgJ2tvJzogJ+q8rOuniCDsuZzqtawg6rO167Cp7KCEOiDrjIDtmowg64yA6rKwKOyduOqztSDsp4DriqUg64yA6rKwKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTA4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOiIquiIueiZmuaXoOaWueiInycsXHJcbiAgICAgICdkZSc6ICdEaWUgTmljaHRzLUFyY2hlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBWb2lkIEFyaycsXHJcbiAgICAgICdmcic6ICdMXFwnQXJjaGUgZHUgbsOpYW50JyxcclxuICAgICAgJ2phJzogJ+mtlOiIquiIueODtOOCqeOCpOODieOCouODvOOCrycsXHJcbiAgICAgICdrbyc6ICfrs7TsnbTrk5zsnZgg67Cp7KO8JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDI4OSxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzcsXHJcbiAgfSxcclxuICA1MTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Zyw6ISJ54G154Gv5aSp54u85pif54Gv5aGUJyxcclxuICAgICAgJ2RlJzogJ1BoYXJvcyBTaXJpdXMgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnUGhhcm9zIFNpcml1cyAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgUGhhcmUgZGUgU2lyaXVzIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+WItuWcp+W3qOWhlCDjgrfjg6rjgqbjgrnlpKfnga/lj7AgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+yLnOumrOyasOyKpCDrjIDrk7HrjIAo7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDUxMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfojYnmnKjluq3lm63lnKPojInlpI/lqJzmpI3nianlm60nLFxyXG4gICAgICAnZGUnOiAnU2Fua3QgTW9jaWFubmUtQXJib3JldHVtJyxcclxuICAgICAgJ2VuJzogJ1NhaW50IE1vY2lhbm5lXFwncyBBcmJvcmV0dW0nLFxyXG4gICAgICAnZnInOiAnTFxcJ0FyYm9yZXR1bSBTYWludGUtTW9jaWFubmUnLFxyXG4gICAgICAnamEnOiAn6I2J5pyo5bqt5ZySIOiBluODouOCt+ODo+ODvOODjOakjeeJqeWckicsXHJcbiAgICAgICdrbyc6ICfshLEg66qo7IOoIOyLneusvOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA0MCxcclxuICAgICdvZmZzZXRZJzogNixcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUxMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjMsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LqR5Yag576k5bKb55m95pi85o6i57SiJyxcclxuICAgICAgJ2RlJzogJ0RhcyBEaWFkZW0gKGxlaWNodCknLFxyXG4gICAgICAnZW4nOiAnVGhlIERpYWRlbSAoRWFzeSknLFxyXG4gICAgICAnZnInOiAnTGUgRGlhZMOobWUgKGZhY2lsZSknLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6i57SiIOODh+OCo+OCouODh+ODoOiruOWztiAoRWFzeSknLFxyXG4gICAgICAna28nOiAn65SU7JWE646AIOygnOuPhCjsiazsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDYwLFxyXG4gIH0sXHJcbiAgNTE1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkupHlhqDnvqTlspvlpJzmmZrmjqLntKInLFxyXG4gICAgICAnZGUnOiAnRGFzIERpYWRlbSAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZSBEaWFkw6htZSAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfpm7LmtbfmjqLntKIg44OH44Kj44Ki44OH44Og6Ku45bO2IChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjIsXHJcbiAgfSxcclxuICA1MTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pif5rW356m66Ze06aKg5YCS5aGUJyxcclxuICAgICAgJ2RlJzogJ0FudGl0dXJtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBBbnRpdG93ZXInLFxyXG4gICAgICAnZnInOiAnTFxcJ0FudGl0b3VyJyxcclxuICAgICAgJ2phJzogJ+aYn+a1t+ims+a4rCDpgIbjgZXjga7loZQnLFxyXG4gICAgICAna28nOiAn6rGw6r6466GcIOyEoCDtg5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUxNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokKjoj7LmtJvnibnmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBTZXBoaXJvdCcsXHJcbiAgICAgICdlbic6ICdDb250YWlubWVudCBCYXkgUzFUNycsXHJcbiAgICAgICdmcic6ICdVbml0w6kgZGUgY29udGVudGlvbiBTMVA3JyxcclxuICAgICAgJ2phJzogJ+mtlOelnuOCu+ODleOCo+ODreODiOiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfrp4jsi6Ag7IS47ZS866Gc7Yq4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2NixcclxuICB9LFxyXG4gIDUxOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpZ7lnKPpgZfov7nml6DpmZDln47luILooZflj6Tov7knLFxyXG4gICAgICAnZGUnOiAnSGlzdG9yaXNjaGVzIEFtZGFwb3IgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnVGhlIExvc3QgQ2l0eSBvZiBBbWRhcG9yIChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMZXMgVmVzdGlnZXMgZGUgbGEgY2l0w6kgZFxcJ0FtZGFwb3IgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn56We6IGW6YG66LehIOWPpOOCouODoOODgOODl+ODvOODq+W4guihlyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn7JibIOyVlOuLpO2PrOultCDsi5zqsIDsp4Ao7Ja066Ck7JuAKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA2NCxcclxuICAgICdvZmZzZXRZJzogMzE1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MyxcclxuICB9LFxyXG4gIDUyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5b6L5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBGYXVzdCBkZXMgU29obmVzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBGaXN0IG9mIHRoZSBTb24nLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgUG9pbmcgZHUgRmlscycsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrlvovli5Xnt6gxJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1MjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOW+i+WKqOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gRWxsZSBkZXMgU29obmVzJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBDdWZmIG9mIHRoZSBTb24nLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgUG9pZ25ldCBkdSBGaWxzJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muW+i+WLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUyMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5b6L5Yqo5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBcm0gZGVzIFNvaG5lcycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQXJtIG9mIHRoZSBTb24nLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgQnJhcyBkdSBGaWxzJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muW+i+WLlee3qDMnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTExMCxcclxuICAgICdvZmZzZXRZJzogLTE3MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5b6L5Yqo5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBMYXN0IGRlcyBTb2huZXMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEJ1cmRlbiBvZiB0aGUgU29uJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEZhcmRlYXUgZHUgRmlscycsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrlvovli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCA0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1MjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCo6I+y5rSb54m55q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gU2VwaGlyb3QnLFxyXG4gICAgICAnZW4nOiAnQ29udGFpbm1lbnQgQmF5IFMxVDcgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFMxUDcgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXprZTnpZ7jgrvjg5XjgqPjg63jg4joqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOuniOyLoCDshLjtlLzroZztirgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY2LFxyXG4gIH0sXHJcbiAgNTI5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlvovliqjkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEZhdXN0IGRlcyBTb2huZXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEZpc3Qgb2YgdGhlIFNvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2luZyBkdSBGaWxzIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlvovli5Xnt6gxJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUzMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5b6L5Yqo5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBFbGxlIGRlcyBTb2huZXMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEN1ZmYgb2YgdGhlIFNvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBQb2lnbmV0IGR1IEZpbHMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muW+i+WLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTMxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlvovliqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEFybSBkZXMgU29obmVzIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FsZXhhbmRlciAtIFRoZSBBcm0gb2YgdGhlIFNvbiAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZSBCcmFzIGR1IEZpbHMgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muW+i+WLlee3qDMnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7Jyo64+Z7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTEwLFxyXG4gICAgJ29mZnNldFknOiAtMTcwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTMyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlvovliqjkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIExhc3QgZGVzIFNvaG5lcyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQnVyZGVuIG9mIHRoZSBTb24gKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTGUgRmFyZGVhdSBkdSBGaWxzIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlvovli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOycqOuPme2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUzMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflm5vlm73ogZTlkIjlhpvmvJQnLFxyXG4gICAgICAnZGUnOiAnVHJ1cHBlbsO8YnVuZyBkZXIgRW9yesOkaXNjaGVuIEFsbGlhbnonLFxyXG4gICAgICAnZW4nOiAnQSBTcGVjdGFjbGUgZm9yIHRoZSBBZ2VzJyxcclxuICAgICAgJ2ZyJzogJ0xhIGdyYW5kZSBtYW7Fk3V2cmUgw6lvcnrDqWVubmUnLFxyXG4gICAgICAnamEnOiAn5Zub5Zu95ZCI5ZCM5ryU57+SJyxcclxuICAgICAgJ2tvJzogJzTqsJzqta0g7ZWp64+ZIO2biOugqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTM3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfourLpgb/ojIPlm7TmlLvlh7snLFxyXG4gICAgICAnZGUnOiAnRmzDpGNoZW5hbmdyaWZmZW4gYXVzd2VpY2hlbicsXHJcbiAgICAgICdlbic6ICdBdm9pZCBBcmVhIG9mIEVmZmVjdCBBdHRhY2tzJyxcclxuICAgICAgJ2ZyJzogJ8OJdml0ZXIgbGVzIGF0dGFxdWVzIMOgIGFpcmUgZFxcJ2VmZmV0JyxcclxuICAgICAgJ2phJzogJ+evhOWbsuaUu+aSg+OCkumBv+OBkeOCiOOBhu+8gScsXHJcbiAgICAgICdrbyc6ICfrspTsnIQg6rO16rKp7J2EIO2UvO2VmOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDUzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5o6M5o+h5LuH5oGo6L+e5Ye7JyxcclxuICAgICAgJ2RlJzogJ01pdCBLb21ib3MgRmVpbmRzZWxpZ2tlaXQgYXVmIHNpY2ggemllaGVuJyxcclxuICAgICAgJ2VuJzogJ0V4ZWN1dGUgYSBDb21ibyB0byBJbmNyZWFzZSBFbm1pdHknLFxyXG4gICAgICAnZnInOiAnR8OpbsOpcmVyIGRlIGxcXCdpbmltaXRpw6kgYXZlYyB1biBjb21ibycsXHJcbiAgICAgICdqYSc6ICfjgrPjg7Pjg5zjgafmlbXoppbjgpLpm4bjgoHjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7L2k67O066W8IOydtOyWtCDsoIHqsJzsi6zsnYQg64GM7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTM5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmjqfliLbmlYzkurrnmoTku4fmgagnLFxyXG4gICAgICAnZGUnOiAnS29tYm9zIGltIEthbXBmIGVpbnNldHplbicsXHJcbiAgICAgICdlbic6ICdFeGVjdXRlIGEgQ29tYm8gaW4gQmF0dGxlJyxcclxuICAgICAgJ2ZyJzogJ0VmZmVjdHVlciBsZSBjb21ibyBlbiBjb21iYXQnLFxyXG4gICAgICAnamEnOiAn5a6f5oim44Gn44Kz44Oz44Oc44Gr5oyR5oim44GX44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+yLpOyghOyXkOyEnCDsvaTrs7Trpbwg7IKs7Jqp7ZW067O07J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmjqfliLblpJrkuKrmlYzkurrnmoTku4fmgagnLFxyXG4gICAgICAnZGUnOiAnRmVpbmRzZWxpZ2tlaXQgbWVocmVyZXIgR2VnbmVyIGF1ZiBzaWNoIHppZWhlbicsXHJcbiAgICAgICdlbic6ICdBY2NydWUgRW5taXR5IGZyb20gTXVsdGlwbGUgVGFyZ2V0cycsXHJcbiAgICAgICdmcic6ICdBdHRpcmVyIGxcXCdpbmltaXRpw6kgZGUgcGx1c2lldXJzIGVubmVtaXMgc3VyIHNvaScsXHJcbiAgICAgICdqYSc6ICfopIfmlbDjga7mlbXjgYvjgonmlbXoppbjgpLpm4bjgoHjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn64uk7IiY7J2YIOyggeyXkOqyjOyEnCDsoIHqsJzsi6zsnYQg64GM7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflrp7miJjmjqfliLblpJrkuKrmlYzkurrnmoTku4fmgagnLFxyXG4gICAgICAnZGUnOiAnR2VnZW4gbWVocmVyZSBHZWduZXIgYXVmIGVpbm1hbCBrw6RtcGZlbicsXHJcbiAgICAgICdlbic6ICdFbmdhZ2UgTXVsdGlwbGUgVGFyZ2V0cycsXHJcbiAgICAgICdmcic6ICdBZmZyb250ZXIgcGx1c2lldXJzIGVubmVtaXMnLFxyXG4gICAgICAnamEnOiAn5a6f5oim44Gn6KSH5pWw44Gu5pW144Go5oim44Gj44Gm44G/44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+yLpOyghOyXkOyEnCDri6TsiJjsnZgg7KCB6rO8IOyLuOybjOuztOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU0Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5o6n5Yi26L+c5aSE5pWM5Lq655qE5LuH5oGoJyxcclxuICAgICAgJ2RlJzogJ0F1cyBkZXIgRmVybmUgRmVpbmRzZWxpZ2tlaXQgYXVmIHNpY2ggemllaGVuJyxcclxuICAgICAgJ2VuJzogJ0V4ZWN1dGUgYSBSYW5nZWQgQXR0YWNrIHRvIEluY3JlYXNlIEVubWl0eScsXHJcbiAgICAgICdmcic6ICdHw6luw6lyZXIgZGUgbFxcJ2luaW1pdGnDqSDDoCBkaXN0YW5jZScsXHJcbiAgICAgICdqYSc6ICfpgaDot53pm6LjgYvjgonmlbXoppbjgpLpm4bjgoHjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn66mA66as7IScIOyggeqwnOyLrOydhCDrgYzsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eVmeW/g+WinuaPtOeahOaVjOS6uicsXHJcbiAgICAgICdkZSc6ICdGZWluZGxpY2hlIFZlcnN0w6Rya3VuZyBhdWZoYWx0ZW4nLFxyXG4gICAgICAnZW4nOiAnRW5nYWdlIEVuZW15IFJlaW5mb3JjZW1lbnRzJyxcclxuICAgICAgJ2ZyJzogJ0ZhaXJlIGZhY2Ugw6AgZGVzIHJlbmZvcnRzIGVubmVtaXMnLFxyXG4gICAgICAnamEnOiAn5pW144Gu5aKX5o+044Gr5a++5b+c44GX44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+yggSDsp4Dsm5DqtbDsl5Ag64yA7LKY7ZWY7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQ0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfphY3lkIjpmLLmiqTogYzkuJrmiZPlgJLljZXkuKrmlYzkuronLFxyXG4gICAgICAnZGUnOiAnR2VnbmVyIGdlbWVpbnNhbSBiZXNpZWdlbicsXHJcbiAgICAgICdlbic6ICdBc3Npc3QgQWxsaWVzIGluIERlZmVhdGluZyBhIFRhcmdldCcsXHJcbiAgICAgICdmcic6ICdWYWluY3JlIHVuIGVubmVtaSBlbiBhc3Npc3RhbnQgZGVzIGFsbGnDqXMnLFxyXG4gICAgICAnamEnOiAn5ZGz5pa544Go5Y2U5Yqb44GX44Gm5pW144KS5YCS44Gd44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+2MjO2LsOybkOqzvCDtmJHroKXtlZjsl6wg7KCB7J2EIOusvOumrOy5mOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU0NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6YWN5ZCI6Ziy5oqk6IGM5Lia5omT5YCS5aSa5Liq5pWM5Lq6JyxcclxuICAgICAgJ2RlJzogJ0RlbiBHZWduZXIgZWluZXMgVmVyYsO8bmRldGVuIGJlc2llZ2VuJyxcclxuICAgICAgJ2VuJzogJ0RlZmVhdCBhbiBPY2N1cGllZCBUYXJnZXQnLFxyXG4gICAgICAnZnInOiAnVmFpbmNyZSB1biBlbm5lbWkgb2NjdXDDqSBwYXIgdW4gYWxsacOpJyxcclxuICAgICAgJ2phJzogJ+WRs+aWueOBjOW8leOBjeOBpOOBkeOBpuOBhOOCi+aVteOCkuWAkuOBneOBhu+8gScsXHJcbiAgICAgICdrbyc6ICftjIzti7Dsm5Dqs7wg6rCZ7J2AIOyggeydhCDqs7XqsqntlZjsnpAhJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIwLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i6sumBv+iMg+WbtOaUu+WHu+eahOWQjOaXtui/m+ihjOaImOaWlycsXHJcbiAgICAgICdkZSc6ICdBbmdyaWZmZW4gYXVzd2VpY2hlbicsXHJcbiAgICAgICdlbic6ICdBdm9pZCBFbmdhZ2VkIFRhcmdldHMnLFxyXG4gICAgICAnZnInOiAnQ29tYmF0dHJlIGVuIMOpdml0YW50IGxlcyBhdHRhcXVlcyBlbm5lbWllcycsXHJcbiAgICAgICdqYSc6ICfmlbXjga7mlLvmkoPjgpLpgb/jgZHjgarjgYzjgonmiKbjgYrjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7KCB7J2YIOqzteqyqeydhCDtlLztlZjrqbTshJwg7Iu47Jqw7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQ4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfngbXmtLvov5DnlKjlnLrlnLDmnLrlhbMnLFxyXG4gICAgICAnZGUnOiAnTWl0IGRlbSBHZWzDpG5kZSBpbnRlcmFnaWVyZW4nLFxyXG4gICAgICAnZW4nOiAnSW50ZXJhY3Qgd2l0aCB0aGUgQmF0dGxlZmllbGQnLFxyXG4gICAgICAnZnInOiAnSW50ZXJhZ2lyIGF2ZWMgbGUgZMOpY29yIGVuIGNvbWJhdCcsXHJcbiAgICAgICdqYSc6ICfjgq7jg5/jg4Pjgq/jgpLmtLvnlKjjgZfjgabmiKbjgYrjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7Yq57IiYIOyepey5mOulvCDtmZzsmqntlZjrqbAg7Iu47Jqw7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTQ5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsrvnlpfpmLLmiqTogYzkuJonLFxyXG4gICAgICAnZGUnOiAnVmVyYsO8bmRldGUgaGVpbGVuJyxcclxuICAgICAgJ2VuJzogJ0hlYWwgYW4gQWxseScsXHJcbiAgICAgICdmcic6ICdTb2lnbmVyIHVuIGFsbGnDqScsXHJcbiAgICAgICdqYSc6ICflkbPmlrnjgpLlm57lvqnjgZfjgojjgYbvvIEnLFxyXG4gICAgICAna28nOiAn7YyM7Yuw7JuQ7J2EIO2ajOuzteyLnO2CpOyekCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjAsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rK755aX5bCP6Zif6Zif5ZGYJyxcclxuICAgICAgJ2RlJzogJ01laHJlcmUgVmVyYsO8bmRldGUgaGVpbGVuJyxcclxuICAgICAgJ2VuJzogJ0hlYWwgTXVsdGlwbGUgQWxsaWVzJyxcclxuICAgICAgJ2ZyJzogJ1NvaWduZXIgcGx1c2lldXJzIGFsbGnDqXMnLFxyXG4gICAgICAnamEnOiAn6KSH5pWw44Gu5ZGz5pa544KS5Zue5b6p44GX44KI44GG77yBJyxcclxuICAgICAgJ2tvJzogJ+uLpOyImOydmCDtjIzti7Dsm5DsnYQg7ZqM67O17Iuc7YKk7J6QIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTUyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMCxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnIDnu4jorq3nu4MnLFxyXG4gICAgICAnZGUnOiAnTGV0enRlIMOcYnVuZycsXHJcbiAgICAgICdlbic6ICdGaW5hbCBFeGVyY2lzZScsXHJcbiAgICAgICdmcic6ICdFeGVyY2ljZSBmaW5hbCcsXHJcbiAgICAgICdqYSc6ICfmnIDntYLoqJPnt7TvvIEnLFxyXG4gICAgICAna28nOiAn66eI7KeA66eJIO2biOugqCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU1NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfojaPoqonph47vvIjnoo7lhrDmiJjvvIknLFxyXG4gICAgICAnZGUnOiAnRmVsZCBkZXIgRWhyZSAoWmVyc3BsaXR0ZXJ1bmcpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGaWVsZHMgb2YgR2xvcnkgKFNoYXR0ZXIpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBDaGFtcHMgZGUgbGEgR2xvaXJlIChicmlzZS1nbGFjZSknLFxyXG4gICAgICAnamEnOiAn44OV44Kj44O844Or44OJ44O744Kq44OW44O744Kw44Ot44O844Oq44O8ICjnoJXmsLfmiKYpJyxcclxuICAgICAgJ2tvJzogJ+yYgeq0keydmCDtj4nsm5Ao7IeE67mZ7KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2NyxcclxuICB9LFxyXG4gIDU1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnpvpnlrqvmrr/lv4bnvarlrqsnLFxyXG4gICAgICAnZGUnOiAnU29ociBLaGFpJyxcclxuICAgICAgJ2VuJzogJ1NvaHIgS2hhaScsXHJcbiAgICAgICdmcic6ICdTb2hyIEtoYWknLFxyXG4gICAgICAnamEnOiAn5aSp56uc5a6u5q6/IOOCveODvOODq+ODu+OCq+OCpCcsXHJcbiAgICAgICdrbyc6ICfshozrpbQg7Lm07J20JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDM3MCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU1Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpoHlv4zln47pgqbnjpvlk4gnLFxyXG4gICAgICAnZGUnOiAnRGllIFN0YWR0IGRlciBUcsOkbmVuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBXZWVwaW5nIENpdHkgb2YgTWhhY2gnLFxyXG4gICAgICAnZnInOiAnTGEgQ2l0w6kgZMOpZmVuZHVlIGRlIE1oYWNoJyxcclxuICAgICAgJ2phJzogJ+emgeW/jOmDveW4guODnuODjycsXHJcbiAgICAgICdrbyc6ICfquIjquLDrj4Tsi5wg66eI7ZWYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC00MCxcclxuICAgICdvZmZzZXRZJzogLTQwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTU3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7kea2oeS8oOivtOegtOiIsOWymycsXHJcbiAgICAgICdkZSc6ICdTY2hpZmZicmVjaGVyLUluc2VsIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ0h1bGxicmVha2VyIElzbGUgKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDjmxlIGRlIENyw6h2ZWNhcsOobmUgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn6buS5rim5Lyd6KqsIOODj+ODq+ODluODrOODvOOCq+ODvOODu+OCouOCpOODqyAoSGFyZCknLFxyXG4gICAgICAna28nOiAn64Kc7YyM7ISg7J2YIOyErCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY4LFxyXG4gIH0sXHJcbiAgNTU4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOWfjuWuneeJqeW6kycsXHJcbiAgICAgICdkZSc6ICdBcXVhcG9saXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIEFxdWFwb2xpcycsXHJcbiAgICAgICdmcic6ICdMXFwnQXF1YXBvbGUnLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOOCouOCr+OCouODneODquOCuScsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag7JWE7L+g7JWE7Y+066as7IqkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1NTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bC85b636ZyN5qC85b6B6b6Z5oiYJyxcclxuICAgICAgJ2RlJzogJ0RlciBsZXR6dGUgU2NoaWNrc2Fsc3dlZycsXHJcbiAgICAgICdlbic6ICdUaGUgRmluYWwgU3RlcHMgb2YgRmFpdGgnLFxyXG4gICAgICAnZnInOiAnTGEgRGVybmnDqHJlIGF2YW5jw6llIGRlIGxhIEZvaScsXHJcbiAgICAgICdqYSc6ICfjg4vjg7zjgrrjg5jjg4PjgrDlvoHnq5zmiKYnLFxyXG4gICAgICAna28nOiAn64uI65Oc7Zi46re4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDU2MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7flj6Tmi4nCt+iMg8K35LyR6JGX5pav6L+95Ye75oiYJyxcclxuICAgICAgJ2RlJzogJ0JsdXRpZ2VzIFdpZWRlcjxTb2Z0SHlwaGVuLz5zZWhlbicsXHJcbiAgICAgICdlbic6ICdBIEJsb29keSBSZXVuaW9uJyxcclxuICAgICAgJ2ZyJzogJ0NvdXJzZS1wb3Vyc3VpdGUgZGFucyBsZSBsYWJvcmF0b2lyZScsXHJcbiAgICAgICdqYSc6ICfjg6zjgrDjg6njg7vjg7TjgqHjg7Pjg7vjg5Ljg6Xjg4njg6vjgrnov73mkoPmiKYnLFxyXG4gICAgICAna28nOiAn66CI6rW06528IOuwmCDtnojrk5zro6jsiqQg7LaU6rKp7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xOCxcclxuICAgICdvZmZzZXRZJzogMTQ5LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTYxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMe+9njEw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxLTEwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMS0xMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDEtMTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMe+9nkIxMCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxfkIxMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTHvvZ4yMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTEtMjApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxMS0yMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDExLTIwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjEx772eQjIwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjExfkIyMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTYzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMjHvvZ4zMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMjEtMzApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAyMS0zMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDIxLTMwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjIx772eQjMwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjIxfkIzMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTY0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMzHvvZ40MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMzEtNDApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAzMS00MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDMxLTQwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjMx772eQjQwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjMxfkI0MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTY1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLNDHvvZ41MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gNDEtNTApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyA0MS01MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDQxLTUwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjQx772eQjUwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjQxfkI1MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTY2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WwvOW+t+mcjeagvOS8oOWlh+W+gem+meaImCcsXHJcbiAgICAgICdkZSc6ICdEYXMgTGllZCB2b24gTmlkaG9nZ3MgbGV0enRlbSBSdWYnLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IE5pZGhvZ2dcXCdzIFJhZ2UnLFxyXG4gICAgICAnZnInOiAnTFxcJ2lyZSBkZSBOaWRob2dnJyxcclxuICAgICAgJ2phJzogJ+alteODi+ODvOOCuuODmOODg+OCsOW+geernOaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg64uI65Oc7Zi46re4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyOCxcclxuICB9LFxyXG4gIDU3MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqh54G15bqc6YK46Ze56ay85bqE5ZutJyxcclxuICAgICAgJ2RlJzogJ0RhcyBHZWlzdGVyc2NobG9zcycsXHJcbiAgICAgICdlbic6ICdUaGUgSGF1bnRlZCBNYW5vcicsXHJcbiAgICAgICdmcic6ICdMZSBNYW5vaXIgaGFudMOpJyxcclxuICAgICAgJ2phJzogJ+S6oemciuWxi+aVtyDjg5vjg7zjg7Pjg4bjg4Pjg4njg57jg4rjg7wnLFxyXG4gICAgICAna28nOiAn7Jyg66C57J2YIOynkScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTcyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mZqeWzu+Wzoeiwt+WhnuWwlOazleeJueWwlOa6quiwtycsXHJcbiAgICAgICdkZSc6ICdYZWxwaGF0b2wnLFxyXG4gICAgICAnZW4nOiAnWGVscGhhdG9sJyxcclxuICAgICAgJ2ZyJzogJ1hlbHBoYXRvbCcsXHJcbiAgICAgICdqYSc6ICfls7vljrPmuJPosLcg44K844Or44OV44Kh44OI44OrJyxcclxuICAgICAgJ2tvJzogJ+ygpO2MjO2GqCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTQ4LFxyXG4gICAgJ29mZnNldFknOiAzNSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICA1NzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57Si6I+y5aiF5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gU29waGlhJyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBQMVQ2JyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFAxUDYnLFxyXG4gICAgICAnamEnOiAn5aWz56We44K944OV44Kj44Ki6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+yXrOyLoCDshoztlLzslYQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY5LFxyXG4gIH0sXHJcbiAgNTc3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e0ouiPsuWoheatvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFNvcGhpYScsXHJcbiAgICAgICdlbic6ICdDb250YWlubWVudCBCYXkgUDFUNiAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gUDFQNiAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteWls+elnuOCveODleOCo+OCouiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7Jes7IugIOyGjO2UvOyVhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjksXHJcbiAgfSxcclxuICA1Nzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56eY5pys5a6d5bqT6L+m5be05YuS5bm75oOz5Zu+5Lmm6aaGJyxcclxuICAgICAgJ2RlJzogJ0dyb8OfZSBHdWJhbC1CaWJsaW90aGVrIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHcmVhdCBHdWJhbCBMaWJyYXJ5IChIYXJkKScsXHJcbiAgICAgICdmcic6ICdMYSBHcmFuZGUgYmlibGlvdGjDqHF1ZSBkZSBHdWJhbCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfnqIDmm7jlm57lj44g44Kw44OW44Op5bm75oOz5Zuz5pu46aSoIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfqtazruIzrnbwg7ZmY7IOB64+E7ISc6rSAKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTE2LFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTc5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuZ3lrqvlubvljaHvvJrlubvljaHlr7nlsYDlrqQnLFxyXG4gICAgICAnZGUnOiAnVHJpcGxlIFRyaWFkOiBXZWx0ZW5zYWxvbicsXHJcbiAgICAgICdlbic6ICdUaGUgVHJpcGxlIFRyaWFkIEJhdHRsZWhhbGwnLFxyXG4gICAgICAnZnInOiAnQXLDqG5lIFRyaXBsZSBUcmlhZGUnLFxyXG4gICAgICAnamEnOiAn44OI44Oq44OX44Or44OI44Op44Kk44Ki44OJ77ya44Kr44O844OJ44OQ44OI44Or44Or44O844OgJyxcclxuICAgICAgJ2tvJzogJ+2KuOumrO2UjCDtirjrnbzsnbTslrTrk5w6IOy5tOuTnCDrjIDqsrDsnqUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogODAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfmnLrnpZ7ln44g5aSp5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBdWdlbiBkZXMgU2Now7ZwZmVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRXllcyBvZiB0aGUgQ3JlYXRvcicsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZXMgWWV1eCBkdSBDcsOpYXRldXInLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O877ya5aSp5YuV57eoMScsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsspzrj5ntjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3NSxcclxuICAgICdvZmZzZXRZJzogMTQsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWkqeWKqOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gQXRlbSBkZXMgU2Now7ZwZmVycycsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQnJlYXRoIG9mIHRoZSBDcmVhdG9yJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFNvdWZmbGUgZHUgQ3LDqWF0ZXVyJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muWkqeWLlee3qDInLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTgwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTgyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+acuuelnuWfjiDlpKnliqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEhlcnogZGVzIFNjaMO2cGZlcnMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEhlYXJ0IG9mIHRoZSBDcmVhdG9yJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEPFk3VyIGR1IENyw6lhdGV1cicsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zvvJrlpKnli5Xnt6gzJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn5py656We5Z+OIOWkqeWKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gU2VlbGUgZGVzIFNjaMO2cGZlcnMnLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIFNvdWwgb2YgdGhlIENyZWF0b3InLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTFxcJ8OCbWUgZHUgQ3LDqWF0ZXVyJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvO+8muWkqeWLlee3qDQnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfpm7blvI/mnLrnpZ7ln44g5aSp5Yqo5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdBbGV4YW5kZXIgLSBBdWdlbiBkZXMgU2Now7ZwZmVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgRXllcyBvZiB0aGUgQ3JlYXRvciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbGV4YW5kZXIgLSBMZXMgWWV1eCBkdSBDcsOpYXRldXIgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+apn+W3peWfjuOCouODrOOCreOCteODs+ODgOODvOmbtuW8j++8muWkqeWLlee3qDEnLFxyXG4gICAgICAna28nOiAn6riw6rO17ISxIOyVjOugieyCsOuNlDog7LKc64+Z7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3NSxcclxuICAgICdvZmZzZXRZJzogMTQsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWkqeWKqOS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gQXRlbSBkZXMgU2Now7ZwZmVycyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdBbGV4YW5kZXIgLSBUaGUgQnJlYXRoIG9mIHRoZSBDcmVhdG9yIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIFNvdWZmbGUgZHUgQ3LDqWF0ZXVyIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlpKnli5Xnt6gyJyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTgwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTg2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6muWOhuWxseWkp+mbtuW8j+acuuelnuWfjiDlpKnliqjkuYvnq6AzJyxcclxuICAgICAgJ2RlJzogJ0FsZXhhbmRlciAtIEhlcnogZGVzIFNjaMO2cGZlcnMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIEhlYXJ0IG9mIHRoZSBDcmVhdG9yIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0FsZXhhbmRlciAtIExlIEPFk3VyIGR1IENyw6lhdGV1ciAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qmf5bel5Z+O44Ki44Os44Kt44K144Oz44OA44O86Zu25byP77ya5aSp5YuV57eoMycsXHJcbiAgICAgICdrbyc6ICfquLDqs7XshLEg7JWM66CJ7IKw642UOiDsspzrj5ntjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1ODc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lqa5Y6G5bGx5aSn6Zu25byP5py656We5Z+OIOWkqeWKqOS5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIC0gU2VlbGUgZGVzIFNjaMO2cGZlcnMgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnQWxleGFuZGVyIC0gVGhlIFNvdWwgb2YgdGhlIENyZWF0b3IgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnQWxleGFuZGVyIC0gTFxcJ8OCbWUgZHUgQ3LDqWF0ZXVyIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfmqZ/lt6Xln47jgqLjg6zjgq3jgrXjg7Pjg4Djg7zpm7blvI/vvJrlpKnli5Xnt6g0JyxcclxuICAgICAgJ2tvJzogJ+q4sOqzteyEsSDslYzroInsgrDrjZQ6IOyynOuPme2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCM5a6g5LmL546L77ya546p5a625a+55oiY77yI57up54K56LWb77yJJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGRlciBUcmFiYW50ZW46IEdlZ2VuIFNwaWVsZXIgKHVtIFJQKScsXHJcbiAgICAgICdlbic6ICdMb1ZNOiBQbGF5ZXIgQmF0dGxlIChSUCknLFxyXG4gICAgICAnZnInOiAnQmF0YWlsbGUgc2ltcGxlIGNvbnRyZSB1biBqb3VldXIgKGF2ZWMgUFIpJyxcclxuICAgICAgJ2phJzogJ0xvVk3vvJrjg5fjg6zjgqTjg6Tjg7zlr77miKYgKFJQ5aSJ5YuV44GC44KKKScsXHJcbiAgICAgICdrbyc6ICfqvKzrp4gg7Lmc6rWsIOqzteuwqeyghDog7ZSM66CI7J207Ja0IOuMgOqysChSUCDrs4Drj5kg7J6I7J2MKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTkwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfokIzlrqDkuYvnjovvvJrlpKfotZvlr7nmiJjvvIjnjqnlrrblr7nmiJjvvIknLFxyXG4gICAgICAnZGUnOiAnS2FtcGYgZGVyIFRyYWJhbnRlbjogVHVybmllciAoZ2VnZW4gU3BpZWxlciknLFxyXG4gICAgICAnZW4nOiAnTG9WTTogVG91cm5hbWVudCcsXHJcbiAgICAgICdmcic6ICdCYXRhaWxsZSBkZSB0b3Vybm9pIGNvbnRyZSBkZXMgam91ZXVycycsXHJcbiAgICAgICdqYSc6ICdMb1ZN77ya5aSn5Lya5a++5oimICjjg5fjg6zjgqTjg6Tjg7zlr77miKbvvIknLFxyXG4gICAgICAna28nOiAn6rys66eIIOy5nOq1rCDqs7XrsKnsoIQ6IOuMgO2ajCDrjIDqsrAo7ZSM66CI7J207Ja0IOuMgOqysCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCM5a6g5LmL546L77ya546p5a625a+55oiY77yI5peg57up54K56LWb77yJJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGRlciBUcmFiYW50ZW46IEdlZ2VuIFNwaWVsZXIgKG9obmUgUlApJyxcclxuICAgICAgJ2VuJzogJ0xvVk06IFBsYXllciBCYXR0bGUgKE5vbi1SUCknLFxyXG4gICAgICAnZnInOiAnQmF0YWlsbGUgc2ltcGxlIGNvbnRyZSB1biBqb3VldXIgKHNhbnMgUFIpJyxcclxuICAgICAgJ2phJzogJ0xvVk3vvJrjg5fjg6zjgqTjg6Tjg7zlr77miKYgKFJQ5aSJ5YuV44Gq44GXKScsXHJcbiAgICAgICdrbyc6ICfqvKzrp4gg7Lmc6rWsIOqzteuwqeyghDog7ZSM66CI7J207Ja0IOuMgOqysChSUCDrs4Drj5kg7JeG7J2MKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTkyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e6oOe8oOS4jea4heeahOWuv+WRvScsXHJcbiAgICAgICdkZSc6ICdXZWx0ZW7DvGJlcmdyZWlmZW5kZXMgU2NoaWNrc2FsJyxcclxuICAgICAgJ2VuJzogJ09uZSBMaWZlIGZvciBPbmUgV29ybGQnLFxyXG4gICAgICAnZnInOiAnRGVzdGlucyBlbnRyZWNyb2lzw6lzJyxcclxuICAgICAgJ2phJzogJ+e1oeOBv+WQiOOBhuWuv+WRvScsXHJcbiAgICAgICdrbyc6ICfrkqTslr3tnojripQg7IiZ66qFJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNTkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLNTHvvZ42MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gNTEgLSA2MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDUxLTYwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgNTEtNjApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCNTHvvZ5CNjAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCNTF+QjYwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIs2Me+9njcw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiA2MSAtIDcwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgNjEtNzApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyA2MS03MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEI2Me+9nkI3MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEI2MX5CNzAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izcx772eODDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDcxIC0gODApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyA3MS04MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDcxLTgwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjcx772eQjgwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjcxfkI4MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLODHvvZ45MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gODEgLSA5MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDgxLTkwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgODEtOTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCODHvvZ5COTAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCODF+QjkwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA1OTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIs5Me+9njEwMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gOTEgLSAxMDApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyA5MS0xMDApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyA5MS0xMDApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCOTHvvZ5CMTAwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjkxfkIxMDAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDU5ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izEwMe+9njExMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTAxIC0gMTEwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTAxLTExMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDEwMS0xMTApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTAx772eQjExMCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxMDF+QjExMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNTk5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTEx772eMTIw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxMTEgLSAxMjApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxMTEtMTIwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTExLTEyMCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxMTHvvZ5CMTIwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjExMX5CMTIwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxMjHvvZ4xMzDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDEyMSAtIDEzMCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDEyMS0xMzApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxMjEtMTMwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjEyMe+9nkIxMzAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTIxfkIxMzAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izEzMe+9njE0MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTMxIC0gMTQwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTMxLTE0MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDEzMS0xNDApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTMx772eQjE0MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxMzF+QjE0MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjAyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTQx772eMTUw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxNDEgLSAxNTApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxNDEtMTUwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTQxLTE1MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxNDHvvZ5CMTUwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjE0MX5CMTUwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxNTHvvZ4xNjDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDE1MSAtIDE2MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDE1MS0xNjApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxNTEtMTYwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjE1Me+9nkIxNjAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTUxfkIxNjAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izE2Me+9njE3MOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTYxIC0gMTcwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTYxLTE3MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDE2MS0xNzApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTYx772eQjE3MCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxNjF+QjE3MCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjA1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvogIXlrqvmrr8g5Zyw5LiLMTcx772eMTgw5bGCJyxcclxuICAgICAgJ2RlJzogJ1BhbGFzdCBkZXIgVG90ZW4gKEViZW5lbiAxNzEgLSAxODApJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQYWxhY2Ugb2YgdGhlIERlYWQgKEZsb29ycyAxNzEtMTgwKScsXHJcbiAgICAgICdmcic6ICdMZSBQYWxhaXMgZGVzIG1vcnRzIChzb3VzLXNvbHMgMTcxLTE4MCknLFxyXG4gICAgICAnamEnOiAn5q276ICF44Gu5a6u5q6/IEIxNzHvvZ5CMTgwJyxcclxuICAgICAgJ2tvJzogJ+unneyekOydmCDqtoHsoIQgQjE3MX5CMTgwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+atu+iAheWuq+auvyDlnLDkuIsxODHvvZ4xOTDlsYInLFxyXG4gICAgICAnZGUnOiAnUGFsYXN0IGRlciBUb3RlbiAoRWJlbmVuIDE4MSAtIDE5MCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFBhbGFjZSBvZiB0aGUgRGVhZCAoRmxvb3JzIDE4MS0xOTApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBhbGFpcyBkZXMgbW9ydHMgKHNvdXMtc29scyAxODEtMTkwKScsXHJcbiAgICAgICdqYSc6ICfmrbvogIXjga7lrq7mrr8gQjE4Me+9nkIxOTAnLFxyXG4gICAgICAna28nOiAn66ed7J6Q7J2YIOq2geyghCBCMTgxfkIxOTAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYwNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q276ICF5a6r5q6/IOWcsOS4izE5Me+9njIwMOWxgicsXHJcbiAgICAgICdkZSc6ICdQYWxhc3QgZGVyIFRvdGVuIChFYmVuZW4gMTkxIC0gMjAwKScsXHJcbiAgICAgICdlbic6ICdUaGUgUGFsYWNlIG9mIHRoZSBEZWFkIChGbG9vcnMgMTkxLTIwMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGRlcyBtb3J0cyAoc291cy1zb2xzIDE5MS0yMDApJyxcclxuICAgICAgJ2phJzogJ+atu+iAheOBruWuruauvyBCMTkx772eQjIwMCcsXHJcbiAgICAgICdrbyc6ICfrp53snpDsnZgg6raB7KCEIEIxOTF+QjIwMCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjEyOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Z+65ouJ5be05bC85Lqa6L655Yy6JyxcclxuICAgICAgJ2RlJzogJ0FiYW5pc2NoZXMgR3JlbnpsYW5kJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGcmluZ2VzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBNYXJnZXMnLFxyXG4gICAgICAnamEnOiAn44Ku44Op44OQ44OL44Ki6L665aKD5Zyw5bivJyxcclxuICAgICAgJ2tvJzogJ+q4sOudvOuwlOuLiOyVhCDrs4DrsKnsp4DrjIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzksXHJcbiAgfSxcclxuICA2MTM6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnuqLnjonmtbcnLFxyXG4gICAgICAnZGUnOiAnUnViaW5zZWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFJ1YnkgU2VhJyxcclxuICAgICAgJ2ZyJzogJ01lciBkZSBSdWJpcycsXHJcbiAgICAgICdqYSc6ICfntIXnjonmtbcnLFxyXG4gICAgICAna28nOiAn7ZmN7Jil7ZW0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgzLFxyXG4gIH0sXHJcbiAgNjE0OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bu25aSPJyxcclxuICAgICAgJ2RlJzogJ1lhbnhpYScsXHJcbiAgICAgICdlbic6ICdZYW54aWEnLFxyXG4gICAgICAnZnInOiAnWWFueGlhJyxcclxuICAgICAgJ2phJzogJ+ODpOODs+OCtScsXHJcbiAgICAgICdrbyc6ICfsloDsg6QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODQsXHJcbiAgfSxcclxuICA2MTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Z2a54mi6ZOB5aOB5be05Z+D6JCo6ZW/5Z+OJyxcclxuICAgICAgJ2RlJzogJ0JhZWxzYXItV2FsbCcsXHJcbiAgICAgICdlbic6ICdCYWVsc2FyXFwncyBXYWxsJyxcclxuICAgICAgJ2ZyJzogJ0xhIE11cmFpbGxlIGRlIEJhZWxzYXInLFxyXG4gICAgICAnamEnOiAn5beo5aSn6Ziy5aOBIOODkOOCqOOCteODq+OBrumVt+WfjicsXHJcbiAgICAgICdrbyc6ICfrsJTsnbzsgqzrpbQg7J6l7ISxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE4MixcclxuICAgICdvZmZzZXRZJzogMzIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDQwLFxyXG4gIH0sXHJcbiAgNjE2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+a1t+W6leWuq+auv+e0q+awtOWuqycsXHJcbiAgICAgICdkZSc6ICdTaGlzdWknLFxyXG4gICAgICAnZW4nOiAnU2hpc3VpIG9mIHRoZSBWaW9sZXQgVGlkZXMnLFxyXG4gICAgICAnZnInOiAnTGUgUGFsYWlzIGF1eCBNYXLDqWVzIHZpb2xldHRlcycsXHJcbiAgICAgICdqYSc6ICfmtbflupXlrq7mrr8g57Sr5rC05a6uJyxcclxuICAgICAgJ2tvJzogJ+yLnOyKpOydtCDqtoEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMzUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5bGx5rex5aKD57Si5aeG6Zi/5bCU54G15bOwJyxcclxuICAgICAgJ2RlJzogJ1NvaG0gQWwgKHNjaHdlciknLFxyXG4gICAgICAnZW4nOiAnU29obSBBbCAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnU29obSBBbCAoYnJ1dGFsKScsXHJcbiAgICAgICdqYSc6ICfpnIrls7DmtYTljJYg44K944O844Og44O744Ki44OrIChIYXJkKScsXHJcbiAgICAgICdrbyc6ICfshpwg7JWMKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTI4LFxyXG4gICAgJ29mZnNldFknOiAtMzIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNjIwOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Z+65ouJ5be05bC85Lqa5bGx5Yy6JyxcclxuICAgICAgJ2RlJzogJ0RpZSBaaW5uZW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIFBlYWtzJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBQaWNzJyxcclxuICAgICAgJ2phJzogJ+OCruODqeODkOODi+OCouWxseWys+WcsOW4rycsXHJcbiAgICAgICdrbyc6ICfquLDrnbzrsJTri4jslYQg7IKw7JWF7KeA64yAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgwLFxyXG4gIH0sXHJcbiAgNjIxOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Z+65ouJ5be05bC85Lqa5rmW5Yy6JyxcclxuICAgICAgJ2RlJzogJ0RhcyBGZW5uJyxcclxuICAgICAgJ2VuJzogJ1RoZSBMb2NocycsXHJcbiAgICAgICdmcic6ICdMZXMgTGFjcycsXHJcbiAgICAgICdqYSc6ICfjgq7jg6njg5Djg4vjgqLmuZbnlZTlnLDluK8nLFxyXG4gICAgICAna28nOiAn6riw652867CU64uI7JWEIO2YuOuwmOyngOuMgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4MSxcclxuICB9LFxyXG4gIDYyMjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqumYs+elnuiNieWOnycsXHJcbiAgICAgICdkZSc6ICdBemltLVN0ZXBwZScsXHJcbiAgICAgICdlbic6ICdUaGUgQXppbSBTdGVwcGUnLFxyXG4gICAgICAnZnInOiAnU3RlcHBlIGRcXCdBemltJyxcclxuICAgICAgJ2phJzogJ+OCouOCuOODoOOCueODhuODg+ODlycsXHJcbiAgICAgICdrbyc6ICfslYTsp5Ag64yA7LSI7JuQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDg1LFxyXG4gIH0sXHJcbiAgNjIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+ivleeCvOihjOi3r+W3tOWEv+i+vuacqOmcuOmBkycsXHJcbiAgICAgICdkZSc6ICdCYXJkYW1zIFByb2JlJyxcclxuICAgICAgJ2VuJzogJ0JhcmRhbVxcJ3MgTWV0dGxlJyxcclxuICAgICAgJ2ZyJzogJ0xhIEZvcmNlIGRlIEJhcmRhbScsXHJcbiAgICAgICdqYSc6ICfkvJ3ntbHoqabnt7Qg44OQ44Or44OA44Og6KaH6YGTJyxcclxuICAgICAgJ2tvJzogJ+uwlOultOuLtCDtjKjrj4QnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYyNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjMsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LqR5Yag576k5bKb55m95pi85o6i57Si77yI54up54yO5LiT55So77yJJyxcclxuICAgICAgJ2RlJzogJ0RhcyBEaWFkZW0gLSBKYWdkZ3LDvG5kZSAobGVpY2h0KScsXHJcbiAgICAgICdlbic6ICdUaGUgRGlhZGVtIEh1bnRpbmcgR3JvdW5kcyAoRWFzeSknLFxyXG4gICAgICAnZnInOiAnTGUgRGlhZMOobWU8SW5kZW50Lz46IHRlcnJhaW5zIGRlIGNoYXNzZSAoZmFjaWxlKScsXHJcbiAgICAgICdqYSc6ICfpm7LmtbfmjqLntKIg44OH44Kj44Ki44OH44Og6Ku45bO277ya54up54yf6ZmQ5a6aIChFYXN5KScsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EOiDsoITtiKwg7ZWc7KCVKOyJrOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjAsXHJcbiAgfSxcclxuICA2MjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6keWGoOe+pOWym+m7hOaYj+aOoue0ou+8iOeLqeeMjuS4k+eUqO+8iScsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIC0gSmFnZGdyw7xuZGUnLFxyXG4gICAgICAnZW4nOiAnVGhlIERpYWRlbSBIdW50aW5nIEdyb3VuZHMnLFxyXG4gICAgICAnZnInOiAnTGUgRGlhZMOobWU8SW5kZW50Lz46IHRlcnJhaW5zIGRlIGNoYXNzZScsXHJcbiAgICAgICdqYSc6ICfpm7LmtbfmjqLntKIg44OH44Kj44Ki44OH44Og6Ku45bO277ya54up54yf6ZmQ5a6aJyxcclxuICAgICAgJ2tvJzogJ+uUlOyVhOuOgCDsoJzrj4Q6IOyghO2IrCDtlZzsoJUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjEsXHJcbiAgfSxcclxuICA2MjY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ryC5rWB5rW35Z+f5aaW5q2M5rW3JyxcclxuICAgICAgJ2RlJzogJ1NpcmVuZW4tU2VlJyxcclxuICAgICAgJ2VuJzogJ1RoZSBTaXJlbnNvbmcgU2VhJyxcclxuICAgICAgJ2ZyJzogJ0xhIE1lciBkdSBDaGFudCBkZXMgc2lyw6huZXMnLFxyXG4gICAgICAnamEnOiAn5ryC5rWB5rW35Z+fIOOCu+OCpOODrOODvOODs+a1tycsXHJcbiAgICAgICdrbyc6ICfshLjsnbTroIwg7ZW0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDM2LFxyXG4gIH0sXHJcbiAgNjI3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W9seS5i+WbvScsXHJcbiAgICAgICdkZSc6ICdEdW4gU2NhaXRoJyxcclxuICAgICAgJ2VuJzogJ0R1biBTY2FpdGgnLFxyXG4gICAgICAnZnInOiAnRHVuIFNjYWl0aCcsXHJcbiAgICAgICdqYSc6ICflvbHjga7lm73jg4Djg7Pjg7vjgrnjgqvjg7wnLFxyXG4gICAgICAna28nOiAn65GUIOyKpOy5tCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMzUwLFxyXG4gICAgJ29mZnNldFknOiAtNDAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA1OCxcclxuICB9LFxyXG4gIDYyODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7hOmHkea4rycsXHJcbiAgICAgICdkZSc6ICdLdWdhbmUnLFxyXG4gICAgICAnZW4nOiAnS3VnYW5lJyxcclxuICAgICAgJ2ZyJzogJ0t1Z2FuZScsXHJcbiAgICAgICdqYSc6ICfjgq/jgqzjg40nLFxyXG4gICAgICAna28nOiAn7L+g6rCA64SkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgyLFxyXG4gIH0sXHJcbiAgNjMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkupHlhqDnvqTlspvmiJjkuonnpZ7njI7lnLonLFxyXG4gICAgICAnZGUnOiAnRGFzIERpYWRlbSAtIEhhbG9uZXMgUHLDvGZ1bmcnLFxyXG4gICAgICAnZW4nOiAnVGhlIERpYWRlbSAtIFRyaWFscyBvZiB0aGUgRnVyeScsXHJcbiAgICAgICdmcic6ICdMZSBEaWFkw6htZSAtIMOJcHJldXZlcyBkZSBIYWxvbmUnLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6i57SiIOODh+OCo+OCouODh+ODoOiruOWztiAo54up54yfKScsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EOiDsoITtiKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDYzMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAxLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliqDlsJTmj5Dor7rlubPljp/pga3pgYfmiJgnLFxyXG4gICAgICAnZGUnOiAnSGVsaW9kcm9tJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDYXJ0ZW5lYXUgRmxhdHM6IEhlbGlvZHJvbWUnLFxyXG4gICAgICAnZnInOiAnUml4ZSDDoCBsXFwnSMOpbGlvZHJvbWUnLFxyXG4gICAgICAnamEnOiAn44Kr44Or44OG44OO44O85bmz5Y6f6YGt6YGH5oimJyxcclxuICAgICAgJ2tvJzogJ+y5tOultO2FjOuFuCDtj4nsm5Ag7KGw7Jqw7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2MzU6IHtcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnpZ7mi7Pnl5UnLFxyXG4gICAgICAnZGUnOiAnUmhhbGdycyBXYWNodCcsXHJcbiAgICAgICdlbic6ICdSaGFsZ3JcXCdzIFJlYWNoJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXRlbmR1ZSBkZSBSaGFsZ3InLFxyXG4gICAgICAnamEnOiAn44Op44O844Or44Ks44O844K644Oq44O844OBJyxcclxuICAgICAgJ2tvJzogJ+uehOqxsOydmCDshpDquLgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzgsXHJcbiAgfSxcclxuICA2Mzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56WW5bCU5a6b5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gWnVydmFuJyxcclxuICAgICAgJ2VuJzogJ0NvbnRhaW5tZW50IEJheSBaMVQ5JyxcclxuICAgICAgJ2ZyJzogJ1VuaXTDqSBkZSBjb250ZW50aW9uIFoxUDknLFxyXG4gICAgICAnamEnOiAn6ay856We44K644Or44Ov44O844Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3gOyLoCDso7zrpbTrsJgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc1LFxyXG4gIH0sXHJcbiAgNjM4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elluWwlOWum+atvOaum+aImCcsXHJcbiAgICAgICdkZSc6ICdaZW5pdCBkZXIgR8O2dHRlciAtIFp1cnZhbicsXHJcbiAgICAgICdlbic6ICdDb250YWlubWVudCBCYXkgWjFUOSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnVW5pdMOpIGRlIGNvbnRlbnRpb24gWjFQOSAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+altemsvOelnuOCuuODq+ODr+ODvOODs+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg6reA7IugIOyjvOultOuwmCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzUsXHJcbiAgfSxcclxuICA2NTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIzLFxyXG4gICAgJ2V4VmVyc2lvbic6IDEsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S6keWGoOe+pOWym+S4sOmltuelnuemj+WcsCcsXHJcbiAgICAgICdkZSc6ICdEYXMgRGlhZGVtIC0gTm9waGljYXMgUHLDvGZ1bmcnLFxyXG4gICAgICAnZW4nOiAnVGhlIERpYWRlbSAtIFRyaWFscyBvZiB0aGUgTWF0cm9uJyxcclxuICAgICAgJ2ZyJzogJ0xlIERpYWTDqG1lIC0gw4lwcmV1dmVzIGRlIE5vcGhpY2EnLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6i57SiIOODh+OCo+OCouODh+ODoOiruOWztiAo5o6h6ZuGKScsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EOiDssYTsp5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNzEsXHJcbiAgfSxcclxuICA2NjA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Kej5pS+5Yaz5oiY5aSa546b546L5Z+OJyxcclxuICAgICAgJ2RlJzogJ0J1cmcgRG9tYScsXHJcbiAgICAgICdlbic6ICdEb21hIENhc3RsZScsXHJcbiAgICAgICdmcic6ICdMZSBDaMOidGVhdSBkZSBEb21hJyxcclxuICAgICAgJ2phJzogJ+ino+aUvuaxuuaIpiDjg4njg57ln44nLFxyXG4gICAgICAna28nOiAn64+E66eIIOyEsScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjYxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3qOeCruimgeWhnuW4neWbveeZveWxseWgoScsXHJcbiAgICAgICdkZSc6ICdDYXN0cnVtIEFiYW5pYScsXHJcbiAgICAgICdlbic6ICdDYXN0cnVtIEFiYW5pYScsXHJcbiAgICAgICdmcic6ICdDYXN0cnVtIEFiYW5pYScsXHJcbiAgICAgICdqYSc6ICflt6jnoLLopoHloZ4g44Kr44K544OI44Or44Og44O744Ki44OQ44OL44KiJyxcclxuICAgICAgJ2tvJzogJ+y5tOyKpO2KuOujuCDslYTrsJTri4jslYQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNzIsXHJcbiAgICAnb2Zmc2V0WSc6IC0xODYsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oG25YWa5a2k5Z+O6buE6YeR6ZiBJyxcclxuICAgICAgJ2RlJzogJ1NjaGxvc3MgS3VnYW5lJyxcclxuICAgICAgJ2VuJzogJ0t1Z2FuZSBDYXN0bGUnLFxyXG4gICAgICAnZnInOiAnTGUgQ2jDonRlYXUgZGUgS3VnYW5lJyxcclxuICAgICAgJ2phJzogJ+aCquWFmuaIkOaVlyDjgq/jgqzjg43ln44nLFxyXG4gICAgICAna28nOiAn7L+g6rCA64SkIOyEsScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA3MCxcclxuICAgICdvZmZzZXRZJzogMzMsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5L+u6KGM5Y+k5Yi55pif5a+85a+6JyxcclxuICAgICAgJ2RlJzogJ1RlbXBlbCBkZXIgRmF1c3QnLFxyXG4gICAgICAnZW4nOiAnVGhlIFRlbXBsZSBvZiB0aGUgRmlzdCcsXHJcbiAgICAgICdmcic6ICdMZSBUZW1wbGUgZHUgUG9pbmcnLFxyXG4gICAgICAnamEnOiAn5aOK56We5L+u6KGMIOaYn+WwjuWxseWvuumZoicsXHJcbiAgICAgICdrbyc6ICfshLHrj4TsgrAg7IKs7JuQJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC00MjcsXHJcbiAgICAnb2Zmc2V0WSc6IC0zMTQsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA2NjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6bG86YGT546w6Lqr77yBJyxcclxuICAgICAgJ2RlJzogJ0VpbiB6d2VpZmVsaGFmdGVzIEFuZ2Vib3QnLFxyXG4gICAgICAnZW4nOiAnSXRcXCdzIFByb2JhYmx5IGEgVHJhcCcsXHJcbiAgICAgICdmcic6ICdVbiBkcsO0bGUgZGUgTmFtYXp1JyxcclxuICAgICAgJ2phJzogJ+OCruODp+ODieOCpuePvuOCi++8gScsXHJcbiAgICAgICdrbyc6ICfqtZDrj4Qg65Ox7J6lIScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjc0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mhu+S9kOS5i+eUt+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdHw7Z0dGVyZMOkbW1lcnVuZyAtIFN1c2FubycsXHJcbiAgICAgICdlbic6ICdUaGUgUG9vbCBvZiBUcmlidXRlJyxcclxuICAgICAgJ2ZyJzogJ0xhIENyaXF1ZSBhdXggdHJpYnV0cycsXHJcbiAgICAgICdqYSc6ICfjgrnjgrXjg47jgqroqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Iqk7IKs64W47JikIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NyxcclxuICB9LFxyXG4gIDY3Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpobvkvZDkuYvnlLfmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBTdXNhbm8nLFxyXG4gICAgICAnZW4nOiAnVGhlIFBvb2wgb2YgVHJpYnV0ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgQ3JpcXVlIGF1eCB0cmlidXRzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144K544K144OO44Kq6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsiqTsgqzrhbjsmKQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDc3LFxyXG4gIH0sXHJcbiAgNjc5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnum+meatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdLw7ZuaWdsaWNoZSBNZW5hZ2VyaWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFJveWFsIE1lbmFnZXJpZScsXHJcbiAgICAgICdmcic6ICdMYSBNw6luYWdlcmllIHJveWFsZScsXHJcbiAgICAgICdqYSc6ICfnpZ7pvo3oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7Iug66OhIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NixcclxuICB9LFxyXG4gIDY4NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuo7ph4zmmILng63nmoTnp5jnrZYnLFxyXG4gICAgICAnZGUnOiAnV2VnZSB6dXIgVHJhbnN6ZW5kZW56JyxcclxuICAgICAgJ2VuJzogJ1RoZSBSZXNvbmFudCcsXHJcbiAgICAgICdmcic6ICdMYSBydXNlIGRcXCdVcmlhbmdlcicsXHJcbiAgICAgICdqYSc6ICfjgqbjg6rjgqjjg7Pjgrjjgqfjga7np5jnrZYnLFxyXG4gICAgICAna28nOiAn7JyE66as7JWZ7KCc7J2YIOu5hOyxhScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjg4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mCo+i+vuaFlScsXHJcbiAgICAgICdkZSc6ICdOYWFkYW0nLFxyXG4gICAgICAnZW4nOiAnTmFhZGFtJyxcclxuICAgICAgJ2ZyJzogJ0xhIGdyYW5kZSBiYXRhaWxsZSBkdSBOYWFkYW0nLFxyXG4gICAgICAnamEnOiAn57WC56+A44Gu5ZCI5oimJyxcclxuICAgICAgJ2tvJzogJ+qzhOygiOuBnSDtlansoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDY4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpj5bmiJjnuqLojrLpmL/mi4nnsbPmoLwnLFxyXG4gICAgICAnZGUnOiAnQWxhIE1oaWdvJyxcclxuICAgICAgJ2VuJzogJ0FsYSBNaGlnbycsXHJcbiAgICAgICdmcic6ICdBbGEgTWhpZ28nLFxyXG4gICAgICAnamEnOiAn57SF6JOu5rG65oimIOOCouODqeODn+OCtCcsXHJcbiAgICAgICdrbyc6ICfslYzrnbzrr7jqs6AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjkyLFxyXG4gICAgJ29mZnNldFknOiAtMTYzLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNjkwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aXtuepuueLree8neWklue8mCcsXHJcbiAgICAgICdkZSc6ICdJbnRlcmRpbWVuc2lvbmFsZXIgUmlzcycsXHJcbiAgICAgICdlbic6ICdJbnRlcmRpbWVuc2lvbmFsIFJpZnQnLFxyXG4gICAgICAnZnInOiAnRmlzc3VyZSBpbnRlcmRpbWVuc2lvbm5lbGxlJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk++8muWklue4gScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIOiDsmbjqs70nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMS4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjEuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYxLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMi4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjIuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYyLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMy4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjMuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYzLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgNC4wJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjQuMCcsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHY0LjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44OH44Or44K/57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog64247YOA7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMS4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjEuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYxLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDEnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMi4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjIuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYyLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDInLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgMy4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjMuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHYzLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDMnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA2OTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOW+t+WwlOWhlOW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnRGVsdGFtZXRyaWUgNC4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0RlbHRhc2NhcGUgVjQuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdEZWx0YXN0aWNlIHY0LjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muODh+ODq+OCv+e3qDQnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOuNuO2DgO2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODgsXHJcbiAgfSxcclxuICA3MDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSn5Lya5byA5aeLJyxcclxuICAgICAgJ2RlJzogJ1RoYWwgenUgRWhyZW4nLFxyXG4gICAgICAnZW4nOiAnSW4gVGhhbFxcJ3MgTmFtZScsXHJcbiAgICAgICdmcic6ICdMZSB0b3Vybm9pIGNvbW3DqW1vcmF0aWYgZHUgc3VsdGFuYXQnLFxyXG4gICAgICAnamEnOiAn44Km44Or546L5p2v6ZeY5oqA5Lya44Gu5aeL44G+44KKJyxcclxuICAgICAgJ2tvJzogJ+yauOuLpO2VmCDsmZXsi6TrsLAg7Yis6riw64yA7ZqMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgsXHJcbiAgfSxcclxuICA3MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Li65LqG5pu05by6JyxcclxuICAgICAgJ2RlJzogJ0RpZSBob2hlIEt1bnN0IGRlcyBTY2h3ZXJ0a2FtcGZzJyxcclxuICAgICAgJ2VuJzogJ1JhaXNpbmcgdGhlIFN3b3JkJyxcclxuICAgICAgJ2ZyJzogJ0xhIGZpbmFsZSBkZXMgY2hhbXBpb25zJyxcclxuICAgICAgJ2phJzogJ+OBleOCieOBquOCi+WJo+ihk+OBrumrmOOBv+OBuCcsXHJcbiAgICAgICdrbyc6ICfrjZQg64aS7J2AIOqygOyIoOydmCDqsr3sp4DroZwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOCxcclxuICB9LFxyXG4gIDcwNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmipfkuonkuYvlipsnLFxyXG4gICAgICAnZGUnOiAnRGllIEtyYWZ0IGRlcyBXaWRlcnN0YW5kcycsXHJcbiAgICAgICdlbic6ICdXaXRoIEhlYXJ0IGFuZCBTdGVlbCcsXHJcbiAgICAgICdmcic6ICdUcmFuc21pZ3JhdGlvbiBkw6ltb25pYXF1ZScsXHJcbiAgICAgICdqYSc6ICfmipfjgYblipsnLFxyXG4gICAgICAna28nOiAn66ee7ISc64qUIO2emCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAyOTgsXHJcbiAgICAnb2Zmc2V0WSc6IDM1MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMzcsXHJcbiAgfSxcclxuICA3MDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rW36YO96Lev5Lq66Lqr6aaW5byCJyxcclxuICAgICAgJ2RlJzogJ01vcmQgaXN0IHNlaW4gSG9iYnknLFxyXG4gICAgICAnZW4nOiAnQmxvb2Qgb24gdGhlIERlY2snLFxyXG4gICAgICAnZnInOiAnTGEgbMOpZ2VuZGUgZGUgTXVzb3NhaTxJbmRlbnQvPjogbFxcJ2Fzc2Fzc2luIGRlIExpbXNhIExvbWluc2EnLFxyXG4gICAgICAnamEnOiAn5rW36YO944KS6ZyH44KP44GZ5Lq65pas44KK44Gu5a6077yBJyxcclxuICAgICAgJ2tvJzogJ+2VtOyWkeuPhOyLnOulvCDtnZTrk5zripQg7IK07J247J6Q7J2YIOyXsO2ajCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcwOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnoHmgbbkuYvkurrmnKjmnq8nLFxyXG4gICAgICAnZGUnOiAnRGVyIEluYmVncmlmZiBkZXMgQsO2c2VuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGYWNlIG9mIFRydWUgRXZpbCcsXHJcbiAgICAgICdmcic6ICdMXFwnYWJvbWluYWJsZSBLb2dhcmFzaGknLFxyXG4gICAgICAnamEnOiAn5qW15oKq5Lq644Kz44Ks44Op44K3JyxcclxuICAgICAgJ2tvJzogJ+q3ueyVheustOuPhO2VnCDsvZTqsIDrnbzsi5wnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogOTUsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0OSxcclxuICB9LFxyXG4gIDcxMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnb7lj7bpl6jlpJbkuYvlj5gnLFxyXG4gICAgICAnZGUnOiAnVm9yZmFsbCBhdWYgZGVtIE1hdHN1YmEtUGxhdHonLFxyXG4gICAgICAnZW4nOiAnTWF0c3ViYSBNYXloZW0nLFxyXG4gICAgICAnZnInOiAnUsOoZ2xlbWVudCBkZSBjb21wdGUgYXUgc3F1YXJlIE1hdHN1YmEnLFxyXG4gICAgICAnamEnOiAn5p2+6JGJ6ZaA5aSW44Gu5aSJJyxcclxuICAgICAgJ2tvJzogJ+uniOy4oOuwlCDsgqzrs4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODIsXHJcbiAgfSxcclxuICA3MTE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yaz5oiY6b6f55Sy5bKbJyxcclxuICAgICAgJ2RlJzogJ0VudDxTb2Z0SHlwaGVuLz5zY2hlaTxTb2Z0SHlwaGVuLz5kdW5nczxTb2Z0SHlwaGVuLz5zY2hsYWNodCBhdWYgQmVra28nLFxyXG4gICAgICAnZW4nOiAnVGhlIEJhdHRsZSBvbiBCZWtrbycsXHJcbiAgICAgICdmcic6ICdMXFwnYWY8U29mdEh5cGhlbi8+ZnJvbjxTb2Z0SHlwaGVuLz50ZTxTb2Z0SHlwaGVuLz5tZW50IGRlIGRldXgganVzdGljZXMnLFxyXG4gICAgICAnamEnOiAn44OZ44OD44Kz44Km5bO244Gu5rG66ZeYJyxcclxuICAgICAgJ2tvJzogJ+uyoOy9lOyasCDshKzsnZgg6rKw7YisJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDgzLFxyXG4gIH0sXHJcbiAgNzEyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/kOays+WuneeJqeW6kycsXHJcbiAgICAgICdkZSc6ICdLYW7DpGxlIHZvbiBVem5haXInLFxyXG4gICAgICAnZW4nOiAnVGhlIExvc3QgQ2FuYWxzIG9mIFV6bmFpcicsXHJcbiAgICAgICdmcic6ICdMZXMgQ2FuYXV4IHBlcmR1cyBkXFwnVXpuYWlyJyxcclxuICAgICAgJ2phJzogJ+WuneeJqeW6qyDjgqbjgrrjg43jgqLjgqvjg4rjg6snLFxyXG4gICAgICAna28nOiAn67O066y86rOgIOyasOymiOuEpOyWtCDsmrTtlZgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcxMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmvIbpu5HnmoTlt6jpvpknLFxyXG4gICAgICAnZGUnOiAnRGVyIHRvYmVuZGUgRHJhY2hlJyxcclxuICAgICAgJ2VuJzogJ0RhcmsgYXMgdGhlIE5pZ2h0IFNreScsXHJcbiAgICAgICdmcic6ICdBdXNzaSBzb21icmUgcXVlIGxhIG51aXQnLFxyXG4gICAgICAnamEnOiAn5ryG6buS44Gu5beo56ucJyxcclxuICAgICAgJ2tvJzogJ+y5oO2dkeydmCDqsbDro6EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODUsXHJcbiAgfSxcclxuICA3MTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qi6KGA5LmL6b6Z6aqR5aOrJyxcclxuICAgICAgJ2RlJzogJ0RlciBSdWJpbi1EcmFjaGVucmVpdGVyJyxcclxuICAgICAgJ2VuJzogJ0RyYWdvbiBTb3VuZCcsXHJcbiAgICAgICdmcic6ICdMZSBEcmFnb24gw6ljYXJsYXRlJyxcclxuICAgICAgJ2phJzogJ+e0heOBruernOmojuWjqycsXHJcbiAgICAgICdrbyc6ICfrtonsnYAg7Jqp6riw7IKsJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3MTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6YGl6L+c55qE5oan5oasJyxcclxuICAgICAgJ2RlJzogJ1Byb2JlIGRlcyBNZWlzdGVycycsXHJcbiAgICAgICdlbic6ICdUaGUgT3JwaGFucyBhbmQgdGhlIEJyb2tlbiBCbGFkZScsXHJcbiAgICAgICdmcic6ICdMXFwnYXNwaXJhdGlvbiByZWZvdWzDqWUnLFxyXG4gICAgICAnamEnOiAn44GC44Go5LiJ5bqm44CB6YGl44GL44Gq5oan5oasJyxcclxuICAgICAgJ2tvJzogJ+yVnuycvOuhnCDshLgg67KILCDslYTrk53tlZwg64+Z6rK9JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDk1LFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODYsXHJcbiAgfSxcclxuICA3MTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5YaN5qyh55u46KeBJyxcclxuICAgICAgJ2RlJzogJ0F1cyBkZXIgVGllZmUgZGVzIEhlcnplbnMnLFxyXG4gICAgICAnZW4nOiAnT3VyIENvbXByb21pc2UnLFxyXG4gICAgICAnZnInOiAnTGEgZGVybmnDqHJlIHPDqXBhcmF0aW9uJyxcclxuICAgICAgJ2phJzogJ+OBguOBqOS4gOW6puOAgeWQm+OBq+S8muOBiOOBn+OCiScsXHJcbiAgICAgICdrbyc6ICfslZ7snLzroZwg7ZWcIOuyiCwg64SI7JmAIOunjOuCoCDsiJgg7J6I64uk66m0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgNzE3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WOn+WIneeahOaImOWjqycsXHJcbiAgICAgICdkZSc6ICdEaWUgVXJrcmFmdCBpbiBpaHInLFxyXG4gICAgICAnZW4nOiAnQ3VyaW91cyBHb3JnZSBNZWV0cyBIaXMgTWF0Y2gnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OpcHJldXZlIGRlIGZvcmNlJyxcclxuICAgICAgJ2phJzogJ+WOn+WIneeahOOBquW9vOWlsycsXHJcbiAgICAgICdrbyc6ICfsm5DstIjsoIEg6re464WAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC03NyxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcxODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnh4Png6flkKfpq5jlkIknLFxyXG4gICAgICAnZGUnOiAnS3JpZWdlcmlzY2hlIExlaWRlbnNjaGFmdCcsXHJcbiAgICAgICdlbic6ICdUaGUgSGVhcnQgb2YgdGhlIFByb2JsZW0nLFxyXG4gICAgICAnZnInOiAnUGFzc2lvbiBndWVycmnDqHJlJyxcclxuICAgICAgJ2phJzogJ+eHg+OBiOOCiOOCtOODvOOCuO+8gScsXHJcbiAgICAgICdrbyc6ICfrtojtg4DsmKzrnbzrnbwsIOyCsOqzqOynnOq4sCEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODUsXHJcbiAgfSxcclxuICA3MTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ZCJ56Wl5aSp5aWz5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0fDtnR0ZXJkw6RtbWVydW5nIC0gTGFrc2htaScsXHJcbiAgICAgICdlbic6ICdFbWFuYXRpb24nLFxyXG4gICAgICAnZnInOiAnw4ltYW5hdGlvbicsXHJcbiAgICAgICdqYSc6ICfjg6njgq/jgrfjg6Xjg5/oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn65297IqI66+4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NyxcclxuICB9LFxyXG4gIDcyMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflkInnpaXlpKnlpbPmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnWmVuaXQgZGVyIEfDtnR0ZXIgLSBMYWtzaG1pJyxcclxuICAgICAgJ2VuJzogJ0VtYW5hdGlvbiAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnw4ltYW5hdGlvbiAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODqeOCr+OCt+ODpeODn+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg65297IqI66+4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA4NyxcclxuICB9LFxyXG4gIDcyMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnqb/otorml7bnqbrnmoTlpJnmhL8nLFxyXG4gICAgICAnZGUnOiAnRWluIFd1bnNjaCBhdXMgYWx0ZW4gWmVpdGVuJyxcclxuICAgICAgJ2VuJzogJ091ciBVbnN1bmcgSGVyb2VzJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdlc3BvaXIgZW4gaMOpcml0YWdlJyxcclxuICAgICAgJ2phJzogJ+aZguOCkuOBi+OBkeOCi+mhmOOBhCcsXHJcbiAgICAgICdrbyc6ICfsi5zqsITsnYQg65uw7Ja064SY7J2AIOyXvOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTc1LFxyXG4gICAgJ29mZnNldFknOiAtMjk3LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA2MyxcclxuICB9LFxyXG4gIDcyMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflvbHpmpDlv43ms5XotLQnLFxyXG4gICAgICAnZGUnOiAnQXVzIGRlbSBWZXJib3JnZW5lbicsXHJcbiAgICAgICdlbic6ICdXaGVuIENsYW5zIENvbGxpZGUnLFxyXG4gICAgICAnZnInOiAnTGEgYmF0YWlsbGUgZGVzIGNsYW5zJyxcclxuICAgICAgJ2phJzogJ+W9semaoOW/jeazleW4licsXHJcbiAgICAgICdrbyc6ICfqt7jrprzsnpAg7J2467KV7LKpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDg1LFxyXG4gIH0sXHJcbiAgNzI1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+i/kOays+WuneeJqeW6k+a3seWxgicsXHJcbiAgICAgICdkZSc6ICdWZXJnZXNzZW5lIEthbsOkbGUgdm9uIFV6bmFpcicsXHJcbiAgICAgICdlbic6ICdUaGUgSGlkZGVuIENhbmFscyBvZiBVem5haXInLFxyXG4gICAgICAnZnInOiAnTGVzIENhbmF1eCBjYWNow6lzIGRcXCdVem5haXInLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOOCpuOCuuODjeOCouOCq+ODiuODq+a3seWxpCcsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag7Jqw7KaI64Sk7Ja0IOyatO2VmCDsi6zsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDcyOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfot53pqqjnoJTnqbbmiYDvvIjmnLrliqjmiJjvvIknLFxyXG4gICAgICAnZGUnOiAnQXN0cmFnYWxvcycsXHJcbiAgICAgICdlbic6ICdBc3RyYWdhbG9zJyxcclxuICAgICAgJ2ZyJzogJ0FzdHJhZ2Fsb3MgKG1hY2hpbmVyaWUpJyxcclxuICAgICAgJ2phJzogJ+OCouOCueODiOODqeOCrOODreOCuSAo5qmf5bel5oimKScsXHJcbiAgICAgICdrbyc6ICfslYTsiqTtirjrnbzqsIjroZzsiqQo6riw6rO17KCEKScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnum+meaipuW5u+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdIZWxkZW5saWVkIHZvbiBTaGlucnl1JyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBTaGlucnl1XFwncyBEb21haW4nLFxyXG4gICAgICAnZnInOiAnTGUgZG9tYWluZSBkZSBTaGlucnl1JyxcclxuICAgICAgJ2phJzogJ+alteelnum+jeiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7Iug66OhIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA3NixcclxuICB9LFxyXG4gIDczMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsonmsqHnpZ7mrr/mlq/ljaHmi4npgZfov7knLFxyXG4gICAgICAnZGUnOiAnRGllIHZlcnN1bmtlbmUgU3RhZHQgU2thbGxhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEcm93bmVkIENpdHkgb2YgU2thbGxhJyxcclxuICAgICAgJ2ZyJzogJ0xhIENpdMOpIGVuZ2xvdXRpZSBkZSBTa2FsbGEnLFxyXG4gICAgICAnamEnOiAn5rC05rKh6YG65qeLIOOCueOCq+ODqScsXHJcbiAgICAgICdrbyc6ICfsiqTsubzrnbwg7Jyg7KCBJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDE4NSxcclxuICAgICdvZmZzZXRZJzogNSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDczMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjYsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56aB5Zyw5LyY6Zu35Y2hIOW4uOmjjuS5i+WcsCcsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgQW5lbW9zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGb3JiaWRkZW4gTGFuZCwgRXVyZWthIEFuZW1vcycsXHJcbiAgICAgICdmcic6ICdFdXLDqmthIEFuZW1vcycsXHJcbiAgICAgICdqYSc6ICfnpoHmlq3jga7lnLAg44Ko44Km44Os44Kr77ya44Ki44ON44Oi44K557eoJyxcclxuICAgICAgJ2tvJzogJ+q4iOuLqOydmCDrlYUg7JeQ7Jqw66CI7Lm0OiDslYTrhKTrqqjsiqTtjrgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTEsXHJcbiAgfSxcclxuICA3MzM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI4LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W3tOWTiOWnhueJuee7neWig+aImCcsXHJcbiAgICAgICdkZSc6ICdFbmRsb3NlIFNjaGF0dGVuIHZvbiBCYWhhbXV0IChmYXRhbCknLFxyXG4gICAgICAnZW4nOiAnVGhlIFVuZW5kaW5nIENvaWwgb2YgQmFoYW11dCAoVWx0aW1hdGUpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBYsOubWUgaW5maW5pIGRlIEJhaGFtdXQgKGZhdGFsKScsXHJcbiAgICAgICdqYSc6ICfntbbjg5Djg4/jg6Djg7zjg4joqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KCIIOuwlO2VmOustO2KuCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDczNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpLHokL3kuYvpg73mi4nlt7TnurPmlq/loZQnLFxyXG4gICAgICAnZGUnOiAnUmFiYW5hc3RyZScsXHJcbiAgICAgICdlbic6ICdUaGUgUm95YWwgQ2l0eSBvZiBSYWJhbmFzdHJlJyxcclxuICAgICAgJ2ZyJzogJ0xhIENpdMOpIHJveWFsZSBkZSBSYWJhbmFzdHJlJyxcclxuICAgICAgJ2phJzogJ+WkseOCj+OCjOOBn+mDvSDjg6njg5Djg4rjgrnjgr8nLFxyXG4gICAgICAna28nOiAn7JmV64+EIOudvOuwlOuCmOyKpO2EsCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAzMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+iJr+e8mOS7quW8jycsXHJcbiAgICAgICdkZSc6ICdWYWxlbnRpb256ZXJlbW9uaWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFZhbGVudGlvbmVcXCdzIENlcmVtb255JyxcclxuICAgICAgJ2ZyJzogJ0xhIEPDqXLDqW1vbmllIGRlIGxhIFZhbGVudGlvbicsXHJcbiAgICAgICdqYSc6ICfjg7TjgqHjg6zjg7Pjg4bjgqPjgqrjg7Pjgrvjg6zjg6Ljg4vjg7wnLFxyXG4gICAgICAna28nOiAn67Cc66CM7Yuw7JioIOyYiOyLneyepScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAxMjUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qi546J54Gr5bGx54ux5LmL55uWJyxcclxuICAgICAgJ2RlJzogJ0jDtmxsZW5zcHVuZCcsXHJcbiAgICAgICdlbic6ICdIZWxsc1xcJyBMaWQnLFxyXG4gICAgICAnZnInOiAnTGUgQ291dmVyY2xlIGRlcyBlbmZlcnMnLFxyXG4gICAgICAnamEnOiAn57SF546J54Gr5bGxIOeNhOS5i+iTiycsXHJcbiAgICAgICdrbyc6ICfsp4DsmKXrmpzqu5EnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnlq/ni4LmiJjoiLDml6DpmZDlm57lu4onLFxyXG4gICAgICAnZGUnOiAnRGllIEZyYWt0YWwtS29udGludXVtIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGcmFjdGFsIENvbnRpbnV1bSAoSGFyZCknLFxyXG4gICAgICAnZnInOiAnTGUgQ29udGludXVtIGZyYWN0YWwgKGJydXRhbCknLFxyXG4gICAgICAnamEnOiAn5pq06LWw5oim6ImmIOODleODqeOCr+OCv+ODq+ODu+OCs+ODs+ODhuOCo+ODi+OCouODoCAoSGFyZCknLFxyXG4gICAgICAna28nOiAn66y07ZWc7Jew7IaNIOuwleusvO2VqCjslrTroKTsm4ApJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDM1MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnmb3omY7plYfprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVudGFueiAtIEJ5YWtrbycsXHJcbiAgICAgICdlbic6ICdUaGUgSmFkZSBTdG9hJyxcclxuICAgICAgJ2ZyJzogJ0xhIENsYWlyacOocmUgZGUgSmFkZScsXHJcbiAgICAgICdqYSc6ICfnmb3omY7lvoHprYLmiKYnLFxyXG4gICAgICAna28nOiAn67Cx7Zi4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MyxcclxuICB9LFxyXG4gIDc0ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAxLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMS4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjEuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gxJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAyLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMi4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjIuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gyJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAzLjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMy4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjMuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6gzJyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSA0LjAnLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWNC4wJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjQuMCcsXHJcbiAgICAgICdqYSc6ICfmrKHlhYPjga7ni63plpPjgqrjg6HjgqzvvJrjgrfjgrDjg57nt6g0JyxcclxuICAgICAgJ2tvJzogJ+ywqOybkOydmCDti4gg7Jik66mU6rCAOiDsi5zqt7jrp4jtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMScsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAxLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMS4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjEuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMicsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAyLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMi4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjIuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMicsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDMycsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSAzLjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWMy4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjMuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrKfnsbPojITpm7blvI/ml7bnqbrni63nvJ0g6KW/5qC8546b5bm75aKDNCcsXHJcbiAgICAgICdkZSc6ICdTaWdtYW1ldHJpZSA0LjAgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnU2lnbWFzY2FwZSBWNC4wIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ1NpZ21hc3RpY2UgdjQuMCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks6Zu25byP77ya44K344Kw44Oe57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7Iuc6re466eI7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5MixcclxuICB9LFxyXG4gIDc1ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnmb3omY7or5fprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVuc3R1cm0gLSBCeWFra28nLFxyXG4gICAgICAnZW4nOiAnVGhlIEphZGUgU3RvYSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgQ2xhaXJpw6hyZSBkZSBKYWRlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW155m96JmO5b6B6a2C5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrsLHtmLgg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDkzLFxyXG4gIH0sXHJcbiAgNzU5OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSa546b6aOe5ZywJyxcclxuICAgICAgJ2RlJzogJ0RvbWFuaXNjaGUgRW5rbGF2ZScsXHJcbiAgICAgICdlbic6ICdUaGUgRG9tYW4gRW5jbGF2ZScsXHJcbiAgICAgICdmcic6ICdRdWFydGllciBlbmNsYXbDqSBkZSBEb21hJyxcclxuICAgICAgJ2phJzogJ+ODieODnueUuuS6uuWcsCcsXHJcbiAgICAgICdrbyc6ICfrj4Trp4gg64+E7J2N7KeAJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDIzLFxyXG4gICAgJ29mZnNldFknOiAzNCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogODQsXHJcbiAgfSxcclxuICA3NjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54Gr6b6Z54up54yO5oiYJyxcclxuICAgICAgJ2RlJzogJ0phZ2QgYXVmIFJhdGhhbG9zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHcmVhdCBIdW50JyxcclxuICAgICAgJ2ZyJzogJ0NoYXNzZSBhdSBSYXRoYWxvcycsXHJcbiAgICAgICdqYSc6ICfjg6rjgqrjg6zjgqbjgrnni6nnjJ/miKYnLFxyXG4gICAgICAna28nOiAn66as7Jik66CI7Jqw7IqkIOyImOugteyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzYyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eBq+m+meS4iuS9jeeLqeeMjuaImCcsXHJcbiAgICAgICdkZSc6ICdKYWdkIGF1ZiBSYXRoYWxvcyAoc2Nod2VyKScsXHJcbiAgICAgICdlbic6ICdUaGUgR3JlYXQgSHVudCAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnQ2hhc3NlIGF1IFJhdGhhbG9zIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Oq44Kq44Os44Km44K554up54yf5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDrpqzsmKTroIjsmrDsiqQg7IiY66C17KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NjM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+emgeWcsOS8mOmbt+WNoSDmgZLlhrDkuYvlnLAnLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIFBhZ29zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGb3JiaWRkZW4gTGFuZCwgRXVyZWthIFBhZ29zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgUGFnb3MnLFxyXG4gICAgICAnamEnOiAn56aB5pat44Gu5ZywIOOCqOOCpuODrOOCq++8muODkeOCtOOCuee3qCcsXHJcbiAgICAgICdrbyc6ICfquIjri6jsnZgg65WFIOyXkOyasOugiOy5tDog7YyM6rOg7Iqk7Y64JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk0LFxyXG4gIH0sXHJcbiAgNzY4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mjjuawtOeBteW6meWyqeeHleW6mScsXHJcbiAgICAgICdkZSc6ICdLb21wYXNzIGRlciBTY2h3YWxiZScsXHJcbiAgICAgICdlbic6ICdUaGUgU3dhbGxvd1xcJ3MgQ29tcGFzcycsXHJcbiAgICAgICdmcic6ICdMZSBDb21wYXMgZGUgbFxcJ0hpcm9uZGVsbGUnLFxyXG4gICAgICAnamEnOiAn6aKo5rC06ZyK5q6/IOOCrOODs+OCqOODs+W7nycsXHJcbiAgICAgICdrbyc6ICfqsJXsl5Qg7KKF66yYJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDI0MCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc2OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmi4LmmZPnmoTlsJHlubQnLFxyXG4gICAgICAnZGUnOiAnRGVyIEtuYWJlIGRlciBNb3JnZW5yw7Z0ZScsXHJcbiAgICAgICdlbic6ICdFbWlzc2FyeSBvZiB0aGUgRGF3bicsXHJcbiAgICAgICdmcic6ICdWb3lhZ2UgZW4gdGVycmUgaG9zdGlsZScsXHJcbiAgICAgICdqYSc6ICfjgIzmmoHjgI3jga7lsJHlubQnLFxyXG4gICAgICAna28nOiAnXFwn7IOI67K9XFwn7J2YIOyGjOuFhCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzcwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgMe+9njEw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiAxLTEwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyAxLTEwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDEtMTApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSAx772eMTDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDF+MTDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc3MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDEx772eMjDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDExLTIwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyAxMS0yMCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyAxMS0yMCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDEx772eMjDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDExfjIw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSAyMe+9njMw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiAyMS0zMCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgMjEtMzApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgMjEtMzApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSAyMe+9njMw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSAyMX4zMOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzczOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgNDHvvZ41MOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gNDEtNTApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDQxLTUwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDQxLTUwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgNDHvvZ41MOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgNDF+NTDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc3NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDYx772eNzDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDYxLTcwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyA2MS03MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyA2MS03MCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDYx772eNzDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDYxfjcw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3NzU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSA4Me+9njkw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiA4MS05MCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgODEtOTApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgODEtOTApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSA4Me+9njkw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA4MX45MOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzc2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WwgemXreWco+WhlOm7jumTjuaLiee6s+Wkp+eBr+WhlCcsXHJcbiAgICAgICdkZSc6ICdSaWNodGZldWVyIHZvbiBSaWRvcmFuYScsXHJcbiAgICAgICdlbic6ICdUaGUgUmlkb3JhbmEgTGlnaHRob3VzZScsXHJcbiAgICAgICdmcic6ICdMZSBQaGFyZSBkZSBSaWRvcmFuYScsXHJcbiAgICAgICdqYSc6ICflsIHjgZjjgonjgozjgZ/ogZbloZQg44Oq44OJ44Or44Ki44OKJyxcclxuICAgICAgJ2tvJzogJ+uMgOuTseuMgCDrpqzrj4TrpbTslYTrgpgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjAyLFxyXG4gICAgJ29mZnNldFknOiAtOTIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3Nzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI4LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+eptuaegeelnuWFtee7neWig+aImCcsXHJcbiAgICAgICdkZSc6ICdIZWxkZW5saWVkIHZvbiBVbHRpbWEgKGZhdGFsKScsXHJcbiAgICAgICdlbic6ICdUaGUgV2VhcG9uXFwncyBSZWZyYWluIChVbHRpbWF0ZSknLFxyXG4gICAgICAnZnInOiAnTGEgRmFudGFzbWFnb3JpZSBkXFwnVWx0aW1hIChmYXRhbCknLFxyXG4gICAgICAnamEnOiAn57W244Ki44Or44OG44Oe44Km44Kn44Od44Oz56C05aOK5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+ygiCDslYzthYzrp4gg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyNixcclxuICB9LFxyXG4gIDc3ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnIjor7vmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnR8O2dHRlcmTDpG1tZXJ1bmcgLSBUc3VrdXlvbWknLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBGbHVtaW5pcycsXHJcbiAgICAgICdmcic6ICdDYXN0cnVtIEZsdW1pbmlzJyxcclxuICAgICAgJ2phJzogJ+ODhOOCr+ODqOODn+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfsuKDsv6DsmpTrr7gg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3Nzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyI6K+75bm95aSc5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ1plbml0IGRlciBHw7Z0dGVyIC0gVHN1a3V5b21pJyxcclxuICAgICAgJ2VuJzogJ1RoZSBNaW5zdHJlbFxcJ3MgQmFsbGFkOiBUc3VrdXlvbWlcXCdzIFBhaW4nLFxyXG4gICAgICAnZnInOiAnQ2FzdHJ1bSBGbHVtaW5pcyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteODhOOCr+ODqOODn+iojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7Lig7L+g7JqU66+4IO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzgyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgMzHvvZ40MOWxgicsXHJcbiAgICAgICdkZSc6ICdIaW1tZWxzc8OkdWxlIChFYmVuZW4gMzEtNDApJyxcclxuICAgICAgJ2VuJzogJ0hlYXZlbi1vbi1IaWdoICAoRmxvb3JzIDMxLTQwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDMxLTQwKScsXHJcbiAgICAgICdqYSc6ICfjgqLjg6Hjg47jg5/jg4/jgrfjg6kgMzHvvZ40MOWxpCcsXHJcbiAgICAgICdrbyc6ICfsspzqtoHtg5EgMzF+NDDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjEsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LmL5b6h5p+xIDUx772eNjDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDUxLTYwKScsXHJcbiAgICAgICdlbic6ICdIZWF2ZW4tb24tSGlnaCAgKEZsb29ycyA1MS02MCknLFxyXG4gICAgICAnZnInOiAnTGUgUGlsaWVyIGRlcyBDaWV1eCAow6l0YWdlcyA1MS02MCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDUx772eNjDlsaQnLFxyXG4gICAgICAna28nOiAn7LKc6raB7YORIDUxfjYw7Li1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3ODQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIxLFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkqeS5i+W+oeafsSA3Me+9njgw5bGCJyxcclxuICAgICAgJ2RlJzogJ0hpbW1lbHNzw6R1bGUgKEViZW5lbiA3MS04MCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgNzEtODApJyxcclxuICAgICAgJ2ZyJzogJ0xlIFBpbGllciBkZXMgQ2lldXggKMOpdGFnZXMgNzEtODApJyxcclxuICAgICAgJ2phJzogJ+OCouODoeODjuODn+ODj+OCt+ODqSA3Me+9njgw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA3MX44MOy4tScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgNzg1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnkuYvlvqHmn7EgOTHvvZ4xMDDlsYInLFxyXG4gICAgICAnZGUnOiAnSGltbWVsc3PDpHVsZSAoRWJlbmVuIDkxLTEwMCknLFxyXG4gICAgICAnZW4nOiAnSGVhdmVuLW9uLUhpZ2ggIChGbG9vcnMgOTEtMTAwKScsXHJcbiAgICAgICdmcic6ICdMZSBQaWxpZXIgZGVzIENpZXV4ICjDqXRhZ2VzIDkxLTEwMCknLFxyXG4gICAgICAnamEnOiAn44Ki44Oh44OO44Of44OP44K344OpIDkx772eMTAw5bGkJyxcclxuICAgICAgJ2tvJzogJ+yynOq2ge2DkSA5MX4xMDDsuLUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmsaHmn5Pluq3lm63lnKPojInlpI/lqJzmpI3nianlm60nLFxyXG4gICAgICAnZGUnOiAnU2Fua3QgTW9jaWFubmUtQXJib3JldHVtIChzY2h3ZXIpJyxcclxuICAgICAgJ2VuJzogJ1NhaW50IE1vY2lhbm5lXFwncyBBcmJvcmV0dW0gKEhhcmQpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBcmJvcmV0dW0gU2FpbnRlLU1vY2lhbm5lIChicnV0YWwpJyxcclxuICAgICAgJ2phJzogJ+iNieacqOaxmuafkyDogZbjg6Ljgrfjg6Pjg7zjg4zmpI3nianlnJIgKEhhcmQpJyxcclxuICAgICAgJ2tvJzogJ+yEsSDrqqjsg6gg7Iud66y87JuQKOyWtOugpOybgCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc4OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmrbvkuqHlpKflnLDnu4jmnKvnhKblnJ8nLFxyXG4gICAgICAnZGUnOiAnRGFzIEthcmdsYW5kJyxcclxuICAgICAgJ2VuJzogJ1RoZSBCdXJuJyxcclxuICAgICAgJ2ZyJzogJ0xcXCdFc2NhcnJlJyxcclxuICAgICAgJ2phJzogJ+awuOS5heeEpuWcnyDjgrbjg7vjg5Djg7zjg7MnLFxyXG4gICAgICAna28nOiAn7JiB6rWsIOy0iO2GoOyngOuMgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5NyxcclxuICB9LFxyXG4gIDc5MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjIsXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn54G+5Y6E6YeN546w5Yab5LqL5ryU5LmgJyxcclxuICAgICAgJ2RlJzogJ0dlZGVua3NjaGxhY2h0IGRlciBFb3J6w6Rpc2NoZW4gQWxsaWFueicsXHJcbiAgICAgICdlbic6ICdUaGUgQ2FsYW1pdHkgUmV0b2xkJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBncmFuZGVzIG1hbsWTdXZyZXMgY29tbcOpbW9yYXRpdmVzJyxcclxuICAgICAgJ2phJzogJ+aWsOeUn+elrei7jeS6i+a8lOe/kicsXHJcbiAgICAgICdrbyc6ICfsi6Dsg53soJwg6rWw7IKs7ZuI66CoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk1LFxyXG4gIH0sXHJcbiAgNzkxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+makOWhnu+8iOacuuWKqOaImO+8iScsXHJcbiAgICAgICdkZSc6ICdWZXJib3JnZW5lIFNjaGx1Y2h0JyxcclxuICAgICAgJ2VuJzogJ0hpZGRlbiBHb3JnZScsXHJcbiAgICAgICdmcic6ICdHb3JnZSBkw6lyb2LDqWUgKG1hY2hpbmVyaWUpJyxcclxuICAgICAgJ2phJzogJ+ODkuODieOCpeODs+OCtOODvOOCuCAo5qmf5bel5oimKScsXHJcbiAgICAgICdrbyc6ICfsiKjqsqjsp4Qg67O066OoKOq4sOqzteyghCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc5Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Jma5pmv6Lez6Lez5LmQ5aSn5oyR5oiYJyxcclxuICAgICAgJ2RlJzogJ0tha3Rvci1LbGV0dGVyd2FuZCcsXHJcbiAgICAgICdlbic6ICdMZWFwIG9mIEZhaXRoJyxcclxuICAgICAgJ2ZyJzogJ0hhdXRlIHZvbHRpZ2UnLFxyXG4gICAgICAnamEnOiAn5oyR5oim77yBIOOCuOODo+ODs+ODlOODs+OCsOOCouOCueODrOODgeODg+OCrycsXHJcbiAgICAgICdrbyc6ICfrm7DslrTrnbwhIOygkO2VkSDsmrTrj5ntmownLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc5Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflm73looPpmLLnur/ln7rlp4bliKnnibnmmpfljLonLFxyXG4gICAgICAnZGUnOiAnRGllIEdoaW1seXQtRmluc3Rlcm5pcycsXHJcbiAgICAgICdlbic6ICdUaGUgR2hpbWx5dCBEYXJrJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBUw6luw6hicmVzIGRlIEdoaW1seXQnLFxyXG4gICAgICAnamEnOiAn5aKD55WM5oim57eaIOOCruODoOODquODiOODgOODvOOCrycsXHJcbiAgICAgICdrbyc6ICfquYDrpqztirgg7Zmp7JW8JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+Q5rKz5a6d54mp5bqT56We5q6/JyxcclxuICAgICAgJ2RlJzogJ0dsw7xja3NhbHTDpHJlIHZvbiBVem5haXInLFxyXG4gICAgICAnZW4nOiAnVGhlIFNoaWZ0aW5nIEFsdGFycyBvZiBVem5haXInLFxyXG4gICAgICAnZnInOiAnTGUgVGVtcGxlIHNhY3LDqSBkXFwnVXpuYWlyJyxcclxuICAgICAgJ2phJzogJ+WuneeJqeW6qyDjgqbjgrrjg43jgqLjgqvjg4rjg6vnpa3mrr8nLFxyXG4gICAgICAna28nOiAn67O066y86rOgIOyasOymiOuEpOyWtCDsmrTtlZgg7KCc7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI2LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+emgeWcsOS8mOmbt+WNoSDmtozngavkuYvlnLAnLFxyXG4gICAgICAnZGUnOiAnRXVyZWthIFB5cm9zJyxcclxuICAgICAgJ2VuJzogJ1RoZSBGb3JiaWRkZW4gTGFuZCwgRXVyZWthIFB5cm9zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgUHlyb3MnLFxyXG4gICAgICAnamEnOiAn56aB5pat44Gu5ZywIOOCqOOCpuODrOOCq++8muODlOODpeODvOODreOCuee3qCcsXHJcbiAgICAgICdrbyc6ICfquIjri6jsnZgg65WFIOyXkOyasOugiOy5tDog7ZS866Gc7Iqk7Y64JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk2LFxyXG4gIH0sXHJcbiAgNzk2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyNyxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflh7rpgZPmiJgnLFxyXG4gICAgICAnZGUnOiAnRGViw7x0IGluIGRlciBIaW1tbGlzY2hlbiBBcmVuYScsXHJcbiAgICAgICdlbic6ICdBbGxcXCdzIFdlbGwgVGhhdCBTdGFydHMgV2VsbCcsXHJcbiAgICAgICdmcic6ICdEw6lidXQgZHUgc3BlY3RhY2xlJyxcclxuICAgICAgJ2phJzogJ+ODh+ODk+ODpeODvOODnuODg+ODgScsXHJcbiAgICAgICdrbyc6ICfrjbDrt5TsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDc5Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmpZTnn7PmtJ4nLFxyXG4gICAgICAnZGUnOiAnRGVyIFdpbGxlIGRlciBNb25kZ8O2dHRpbicsXHJcbiAgICAgICdlbic6ICdUaGUgV2lsbCBvZiB0aGUgTW9vbicsXHJcbiAgICAgICdmcic6ICdSYWxsaWVtZW50IGRhbnMgbGEgc3RlcHBlJyxcclxuICAgICAgJ2phJzogJ+allOefs+OBruiZmicsXHJcbiAgICAgICdrbyc6ICfskJDquLDrj4wg64+Z6rW0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA3OTg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMS4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjEuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYxLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoMScsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA3OTk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMi4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjIuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYyLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoMicsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMy4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjMuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYzLjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoMycsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgNC4wJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjQuMCcsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHY0LjAnLFxyXG4gICAgICAnamEnOiAn5qyh5YWD44Gu54ut6ZaT44Kq44Oh44Ks77ya44Ki44Or44OV44Kh57eoNCcsXHJcbiAgICAgICdrbyc6ICfssKjsm5DsnZgg7YuIIOyYpOuplOqwgDog7JWM7YyM7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzEnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMS4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjEuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYxLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDEnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDM6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzInLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMi4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjIuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYyLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDInLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzMnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgMy4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjMuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHYzLjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDMnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDMnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qyn57Gz6IyE6Zu25byP5pe256m654ut57ydIOmYv+WwlOazleW5u+WigzQnLFxyXG4gICAgICAnZGUnOiAnQWxwaGFtZXRyaWUgNC4wIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0FscGhhc2NhcGUgVjQuMCAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdBbHBoYXN0aWNlIHY0LjAgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+asoeWFg+OBrueLremWk+OCquODoeOCrOmbtuW8j++8muOCouODq+ODleOCoee3qDQnLFxyXG4gICAgICAna28nOiAn7LCo7JuQ7J2YIO2LiCDsmKTrqZTqsIA6IOyVjO2MjO2OuCjsmIHsm4UpIDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTIsXHJcbiAgfSxcclxuICA4MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5L+d6ZWW5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0R1ZWxsIGF1ZiBkZXIgS3VnYW5lLUJyw7xja2UnLFxyXG4gICAgICAnZW4nOiAnS3VnYW5lIE9oYXNoaScsXHJcbiAgICAgICdmcic6ICdMZSBQb250IE9oYXNoaScsXHJcbiAgICAgICdqYSc6ICfnnJ/jg6jjgqbjgrjjg7Pjg5zjgqboqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KeEIOyalOyasOynhOuztCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDgxMDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnLHpm4DplYfprYLmiJgnLFxyXG4gICAgICAnZGUnOiAnU2VlbGVudGFueiAtIFN1emFrdScsXHJcbiAgICAgICdlbic6ICdIZWxsc1xcJyBLaWVyJyxcclxuICAgICAgJ2ZyJzogJ0xlIE5pZCBkZXMgTGFtZW50YXRpb25zJyxcclxuICAgICAgJ2phJzogJ+acsembgOW+gemtguaIpicsXHJcbiAgICAgICdrbyc6ICfso7zsnpEg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDk4LFxyXG4gIH0sXHJcbiAgODExOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDIsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acsembgOivl+mtguaImCcsXHJcbiAgICAgICdkZSc6ICdTZWVsZW5zdHVybSAtIFN1emFrdScsXHJcbiAgICAgICdlbic6ICdIZWxsc1xcJyBLaWVyIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMZSBOaWQgZGVzIExhbWVudGF0aW9ucyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+alteacsembgOW+gemtguaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7KO87J6RIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5OCxcclxuICB9LFxyXG4gIDgxMzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mbt+WFi+WFsOW+tycsXHJcbiAgICAgICdkZSc6ICdTZWVubGFuZCcsXHJcbiAgICAgICdlbic6ICdMYWtlbGFuZCcsXHJcbiAgICAgICdmcic6ICdHcmFuZC1MYWMnLFxyXG4gICAgICAnamEnOiAn44Os44Kk44Kv44Op44Oz44OJJyxcclxuICAgICAgJ2tvJzogJ+ugiOydtO2BrOuenOuTnCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDYsXHJcbiAgfSxcclxuICA4MTQ6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnj4LpnLLopb/kuprlspsnLFxyXG4gICAgICAnZGUnOiAnS2hvbHVzaWEnLFxyXG4gICAgICAnZW4nOiAnS2hvbHVzaWEnLFxyXG4gICAgICAnZnInOiAnS2hvbHVzaWEnLFxyXG4gICAgICAnamEnOiAn44Kz44Or44K344Ki5bO2JyxcclxuICAgICAgJ2tvJzogJ+y9nOujqOyLnOyVhCDshKwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA3LFxyXG4gIH0sXHJcbiAgODE1OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5a6J56mGwrfoib7lhbAnLFxyXG4gICAgICAnZGUnOiAnQW1oIEFyYWVuZycsXHJcbiAgICAgICdlbic6ICdBbWggQXJhZW5nJyxcclxuICAgICAgJ2ZyJzogJ0FtaCBBcmFlbmcnLFxyXG4gICAgICAnamEnOiAn44Ki44Og44O744Ki44Os44O844OzJyxcclxuICAgICAgJ2tvJzogJ+yVhOuvgCDslYTrnq0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA4LFxyXG4gIH0sXHJcbiAgODE2OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK5bCU576O5qC8JyxcclxuICAgICAgJ2RlJzogJ0lsIE1oZWcnLFxyXG4gICAgICAnZW4nOiAnSWwgTWhlZycsXHJcbiAgICAgICdmcic6ICdJbCBNaGVnJyxcclxuICAgICAgJ2phJzogJ+OCpOODq+ODu+ODoeOCsCcsXHJcbiAgICAgICdrbyc6ICfsnbwg66mU6re4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwOSxcclxuICB9LFxyXG4gIDgxNzoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aLieWHr+aPkOWNoeWkp+ajruaelycsXHJcbiAgICAgICdkZSc6ICdEZXIgR3Jvw59lIFdhbGQgUmFrXFwndGlrYScsXHJcbiAgICAgICdlbic6ICdUaGUgUmFrXFwndGlrYSBHcmVhdHdvb2QnLFxyXG4gICAgICAnZnInOiAnUmFrXFwndGlrYScsXHJcbiAgICAgICdqYSc6ICfjg6njgrHjg4bjgqPjgqvlpKfmo67mnpcnLFxyXG4gICAgICAna28nOiAn65287LyA7Yuw7Lm0IOuMgOyCvOumvCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTAsXHJcbiAgfSxcclxuICA4MTg6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu5Hpo47mtbcnLFxyXG4gICAgICAnZGUnOiAnVGVtcGVzdCcsXHJcbiAgICAgICdlbic6ICdUaGUgVGVtcGVzdCcsXHJcbiAgICAgICdmcic6ICdMYSBUZW1ww6p0ZScsXHJcbiAgICAgICdqYSc6ICfjg4bjg7Pjg5rjgrnjg4gnLFxyXG4gICAgICAna28nOiAn7YWc7Y6Y7Iqk7Yq4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExMSxcclxuICB9LFxyXG4gIDgxOToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+awtOaZtumDvScsXHJcbiAgICAgICdkZSc6ICdDcnlzdGFyaXVtJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDcnlzdGFyaXVtJyxcclxuICAgICAgJ2ZyJzogJ0NyaXN0YXJpdW0nLFxyXG4gICAgICAnamEnOiAn44Kv44Oq44K544K/44Oq44Km44OgJyxcclxuICAgICAgJ2tvJzogJ+2BrOumrOyKpO2DgOumrOybgCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTIsXHJcbiAgfSxcclxuICA4MjA6IHtcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmuLjmnKvpgqYnLFxyXG4gICAgICAnZGUnOiAnRXVsbW9yZScsXHJcbiAgICAgICdlbic6ICdFdWxtb3JlJyxcclxuICAgICAgJ2ZyJzogJ0V1bG1vcmUnLFxyXG4gICAgICAnamEnOiAn44Om44O844Or44Oi44KiJyxcclxuICAgICAgJ2tvJzogJ+ycqOuqqOyWtCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTMsXHJcbiAgfSxcclxuICA4MjE6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rC05aaW5bm75Zut5aSa5oGp576O5qC856aB5ZutJyxcclxuICAgICAgJ2RlJzogJ0RvaG4gTWhlZycsXHJcbiAgICAgICdlbic6ICdEb2huIE1oZWcnLFxyXG4gICAgICAnZnInOiAnRG9obiBNaGVnJyxcclxuICAgICAgJ2phJzogJ+awtOWmluW5u+WckiDjg4njgqnjg7zjg4zjg7vjg6HjgrAnLFxyXG4gICAgICAna28nOiAn64+E64qQIOuplOq3uCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAyMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4MjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lyq6YCg5aSp55WM5qC86bKB5qC854Gr5bGxJyxcclxuICAgICAgJ2RlJzogJ0RlciBHdWxnJyxcclxuICAgICAgJ2VuJzogJ010LiBHdWxnJyxcclxuICAgICAgJ2ZyJzogJ01vbnQgR3VsZycsXHJcbiAgICAgICdqYSc6ICflgb3pgKDlpKnnlYwg44Kw44Or44Kw54Gr5bGxJyxcclxuICAgICAgJ2tvJzogJ+q1tOq3uCDtmZTsgrAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTE4OCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAyLFxyXG4gIH0sXHJcbiAgODIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aWh+aYjuWPpOi/ueWlh+WdpumCo+elnuW9sea0nicsXHJcbiAgICAgICdkZSc6ICdJcnJ1bmdlbiBkZXIgUWl0YXJpJyxcclxuICAgICAgJ2VuJzogJ1RoZSBRaXRhbmEgUmF2ZWwnLFxyXG4gICAgICAnZnInOiAnTFxcJ0VuY2hldsOqdHJlbWVudCBkZXMgUWl0YXJpJyxcclxuICAgICAgJ2phJzogJ+WPpOi3oeaOoue0oiDjgq3jgr/jg7Pjg4rnpZ7lvbHmtJ4nLFxyXG4gICAgICAna28nOiAn7YKk7YOA64KYIOyLoOq1tCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtMjc0LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDIsXHJcbiAgfSxcclxuICA4MjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Z2S6b6Z6ZWH6a2C5oiYJyxcclxuICAgICAgJ2RlJzogJ1NlZWxlbnRhbnogLSBTZWlyeXUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFdyZWF0aCBvZiBTbmFrZXMnLFxyXG4gICAgICAnZnInOiAnTFxcJ8OObG90IGRlcyBBbWVydHVtZXMnLFxyXG4gICAgICAnamEnOiAn6Z2S6b6N5b6B6a2C5oimJyxcclxuICAgICAgJ2tvJzogJ+yyreujoSDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogOTksXHJcbiAgfSxcclxuICA4MjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Z2S6b6Z6K+X6a2C5oiYJyxcclxuICAgICAgJ2RlJzogJ1NlZWxlbnN0dXJtIC0gU2Vpcnl1JyxcclxuICAgICAgJ2VuJzogJ1RoZSBXcmVhdGggb2YgU25ha2VzIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMXFwnw45sb3QgZGVzIEFtZXJ0dW1lcyAoZXh0csOqbWUpJyxcclxuICAgICAgJ2phJzogJ+altemdkum+jeW+gemtguaIpicsXHJcbiAgICAgICdrbyc6ICfqt7kg7LKt66OhIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA5OSxcclxuICB9LFxyXG4gIDgyNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAyLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuZDmrLLkuYvmiYDnk6/ljZrorrfkv67pgZPpmaInLFxyXG4gICAgICAnZGUnOiAnS2xvc3RlciB2b24gT3Jib25uZScsXHJcbiAgICAgICdlbic6ICdUaGUgT3Jib25uZSBNb25hc3RlcnknLFxyXG4gICAgICAnZnInOiAnTGUgTW9uYXN0w6hyZSBkXFwnT3Jib25uZScsXHJcbiAgICAgICdqYSc6ICfmpb3mrLLjga7lg6fpmaIg44Kq44O844Oc44Oz44OMJyxcclxuICAgICAgJ2tvJzogJ+yYpOuzuOuKkCDsiJjrj4Tsm5AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTU0NSxcclxuICAgICdvZmZzZXRZJzogLTY2MyxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDgyNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjYsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn56aB5Zyw5LyY6Zu35Y2hIOS4sOawtOS5i+WcsCcsXHJcbiAgICAgICdkZSc6ICdFdXJla2EgSHlkYXRvcycsXHJcbiAgICAgICdlbic6ICdUaGUgRm9yYmlkZGVuIExhbmQsIEV1cmVrYSBIeWRhdG9zJyxcclxuICAgICAgJ2ZyJzogJ0V1csOqa2EgSHlkYXRvcycsXHJcbiAgICAgICdqYSc6ICfnpoHmlq3jga7lnLAg44Ko44Km44Os44Kr77ya44OS44Ol44OA44OI44K557eoJyxcclxuICAgICAgJ2tvJzogJ+q4iOuLqOydmCDrlYUg7JeQ7Jqw66CI7Lm0OiDtnojri6TthqDsiqTtjrgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogNDc1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDAsXHJcbiAgfSxcclxuICA4MzA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMixcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6Iux6ZuE5oy95q2MJyxcclxuICAgICAgJ2RlJzogJ1JlcXVpZW0gZGVyIEhlbGRlbicsXHJcbiAgICAgICdlbic6ICdBIFJlcXVpZW0gZm9yIEhlcm9lcycsXHJcbiAgICAgICdmcic6ICdVbiByZXF1aWVtIHBvdXIgbGVzIGjDqXJvcycsXHJcbiAgICAgICdqYSc6ICfoi7Hpm4Tjgbjjga7pjq7prYLmrYwnLFxyXG4gICAgICAna28nOiAn7JiB7JuF7J2EIOychO2VnCDsp4TtmLzqsIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDgzMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSa546b5pa55Z+O5oiY77ya5Lic6aOO5oiYNOS6uuS6suWPi+ahjO+8iOS4jeW4pumjn+aWre+8iScsXHJcbiAgICAgICdkZSc6ICc0LVNwaWVsZXItTWFoam9uZyAoc2NobmVsbGUgUGFydGllLCBLdWl0YW4gZGVha3RpdmllcnQpJyxcclxuICAgICAgJ2VuJzogJ0ZvdXItcGxheWVyIE1haGpvbmcgKFF1aWNrIE1hdGNoLCBLdWl0YW4gRGlzYWJsZWQpJyxcclxuICAgICAgJ2ZyJzogJ01haGpvbmcgZG9taWVuPEluZGVudC8+OiA0IGpvdWV1cnMgKHBhcnRpZSByYXBpZGUgc2FucyBrdWl0YW4pJyxcclxuICAgICAgJ2phJzogJ+ODieODnuW8j+m6u+mbgO+8muadsemiqOaIpjTkurrjgrvjg4Pjg4jljZPvvIjjgq/jgqTjgr/jg7PnhKHjgZfvvIknLFxyXG4gICAgICAna28nOiAn7J6R7Yyo7Jyg7Z2sOiDrj5ntko3soIQgNOyduOyaqSDtg4HsnpAo67aA66W06riwIOuLqOyalOq1rCDsl4bsnYwpJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4MzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDE5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+epuuWGm+ijheeUsumpvumptuWRmCcsXHJcbiAgICAgICdkZSc6ICdMdWZ0d2FmZmUsIEZldWVyIGZyZWkhJyxcclxuICAgICAgJ2VuJzogJ0FpciBGb3JjZSBPbmUnLFxyXG4gICAgICAnZnInOiAnQXMgZGUgbFxcJ2FpcicsXHJcbiAgICAgICdqYSc6ICflh7rmkoPvvIEg44Ko44Ki44OV44Kp44O844K544OR44Kk44Ot44OD44OIJyxcclxuICAgICAgJ2tvJzogJ+y2nOqyqSEg7JeQ7Ja07Y+s7IqkIOyhsOyiheyCrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODM0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDAsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mjjuS5i+S9v+iAhScsXHJcbiAgICAgICdkZSc6ICdEdXJjaCBkZW4gU3R1cm0gdW5kIHp1csO8Y2snLFxyXG4gICAgICAnZW4nOiAnTWVzc2VuZ2VyIG9mIHRoZSBXaW5kcycsXHJcbiAgICAgICdmcic6ICdMYSBNZXNzYWfDqHJlIGR1IHZlbnQnLFxyXG4gICAgICAnamEnOiAn5p2l6Kiq44Gb44GX6aKo44Gu5b6h5L2/JyxcclxuICAgICAgJ2tvJzogJ+uwlOuejOydmCDslrTsgqwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAxLFxyXG4gIH0sXHJcbiAgODM2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mBv+aakeemu+Wuq+mprOWIqeWNoeWkp+S6lScsXHJcbiAgICAgICdkZSc6ICdNYWxpa2FocyBCcnVubmVuJyxcclxuICAgICAgJ2VuJzogJ01hbGlrYWhcXCdzIFdlbGwnLFxyXG4gICAgICAnZnInOiAnTGUgUHVpdHMgZGUgTWFsaWthaCcsXHJcbiAgICAgICdqYSc6ICfniL3mtrzpm6Llrq4g44Oe44Oq44Kr44Gu5aSn5LqV5oi4JyxcclxuICAgICAgJ2tvJzogJ+unkOumrOy5tCDtgbDsmrDrrLwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTY1LFxyXG4gICAgJ29mZnNldFknOiAtMzAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDgzNzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpgYfooq3pm4bokL3msLTmu6nmnZEnLFxyXG4gICAgICAnZGUnOiAnSG9sbWluc3RlcicsXHJcbiAgICAgICdlbic6ICdIb2xtaW5zdGVyIFN3aXRjaCcsXHJcbiAgICAgICdmcic6ICdIb2xtaW5zdGVyJyxcclxuICAgICAgJ2phJzogJ+auuuaIrumDt+adkSDjg5vjg6vjg5/jg7Pjgrnjgr/jg7wnLFxyXG4gICAgICAna28nOiAn7ZmA66+87Iqk7YSwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDgzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmnKvml6XmmpflvbHkuprpqazkuYznvZfmj5AnLFxyXG4gICAgICAnZGUnOiAnQW1hdXJvdCcsXHJcbiAgICAgICdlbic6ICdBbWF1cm90JyxcclxuICAgICAgJ2ZyJzogJ0FtYXVyb3RlJyxcclxuICAgICAgJ2phJzogJ+e1guacq+W5u+aDsyDjgqLjg7zjg6Ljg63jg7zjg4gnLFxyXG4gICAgICAna28nOiAn7JWE66qo66Gc7Yq4JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwNSxcclxuICB9LFxyXG4gIDg0MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflvILnlYzpgZfmnoTluIzlsJTnp5Hmlq/lrarmmbbloZQnLFxyXG4gICAgICAnZGUnOiAnRGVyIEtyaXN0YWxsendpbGxpbmcnLFxyXG4gICAgICAnZW4nOiAnVGhlIFR3aW5uaW5nJyxcclxuICAgICAgJ2ZyJzogJ0xhIE1hY2xlIGRlIFN5cmN1cycsXHJcbiAgICAgICdqYSc6ICfnlbDnlYzpgbrmp4sg44K344Or44Kv44K544O744OE44Kk44OL44Oz44KwJyxcclxuICAgICAgJ2tvJzogJ+yMjeuRpeydtCDsi5zrpbTsv6DsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg0MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfliJvpgKDmnLrmnoTpmL/lsLzlvrfnvZflrabpmaInLFxyXG4gICAgICAnZGUnOiAnQWthZGFlbWlhIEFueWRlcicsXHJcbiAgICAgICdlbic6ICdBa2FkYWVtaWEgQW55ZGVyJyxcclxuICAgICAgJ2ZyJzogJ0FrYWRhZW1pYSBBbnlkcmUnLFxyXG4gICAgICAnamEnOiAn5Ym16YCg5qmf6ZaiIOOCouODiuOCpOODgOOCouOCq+ODh+ODn+OCoicsXHJcbiAgICAgICdrbyc6ICfslaDrgpjsnbTrjZQg7JWE7Lm0642w66+47JWEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDMwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e8h+WdpuWmrumbheatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdPZmZlbmJhcnVuZyAtIFRpdGFuaWEnLFxyXG4gICAgICAnZW4nOiAnVGhlIERhbmNpbmcgUGxhZ3VlJyxcclxuICAgICAgJ2ZyJzogJ0xhIFZhbHNlIGR1IE1vbmFycXVlJyxcclxuICAgICAgJ2phJzogJ+ODhuOCo+OCv+ODvOODi+OCouiojua7heaIpicsXHJcbiAgICAgICdrbyc6ICfti7Dtg4Dri4jslYQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMyxcclxuICB9LFxyXG4gIDg0Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfml6DnkZXngbXlkJvmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnT2ZmZW5iYXJ1bmcgLSBJbm5vemVueicsXHJcbiAgICAgICdlbic6ICdUaGUgQ3Jvd24gb2YgdGhlIEltbWFjdWxhdGUnLFxyXG4gICAgICAnZnInOiAnTGEgQ291cm9ubmUgZGUgbFxcJ0ltbWFjdWzDqScsXHJcbiAgICAgICdqYSc6ICfjgqTjg47jgrvjg7PjgrnoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7J2064W47IS87IqkIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDQsXHJcbiAgfSxcclxuICA4NDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ZOI6L+q5pav5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ09mZmVuYmFydW5nIC0gSGFkZXMnLFxyXG4gICAgICAnZW4nOiAnVGhlIER5aW5nIEdhc3AnLFxyXG4gICAgICAnZnInOiAnTGUgUsOibGUgZGUgbFxcJ0Fnb25pZScsXHJcbiAgICAgICdqYSc6ICfjg4/jg7zjg4fjgrnoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ZWY642w7IqkIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMDUsXHJcbiAgfSxcclxuICA4NDg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5peg55GV54G15ZCb5q285q6b5oiYJyxcclxuICAgICAgJ2RlJzogJ0xldHp0ZSBMw6R1dGVydW5nIC0gSW5ub3plbnonLFxyXG4gICAgICAnZW4nOiAnVGhlIENyb3duIG9mIHRoZSBJbW1hY3VsYXRlIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMYSBDb3Vyb25uZSBkZSBsXFwnSW1tYWN1bMOpIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Kk44OO44K744Oz44K56KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDsnbTrhbjshLzsiqQg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwNCxcclxuICB9LFxyXG4gIDg0OToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEF1ZmVyc3RlaHVuZycsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBSZXN1cnJlY3Rpb24nLFxyXG4gICAgICAnZnInOiAnTFxcJ8OJdmVpbCBkXFwnw4lkZW4gLSBSw6lzdXJyZWN0aW9uJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muimmumGkue3qDEnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqwgeyEse2OuCAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NTA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBOaWVkZXJrdW5mdCcsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBEZXNjZW50JyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRGVzY2VudGUnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya6Kaa6YaS57eoMicsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg1MToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIMOcYmVyZmx1dHVuZycsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBJbnVuZGF0aW9uJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRMOpbHVnZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJropprphpLnt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDg1Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEJlZXJkaWd1bmcnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogU2VwdWx0dXJlJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gSW5odW1hdGlvbicsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJropprphpLnt6g0JyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDg1Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMScsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEF1ZmVyc3RlaHVuZyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBSZXN1cnJlY3Rpb24gKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ8OJdmVpbCBkXFwnw4lkZW4gLSBSw6lzdXJyZWN0aW9uIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJropprphpLnt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqsIHshLHtjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4NTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOiniemGkuS5i+eroDInLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgRXJ3YWNoZW4gLSBOaWVkZXJrdW5mdCAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBEZXNjZW50IChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRGVzY2VudGUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muimmumGkue3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqwgeyEse2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg1NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIMOcYmVyZmx1dHVuZyAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBHYXRlOiBJbnVuZGF0aW9uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gRMOpbHVnZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya6Kaa6YaS57eoMycsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAzOCxcclxuICB9LFxyXG4gIDg1Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g6KeJ6YaS5LmL56ugNCcsXHJcbiAgICAgICdkZSc6ICdFZGVucyBFcndhY2hlbiAtIEJlZXJkaWd1bmcgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgR2F0ZTogU2VwdWx0dXJlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xcXCfDiXZlaWwgZFxcJ8OJZGVuIC0gSW5odW1hdGlvbiAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya6Kaa6YaS57eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rCB7ISx7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAyMyxcclxuICB9LFxyXG4gIDg1ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnvIflnablpq7pm4XmrbzmrpvmiJgnLFxyXG4gICAgICAnZGUnOiAnTGV0enRlIEzDpHV0ZXJ1bmcgLSBUaXRhbmlhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEYW5jaW5nIFBsYWd1ZSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTGEgVmFsc2UgZHUgTW9uYXJxdWUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg4bjgqPjgr/jg7zjg4vjgqLoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IO2LsO2DgOuLiOyVhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTAzLFxyXG4gIH0sXHJcbiAgODU5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acuuWFs+OAgeivheWSkuOAgeWJp+avkuS4juKApuKApicsXHJcbiAgICAgICdkZSc6ICdEZXIgQmVpY2h0c3R1aGwgdm9uIFRvdXBhc2EgZGVtIMOEbHRlcmVuJyxcclxuICAgICAgJ2VuJzogJ0xlZ2VuZCBvZiB0aGUgTm90LXNvLWhpZGRlbiBUZW1wbGUnLFxyXG4gICAgICAnZnInOiAnTGUgQ29uZmVzc2lvbm5hbCBkZSBUb3VwYXNhIGxcXCdhbmNpZW4nLFxyXG4gICAgICAnamEnOiAn5LuV5o6b44GR44Go5ZGq44GE44Go5q+S44GoJyxcclxuICAgICAgJ2tvJzogJ+2VqOygleqzvCDsoIDso7zsmYAg64+FJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDg2MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflup/pg73mi7/lt7TnpLroib7lhbAnLFxyXG4gICAgICAnZGUnOiAnVmF0ZXIgdW5kIEJydWRlcicsXHJcbiAgICAgICdlbic6ICdDb21pbmcgQ2xlYW4nLFxyXG4gICAgICAnZnInOiAnU3VyIGxlcyByYWlscyBkZSBOYWJhYXRoIEFyZW5nJyxcclxuICAgICAgJ2phJzogJ+W7g+mDveODiuODkOOCueOCouODrOODsycsXHJcbiAgICAgICdrbyc6ICfrgpjrsJTsiqTslYTroJ0g7Y+Q7ZeIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEwMixcclxuICB9LFxyXG4gIDg3Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmkYfmkYbnmoTlpKnlubMnLFxyXG4gICAgICAnZGUnOiAnT2IgTWl0bGVpZCBvZGVyIEhhc3MnLFxyXG4gICAgICAnZW4nOiAnVGhlIEhhcmRlbmVkIEhlYXJ0JyxcclxuICAgICAgJ2ZyJzogJ05haXNzYW5jZSBkXFwndW4gYm91cnJlYXUnLFxyXG4gICAgICAnamEnOiAn5o+644KM44KL5aSp56ekJyxcclxuICAgICAgJ2tvJzogJ+2dlOuTpOumrOuKlCDsspzsua0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg3NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflj6Tku6PlpKflho3nlJ/prZTms5UnLFxyXG4gICAgICAnZGUnOiAnQWx0ZXIgWmF1YmVyJyxcclxuICAgICAgJ2VuJzogJ1RoZSBMb3N0IGFuZCB0aGUgRm91bmQnLFxyXG4gICAgICAnZnInOiAnTWFnaWUgYW5jZXN0cmFsZScsXHJcbiAgICAgICdqYSc6ICflj6Tjga7lpKflho3nlJ/prZTms5UnLFxyXG4gICAgICAna28nOiAn6rOg64yA7J2YIOuMgOyerOyDnSDrp4jrspUnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTEwLFxyXG4gIH0sXHJcbiAgODc1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WLh+aVoueahOeMjuS6uicsXHJcbiAgICAgICdkZSc6ICdEZXIgTGVnZW5kZSBhdWYgZGVyIFNwdXInLFxyXG4gICAgICAnZW4nOiAnVGhlIEh1bnRlclxcJ3MgTGVnYWN5JyxcclxuICAgICAgJ2ZyJzogJ0xhIGNoYXNzZXVzZSBkZSBsw6lnZW5kZScsXHJcbiAgICAgICdqYSc6ICfli4fmsJfjga7ni6nkuronLFxyXG4gICAgICAna28nOiAn7Jqp6riwIOyeiOuKlCDsgqzrg6XqvrwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNjMsXHJcbiAgfSxcclxuICA4NzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aWI6LSd5bCU54m555qE5ZCO5oKUJyxcclxuICAgICAgJ2RlJzogJ0VpbiBncm/Dn2VzIE9wZmVyJyxcclxuICAgICAgJ2VuJzogJ055ZWxiZXJ0XFwncyBMYW1lbnQnLFxyXG4gICAgICAnZnInOiAnVW5lIGN1cGlkaXTDqSBiaWVuIGfDqW7DqXJldXNlJyxcclxuICAgICAgJ2phJzogJ+ODiuOCpOODq+ODmeODq+ODiOOBruW+jOaClCcsXHJcbiAgICAgICdrbyc6ICfrgpjsnbzrsqDrpbTtirjsnZgg7ZuE7ZqMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4Nzk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qKm57695a6d5aKDJyxcclxuICAgICAgJ2RlJzogJ1ZlcmxpZXNlIHZvbiBMeWhlIEdoaWFoJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEdW5nZW9ucyBvZiBMeWhlIEdoaWFoJyxcclxuICAgICAgJ2ZyJzogJ0xlIERvbmpvbiBoeXBvZ8OpZW4gZHUgTHloZSBHaGlhaCcsXHJcbiAgICAgICdqYSc6ICflrp3nianluqsg44Oq44Kn44O844O744Ku44Ki44O744OA44Oz44K444On44OzJyxcclxuICAgICAgJ2tvJzogJ+uztOusvOqzoCDrpqzsmIgg6riw7JWEIOyngO2VmOuvuOq2gScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgODgyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WkjeWItuW3peWOguW6n+WinycsXHJcbiAgICAgICdkZSc6ICdEaWUga29waWVydGUgRmFicmlrJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDb3BpZWQgRmFjdG9yeScsXHJcbiAgICAgICdmcic6ICdMYSByw6lwbGlxdWUgZGUgbFxcJ3VzaW5lIGTDqXNhZmZlY3TDqWUnLFxyXG4gICAgICAnamEnOiAn6KSH6KO944K144Os44K/5bel5aC05buD5aKfJyxcclxuICAgICAgJ2tvJzogJ+uzteygnOuQnCDqs7XsnqUg7Y+Q7ZeIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDYxMCxcclxuICAgICdvZmZzZXRZJzogNzAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4ODQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6a2U5rOV5a6r5q6/5a6H5a6Z5a6rJyxcclxuICAgICAgJ2RlJzogJ0NoYXRlYXUgQ29zbWVhJyxcclxuICAgICAgJ2VuJzogJ1RoZSBHcmFuZCBDb3Ntb3MnLFxyXG4gICAgICAnZnInOiAnTGUgQ29zbW9zIGNvcnVzY2FudCcsXHJcbiAgICAgICdqYSc6ICfprZTms5Xlrq7mrr8g44Kw44Op44Oz44O744Kz44K544Oi44K5JyxcclxuICAgICAgJ2tvJzogJ+q3uOuekSDsvZTsiqTrqqjsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg4NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflk4jov6rmlq/lraTlv7Xmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnTGV0enRlIEzDpHV0ZXJ1bmcgLSBIYWRlcycsXHJcbiAgICAgICdlbic6ICdUaGUgTWluc3RyZWxcXCdzIEJhbGxhZDogSGFkZXNcXCdzIEVsZWd5JyxcclxuICAgICAgJ2ZyJzogJ0xlIFLDomxlIGRlIGxcXCdBZ29uaWUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg4/jg7zjg4fjgrnoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IO2VmOuNsOyKpCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTA1LFxyXG4gIH0sXHJcbiAgODg3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuprljoblsbHlpKfnu53looPmiJgnLFxyXG4gICAgICAnZGUnOiAnQWxleGFuZGVyIChmYXRhbCknLFxyXG4gICAgICAnZW4nOiAnVGhlIEVwaWMgb2YgQWxleGFuZGVyIChVbHRpbWF0ZSknLFxyXG4gICAgICAnZnInOiAnTFxcJ09keXNzw6llIGRcXCdBbGV4YW5kZXIgKGZhdGFsKScsXHJcbiAgICAgICdqYSc6ICfntbbjgqLjg6zjgq3jgrXjg7Pjg4Djg7zoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7KCIIOyVjOugieyCsOuNlCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDg4ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmmILokKjlk4jlh6/lsJTvvIjnq57kuonmiJjvvIknLFxyXG4gICAgICAnZGUnOiAnT25zYWwgSGFrYWlyIChEYW5zaGlnIE5hYWRhbSknLFxyXG4gICAgICAnZW4nOiAnT25zYWwgSGFrYWlyIChEYW5zaGlnIE5hYWRhbSknLFxyXG4gICAgICAnZnInOiAnT25zYWwgSGFrYWlyIChEYW5zaGlnIE5hYWRhbSknLFxyXG4gICAgICAnamEnOiAn44Kq44Oz44K144Or44O744OP44Kr44Kk44OrICjntYLnr4DmiKYpJyxcclxuICAgICAgJ2tvJzogJ+yYqOyCtCDtlZjsubTsnbTrpbQo6rOE7KCI64GdIO2VqeyghCknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTE3LFxyXG4gIH0sXHJcbiAgODkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e6r+eZveiqk+e6puOAgea8hum7keWvhue6picsXHJcbiAgICAgICdkZSc6ICdEZXIgV29sZiB1bmQgZGVyIERyYWNoZW5yZWl0ZXInLFxyXG4gICAgICAnZW4nOiAnVm93cyBvZiBWaXJ0dWUsIERlZWRzIG9mIENydWVsdHknLFxyXG4gICAgICAnZnInOiAnVsWTdXggZGUgdmVydHUsIGFjdGVzIGRlIGNydWF1dMOpJyxcclxuICAgICAgJ2phJzogJ+eZveOBjeiqk+e0hOOAgem7kuOBjeWvhue0hCcsXHJcbiAgICAgICdrbyc6ICftlZjsloAg7ISc7JW9LCDqsoDsnYAg67CA7JW9JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA4OTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5oiR5b+D5L6d5penJyxcclxuICAgICAgJ2RlJzogJ1RydWJlbCBpbSBUcmF1bWxhbmQnLFxyXG4gICAgICAnZW4nOiAnQXMgdGhlIEhlYXJ0IEJpZHMnLFxyXG4gICAgICAnZnInOiAnw4AgbFxcJ8OpY291dGUgZGUgc29pJyxcclxuICAgICAgJ2phJzogJ+OBk+OBruW/g+OBjOacm+OCgOOBjOOBvuOBvuOBqycsXHJcbiAgICAgICdrbyc6ICfsnbQg66eI7J2M7J20IOybkO2VmOuKlCDrjIDroZwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEyLFxyXG4gICAgJ29mZnNldFknOiA1MCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDAsXHJcbiAgfSxcclxuICA4OTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57qi5a6d55+z56We5YW156C05Z2P5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ1J1YmluZmV1ZXIgLSBFbnRmZXNzZWx1bmcnLFxyXG4gICAgICAnZW4nOiAnQ2luZGVyIERyaWZ0JyxcclxuICAgICAgJ2ZyJzogJ0xlcyBOdcOpZXMgZGUgQnJhbmRvbnMnLFxyXG4gICAgICAnamEnOiAn44Or44OT44O844Km44Kn44Od44Oz56C05aOK5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+ujqOu5hCDsm6jtj7Ag7YyM6rS07J6R7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgODk4OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+m7kemjjua1t+W6lemYv+WwvOW+t+e9l+i/veW/hummhicsXHJcbiAgICAgICdkZSc6ICdBbmFtbmVzaXMgQW55ZGVyJyxcclxuICAgICAgJ2VuJzogJ0FuYW1uZXNpcyBBbnlkZXInLFxyXG4gICAgICAnZnInOiAnQW5hbW5lc2lzIEFueWRyZScsXHJcbiAgICAgICdqYSc6ICfpu5LpoqjmtbflupUg44Ki44OL44OJ44Op44K544O744Ki44OK44Og44ON44O844K344K5JyxcclxuICAgICAgJ2tvJzogJ+yVoOuLiOuTnOudvOyKpCDslYTrgqjrhKTsi5zsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMzkwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTAwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxNixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflh7rmtbflnoLpkpMnLFxyXG4gICAgICAnZGUnOiAnQXVmIGdyb8OfZXIgRmFocnQnLFxyXG4gICAgICAnZW4nOiAnT2NlYW4gRmlzaGluZycsXHJcbiAgICAgICdmcic6ICdQw6pjaGUgZW4gbWVyJyxcclxuICAgICAgJ2phJzogJ+OCquODvOOCt+ODo+ODs+ODleOCo+ODg+OCt+ODs+OCsCcsXHJcbiAgICAgICdrbyc6ICfrqLzrsJTri6Qg64Ka7IucJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0LFxyXG4gIH0sXHJcbiAgOTAyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gRW50bGFkdW5nJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBGdWxtaW5hdGlvbicsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBGdWxtaW5hdGlvbicsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlhbHps7Tnt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrggMScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTAzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6AyJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gUmFzZXJlaScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogRnVyb3InLFxyXG4gICAgICAnZnInOiAnTGVzIEFjY29yZHMgZFxcJ8OJZGVuIC0gRnVyZXVyJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs++8muWFsemztOe3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqzteuqhe2OuCAyJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MDQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S45biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDMnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBCaWxkZXJzdHVybScsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogSWNvbm9jbGFzbScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBJY29ub2NsYXNtZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlhbHps7Tnt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTA1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlhbHpuKPkuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFJlc29uYW56IC0gRXJzdGFycnVuZycsXHJcbiAgICAgICdlbic6ICdFZGVuXFwncyBWZXJzZTogUmVmdWxnZW5jZScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSDDiWNsYXQnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YWx6bO057eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64IDQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICA5MDY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDEnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBFbnRsYWR1bmcgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgVmVyc2U6IEZ1bG1pbmF0aW9uIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBBY2NvcmRzIGRcXCfDiWRlbiAtIEZ1bG1pbmF0aW9uIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJrlhbHps7Tnt6gxJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrgo7JiB7JuFKSAxJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MDc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDInLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBSYXNlcmVpIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBGdXJvciAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMZXMgQWNjb3JkcyBkXFwnw4lkZW4gLSBGdXJldXIgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muWFsemztOe3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOqzteuqhe2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkwODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g5YWx6bij5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBSZXNvbmFueiAtIEJpbGRlcnN0dXJtIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBJY29ub2NsYXNtIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBBY2NvcmRzIGRcXCfDiWRlbiAtIEljb25vY2xhc21lIChzYWRpcXVlKScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7Ppm7blvI/vvJrlhbHps7Tnt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDqs7XrqoXtjrgo7JiB7JuFKSAzJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MDk6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LyK55S46Zu25byP5biM5pyb5LmQ5ZutIOWFsem4o+S5i+eroDQnLFxyXG4gICAgICAnZGUnOiAnRWRlbnMgUmVzb25hbnogLSBFcnN0YXJydW5nIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFZlcnNlOiBSZWZ1bGdlbmNlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBBY2NvcmRzIGRcXCfDiWRlbiAtIMOJY2xhdCAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YWx6bO057eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog6rO166qF7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiA0NixcclxuICB9LFxyXG4gIDkxMToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZrlhbnpm4XloKHlnpLokrjlj5Hkuovku7YnLFxyXG4gICAgICAnZGUnOiAnRGVyIEJvemphLVZvcmZhbGwnLFxyXG4gICAgICAnZW4nOiAnVGhlIEJvemphIEluY2lkZW50JyxcclxuICAgICAgJ2ZyJzogJ1Byw6lsdWRlIMOgIGxhIGNhdGFzdHJvcGhlJyxcclxuICAgICAgJ2phJzogJ+OCt+OCv+ODh+ODq+ODu+ODnOOCuuODpOiSuOeZuuS6i+WkiScsXHJcbiAgICAgICdrbyc6ICfrs7Tspojslbwg7IKs6rG0JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEyMyxcclxuICB9LFxyXG4gIDkxMjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnuqLlrp3nn7PnpZ7lhbXni4Lmg7PkvZzmiJgnLFxyXG4gICAgICAnZGUnOiAnUnViaW5mZXVlciAtIFRyYXVtYScsXHJcbiAgICAgICdlbic6ICdDaW5kZXIgRHJpZnQgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlcyBOdcOpZXMgZGUgQnJhbmRvbnMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg6vjg5Pjg7zjgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOujqOu5hCDsm6jtj7Ag7YyM6rS07J6R7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDI4LFxyXG4gIH0sXHJcbiAgOTEzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WNmuWFuembheWgoeWekui/veW/huaImCcsXHJcbiAgICAgICdkZSc6ICdNZW1vcmlhIE1pc2VyYSAoZXh0cmVtKScsXHJcbiAgICAgICdlbic6ICdNZW1vcmlhIE1pc2VyYSAoRXh0cmVtZSknLFxyXG4gICAgICAnZnInOiAnTWVtb3JpYSBNaXNlcmEgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgrfjgr/jg4fjg6vjg7vjg5zjgrrjg6Tov73mhrbmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOuztOymiOyVvCDstpTslrXsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTM1LFxyXG4gICAgJ29mZnNldFknOiA2ODMsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEyMyxcclxuICB9LFxyXG4gIDkxNDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNyxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfoi7Hpm4Tml6Dms5Xlronmga8nLFxyXG4gICAgICAnZGUnOiAnVm9uIHNjaGxhZmVuZGVuIEhlbGRlbicsXHJcbiAgICAgICdlbic6ICdBIFNsZWVwIERpc3R1cmJlZCcsXHJcbiAgICAgICdmcic6ICdMXFwnw6lwcmV1dmUgcm9ua2EnLFxyXG4gICAgICAnamEnOiAn5rGd44CB6Iux6ZuE44Gu55yg44KK5aao44GS44KL44GvJyxcclxuICAgICAgJ2tvJzogJ+q3uOuMgCwg7JiB7JuF7J2YIOyeoOydhCDrsKntlbTtlZjripTqsIAnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkxNjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmmpflvbHlhrPmiJjor7rlvJflhbDnibknLFxyXG4gICAgICAnZGUnOiAnU2NobGFjaHQgdW0gTm9ydnJhbmR0JyxcclxuICAgICAgJ2VuJzogJ1RoZSBIZXJvZXNcXCcgR2F1bnRsZXQnLFxyXG4gICAgICAnZnInOiAnTGEgVHJhdmVyc8OpZSBkZSBOb3J2cmFuZHQnLFxyXG4gICAgICAnamEnOiAn5ryG6buS5rG65oimIOODjuODq+ODtOODqeODs+ODiCcsXHJcbiAgICAgICdrbyc6ICfrhbjrpbTruIzrnoDtirgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogNjI2LFxyXG4gICAgJ29mZnNldFknOiAtNjExLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjUsXHJcbiAgfSxcclxuICA5MTc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDUsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lq65YG25Yab5LqL5Z+65ZywJyxcclxuICAgICAgJ2RlJzogJ0RpZSBQdXBwZW5mZXN0dW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBQdXBwZXRzXFwnIEJ1bmtlcicsXHJcbiAgICAgICdmcic6ICdMYSBiYXNlIG1pbGl0YWlyZSBkZXMgUGFudGlucycsXHJcbiAgICAgICdqYSc6ICfkurrlvaLjgr/jg4Hjg47ou43kuovln7rlnLAnLFxyXG4gICAgICAna28nOiAn7J247ZiV65Ok7J2YIOq1sOyCrCDquLDsp4AnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMjkwLFxyXG4gICAgJ29mZnNldFknOiAtMTkwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTIwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfljZfmlrnljZrlhbnpm4XmiJjnur8nLFxyXG4gICAgICAnZGUnOiAnQm96amEtU8O8ZGZyb250JyxcclxuICAgICAgJ2VuJzogJ1RoZSBCb3pqYW4gU291dGhlcm4gRnJvbnQnLFxyXG4gICAgICAnZnInOiAnRnJvbnQgc3VkIGRlIEJvemphJyxcclxuICAgICAgJ2phJzogJ+WNl+aWueODnOOCuuODpOaIpue3micsXHJcbiAgICAgICdrbyc6ICfrgqjrtoAg67O07KaI7JW8IOyghOyEoCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTI3LFxyXG4gICAgJ29mZnNldFknOiAtNDI0LFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjQsXHJcbiAgfSxcclxuICA5MjI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5YWJ5LmL5oiY5aOr5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0tyaWVnZXIgZGVzIExpY2h0cycsXHJcbiAgICAgICdlbic6ICdUaGUgU2VhdCBvZiBTYWNyaWZpY2UnLFxyXG4gICAgICAnZnInOiAnTGUgVHLDtG5lIGR1IFNhY3JpZmljZScsXHJcbiAgICAgICdqYSc6ICfjgqbjgqnjg7zjg6rjgqLjg7vjgqrjg5bjg7vjg6njgqTjg4joqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn67mb7J2YIOyghOyCrCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTI1LFxyXG4gIH0sXHJcbiAgOTIzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WFieS5i+aImOWjq+W5u+iAgOatvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdLcmllZ2VyIGRlcyBMaWNodHMgKGV4dHJlbSknLFxyXG4gICAgICAnZW4nOiAnVGhlIFNlYXQgb2YgU2FjcmlmaWNlIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdMZSBUcsO0bmUgZHUgU2FjcmlmaWNlIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144Km44Kp44O844Oq44Ki44O744Kq44OW44O744Op44Kk44OI6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDruZvsnZgg7KCE7IKsIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMjYsXHJcbiAgfSxcclxuICA5MjQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDksXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5qKm57695a6d5q6/JyxcclxuICAgICAgJ2RlJzogJ0RhcyBLYXJ1c3NlbGwgdm9uIEx5aGUgR2hpYWgnLFxyXG4gICAgICAnZW4nOiAnVGhlIFNoaWZ0aW5nIE91YmxpZXR0ZXMgb2YgTHloZSBHaGlhaCcsXHJcbiAgICAgICdmcic6ICdMZSBKYXJkaW4gc2VjcmV0IGR1IEx5aGUgR2hpYWgnLFxyXG4gICAgICAnamEnOiAn5a6d54mp5bqrIOODquOCp+ODvOODu+OCruOCouODu+ODgOODs+OCuOODp+ODs+elreauvycsXHJcbiAgICAgICdrbyc6ICfrs7TrrLzqs6Ag66as7JiIIOq4sOyVhCDsp4DtlZjrr7jqtoEg7KCc7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MjU6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6aOe57+U5ZCn77yM5YmN5b6A57u05bCU5Yip54m577yBJyxcclxuICAgICAgJ2RlJzogJ0x1ZnRhbmdyaWZmIGF1ZiBXZXJseXQnLFxyXG4gICAgICAnZW4nOiAnU2xlZXAgTm93IGluIFNhcHBoaXJlJyxcclxuICAgICAgJ2ZyJzogJ1N1ciBsYSBtZXIgZGUgc2FwaGlyJyxcclxuICAgICAgJ2phJzogJ+mjm+OBue+8gSDjgqbjgqfjg6vjg6rjg4jjgbggJyxcclxuICAgICAgJ2tvJzogJ+uCoOyVhOudvCEg7Juw66as7Yq466W8IO2Wpe2VmOyXrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAxNSxcclxuICAgICdvZmZzZXRZJzogLTYxMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkyOToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTYsXHJcbiAgICAnZXhWZXJzaW9uJzogMSxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aSp5LiK56aP5Zyw5LqR5Yag576k5bKbJyxcclxuICAgICAgJ2RlJzogJ0RhcyBEaWFkZW0gLSBFcnNjaGxpZcOfdW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBEaWFkZW0nLFxyXG4gICAgICAnZnInOiAnTGUgRGlhZMOobWUnLFxyXG4gICAgICAnamEnOiAn6Zuy5rW35o6h6ZuGIOODh+OCo+OCouODh+ODoOiruOWzticsXHJcbiAgICAgICdrbyc6ICfrlJTslYTrjoAg7KCc64+EJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDY4LFxyXG4gIH0sXHJcbiAgOTMwOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOeTpuW5u+W3p+aImCcsXHJcbiAgICAgICdkZSc6ICdUcmF1bXByw7xmdW5nIC0gU2hpdmEnLFxyXG4gICAgICAnZW4nOiAnVGhlIEFraCBBZmFoIEFtcGhpdGhlYXRyZSAoVW5yZWFsKScsXHJcbiAgICAgICdmcic6ICdMXFwnQW1waGl0aMOpw6J0cmUgZFxcJ0FraCBBZmFoIChpcnLDqWVsKScsXHJcbiAgICAgICdqYSc6ICflubvjgrfjg7TjgqHoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ZmYIOyLnOuwlCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogNDYsXHJcbiAgfSxcclxuICA5MzI6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6KSq6Imy55qE6K6w5b+GJyxcclxuICAgICAgJ2RlJzogJ1ZlcmJsYXNzdGUgRXJpbm5lcnVuZ2VuJyxcclxuICAgICAgJ2VuJzogJ0ZhZGVkIE1lbW9yaWVzJyxcclxuICAgICAgJ2ZyJzogJ1NvdXZlbmlyIHDDqXJpc3NhYmxlJyxcclxuICAgICAgJ2phJzogJ+iJsuOBguOBm+OBn+iomOaGticsXHJcbiAgICAgICdrbyc6ICfruZvrsJTrnpwg6riw7Ja1JyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExNCxcclxuICB9LFxyXG4gIDkzMzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfprZTmnK/lt6XmiL/njpvmiZjpm4Xlt6XkvZzlrqQnLFxyXG4gICAgICAnZGUnOiAnTWF0b3lhcyBBdGVsaWVyJyxcclxuICAgICAgJ2VuJzogJ01hdG95YVxcJ3MgUmVsaWN0JyxcclxuICAgICAgJ2ZyJzogJ0xcXCdBdGVsaWVyIGFiYW5kb25uw6kgZGUgTWF0b3lhJyxcclxuICAgICAgJ2phJzogJ+mtlOihk+W3peaIvyDjg57jg4jjg7zjg6Tjga7jgqLjg4jjg6rjgqgnLFxyXG4gICAgICAna28nOiAn66eI7Yag7JW87J2YIOqzteuwqScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtNzUsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn57u/5a6d55+z56We5YW156C05Z2P5L2c5oiYJyxcclxuICAgICAgJ2RlJzogJ1NtYXJhZ2RzdHVybSAtIEVudGZlc3NlbHVuZycsXHJcbiAgICAgICdlbic6ICdDYXN0cnVtIE1hcmludW0nLFxyXG4gICAgICAnZnInOiAnQ2FzdHJ1bSBNYXJpbnVtJyxcclxuICAgICAgJ2phJzogJ+OCqOODoeODqeODq+ODieOCpuOCp+ODneODs+egtOWjiuS9nOaIpicsXHJcbiAgICAgICdrbyc6ICfsl5DrqZTrnoTrk5wg7Juo7Y+wIO2MjOq0tOyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTM1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e7v+Wuneefs+elnuWFteeLguaDs+S9nOaImCcsXHJcbiAgICAgICdkZSc6ICdTbWFyYWdkc3R1cm0gLSBUcmF1bWEnLFxyXG4gICAgICAnZW4nOiAnQ2FzdHJ1bSBNYXJpbnVtIChFeHRyZW1lKScsXHJcbiAgICAgICdmcic6ICdDYXN0cnVtIE1hcmludW0gKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgqjjg6Hjg6njg6vjg4njgqbjgqfjg53jg7PnoLTlo4rkvZzmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyXkOuplOuehOuTnCDsm6jtj7Ag7YyM6rS07J6R7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5MzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDI5LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+Wls+eOi+WPpOauvycsXHJcbiAgICAgICdkZSc6ICdEZWx1YnJ1bSBSZWdpbmFlJyxcclxuICAgICAgJ2VuJzogJ0RlbHVicnVtIFJlZ2luYWUnLFxyXG4gICAgICAnZnInOiAnRGVsdWJydW0gUmVnaW5hZScsXHJcbiAgICAgICdqYSc6ICfjgrDjg7Pjg5Ljg6vjg4njg7vjg4fjgqPjg6vjg7zjg5bjg6njg6AnLFxyXG4gICAgICAna28nOiAn6rWw7Z6Q65OcIOyCrOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtMzc4LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTM3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyOSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpm7blvI/lpbPnjovlj6Tmrr8nLFxyXG4gICAgICAnZGUnOiAnRGVsdWJydW0gUmVnaW5hZSAoZXBpc2NoKScsXHJcbiAgICAgICdlbic6ICdEZWx1YnJ1bSBSZWdpbmFlIChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0RlbHVicnVtIFJlZ2luYWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+OCsOODs+ODkuODq+ODieODu+ODh+OCo+ODq+ODvOODluODqeODoOmbtuW8jycsXHJcbiAgICAgICdrbyc6ICfqtbDtnpDrk5wg7IKs7JuQKOyYgeybhSknLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogLTM3OCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDkzODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpu4Tph5HlubPljp/luJXmiIjlsJTotZ7ojYnljp8nLFxyXG4gICAgICAnZGUnOiAnRGllIEdvbGRlbmUgRWJlbmUgdm9uIFBhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2VuJzogJ1BhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2ZyJzogJ0xhIGdyYW5kZSBwcmFpcmllIGRlIFBhZ2x0aFxcJ2FuJyxcclxuICAgICAgJ2phJzogJ+m7hOmHkeW5s+WOnyDjg5Hjgqzjg6vjgrbjg7MnLFxyXG4gICAgICAna28nOiAn7YyM6riA64uoJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDQxNSxcclxuICAgICdvZmZzZXRZJzogLTExMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMTksXHJcbiAgICAnZXhWZXJzaW9uJzogMCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Lmd5a6r5bm75Y2h77ya5a6Y5pa56ZSm5qCH6LWbJyxcclxuICAgICAgJ2RlJzogJ1RyaXBsZSBUcmlhZDogTWFuZGVydmlsbGUtVHVybmllcicsXHJcbiAgICAgICdlbic6ICdUcmlwbGUgVHJpYWQgT3BlbiBUb3VybmFtZW50JyxcclxuICAgICAgJ2ZyJzogJ1RvdXJub2kgb2ZmaWNpZWwgZGUgVHJpcGxlIFRyaWFkZScsXHJcbiAgICAgICdqYSc6ICfjg4jjg6rjg5fjg6vjg4jjg6njgqTjgqLjg4nvvJrjgqrjg5XjgqPjgrfjg6Pjg6vjg4jjg7zjg4rjg6Hjg7Pjg4gnLFxyXG4gICAgICAna28nOiAn7Yq466as7ZSMIO2KuOudvOydtOyWtOuTnDog6rO17IudIO2GoOuEiOuovO2KuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA4MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAxOSxcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkuZ3lrqvlubvljaHvvJrplKbmoIfotZvlr7nlsYDlrqQnLFxyXG4gICAgICAnZGUnOiAnVHJpcGxlIFRyaWFkOiBQcml2YXR0dXJuaWVyJyxcclxuICAgICAgJ2VuJzogJ1RyaXBsZSBUcmlhZCBJbnZpdGF0aW9uYWwgUGFybG9yJyxcclxuICAgICAgJ2ZyJzogJ1NhbGxlIGRlIHRvdXJub2kgbGlicmUgZGUgVHJpcGxlIFRyaWFkZScsXHJcbiAgICAgICdqYSc6ICfjg4jjg6rjg5fjg6vjg4jjg6njgqTjgqLjg4nvvJrjgqvjgrnjgr/jg6Djg4jjg7zjg4rjg6Hjg7Pjg4jjg6vjg7zjg6AnLFxyXG4gICAgICAna28nOiAn7Yq466as7ZSMIO2KuOudvOydtOyWtOuTnDog7Lmc7ISgIO2GoOuEiOuovO2KuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA4MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gVW1icmEnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogVW1icmEnLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gTnXDqWUnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YaN55Sf57eoMScsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64IDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIExpdGFuZWknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogTGl0YW55JyxcclxuICAgICAgJ2ZyJzogJ0xhIFByb21lc3NlIGRcXCfDiWRlbiAtIExpdGFuaWUnLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz77ya5YaN55Sf57eoMicsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64IDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0NDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjluIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIEFuYW1vcnBob3NlJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFByb21pc2U6IEFuYW1vcnBob3NpcycsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSBBbmFtb3JwaG9zZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlho3nlJ/nt6gzJyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrggMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOW4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gRXdpZ2tlaXQnLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogRXRlcm5pdHknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gw4l0ZXJuaXTDqScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjga7lnJLjgqjjg4fjg7PvvJrlho3nlJ/nt6g0JyxcclxuICAgICAgJ2tvJzogJ+2drOunneydmCDrgpnsm5Ag7JeQ6420OiDsnqzsg53tjrggNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNzEsXHJcbiAgICAnb2Zmc2V0WSc6IDIzLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6AxJyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gVW1icmEgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogVW1icmEgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gTnXDqWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muWGjeeUn+e3qDEnLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOyerOyDne2OuCjsmIHsm4UpIDEnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0Nzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMicsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIExpdGFuZWkgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogTGl0YW55IChTYXZhZ2UpJyxcclxuICAgICAgJ2ZyJzogJ0xhIFByb21lc3NlIGRcXCfDiWRlbiAtIExpdGFuaWUgKHNhZGlxdWUpJyxcclxuICAgICAgJ2phJzogJ+W4jOacm+OBruWckuOCqOODh+ODs+mbtuW8j++8muWGjeeUn+e3qDInLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIOuCmeybkCDsl5DrjbQ6IOyerOyDne2OuCjsmIHsm4UpIDInLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk0ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNSxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvIrnlLjpm7blvI/luIzmnJvkuZDlm60g5YaN55Sf5LmL56ugMycsXHJcbiAgICAgICdkZSc6ICdFZGVucyBWZXJoZWnDn3VuZyAtIEFuYW1vcnBob3NlIChlcGlzY2gpJyxcclxuICAgICAgJ2VuJzogJ0VkZW5cXCdzIFByb21pc2U6IEFuYW1vcnBob3NpcyAoU2F2YWdlKScsXHJcbiAgICAgICdmcic6ICdMYSBQcm9tZXNzZSBkXFwnw4lkZW4gLSBBbmFtb3JwaG9zZSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YaN55Sf57eoMycsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64KOyYgeybhSkgMycsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTQ5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S8iueUuOmbtuW8j+W4jOacm+S5kOWbrSDlho3nlJ/kuYvnq6A0JyxcclxuICAgICAgJ2RlJzogJ0VkZW5zIFZlcmhlacOfdW5nIC0gRXdpZ2tlaXQgKGVwaXNjaCknLFxyXG4gICAgICAnZW4nOiAnRWRlblxcJ3MgUHJvbWlzZTogRXRlcm5pdHkgKFNhdmFnZSknLFxyXG4gICAgICAnZnInOiAnTGEgUHJvbWVzc2UgZFxcJ8OJZGVuIC0gw4l0ZXJuaXTDqSAoc2FkaXF1ZSknLFxyXG4gICAgICAnamEnOiAn5biM5pyb44Gu5ZyS44Ko44OH44Oz6Zu25byP77ya5YaN55Sf57eoNCcsXHJcbiAgICAgICdrbyc6ICftnazrp53snZgg64KZ7JuQIOyXkOuNtDog7J6s7IOd7Y64KOyYgeybhSkgNCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiA3NSxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk1MDoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfpkrvnn7PnpZ7lhbXmjZXojrfkvZzmiJgnLFxyXG4gICAgICAnZGUnOiAnRGlhbWFudGJsaXR6IC0gRW50ZmVzc2VsdW5nJyxcclxuICAgICAgJ2VuJzogJ1RoZSBDbG91ZCBEZWNrJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRpbGxhYyBkZXMgQ2lycnVzJyxcclxuICAgICAgJ2phJzogJ+ODgOOCpOODpOOCpuOCp+ODneODs+aNleeNsuS9nOaIpicsXHJcbiAgICAgICdrbyc6ICfri6TsnbTslYTrqqzrk5wg7Juo7Y+wIO2PrO2ajeyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTUxOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mSu+efs+elnuWFteeLguaDs+S9nOaImCcsXHJcbiAgICAgICdkZSc6ICdEaWFtYW50YmxpdHogLSBUcmF1bWEnLFxyXG4gICAgICAnZW4nOiAnVGhlIENsb3VkIERlY2sgKEV4dHJlbWUpJyxcclxuICAgICAgJ2ZyJzogJ0xlIFRpbGxhYyBkZXMgQ2lycnVzIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn5qW144OA44Kk44Ok44Km44Kn44Od44Oz5o2V542y5L2c5oimJyxcclxuICAgICAgJ2tvJzogJ+q3uSDri6TsnbTslYTrqqzrk5wg7Juo7Y+wIO2PrO2ajeyekeyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTUyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W8guW9oualvOmYgeS9kOeJueWhlCcsXHJcbiAgICAgICdkZSc6ICdEZXIgVHVybSB2b24gWm90JyxcclxuICAgICAgJ2VuJzogJ1RoZSBUb3dlciBvZiBab3QnLFxyXG4gICAgICAnZnInOiAnTGEgdG91ciBkZSBab3R0JyxcclxuICAgICAgJ2phJzogJ+eVsOW9oualvOmWoyDjgr7jg4Pjg4jjga7loZQnLFxyXG4gICAgICAna28nOiAn7KGw7Yq4IO2DkScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtNTAsXHJcbiAgICAnb2Zmc2V0WSc6IC01MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk1Mzoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiAzLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfms7Dlnablubvlt6fmiJgnLFxyXG4gICAgICAnZGUnOiAnVHJhdW1wcsO8ZnVuZyAtIFRpdGFuJyxcclxuICAgICAgJ2VuJzogJ1RoZSBOYXZlbCAoVW5yZWFsKScsXHJcbiAgICAgICdmcic6ICdMZSBOb21icmlsIChpcnLDqWVsKScsXHJcbiAgICAgICdqYSc6ICflubvjgr/jgqTjgr/jg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ZmYIO2DgOydtO2DhCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjMsXHJcbiAgfSxcclxuICA5NTQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5aiB5bCU5biD5YWw5b635oms5biG6LW36IiqJyxcclxuICAgICAgJ2RlJzogJ0d1dGUgV2luZGUgZsO8ciBWeWxicmFuZCcsXHJcbiAgICAgICdlbic6ICdUaGUgR3JlYXQgU2hpcCBWeWxicmFuZCcsXHJcbiAgICAgICdmcic6ICdVbiBuYXZpcmUgbm9tbcOpIFZ5bGJyYW5kJyxcclxuICAgICAgJ2phJzogJ+ODkOOCpOODq+ODluODqeODs+ODieOBruiIueWHuicsXHJcbiAgICAgICdrbyc6ICfrsJTsnbzruIzrnpzrk5wg7Lac7ZWtJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDIzLFxyXG4gIH0sXHJcbiAgOTU1OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA3LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+elnuS9keWls+eOiycsXHJcbiAgICAgICdkZSc6ICdIaW5hYiBpbiBkaWUgUnVpbmVuJyxcclxuICAgICAgJ2VuJzogJ0ZpdCBmb3IgYSBRdWVlbicsXHJcbiAgICAgICdmcic6ICdRdWUgbGVzIERpZXV4IGdhcmRlbnQgbGEgUmVpbmUnLFxyXG4gICAgICAnamEnOiAn44K044OD44OJ44O744K744Kk44OW44O744K244O744Kv44Kk44O844OzJyxcclxuICAgICAgJ2tvJzogJ+qwkyDshLjsnbTruIwg642UIO2AuCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAtNzUwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTU2OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6L+35rSlJyxcclxuICAgICAgJ2RlJzogJ0xhYnlyaW50aG9zJyxcclxuICAgICAgJ2VuJzogJ0xhYnlyaW50aG9zJyxcclxuICAgICAgJ2ZyJzogJ0xlIExhYnlyaW50aG9zJyxcclxuICAgICAgJ2phJzogJ+ODqeODtOOCo+ODquODs+OCveOCuScsXHJcbiAgICAgICdrbyc6ICfrnbzruYTrprDthqDsiqQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMTAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTMxLFxyXG4gIH0sXHJcbiAgOTU3OiB7XHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn6JCo57u05aWI5bKbJyxcclxuICAgICAgJ2RlJzogJ1RoYXZuYWlyJyxcclxuICAgICAgJ2VuJzogJ1RoYXZuYWlyJyxcclxuICAgICAgJ2ZyJzogJ1RoYXZuYWlyJyxcclxuICAgICAgJ2phJzogJ+OCteODmeODjeOCouWzticsXHJcbiAgICAgICdrbyc6ICfsgqzrsqDrhKTslrQg7ISsJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzMixcclxuICB9LFxyXG4gIDk1ODoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WKoOmbt+mprCcsXHJcbiAgICAgICdkZSc6ICdHYXJsZW1hbGQnLFxyXG4gICAgICAnZW4nOiAnR2FybGVtYWxkJyxcclxuICAgICAgJ2ZyJzogJ0dhcmxlbWFsZCcsXHJcbiAgICAgICdqYSc6ICfjgqzjg6zjg57jg6vjg4knLFxyXG4gICAgICAna28nOiAn6rCI66CI66eQ65OcJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzMyxcclxuICB9LFxyXG4gIDk1OToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WPueaBr+a1tycsXHJcbiAgICAgICdkZSc6ICdNYXJlIExhbWVudG9ydW0nLFxyXG4gICAgICAnZW4nOiAnTWFyZSBMYW1lbnRvcnVtJyxcclxuICAgICAgJ2ZyJzogJ01hcmUgTGFtZW50b3J1bScsXHJcbiAgICAgICdqYSc6ICflmIbjgY3jga7mtbcnLFxyXG4gICAgICAna28nOiAn67mE7YOE7J2YIOuwlOuLpCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMzUsXHJcbiAgfSxcclxuICA5NjA6IHtcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICflpKnlpJblpKnlnpMnLFxyXG4gICAgICAnZGUnOiAnVWx0aW1hIFRodWxlJyxcclxuICAgICAgJ2VuJzogJ1VsdGltYSBUaHVsZScsXHJcbiAgICAgICdmcic6ICdVbHRpbWEgVGh1bMOpJyxcclxuICAgICAgJ2phJzogJ+OCpuODq+ODhuOCo+ODnuODu+ODiOOCpeODvOODrCcsXHJcbiAgICAgICdrbyc6ICfsmrjti7Drp4gg7Yi066CIJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzNixcclxuICB9LFxyXG4gIDk2MToge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WOhOWwlOW6h+aWrycsXHJcbiAgICAgICdkZSc6ICdFbHBpcycsXHJcbiAgICAgICdlbic6ICdFbHBpcycsXHJcbiAgICAgICdmcic6ICdFbHBpcycsXHJcbiAgICAgICdqYSc6ICfjgqjjg6vjg5TjgrknLFxyXG4gICAgICAna28nOiAn7JeY7ZS87IqkJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDEwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDEzNCxcclxuICB9LFxyXG4gIDk2Mjoge1xyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+aXp+iQqOmbt+WuiScsXHJcbiAgICAgICdkZSc6ICdBbHQtU2hhcmxheWFuJyxcclxuICAgICAgJ2VuJzogJ09sZCBTaGFybGF5YW4nLFxyXG4gICAgICAnZnInOiAnVmllaWxsZSBTaGFybGF5YW4nLFxyXG4gICAgICAnamEnOiAn44Kq44O844Or44OJ44O744K344Oj44O844Os44Ki44OzJyxcclxuICAgICAgJ2tvJzogJ+yYrOuTnCDsg6zroIjsnbTslYgnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM3LFxyXG4gIH0sXHJcbiAgOTYzOiB7XHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5ouJ5pyt572VJyxcclxuICAgICAgJ2RlJzogJ1JhZHotYXQtSGFuJyxcclxuICAgICAgJ2VuJzogJ1JhZHotYXQtSGFuJyxcclxuICAgICAgJ2ZyJzogJ1JhZHotYXQtSGFuJyxcclxuICAgICAgJ2phJzogJ+ODqeOCtuODj+ODsycsXHJcbiAgICAgICdrbyc6ICfrnbzsnpDtlZwnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMCxcclxuICAgICdvZmZzZXRZJzogMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM4LFxyXG4gIH0sXHJcbiAgOTY2OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA1LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+W4jOacm+S5i+eCruWPsO+8muKAnOWhlOKAnScsXHJcbiAgICAgICdkZSc6ICdEZXIgVHVybSwgUGFyYWRpZ21lbmJyZWNoZXInLFxyXG4gICAgICAnZW4nOiAnVGhlIFRvd2VyIGF0IFBhcmFkaWdtXFwncyBCcmVhY2gnLFxyXG4gICAgICAnZnInOiAnTGEgdG91ciBkZSBsYSBDb250aW5nZW5jZScsXHJcbiAgICAgICdqYSc6ICfluIzmnJvjg47noLLlj7DvvJrjgIzloZTjgI0nLFxyXG4gICAgICAna28nOiAn7Z2s66ed7J2YIO2PrOuMgDogXFwn7YORXFwnJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDgwOCxcclxuICAgICdvZmZzZXRZJzogLTc3MixcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk2ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjgsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5bm75oOz6b6Z6K+X57ud5aKD5oiYJyxcclxuICAgICAgJ2RlJzogJ0RyYWNoZW5rcmllZyAoZmF0YWwpJyxcclxuICAgICAgJ2VuJzogJ0RyYWdvbnNvbmdcXCdzIFJlcHJpc2UgKFVsdGltYXRlKScsXHJcbiAgICAgICdmcic6ICdMYSBHdWVycmUgZHUgY2hhbnQgZGVzIGRyYWdvbnMgKGZhdGFsKScsXHJcbiAgICAgICdqYSc6ICfntbbnq5zoqanmiKbkuoknLFxyXG4gICAgICAna28nOiAn7KCIIOyaqeyLnOyghOyfgScsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAwLFxyXG4gIH0sXHJcbiAgOTY5OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+mtlOWvvOelnumXqOW3tOWIq+WhlCcsXHJcbiAgICAgICdkZSc6ICdEZXIgVHVybSB2b24gQmFiaWwnLFxyXG4gICAgICAnZW4nOiAnVGhlIFRvd2VyIG9mIEJhYmlsJyxcclxuICAgICAgJ2ZyJzogJ0xhIHRvdXIgZGUgQmFiaWwnLFxyXG4gICAgICAnamEnOiAn6a2U5bCO56We6ZaAIOODkOODluOCpOODq+OBruWhlCcsXHJcbiAgICAgICdrbyc6ICfrsJTruIzsnbwg7YORJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDI3MCxcclxuICAgICdvZmZzZXRZJzogLTMwMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMjgsXHJcbiAgfSxcclxuICA5NzA6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pyr5pel5qCR5rW35LiH55u45qOu5Zu9JyxcclxuICAgICAgJ2RlJzogJ1ZhbmFzcGF0aScsXHJcbiAgICAgICdlbic6ICdWYW5hc3BhdGknLFxyXG4gICAgICAnZnInOiAnVmFuYXNwYXRpJyxcclxuICAgICAgJ2phJzogJ+e1guacq+aouea1tyDjg7TjgqHjg4rjgrnjg5Hjg4bjgqMnLFxyXG4gICAgICAna28nOiAn67CU64KY7Iqk7YyM7YuwJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDI4MCxcclxuICAgICdvZmZzZXRZJzogOCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQxLFxyXG4gIH0sXHJcbiAgOTcyOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDMsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+WIqee7tOS6muahkeW5u+W3p+aImCcsXHJcbiAgICAgICdkZSc6ICdUcmF1bXByw7xmdW5nIC0gTGV2aWF0aGFuJyxcclxuICAgICAgJ2VuJzogJ1RoZSA8RW1waGFzaXM+V2hvcmxlYXRlcjwvRW1waGFzaXM+IChVbnJlYWwpJyxcclxuICAgICAgJ2ZyJzogJ0xlIEJyaXNldXIgZGUgbWFyw6llcyAoaXJyw6llbCknLFxyXG4gICAgICAnamEnOiAn5bm744Oq44O044Kh44Kk44Ki44K144Oz6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+2ZmCDrpqzrsJTsnbTslrTshKAg7Yag67KM7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDAsXHJcbiAgICAnb2Zmc2V0WSc6IDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDM4LFxyXG4gIH0sXHJcbiAgOTczOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyLFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+acgOe7iOW5u+aDs+acq+S4lue7iOi/uScsXHJcbiAgICAgICdkZSc6ICdEYXMgU3Rlcm5lbmdyYWInLFxyXG4gICAgICAnZW4nOiAnVGhlIERlYWQgRW5kcycsXHJcbiAgICAgICdmcic6ICdMXFwnSXNzdWUgYXV4IEltcGFzc2VzJyxcclxuICAgICAgJ2phJzogJ+acgOe1guW5u+aDsyDjg6zjg6Djg4rjg7Pjg4gnLFxyXG4gICAgICAna28nOiAn7J6U7ZW067OEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0zMTAsXHJcbiAgICAnb2Zmc2V0WSc6IDE1LFxyXG4gICAgJ3NpemVGYWN0b3InOiAyMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxNDQsXHJcbiAgfSxcclxuICA5NzQ6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5Yib6YCg546v5aKD5p6B5YyX6YCg54mp6ZmiJyxcclxuICAgICAgJ2RlJzogJ0t0aXNpcyBIeXBlcmJvcmVpYScsXHJcbiAgICAgICdlbic6ICdLdGlzaXMgSHlwZXJib3JlaWEnLFxyXG4gICAgICAnZnInOiAnTFxcJ0h5cGVyYm9yw6llJyxcclxuICAgICAgJ2phJzogJ+WJtemAoOeSsOWigyDjg5Ljg6Xjg5rjg6vjg5zjg6zjgqLpgKDnianpmaInLFxyXG4gICAgICAna28nOiAn7ZyY7Y6Y66W067O066CI7JWEIOyhsOusvOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiA0MCxcclxuICAgICdvZmZzZXRZJzogLTE1MCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk3NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMjksXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5omO5p2c6K+65bCU6auY5Y6fJyxcclxuICAgICAgJ2RlJzogJ1phZG5vci1Ib2NoZWJlbmUnLFxyXG4gICAgICAnZW4nOiAnWmFkbm9yJyxcclxuICAgICAgJ2ZyJzogJ0hhdXRzIHBsYXRlYXV4IGRlIFphZG5vcicsXHJcbiAgICAgICdqYSc6ICfjgrbjg4jjgqXjg47jg6vpq5jljp8nLFxyXG4gICAgICAna28nOiAn7J6Q7Yq464W466W0IOqzoOybkCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMzAsXHJcbiAgfSxcclxuICA5NzY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5LmQ5Zut6YO95biC56yR56yR6ZWHJyxcclxuICAgICAgJ2RlJzogJ1NtaWxldG9uJyxcclxuICAgICAgJ2VuJzogJ1NtaWxldG9uJyxcclxuICAgICAgJ2ZyJzogJ1Jpc2V0dGUtc3VyLWx1bmUnLFxyXG4gICAgICAnamEnOiAn5qW95ZyS6YO95biCIOOCueODnuOCpOODq+ODiOODsycsXHJcbiAgICAgICdrbyc6ICfsiqTrp4jsnbzthLQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTIyLFxyXG4gICAgJ29mZnNldFknOiAtNDIsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDAsXHJcbiAgfSxcclxuICA5Nzc6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDcsXHJcbiAgICAnZXhWZXJzaW9uJzogMyxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5q275paX6Iez6buO5piOJyxcclxuICAgICAgJ2RlJzogJ0thbXBmIGltIE1vcmdlbmdyYXVlbicsXHJcbiAgICAgICdlbic6ICdEZWF0aCBVbnRvIERhd24nLFxyXG4gICAgICAnZnInOiAnQXViZSBtZXVydHJpw6hyZScsXHJcbiAgICAgICdqYSc6ICfpu47mmI7jga7mrbvpl5gnLFxyXG4gICAgICAna28nOiAn7Jes66qF7J2YIOyCrO2IrCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAwLFxyXG4gICAgJ29mZnNldFknOiAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiAxMDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMTQsXHJcbiAgfSxcclxuICA5Nzg6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDIsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5pif5rW35rex5bm95a+75Zug5pif5pm26ZWcJyxcclxuICAgICAgJ2RlJzogJ0RhcyBBaXRpYXNrb3AnLFxyXG4gICAgICAnZW4nOiAnVGhlIEFpdGlhc2NvcGUnLFxyXG4gICAgICAnZnInOiAnTGUgUHJpc21lIGRlIGxcXCdBaXRpYScsXHJcbiAgICAgICdqYSc6ICfmmJ/mtbfmvZzoiKog44Ki44Kk44OG44Kj44Kq44Oz5pif5pm26Y+hJyxcclxuICAgICAgJ2tvJzogJ+yVhOydtO2LsOyYqCDrs4TtmITrr7jqsr0nLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogOCxcclxuICAgICdvZmZzZXRZJzogLTUwMSxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk4Njoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogMixcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnlLXohJHmoqblooPmlq/mj5DmoLznjpvlm5snLFxyXG4gICAgICAnZGUnOiAnU3RpZ21hLUhvbG9tZXRyaWUnLFxyXG4gICAgICAnZW4nOiAnVGhlIFN0aWdtYSBEcmVhbXNjYXBlJyxcclxuICAgICAgJ2ZyJzogJ1LDqnZlIMOpbGVjdHJpcXVlIGRlIFN0aWdtYS00JyxcclxuICAgICAgJ2phJzogJ+mbu+iEs+WkouaDsyDjgrnjg4bjgqPjgrDjg57jg7vjg5Xjgqnjg7wnLFxyXG4gICAgICAna28nOiAn7Iqk7Yuw6re466eILTQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogMTQ0LFxyXG4gICAgJ29mZnNldFknOiAtMTQsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDIwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDE0MCxcclxuICB9LFxyXG4gIDk5Mjoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfkvZDov6rkuprlhYvmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnUHJvcGhldGllIC0gWm9kaWFyaycsXHJcbiAgICAgICdlbic6ICdUaGUgRGFyayBJbnNpZGUnLFxyXG4gICAgICAnZnInOiAnTGUgQ3JhdMOocmUgZGVzIE1hcnR5cnMnLFxyXG4gICAgICAnamEnOiAn44K+44OH44Kj44Ki44O844Kv6KiO5ruF5oimJyxcclxuICAgICAgJ2tvJzogJ+yhsOuUlOyVhO2BrCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM5LFxyXG4gIH0sXHJcbiAgOTkzOiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+S9kOi/quS6muWFi+aaneaal+atvOeBreaImCcsXHJcbiAgICAgICdkZSc6ICdFc2NoYXRvcyAtIFpvZGlhcmsnLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IFpvZGlhcmtcXCdzIEZhbGwnLFxyXG4gICAgICAnZnInOiAnTGUgQ3JhdMOocmUgZGVzIE1hcnR5cnMgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjgr7jg4fjgqPjgqLjg7zjgq/oqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IOyhsOuUlOyVhO2BrCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM5LFxyXG4gIH0sXHJcbiAgOTk0OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiAyMixcclxuICAgICdleFZlcnNpb24nOiAwLFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmu5HnqL3ngbXmrr/pl7nprLznm5vlrrQnLFxyXG4gICAgICAnZGUnOiAnTHVzdGlnZXMgQmFua2V0dCcsXHJcbiAgICAgICdlbic6ICdUaGUgUGhhbnRvbXNcXCcgRmVhc3QnLFxyXG4gICAgICAnZnInOiAnTGUgYmFucXVldCBjYXVjaGVtYXJkZXNxdWUnLFxyXG4gICAgICAnamEnOiAn6YGT5YyW6aWX5a60IOODm+ODvOODs+ODhuODg+ODieODleOCo+ODvOOCueODiCcsXHJcbiAgICAgICdrbyc6ICfsnKDroLnsnZgg7Jew7ZqMJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IDIwLFxyXG4gICAgJ29mZnNldFknOiAxMCxcclxuICAgICdzaXplRmFjdG9yJzogMjAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMCxcclxuICB9LFxyXG4gIDk5NToge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfmtbflvrfmnpfmrbznga3miJgnLFxyXG4gICAgICAnZGUnOiAnUHJvcGhldGllIC0gSHlkYWVseW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIE1vdGhlcmNyeXN0YWwnLFxyXG4gICAgICAnZnInOiAnTGUgQ3Jpc3RhbC1tw6hyZScsXHJcbiAgICAgICdqYSc6ICfjg4/jgqTjg4fjg6rjg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn7ZWY7J20642466awIO2GoOuyjOyghCcsXHJcbiAgICB9LFxyXG4gICAgJ29mZnNldFgnOiAtMTAwLFxyXG4gICAgJ29mZnNldFknOiAtMTAwLFxyXG4gICAgJ3NpemVGYWN0b3InOiA0MDAsXHJcbiAgICAnd2VhdGhlclJhdGUnOiAxMzksXHJcbiAgfSxcclxuICA5OTY6IHtcclxuICAgICdjb250ZW50VHlwZSc6IDQsXHJcbiAgICAnZXhWZXJzaW9uJzogNCxcclxuICAgICduYW1lJzoge1xyXG4gICAgICAnY24nOiAn5rW35b635p6X5pmW5YWJ5q2854Gt5oiYJyxcclxuICAgICAgJ2RlJzogJ0VzY2hhdG9zIC0gSHlkYWVseW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IEh5ZGFlbHluXFwncyBDYWxsJyxcclxuICAgICAgJ2ZyJzogJ0xlIENyaXN0YWwtbcOocmUgKGV4dHLDqm1lKScsXHJcbiAgICAgICdqYSc6ICfmpbXjg4/jgqTjg4fjg6rjg7PoqI7mu4XmiKYnLFxyXG4gICAgICAna28nOiAn6re5IO2VmOydtOuNuOumsCDthqDrsozsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTM5LFxyXG4gIH0sXHJcbiAgOTk3OiB7XHJcbiAgICAnY29udGVudFR5cGUnOiA0LFxyXG4gICAgJ2V4VmVyc2lvbic6IDQsXHJcbiAgICAnbmFtZSc6IHtcclxuICAgICAgJ2NuJzogJ+e7iOe7k+S5i+aImCcsXHJcbiAgICAgICdkZSc6ICdQcm9waGV0aWUgLSBFbmRzw6RuZ2VyaW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIEZpbmFsIERheScsXHJcbiAgICAgICdmcic6ICdMZSBSw6lwb25zIGZpbmFsJyxcclxuICAgICAgJ2phJzogJ+e1gueEieOBruaIpuOBhCcsXHJcbiAgICAgICdrbyc6ICfsooXslrjsnZgg6rKw7KCEJyxcclxuICAgIH0sXHJcbiAgICAnb2Zmc2V0WCc6IC0xMDAsXHJcbiAgICAnb2Zmc2V0WSc6IC0xMDAsXHJcbiAgICAnc2l6ZUZhY3Rvcic6IDQwMCxcclxuICAgICd3ZWF0aGVyUmF0ZSc6IDExNixcclxuICB9LFxyXG4gIDk5ODoge1xyXG4gICAgJ2NvbnRlbnRUeXBlJzogNCxcclxuICAgICdleFZlcnNpb24nOiA0LFxyXG4gICAgJ25hbWUnOiB7XHJcbiAgICAgICdjbic6ICfnu4jmnoHkuYvmiJgnLFxyXG4gICAgICAnZGUnOiAnRXNjaGF0b3MgLSBFbmRzw6RuZ2VyaW4nLFxyXG4gICAgICAnZW4nOiAnVGhlIE1pbnN0cmVsXFwncyBCYWxsYWQ6IEVuZHNpbmdlclxcJ3MgQXJpYScsXHJcbiAgICAgICdmcic6ICdMZSBSw6lwb25zIGZpbmFsIChleHRyw6ptZSknLFxyXG4gICAgICAnamEnOiAn57WC5qW144Gu5oim44GEJyxcclxuICAgICAgJ2tvJzogJ+yiheq3ueydmCDqsrDsoIQnLFxyXG4gICAgfSxcclxuICAgICdvZmZzZXRYJzogLTEwMCxcclxuICAgICdvZmZzZXRZJzogLTEwMCxcclxuICAgICdzaXplRmFjdG9yJzogNDAwLFxyXG4gICAgJ3dlYXRoZXJSYXRlJzogMTQ2LFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkYXRhO1xyXG4iLCJpbXBvcnQgeyBQYXJ0eSwgUGxheWVyQ2hhbmdlZFJldCB9IGZyb20gJy4uL3R5cGVzL2V2ZW50JztcclxuaW1wb3J0IHsgSm9iIH0gZnJvbSAnLi4vdHlwZXMvam9iJztcclxuXHJcbmltcG9ydCB7IExhbmcgfSBmcm9tICcuL2xhbmd1YWdlcyc7XHJcbmltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy4vb3ZlcmxheV9wbHVnaW5fYXBpJztcclxuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJztcclxuXHJcbi8vIFdpbGwgcmVkaXJlY3QgY2FsbHMgZnJvbSBgb25QbGF5ZXJDaGFuZ2VkRXZlbnRgIHRvIHxmdW5jfCBvdmVycmlkaW5nIHdpdGhcclxuLy8gfHBsYXllck5hbWV8IGFuZCB0aGVpciBqb2IuICBKb2IgaXMgaW1wb3J0YW50IGZvciByYWlkYm9zcy5cclxuLy8gSXQgbWlnaHQgYmUgbmljZSB0byBkbyBIUCwgYmVjYXVzZSBvdGhlcndpc2UgdGhlIG1hdGggc2VjdGlvbiBvZlxyXG4vLyBSaWRvcmFuYSBMaWdodGhvdXNlIHdvbid0IHdvcmsuXHJcbi8vXHJcbi8vIE90aGVyIHBhcnRzIG9mIHRoZSBwbGF5ZXIgKHN1Y2ggdGhhdCB3b3VsZCBoZWxwIHRoZSBqb2JzIG92ZXJsYXkgcnVuKVxyXG4vLyBhcmUgZGVsaWJlcmF0ZWx5IG5vdCBpbmNsdWRlZCBoZXJlLCBiZWNhdXNlIGl0J3MgaW1wb3NzaWJsZSB0byBydW5cclxuLy8gam9icyByZW1vdGVseSBkdWUgdG8gZ2F1Z2UgZGF0YSBiZWluZyBsb2NhbCBhbmQgbWFueSBiaXRzIG9mIGluZm9ybWF0aW9uXHJcbi8vIGxvYWRlZCBmcm9tIG1lbW9yeS5cclxuXHJcbmV4cG9ydCB0eXBlIFBsYXllckNoYW5nZWREZXRhaWwgPSB7IGRldGFpbDogUGxheWVyQ2hhbmdlZFJldCB9O1xyXG50eXBlIFBsYXllckNoYW5nZWRGdW5jID0gKGU6IFBsYXllckNoYW5nZWREZXRhaWwpID0+IHZvaWQ7XHJcblxyXG4vLyBAVE9ETzogU3dhcCB0aGUgb3JkZXIgb2YgdGhlc2UgYXJndW1lbnRzLCBtYWtlIHBsYXllck5hbWUgb3B0aW9uYWwgaW5zdGVhZFxyXG5leHBvcnQgY29uc3QgYWRkUGxheWVyQ2hhbmdlZE92ZXJyaWRlTGlzdGVuZXIgPSAoXHJcbiAgZnVuYzogUGxheWVyQ2hhbmdlZEZ1bmMsXHJcbiAgcGxheWVyTmFtZT86IHN0cmluZyxcclxuKTogdm9pZCA9PiB7XHJcbiAgbGV0IGxhc3RQbGF5ZXJDaGFuZ2VkRXZlbnQ6IFBsYXllckNoYW5nZWREZXRhaWwgfCBudWxsID0gbnVsbDtcclxuICBsZXQgbGFzdFBsYXllckpvYjogSm9iIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIGNvbnN0IG9uUGxheWVyQ2hhbmdlZDogUGxheWVyQ2hhbmdlZEZ1bmMgPSAoZTogUGxheWVyQ2hhbmdlZERldGFpbCkgPT4ge1xyXG4gICAgaWYgKHBsYXllck5hbWUgIT09IHVuZGVmaW5lZCAmJiBwbGF5ZXJOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgZS5kZXRhaWwubmFtZSA9IHBsYXllck5hbWU7XHJcbiAgICAgIGlmIChsYXN0UGxheWVySm9iKSB7XHJcbiAgICAgICAgLy8gVXNlIHRoZSBub24tb3ZlcnJpZGRlbiBqb2IgaWYgd2UgZG9uJ3Qga25vdyBhbiBvdmVycmlkZGVuIG9uZS5cclxuICAgICAgICBlLmRldGFpbC5qb2IgPSBsYXN0UGxheWVySm9iO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBsYXN0UGxheWVyQ2hhbmdlZEV2ZW50ID0gZTtcclxuXHJcbiAgICBmdW5jKGUpO1xyXG4gIH07XHJcblxyXG4gIGFkZE92ZXJsYXlMaXN0ZW5lcignb25QbGF5ZXJDaGFuZ2VkRXZlbnQnLCBvblBsYXllckNoYW5nZWQpO1xyXG4gIGlmIChwbGF5ZXJOYW1lID09PSB1bmRlZmluZWQgfHwgcGxheWVyTmFtZS5sZW5ndGggPT09IDApXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGFkZE92ZXJsYXlMaXN0ZW5lcignUGFydHlDaGFuZ2VkJywgKGUpID0+IHtcclxuICAgIGNvbnN0IHBsYXllciA9IGUucGFydHkuZmluZCgocCkgPT4gcC5uYW1lID09PSBwbGF5ZXJOYW1lKTtcclxuICAgIGlmICghcGxheWVyKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgbmV3Sm9iID0gVXRpbC5qb2JFbnVtVG9Kb2IocGxheWVyLmpvYik7XHJcbiAgICBpZiAobmV3Sm9iID09PSBsYXN0UGxheWVySm9iKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgbGFzdFBsYXllckpvYiA9IG5ld0pvYjtcclxuICAgIC8vIFRoaXMgZXZlbnQgbWF5IGNvbWUgYmVmb3JlIHRoZSBmaXJzdCBvblBsYXllckNoYW5nZWRFdmVudC5cclxuICAgIGlmIChsYXN0UGxheWVyQ2hhbmdlZEV2ZW50KVxyXG4gICAgICBvblBsYXllckNoYW5nZWQobGFzdFBsYXllckNoYW5nZWRFdmVudCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyBDb21tb24gVUkgZm9yIHNlbGVjdGluZyBhIHBsYXllci5cclxuLy8gT25seSB1c2VkIGZvciByYWlkYm9zcywgYnV0IGNvdWxkIG9zdGVuc2libHkgYmUgcmV1c2VkIGZvciBvb3BzeSxcclxuLy8gaWYgdGhlcmUncyBldmVyIHBsYXllciBzcGVjaWZpYyBzdHVmZi5cclxuLy8gVE9ETzogaXQgd291bGQgYmUgbmljZSB0byBzaG93IHRoZSBcImNvbm5lY3RlZCAvIG5vdCBjb25uZWN0ZWRcIiBiaXQgaW4gdGhlIFVJLlxyXG5leHBvcnQgY29uc3QgYWRkUmVtb3RlUGxheWVyU2VsZWN0VUkgPSAobGFuZzogTGFuZyk6IHZvaWQgPT4ge1xyXG4gIGNvbnN0IGluc3RydWN0aW9uVGV4dEJ5TGFuZyA9IHtcclxuICAgIGVuOiAnU2VsZWN0IGEgUGxheWVyXFxuKHRoZSBsaXN0IHdpbGwgdXBkYXRlIHdoZW4gaW4gYW4gaW5zdGFuY2UpJyxcclxuICAgIGRlOiAnV8OkaGxlIGVpbmVuIFNwaWVsZXJcXG4oRGllc2UgTGlzdGUgYWt0dWFsaXNpZXJ0IHNpY2gsIHNvYmFsZCBlaW5lIEluc3RhbmNlIGJldHJldHRlbiB3aXJkKScsXHJcbiAgICBmcjogJ1PDqWxlY3Rpb25uZXIgdW4gam91ZXVyXFxuIChsYSBsaXN0ZSBzZSBtZXR0cmEgw6Agam91ciBkYW5zIHVuZSBpbnN0YW5jZSknLFxyXG4gICAgamE6ICfjg5fjg6zjg7zjg6Tjg7zlkI3jgpLpgbjmip7jgZfjgabjgY/jgaDjgZXjgYRcXG4o44Kk44Oz44K544K/44Oz44K544Gr5YWl44KL44Go44Oq44K544OI44GM5pu05paw44GZ44KLKScsXHJcbiAgICBjbjogJ+ivt+mAieaLqeeOqeWutuWQjeensFxcbijmraTliJfooajlsIbkvJrlnKjov5vlhaXlia/mnKzlkI7mm7TmlrApJyxcclxuICAgIGtvOiAn7ZSM66CI7J207Ja066W8IOyEoO2Dne2VmOyEuOyalFxcbijsnbjsiqTthLTsiqTsl5Ag7J6I7Jy866m0IOumrOyKpO2KuOqwgCDsl4XrjbDsnbTtirjrkKnri4jri6QuKScsXHJcbiAgfTtcclxuICBjb25zdCBmb3JjZVRUU0J5TGFuZyA9IHtcclxuICAgIGVuOiAnRm9yY2UgRW5hYmxlIFRleHQgVG8gU3BlZWNoJyxcclxuICAgIGRlOiAnRXJ6d2luZ2UgVGV4dCBpbiBTcHJhY2hlIChUVFMpJyxcclxuICAgIGZyOiAnRm9yY2VyIGxcXCdhY3RpdmF0aW9uIGRlIGxhIHN5bnRow6hzZSB2b2NhbGUgKFRUUyknLFxyXG4gICAgamE6ICdUVFPjgpLlvLfliLbnmoTjgavmnInlirnljJbjgZnjgosnLFxyXG4gICAgY246ICflvLrliLblkK/nlKhUVFMnLFxyXG4gICAga286ICdUVFMg6riw64ql7J2EIO2ZnOyEse2ZlO2VmOq4sCcsXHJcbiAgfTtcclxuICBjb25zdCBidXR0b25UZXh0QnlMYW5nID0ge1xyXG4gICAgZW46ICdTdGFydCBPdmVybGF5JyxcclxuICAgIGRlOiAnU3RhcnQgT3ZlcmxheScsXHJcbiAgICBmcjogJ0TDqW1hcnJlciBsXFwnT3ZlcmxheScsXHJcbiAgICBqYTogJ+OCquODvOODkOODvOODrOOCpOOCkui1t+WLlScsXHJcbiAgICBjbjogJ+WQr+eUqOaCrOa1rueqlycsXHJcbiAgICBrbzogJ+yYpOuyhOugiOydtCDsi5zsnpEnLFxyXG4gIH07XHJcbiAgY29uc3QgZGVmYXVsdFRleHRCeUxhbmcgPSB7XHJcbiAgICBlbjogJyhubyBvdmVycmlkZSknLFxyXG4gICAgZGU6ICcoa2VpbiDDvGJlcnNjaHJlaWJlbiknLFxyXG4gICAgZnI6ICcocGFzIGRlIGTDqXJvZ2F0aW9uKScsXHJcbiAgICBqYTogJyjml6LlrprlgKQpJyxcclxuICAgIGNuOiAnKOm7mOiupOWAvCknLFxyXG4gICAga286ICco7ZSM66CI7J207Ja0IOyngOyglSDslYjtlagpJyxcclxuICB9O1xyXG5cclxuICAvLyBUT0RPOiBwcm9iYWJseSBzaG91bGQgc2F2ZSBmb3JjZVRUUyBhcyB3ZWxsLCBtYXliZSBzYXZlIHNvbWUge30gb3B0aW9ucz9cclxuICBjb25zdCBrU3RvcmFnZUtleSA9ICdjYWN0Ym90LWxhc3Qtc2VsZWN0ZWQtcGxheWVyJztcclxuICBjb25zdCBzYXZlUGxheWVyTmFtZSA9IChuYW1lOiBzdHJpbmcpID0+IHtcclxuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrU3RvcmFnZUtleSwgbmFtZSk7XHJcbiAgfTtcclxuICBjb25zdCBsb2FkUGxheWVyTmFtZSA9ICgpID0+IHtcclxuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oa1N0b3JhZ2VLZXkpO1xyXG4gIH07XHJcblxyXG4gIC8vIEFkZCBjb21tb24gVUkgdG8gc2VsZWN0IGEgcGxheWVyLlxyXG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGNvbnRhaW5lci5pZCA9ICdwbGF5ZXItc2VsZWN0JztcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcblxyXG4gIGNvbnN0IGluc3RydWN0aW9uRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGluc3RydWN0aW9uRWxlbS5pZCA9ICdwbGF5ZXItc2VsZWN0LWluc3RydWN0aW9ucyc7XHJcbiAgaW5zdHJ1Y3Rpb25FbGVtLmlubmVySFRNTCA9IGluc3RydWN0aW9uVGV4dEJ5TGFuZ1tsYW5nXSB8fCBpbnN0cnVjdGlvblRleHRCeUxhbmdbJ2VuJ107XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGluc3RydWN0aW9uRWxlbSk7XHJcblxyXG4gIGNvbnN0IGxpc3RFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgbGlzdEVsZW0uaWQgPSAncGxheWVyLXNlbGVjdC1saXN0JztcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGlzdEVsZW0pO1xyXG5cclxuICBjb25zdCB0dHNFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICB0dHNFbGVtLnR5cGUgPSAnY2hlY2tib3gnO1xyXG4gIHR0c0VsZW0uaWQgPSAncGxheWVyLXNlbGVjdC10dHMnO1xyXG4gIHR0c0VsZW0ubmFtZSA9ICdwbGF5ZXItc2VsZWN0LXR0cyc7XHJcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHR0c0VsZW0pO1xyXG5cclxuICBjb25zdCB0dHNMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XHJcbiAgdHRzTGFiZWwuaWQgPSAncGxheWVyLXNlbGVjdC10dHMtbGFiZWwnO1xyXG4gIHR0c0xhYmVsLmh0bWxGb3IgPSAncGxheWVyLXNlbGVjdC10dHMnO1xyXG4gIHR0c0xhYmVsLmlubmVySFRNTCA9IGZvcmNlVFRTQnlMYW5nW2xhbmddIHx8IGZvcmNlVFRTQnlMYW5nWydlbiddO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0dHNMYWJlbCk7XHJcblxyXG4gIGNvbnN0IGJ1dHRvbkVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICBidXR0b25FbGVtLmlkID0gJ3BsYXllci1zZWxlY3QtYnV0dG9uJztcclxuICBidXR0b25FbGVtLm5hbWUgPSAncGxheWVyLXNlbGVjdC1idXR0b24nO1xyXG4gIGJ1dHRvbkVsZW0uaW5uZXJIVE1MID0gYnV0dG9uVGV4dEJ5TGFuZ1tsYW5nXSB8fCBidXR0b25UZXh0QnlMYW5nWydlbiddO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b25FbGVtKTtcclxuICBidXR0b25FbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgY29uc3QgZm9yY2VUVFMgPSB0dHNFbGVtLmNoZWNrZWQ7XHJcbiAgICBsZXQgcGxheWVyTmFtZSA9ICcnO1xyXG4gICAgbGV0IHJhZGlvSW5kZXggPSAwO1xyXG4gICAgZm9yICg7Oykge1xyXG4gICAgICByYWRpb0luZGV4Kys7XHJcbiAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcGxheWVyLXJhZGlvLSR7cmFkaW9JbmRleH1gKTtcclxuICAgICAgaWYgKCFlbGVtIHx8ICEoZWxlbSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpKVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBpZiAoIWVsZW0uY2hlY2tlZClcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgcGxheWVyTmFtZSA9IGVsZW0udmFsdWU7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwbGF5ZXJOYW1lKVxyXG4gICAgICBzYXZlUGxheWVyTmFtZShwbGF5ZXJOYW1lKTtcclxuXHJcbiAgICAvLyBQcmVzZXJ2ZSBleGlzdGluZyBwYXJhbWV0ZXJzLlxyXG4gICAgY29uc3QgY3VycmVudFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICBjb25zdCBwYXJhbU1hcDogeyBbdmFsdWU6IHN0cmluZ106IG51bWJlciB8IHN0cmluZyB9ID0ge307XHJcbiAgICAvLyBZZXMsIHRoaXMgaXMgKHYsIGspIGFuZCBub3QgKGssIHYpLlxyXG4gICAgY3VycmVudFBhcmFtcy5mb3JFYWNoKCh2LCBrKSA9PiBwYXJhbU1hcFtrXSA9IGRlY29kZVVSSUNvbXBvbmVudCh2KSk7XHJcblxyXG4gICAgcGFyYW1NYXAucGxheWVyID0gcGxheWVyTmFtZTtcclxuICAgIC8vIFVzZSAxLzAgdG8gYmUgY29uc2lzdGVudCB3aXRoIG90aGVyIHF1ZXJ5IHBhcmFtZXRlcnMgcmF0aGVyIHRoYW4gc3RyaW5nIHRydWUvZmFsc2UuXHJcbiAgICBwYXJhbU1hcC5mb3JjZVRUUyA9IGZvcmNlVFRTID8gMSA6IDA7XHJcblxyXG4gICAgLy8gVE9ETzogb3ZlcmxheV9wbHVnaW5fYXBpLmpzIGRvZXNuJ3Qgc3VwcG9ydCB1cmkgZW5jb2RlZCBPVkVSTEFZX1dTIHBhcmFtZXRlcnMuXHJcbiAgICAvLyBTbyB0aGlzIGNhbid0IHVzZSBVUkxTZWFyY2hQYXJhbXMudG9TdHJpbmcgeWV0LiAgTWFudWFsbHkgYnVpbGQgc3RyaW5nLlxyXG4gICAgbGV0IHNlYXJjaCA9ICc/JztcclxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtTWFwKSlcclxuICAgICAgc2VhcmNoICs9IGAke2t9PSR7dn0mYDtcclxuXHJcbiAgICAvLyBSZWxvYWQgdGhlIHBhZ2Ugd2l0aCBtb3JlIG9wdGlvbnMuXHJcbiAgICB3aW5kb3cubG9jYXRpb24uc2VhcmNoID0gc2VhcmNoO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBsYXN0U2VsZWN0ZWRQbGF5ZXIgPSBsb2FkUGxheWVyTmFtZSgpO1xyXG5cclxuICBjb25zdCBidWlsZExpc3QgPSAocGFydHk6IFBhcnR5W10pID0+IHtcclxuICAgIHdoaWxlIChsaXN0RWxlbS5maXJzdENoaWxkKSB7XHJcbiAgICAgIGlmIChsaXN0RWxlbS5sYXN0Q2hpbGQpXHJcbiAgICAgICAgbGlzdEVsZW0ucmVtb3ZlQ2hpbGQobGlzdEVsZW0ubGFzdENoaWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmFkaW9Db3VudCA9IDA7XHJcblxyXG4gICAgY29uc3QgYWRkUmFkaW8gPSAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBleHRyYUNsYXNzOiBzdHJpbmcpID0+IHtcclxuICAgICAgcmFkaW9Db3VudCsrO1xyXG5cclxuICAgICAgY29uc3QgaW5wdXROYW1lID0gYHBsYXllci1yYWRpby0ke3JhZGlvQ291bnR9YDtcclxuXHJcbiAgICAgIGNvbnN0IGlucHV0RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgIGlucHV0RWxlbS50eXBlID0gJ3JhZGlvJztcclxuICAgICAgaW5wdXRFbGVtLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgIGlucHV0RWxlbS5pZCA9IGlucHV0TmFtZTtcclxuICAgICAgaW5wdXRFbGVtLm5hbWUgPSAncGxheWVyLXJhZGlvJztcclxuICAgICAgaW5wdXRFbGVtLmNsYXNzTGlzdC5hZGQoJ3BsYXllci1yYWRpbycsIGV4dHJhQ2xhc3MpO1xyXG4gICAgICBsaXN0RWxlbS5hcHBlbmRDaGlsZChpbnB1dEVsZW0pO1xyXG5cclxuICAgICAgY29uc3QgbGFiZWxFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcclxuICAgICAgbGFiZWxFbGVtLmh0bWxGb3IgPSBpbnB1dE5hbWU7XHJcbiAgICAgIGxhYmVsRWxlbS5pbm5lckhUTUwgPSBuYW1lO1xyXG4gICAgICBsaXN0RWxlbS5hcHBlbmRDaGlsZChsYWJlbEVsZW0pO1xyXG5cclxuICAgICAgcmV0dXJuIGlucHV0RWxlbTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZGVmYXVsdFRleHQgPSBkZWZhdWx0VGV4dEJ5TGFuZ1tsYW5nXSB8fCBkZWZhdWx0VGV4dEJ5TGFuZ1snZW4nXTtcclxuICAgIGNvbnN0IGRlZmF1bHRFbGVtID0gYWRkUmFkaW8oZGVmYXVsdFRleHQsICcnLCAncGxheWVyLXJhZGlvLWRlZmF1bHQnKTtcclxuICAgIGRlZmF1bHRFbGVtLmNoZWNrZWQgPSB0cnVlO1xyXG5cclxuICAgIGlmIChsYXN0U2VsZWN0ZWRQbGF5ZXIgIT09IG51bGwgJiYgbGFzdFNlbGVjdGVkUGxheWVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgbGFzdCA9IGFkZFJhZGlvKGxhc3RTZWxlY3RlZFBsYXllciwgbGFzdFNlbGVjdGVkUGxheWVyLCAncGxheWVyLXJhZGlvLWxhc3QnKTtcclxuICAgICAgbGFzdC5jaGVja2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYXJ0eVBsYXllcnMgPSBwYXJ0eS5maWx0ZXIoKHApID0+IHAuaW5QYXJ0eSAmJiBwLm5hbWUgIT09IGxhc3RTZWxlY3RlZFBsYXllcik7XHJcbiAgICBjb25zdCBwYXJ0eU5hbWVzID0gcGFydHlQbGF5ZXJzLm1hcCgocCkgPT4gcC5uYW1lKS5zb3J0KCk7XHJcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgcGFydHlOYW1lcylcclxuICAgICAgYWRkUmFkaW8obmFtZSwgbmFtZSwgJ3BsYXllci1yYWRpby1wYXJ0eScpO1xyXG5cclxuICAgIGNvbnN0IGFsbGlhbmNlUGxheWVycyA9IHBhcnR5LmZpbHRlcigocCkgPT4gIXAuaW5QYXJ0eSAmJiBwLm5hbWUgIT09IGxhc3RTZWxlY3RlZFBsYXllcik7XHJcbiAgICBjb25zdCBhbGxpYW5jZU5hbWVzID0gYWxsaWFuY2VQbGF5ZXJzLm1hcCgocCkgPT4gcC5uYW1lKS5zb3J0KCk7XHJcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgYWxsaWFuY2VOYW1lcylcclxuICAgICAgYWRkUmFkaW8obmFtZSwgbmFtZSwgJ3BsYXllci1yYWRpby1hbGxpYW5jZScpO1xyXG4gIH07XHJcbiAgYWRkT3ZlcmxheUxpc3RlbmVyKCdQYXJ0eUNoYW5nZWQnLCAoZSkgPT4ge1xyXG4gICAgYnVpbGRMaXN0KGUucGFydHkpO1xyXG4gIH0pO1xyXG4gIGJ1aWxkTGlzdChbXSk7XHJcbn07XHJcbiIsImltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4vbm90X3JlYWNoZWQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXJCYXIgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgcm9vdEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gIGZvcmVncm91bmRFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICBiYWNrZ3JvdW5kRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgbGVmdFRleHRFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICBjZW50ZXJUZXh0RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgcmlnaHRUZXh0RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBfZHVyYXRpb246IG51bWJlcjtcclxuICBwcml2YXRlIF9zdGFydDogbnVtYmVyO1xyXG4gIHByaXZhdGUgX3dpZHRoOiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfYmc6IHN0cmluZztcclxuICBwcml2YXRlIF9mZzogc3RyaW5nO1xyXG4gIHByaXZhdGUgX3Rvd2FyZFJpZ2h0OiBib29sZWFuO1xyXG4gIHByaXZhdGUgX2ZpbGw6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfbGVmdFRleHQ6IHN0cmluZztcclxuICBwcml2YXRlIF9jZW50ZXJUZXh0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfcmlnaHRUZXh0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBfaGlkZUFmdGVyOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBfbG9vcDogYm9vbGVhbjtcclxuICBwcml2YXRlIF9jb25uZWN0ZWQ6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfaGlkZVRpbWVyOiBudW1iZXIgfCBudWxsO1xyXG5cclxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpOiBzdHJpbmdbXSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnZHVyYXRpb24nLFxyXG4gICAgICAndmFsdWUnLFxyXG4gICAgICAnZWxhcHNlZCcsXHJcbiAgICAgICdoaWRlYWZ0ZXInLFxyXG4gICAgICAnbGVmdHRleHQnLFxyXG4gICAgICAnY2VudGVydGV4dCcsXHJcbiAgICAgICdyaWdodHRleHQnLFxyXG4gICAgICAnd2lkdGgnLFxyXG4gICAgICAnaGVpZ2h0JyxcclxuICAgICAgJ2JnJyxcclxuICAgICAgJ2ZnJyxcclxuICAgICAgJ3N0eWxlZmlsbCcsXHJcbiAgICAgICd0b3dhcmQnLFxyXG4gICAgICAnbG9vcCcsXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgLyoqIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBUaW1lckJhciB3aXRoIGF0dHJpYnV0ZXMgKi9cclxuICBzdGF0aWMgY3JlYXRlKG8/OiB7XHJcbiAgICBkdXJhdGlvbj86IG51bWJlcjtcclxuICAgIHZhbHVlPzogbnVtYmVyO1xyXG4gICAgZWxhcHNlZD86IG51bWJlcjtcclxuICAgIGhpZGVhZnRlcj86IG51bWJlcjtcclxuICAgIGxlZnR0ZXh0Pzogc3RyaW5nO1xyXG4gICAgY2VudGVydGV4dD86IHN0cmluZztcclxuICAgIHJpZ2h0dGV4dD86IHN0cmluZztcclxuICAgIHdpZHRoPzogc3RyaW5nO1xyXG4gICAgaGVpZ2h0Pzogc3RyaW5nO1xyXG4gICAgYmc/OiBzdHJpbmc7XHJcbiAgICBmZz86IHN0cmluZztcclxuICAgIHN0eWxlZmlsbD86ICdlbXB0eScgfCAnZmlsbCc7XHJcbiAgICB0b3dhcmQ/OiAnbGVmdCcgfCAncmlnaHQnO1xyXG4gICAgbG9vcD86IGJvb2xlYW47XHJcbiAgfSk6IFRpbWVyQmFyIHtcclxuICAgIGlmICghd2luZG93LmN1c3RvbUVsZW1lbnRzLmdldCgndGltZXItYmFyJykpXHJcbiAgICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3RpbWVyLWJhcicsIFRpbWVyQmFyKTtcclxuXHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGltZXItYmFyJyk7XHJcbiAgICBpZiAoIW8pXHJcbiAgICAgIHJldHVybiBlbGVtZW50O1xyXG5cclxuICAgIGlmICh0eXBlb2Ygby5kdXJhdGlvbiA9PT0gJ251bWJlcicpXHJcbiAgICAgIGVsZW1lbnQuZHVyYXRpb24gPSBvLmR1cmF0aW9uO1xyXG4gICAgaWYgKHR5cGVvZiBvLnZhbHVlID09PSAnbnVtYmVyJylcclxuICAgICAgZWxlbWVudC52YWx1ZSA9IG8udmFsdWU7XHJcbiAgICBpZiAodHlwZW9mIG8uZWxhcHNlZCA9PT0gJ251bWJlcicpXHJcbiAgICAgIGVsZW1lbnQuZWxhcHNlZCA9IG8uZWxhcHNlZDtcclxuICAgIGlmICh0eXBlb2Ygby5oaWRlYWZ0ZXIgPT09ICdudW1iZXInKVxyXG4gICAgICBlbGVtZW50LmhpZGVhZnRlciA9IG8uaGlkZWFmdGVyO1xyXG4gICAgaWYgKHR5cGVvZiBvLmxlZnR0ZXh0ID09PSAnc3RyaW5nJylcclxuICAgICAgZWxlbWVudC5sZWZ0dGV4dCA9IG8ubGVmdHRleHQ7XHJcbiAgICBpZiAodHlwZW9mIG8uY2VudGVydGV4dCA9PT0gJ3N0cmluZycpXHJcbiAgICAgIGVsZW1lbnQuY2VudGVydGV4dCA9IG8uY2VudGVydGV4dDtcclxuICAgIGlmICh0eXBlb2Ygby5yaWdodHRleHQgPT09ICdzdHJpbmcnKVxyXG4gICAgICBlbGVtZW50LnJpZ2h0dGV4dCA9IG8ucmlnaHR0ZXh0O1xyXG4gICAgaWYgKHR5cGVvZiBvLndpZHRoID09PSAnc3RyaW5nJylcclxuICAgICAgZWxlbWVudC53aWR0aCA9IG8ud2lkdGg7XHJcbiAgICBpZiAodHlwZW9mIG8uaGVpZ2h0ID09PSAnc3RyaW5nJylcclxuICAgICAgZWxlbWVudC5oZWlnaHQgPSBvLmhlaWdodDtcclxuICAgIGlmICh0eXBlb2Ygby5iZyA9PT0gJ3N0cmluZycpXHJcbiAgICAgIGVsZW1lbnQuYmcgPSBvLmJnO1xyXG4gICAgaWYgKHR5cGVvZiBvLmZnID09PSAnc3RyaW5nJylcclxuICAgICAgZWxlbWVudC5mZyA9IG8uZmc7XHJcbiAgICBpZiAodHlwZW9mIG8uc3R5bGVmaWxsID09PSAnc3RyaW5nJylcclxuICAgICAgZWxlbWVudC5zdHlsZWZpbGwgPSBvLnN0eWxlZmlsbDtcclxuICAgIGlmICh0eXBlb2Ygby50b3dhcmQgPT09ICdzdHJpbmcnKVxyXG4gICAgICBlbGVtZW50LnRvd2FyZCA9IG8udG93YXJkO1xyXG4gICAgaWYgKHR5cGVvZiBvLmxvb3AgPT09ICdib29sZWFuJylcclxuICAgICAgZWxlbWVudC5sb29wID0gby5sb29wO1xyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBCYWNrZ3JvdW5kIGNvbG9yLlxyXG4gIHNldCBiZyhjOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICBpZiAoYyA9PT0gbnVsbClcclxuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2JnJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdiZycsIGMpO1xyXG4gIH1cclxuICBnZXQgYmcoKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2JnJyk7XHJcbiAgfVxyXG5cclxuICAvLyBGb3JlZ3JvdW5kIGNvbG9yLlxyXG4gIHNldCBmZyhjOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICBpZiAoYyA9PT0gbnVsbClcclxuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2ZnJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdmZycsIGMpO1xyXG4gIH1cclxuICBnZXQgZmcoKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZnJyk7XHJcbiAgfVxyXG5cclxuICAvLyBUaGUgd2lkdGggb2YgdGhlIGJhci5cclxuICBzZXQgd2lkdGgodzogc3RyaW5nIHwgbnVsbCkge1xyXG4gICAgaWYgKHcgPT09IG51bGwpXHJcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCd3aWR0aCcpO1xyXG4gICAgZWxzZVxyXG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3KTtcclxuICB9XHJcbiAgZ2V0IHdpZHRoKCk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIGhlaWdodCBvZiB0aGUgYmFyLlxyXG4gIHNldCBoZWlnaHQodzogc3RyaW5nIHwgbnVsbCkge1xyXG4gICAgaWYgKHcgPT09IG51bGwpXHJcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdoZWlnaHQnKTtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHcpO1xyXG4gIH1cclxuICBnZXQgaGVpZ2h0KCk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcclxuICB9XHJcblxyXG4gIC8vIFRoZSB0b3RhbCBsZW5ndGggb2YgdGltZSB0byBjb3VudCBkb3duLlxyXG4gIHNldCBkdXJhdGlvbihzOiBudW1iZXIgfCBudWxsKSB7XHJcbiAgICBpZiAocyA9PT0gbnVsbClcclxuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2R1cmF0aW9uJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkdXJhdGlvbicsIHMudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG4gIGdldCBkdXJhdGlvbigpOiBudW1iZXIgfCBudWxsIHtcclxuICAgIGNvbnN0IHMgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZHVyYXRpb24nKTtcclxuICAgIGlmIChzID09PSBudWxsKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiBwYXJzZUZsb2F0KHMpO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIGxlbmd0aCByZW1haW5pbmcgaW4gdGhlIGNvdW50IGRvd24uXHJcbiAgc2V0IHZhbHVlKHM6IG51bWJlcikge1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcy50b1N0cmluZygpKTtcclxuICB9XHJcblxyXG4gIGdldCB2YWx1ZSgpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLl9zdGFydClcclxuICAgICAgcmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xyXG4gICAgY29uc3QgZWxhcHNlZE1zID0gRGF0ZS5ub3coKSAtIHRoaXMuX3N0YXJ0O1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIHRoaXMuX2R1cmF0aW9uIC0gZWxhcHNlZE1zIC8gMTAwMCk7XHJcbiAgfVxyXG5cclxuICAvLyBUaGUgZWxhcHNlZCB0aW1lLlxyXG4gIHNldCBlbGFwc2VkKHM6IG51bWJlcikge1xyXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2VsYXBzZWQnLCBzLnRvU3RyaW5nKCkpO1xyXG4gIH1cclxuICBnZXQgZWxhcHNlZCgpOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLl9zdGFydClcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICByZXR1cm4gKERhdGUubm93KCkgLSB0aGlzLl9zdGFydCkgLyAxMDAwO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgXCJyaWdodFwiIHRoZW4gYW5pbWF0ZXMgbGVmdC10by1yaWdodCAodGhlIGRlZmF1bHQpLiBJZiBcImxlZnRcIlxyXG4gIC8vIHRoZW4gYW5pbWF0ZXMgcmlnaHQtdG8tbGVmdC5cclxuICBzZXQgdG93YXJkKHQ6ICdsZWZ0JyB8ICdyaWdodCcgfCBudWxsKSB7XHJcbiAgICBpZiAodCA9PT0gbnVsbClcclxuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ3Rvd2FyZCcpO1xyXG4gICAgZWxzZVxyXG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndG93YXJkJywgdCk7XHJcbiAgfVxyXG4gIGdldCB0b3dhcmQoKTogJ2xlZnQnIHwgJ3JpZ2h0JyB8IG51bGwge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKCd0b3dhcmQnKSBhcyAnbGVmdCcgfCAncmlnaHQnO1xyXG4gIH1cclxuXHJcbiAgLy8gSWYgXCJmaWxsXCIgdGhlbiB0aGUgcHJvZ3Jlc3MgZ29lcyBlbXB0eS10by1mdWxsLCBpZiBcImVtcHR5XCIgdGhlbiB0aGVcclxuICAvLyBwcm9ncmVzcyBiYXIgc3RhcnRzIGZ1bGwgYW5kIGdvZXMgdG8gZW1wdHkuXHJcbiAgc2V0IHN0eWxlZmlsbChzOiAnZW1wdHknIHwgJ2ZpbGwnIHwgbnVsbCkge1xyXG4gICAgaWYgKHMgPT09IG51bGwpXHJcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdzdHlsZWZpbGwnKTtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3N0eWxlZmlsbCcsIHMpO1xyXG4gIH1cclxuICBnZXQgc3R5bGVmaWxsKCk6ICdlbXB0eScgfCAnZmlsbCcgfCBudWxsIHtcclxuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnc3R5bGVmaWxsJykgYXMgJ2VtcHR5JyB8ICdmaWxsJztcclxuICB9XHJcblxyXG4gIC8vIFdoZW4gdGhlIGJhciByZWFjaGVzIDAsIGl0IGlzIGhpZGRlbiBhZnRlciB0aGlzIG1hbnkgc2Vjb25kcy4gSWYgbnVsbFxyXG4gIC8vIHRoZW4gaXQgaXMgbm90IGhpZGRlbi5cclxuICBzZXQgaGlkZWFmdGVyKGg6IG51bWJlciB8IG51bGwpIHtcclxuICAgIGlmIChoID09PSBudWxsKVxyXG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnaGlkZWFmdGVyJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdoaWRlYWZ0ZXInLCBoLnRvU3RyaW5nKCkpO1xyXG4gIH1cclxuICBnZXQgaGlkZWFmdGVyKCk6IG51bWJlciB8IG51bGwge1xyXG4gICAgY29uc3QgaCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdoaWRlYWZ0ZXInKTtcclxuICAgIGlmIChoID09PSBudWxsKVxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIHJldHVybiBwYXJzZUludChoKTtcclxuICB9XHJcblxyXG4gIC8vIENob29zZXMgd2hhdCBzaG91bGQgYmUgc2hvd24gaW4gdGhlIHRleHQgZmllbGQgaW4gZWFjaCBhcmVhIG9mXHJcbiAgLy8gdGhlIGJhci4gQ2FuIGJlIG9uZSBvZjpcclxuICAvLyBlbXB0eSAtIG5vdGhpbmcgaXMgc2hvd24uXHJcbiAgLy8gXCJyZW1haW5cIiAtIHNob3dzIHRoZSByZW1haW5pbmcgdGltZS5cclxuICAvLyBcImR1cmF0aW9uXCIgLSBzaG93cyB0aGUgcmVtYWluaW5nIGFuZCB0b3RhbCBkdXJhdGlvbiB0aW1lXHJcbiAgLy8gICAgICAgICAgICAgIG9mIHRoZSBiYXIuXHJcbiAgLy8gXCJwZXJjZW50XCIgLSBzaG93cyB0aGUgcGVyY2VudGFnZSBvZiByZW1haW5pbmcgdGltZSB0b1xyXG4gIC8vICAgICAgICAgICAgIHRoZSBkdXJhdGlvbi5cclxuICAvLyBcImVsYXBzZWRcIiAgIC0gc2hvd3MgdGhlIGVsYXBzZWQgdGltZVxyXG4gIC8vIGFueXRoaW5nIGVsc2UgLSB0aGUgZ2l2ZW4gdGV4dCBpcyBzaG93biBsaXRlcmFsbHkuXHJcbiAgc2V0IGxlZnR0ZXh0KHA6IHN0cmluZyB8IG51bGwpIHtcclxuICAgIGlmIChwID09PSBudWxsKVxyXG4gICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZSgnbGVmdHRleHQnKTtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xlZnR0ZXh0JywgcCk7XHJcbiAgfVxyXG4gIGdldCBsZWZ0dGV4dCgpOiBzdHJpbmcgfCBudWxsIHtcclxuICAgIHJldHVybiB0aGlzLmdldEF0dHJpYnV0ZSgnbGVmdHRleHQnKTtcclxuICB9XHJcbiAgc2V0IHJpZ2h0dGV4dChwOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICBpZiAocCA9PT0gbnVsbClcclxuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ3JpZ2h0dGV4dCcpO1xyXG4gICAgZWxzZVxyXG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZSgncmlnaHR0ZXh0JywgcCk7XHJcbiAgfVxyXG4gIGdldCByaWdodHRleHQoKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ3JpZ2h0dGV4dCcpO1xyXG4gIH1cclxuICBzZXQgY2VudGVydGV4dChwOiBzdHJpbmcgfCBudWxsKSB7XHJcbiAgICBpZiAocCA9PT0gbnVsbClcclxuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoJ2NlbnRlcnRleHQnKTtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2NlbnRlcnRleHQnLCBwKTtcclxuICB9XHJcbiAgZ2V0IGNlbnRlcnRleHQoKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGUoJ2NlbnRlcnRleHQnKTtcclxuICB9XHJcblxyXG4gIC8vIElmIHRoaXMgYXR0cmlidXRlIGlzIHByZXNlbnQsIHRoZSB0aW1lciB3aWxsIGxvb3AgZm9yZXZlci5cclxuICBzZXQgbG9vcChsOiBib29sZWFuKSB7XHJcbiAgICBpZiAobClcclxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ2xvb3AnLCAnJyk7XHJcbiAgICBlbHNlXHJcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdsb29wJyk7XHJcbiAgfVxyXG4gIGdldCBsb29wKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdsb29wJyk7XHJcbiAgfVxyXG5cclxuICAvLyBUaGlzIHdvdWxkIGJlIHVzZWQgd2l0aCB3aW5kb3cuY3VzdG9tRWxlbWVudHMuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xyXG4gICAgdGhpcy5pbml0KHJvb3QpO1xyXG5cclxuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIERlZmF1bHQgdmFsdWVzLlxyXG4gICAgdGhpcy5fc3RhcnQgPSAwO1xyXG4gICAgdGhpcy5fZHVyYXRpb24gPSAwO1xyXG4gICAgdGhpcy5fd2lkdGggPSAnMTAwJSc7XHJcbiAgICB0aGlzLl9oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICB0aGlzLl9iZyA9ICdibGFjayc7XHJcbiAgICB0aGlzLl9mZyA9ICd5ZWxsb3cnO1xyXG4gICAgdGhpcy5fdG93YXJkUmlnaHQgPSBmYWxzZTtcclxuICAgIHRoaXMuX2ZpbGwgPSBmYWxzZTtcclxuICAgIHRoaXMuX2xlZnRUZXh0ID0gJyc7XHJcbiAgICB0aGlzLl9jZW50ZXJUZXh0ID0gJyc7XHJcbiAgICB0aGlzLl9yaWdodFRleHQgPSAnJztcclxuICAgIHRoaXMuX2hpZGVBZnRlciA9IC0xO1xyXG4gICAgdGhpcy5fbG9vcCA9IGZhbHNlO1xyXG4gICAgdGhpcy5faGlkZVRpbWVyID0gMDtcclxuXHJcbiAgICB0aGlzLnJvb3RFbGVtZW50ID0gdGhpcy5zaGFkb3dSb290Py5nZXRFbGVtZW50QnlJZCgncm9vdCcpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgdGhpcy5mb3JlZ3JvdW5kRWxlbWVudCA9IHRoaXMuc2hhZG93Um9vdD8uZ2V0RWxlbWVudEJ5SWQoJ2ZnJykgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICB0aGlzLmJhY2tncm91bmRFbGVtZW50ID0gdGhpcy5zaGFkb3dSb290Py5nZXRFbGVtZW50QnlJZCgnYmcnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgIHRoaXMubGVmdFRleHRFbGVtZW50ID0gdGhpcy5zaGFkb3dSb290Py5nZXRFbGVtZW50QnlJZCgnbGVmdHRleHQnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgIHRoaXMuY2VudGVyVGV4dEVsZW1lbnQgPSB0aGlzLnNoYWRvd1Jvb3Q/LmdldEVsZW1lbnRCeUlkKCdjZW50ZXJ0ZXh0JykgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICB0aGlzLnJpZ2h0VGV4dEVsZW1lbnQgPSB0aGlzLnNoYWRvd1Jvb3Q/LmdldEVsZW1lbnRCeUlkKCdyaWdodHRleHQnKSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICB9XHJcblxyXG4gIGluaXQocm9vdDogU2hhZG93Um9vdCk6IHZvaWQge1xyXG4gICAgcm9vdC5pbm5lckhUTUwgPSBgXHJcbiAgICAgIDxzdHlsZT5cclxuICAgICAgICAudGltZXJiYXItcm9vdCB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcclxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC50aW1lcmJhci1iZyB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgIG9wYWNpdHk6IDAuODtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnRpbWVyYmFyLWZnIHtcclxuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgb3BhY2l0eTogMS4wO1xyXG4gICAgICAgIH1cclxuICAgICAgICAudGV4dCB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICBmb250LWZhbWlseTogYXJpYWw7XHJcbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgIHRleHQtc2hhZG93OiAtMXB4IDAgM3B4IGJsYWNrLCAwIDFweCAzcHggYmxhY2ssIDFweCAwIDNweCBibGFjaywgMCAtMXB4IDNweCBibGFjaztcclxuICAgICAgICAgIHdpbGwtY2hhbmdlOiBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICAudGV4dC1jb250YWluZXIge1xyXG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgbGVmdDogMHB4O1xyXG4gICAgICAgICAgdG9wOiBjYWxjKDUwJSAtIDEuMmV4KTtcclxuICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnRpbWVyYmFyLWxlZnR0ZXh0IHtcclxuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgICAgICAgICBwYWRkaW5nOiAwcHggMC40ZW0gMHB4IDAuNGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICAudGltZXJiYXItY2VudGVydGV4dCB7XHJcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgICBwYWRkaW5nOiAwcHggMC40ZW0gMHB4IDAuNGVtO1xyXG4gICAgICAgIH1cclxuICAgICAgICAudGltZXJiYXItcmlnaHR0ZXh0IHtcclxuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgICAgICAgcGFkZGluZzogMHB4IDAuNGVtIDBweCAwLjRlbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgOmhvc3QtY29udGV4dCguanVzdC1hLW51bWJlcikgLnRpbWVyYmFyLXJvb3Qge1xyXG4gICAgICAgICAgYm9yZGVyOiBub25lO1xyXG4gICAgICAgIH1cclxuICAgICAgICA6aG9zdC1jb250ZXh0KC5qdXN0LWEtbnVtYmVyKSAudGltZXJiYXItYmcge1xyXG4gICAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgOmhvc3QtY29udGV4dCguanVzdC1hLW51bWJlcikgLnRpbWVyYmFyLWZnIHtcclxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIEtvcmVhbiBiZXR0ZXIgdmlzaWJpbGl0eSBDU1MgKi9cclxuICAgICAgICA6bGFuZyhrbykgLnRleHQtY29udGFpbmVyIHtcclxuICAgICAgICAgIHRvcDogY2FsYyg1MCUgLSAxLjVleCk7XHJcbiAgICAgICAgICBoZWlnaHQ6IGNhbGMoMTAwJSArIDAuM2V4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgOmxhbmcoa28pIC50aW1lcmJhci1yaWdodHRleHQge1xyXG4gICAgICAgICAgdG9wOiAwLjNleDtcclxuICAgICAgICB9XHJcbiAgICAgIDwvc3R5bGU+XHJcbiAgICAgIDxkaXYgaWQ9XCJyb290XCIgY2xhc3M9XCJ0aW1lcmJhci1yb290XCIgcGFydD1cInRpbWVyYmFyLXJvb3RcIj5cclxuICAgICAgICA8ZGl2IGlkPVwiYmdcIiBjbGFzcz1cInRpbWVyYmFyLWJnXCIgcGFydD1cInRpbWVyYmFyLWJnXCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBpZD1cImZnXCIgY2xhc3M9XCJ0aW1lcmJhci1mZ1wiIHBhcnQ9XCJ0aW1lcmJhci1mZ1wiPjwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNvbnRhaW5lclwiIHBhcnQ9XCJ0ZXh0LWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPGRpdiBpZD1cImxlZnR0ZXh0XCIgY2xhc3M9XCJ0ZXh0IHRpbWVyYmFyLWxlZnR0ZXh0XCIgcGFydD1cInRleHQgdGltZXJiYXItbGVmdHRleHRcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jb250YWluZXJcIiBwYXJ0PVwidGV4dC1jb250YWluZXJcIj5cclxuICAgICAgICAgIDxkaXYgaWQ9XCJjZW50ZXJ0ZXh0XCIgY2xhc3M9XCJ0ZXh0IHRpbWVyYmFyLWNlbnRlcnRleHRcIiBwYXJ0PVwidGV4dCB0aW1lcmJhci1jZW50ZXJ0ZXh0XCI+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY29udGFpbmVyXCIgcGFydD1cInRleHQtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICA8ZGl2IGlkPVwicmlnaHR0ZXh0XCIgY2xhc3M9XCJ0ZXh0IHRpbWVyYmFyLXJpZ2h0dGV4dFwiIHBhcnQ9XCJ0ZXh0IHRpbWVyYmFyLXJpZ2h0dGV4dFwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGA7XHJcbiAgfVxyXG5cclxuICBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcclxuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XHJcbiAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgdGhpcy51cGRhdGVUZXh0KCk7XHJcbiAgICBpZiAoIXRoaXMuX3N0YXJ0KVxyXG4gICAgICB0aGlzLnNldHZhbHVlKHRoaXMuX2R1cmF0aW9uKTtcclxuICAgIGVsc2VcclxuICAgICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgfVxyXG5cclxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcclxuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWU6IHN0cmluZywgX29sZFZhbHVlOiBzdHJpbmcgfCBudW1iZXIsIG5ld1ZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmIChuYW1lID09PSAnZHVyYXRpb24nKSB7XHJcbiAgICAgIHRoaXMuX2R1cmF0aW9uID0gTWF0aC5tYXgocGFyc2VGbG9hdChuZXdWYWx1ZSksIDApO1xyXG4gICAgICB0aGlzLnNldHZhbHVlKHRoaXMuX2R1cmF0aW9uKTtcclxuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3ZhbHVlJykge1xyXG4gICAgICB0aGlzLnNldHZhbHVlKE1hdGgubWF4KHBhcnNlRmxvYXQobmV3VmFsdWUpLCAwKSk7XHJcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdlbGFwc2VkJykge1xyXG4gICAgICB0aGlzLnNldHZhbHVlKHRoaXMuX2R1cmF0aW9uIC0gTWF0aC5tYXgocGFyc2VGbG9hdChuZXdWYWx1ZSksIDApKTtcclxuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3dpZHRoJykge1xyXG4gICAgICB0aGlzLl93aWR0aCA9IG5ld1ZhbHVlO1xyXG4gICAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnaGVpZ2h0Jykge1xyXG4gICAgICB0aGlzLl9oZWlnaHQgPSBuZXdWYWx1ZTtcclxuICAgICAgdGhpcy5sYXlvdXQoKTtcclxuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2JnJykge1xyXG4gICAgICB0aGlzLl9iZyA9IG5ld1ZhbHVlO1xyXG4gICAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnZmcnKSB7XHJcbiAgICAgIHRoaXMuX2ZnID0gbmV3VmFsdWU7XHJcbiAgICAgIHRoaXMubGF5b3V0KCk7XHJcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdzdHlsZWZpbGwnKSB7XHJcbiAgICAgIHRoaXMuX2ZpbGwgPSBuZXdWYWx1ZSA9PT0gJ2ZpbGwnO1xyXG4gICAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAndG93YXJkJykge1xyXG4gICAgICB0aGlzLl90b3dhcmRSaWdodCA9IG5ld1ZhbHVlID09PSAncmlnaHQnO1xyXG4gICAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnbGVmdHRleHQnKSB7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZSA9IG5ld1ZhbHVlICE9PSB0aGlzLl9sZWZ0VGV4dCAmJiB0aGlzLl9jb25uZWN0ZWQ7XHJcbiAgICAgIHRoaXMuX2xlZnRUZXh0ID0gbmV3VmFsdWU7XHJcbiAgICAgIGlmICh1cGRhdGUpXHJcbiAgICAgICAgdGhpcy51cGRhdGVUZXh0KCk7XHJcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjZW50ZXJ0ZXh0Jykge1xyXG4gICAgICBjb25zdCB1cGRhdGUgPSBuZXdWYWx1ZSAhPT0gdGhpcy5fY2VudGVyVGV4dCAmJiB0aGlzLl9jb25uZWN0ZWQ7XHJcbiAgICAgIHRoaXMuX2NlbnRlclRleHQgPSBuZXdWYWx1ZTtcclxuICAgICAgaWYgKHVwZGF0ZSlcclxuICAgICAgICB0aGlzLnVwZGF0ZVRleHQoKTtcclxuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3JpZ2h0dGV4dCcpIHtcclxuICAgICAgY29uc3QgdXBkYXRlID0gbmV3VmFsdWUgIT09IHRoaXMuX3JpZ2h0VGV4dCAmJiB0aGlzLl9jb25uZWN0ZWQ7XHJcbiAgICAgIHRoaXMuX3JpZ2h0VGV4dCA9IG5ld1ZhbHVlO1xyXG4gICAgICBpZiAodXBkYXRlKVxyXG4gICAgICAgIHRoaXMudXBkYXRlVGV4dCgpO1xyXG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnaGlkZWFmdGVyJykge1xyXG4gICAgICB0aGlzLl9oaWRlQWZ0ZXIgPSBNYXRoLm1heCh0aGlzLmhpZGVhZnRlciA/PyAwLCAwKTtcclxuICAgICAgaWYgKHRoaXMudmFsdWUgPT09IDApIHtcclxuICAgICAgICBpZiAodGhpcy5faGlkZUFmdGVyID49IDApXHJcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnbG9vcCcpIHtcclxuICAgICAgdGhpcy5fbG9vcCA9IG5ld1ZhbHVlICE9PSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9jb25uZWN0ZWQpXHJcbiAgICAgIHRoaXMuZHJhdygpO1xyXG4gIH1cclxuXHJcbiAgbGF5b3V0KCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLl9jb25uZWN0ZWQpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0aGlzLmJhY2tncm91bmRFbGVtZW50LnN0eWxlLmJhY2tncm91bmQgPSB0aGlzLl9iZztcclxuICAgIHRoaXMuZm9yZWdyb3VuZEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IHRoaXMuX2ZnO1xyXG4gICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuX3dpZHRoO1xyXG4gICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLl9oZWlnaHQ7XHJcblxyXG4gICAgLy8gVG8gc3RhcnQgZnVsbCBhbmQgYW5pbWF0ZSB0byBlbXB0eSwgd2UgYW5pbWF0ZSBiYWNrd2FyZHMgYW5kIGZsaXBcclxuICAgIC8vIHRoZSBkaXJlY3Rpb24uXHJcbiAgICBpZiAodGhpcy5fdG93YXJkUmlnaHQgIT09IHRoaXMuX2ZpbGwpIHtcclxuICAgICAgdGhpcy5mb3JlZ3JvdW5kRWxlbWVudC5zdHlsZS5sZWZ0ID0gJyc7XHJcbiAgICAgIHRoaXMuZm9yZWdyb3VuZEVsZW1lbnQuc3R5bGUucmlnaHQgPSAnMHB4JztcclxuICAgICAgdGhpcy5mb3JlZ3JvdW5kRWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAncmlnaHQgY2VudGVyJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZm9yZWdyb3VuZEVsZW1lbnQuc3R5bGUubGVmdCA9ICcwcHgnO1xyXG4gICAgICB0aGlzLmZvcmVncm91bmRFbGVtZW50LnN0eWxlLnJpZ2h0ID0gJyc7XHJcbiAgICAgIHRoaXMuZm9yZWdyb3VuZEVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gJ2xlZnQgY2VudGVyJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVRleHQoKTogdm9pZCB7XHJcbiAgICBjb25zdCB2YXJ5aW5nVGV4dHMgPSBbJ2VsYXBzZWQnLCAnZHVyYXRpb24nLCAncGVyY2VudCcsICdyZW1haW4nXTtcclxuICAgIC8vIFRoZXNlIHZhbHVlcyBhcmUgZmlsbGVkIGluIGR1cmluZyBkcmF3KCkgd2hlbiB0aGUgdmFsdWVzIGNoYW5nZS5cclxuICAgIGlmICghdmFyeWluZ1RleHRzLmluY2x1ZGVzKHRoaXMuX2xlZnRUZXh0KSkge1xyXG4gICAgICAvLyBPdGhlcndpc2UgdGhlIHZhbHVlIGlzIGZpeGVkIHNvIGl0IGNhbiBiZSBzZXQgaGVyZS5cclxuICAgICAgdGhpcy5sZWZ0VGV4dEVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fbGVmdFRleHQ7XHJcbiAgICB9XHJcbiAgICBpZiAoIXZhcnlpbmdUZXh0cy5pbmNsdWRlcyh0aGlzLl9jZW50ZXJUZXh0KSlcclxuICAgICAgdGhpcy5jZW50ZXJUZXh0RWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl9jZW50ZXJUZXh0O1xyXG5cclxuICAgIGlmICghdmFyeWluZ1RleHRzLmluY2x1ZGVzKHRoaXMuX3JpZ2h0VGV4dCkpXHJcbiAgICAgIHRoaXMucmlnaHRUZXh0RWxlbWVudC5pbm5lckhUTUwgPSB0aGlzLl9yaWdodFRleHQ7XHJcbiAgfVxyXG5cclxuICBkcmF3KCk6IHZvaWQge1xyXG4gICAgY29uc3QgZWxhcHNlZFNlYyA9IChEYXRlLm5vdygpIC0gdGhpcy5fc3RhcnQpIC8gMTAwMDtcclxuICAgIGNvbnN0IHJlbWFpblNlYyA9IE1hdGgubWF4KDAsIHRoaXMuX2R1cmF0aW9uIC0gZWxhcHNlZFNlYyk7XHJcbiAgICBsZXQgcGVyY2VudCA9IHRoaXMuX2R1cmF0aW9uIDw9IDAgPyAwIDogcmVtYWluU2VjIC8gdGhpcy5fZHVyYXRpb247XHJcbiAgICAvLyBLZWVwIGl0IGJldHdlZW4gMCBhbmQgMS5cclxuICAgIHBlcmNlbnQgPSBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBwZXJjZW50KSk7XHJcbiAgICBjb25zdCBkaXNwbGF5UmVtYWluID0gcmVtYWluU2VjID8gcmVtYWluU2VjLnRvRml4ZWQoMSkgOiAnJztcclxuICAgIGNvbnN0IGRpc3BsYXlFbGFwc2VkID0gZWxhcHNlZFNlYy50b0ZpeGVkKDEpO1xyXG4gICAgaWYgKHRoaXMuX2ZpbGwpXHJcbiAgICAgIHBlcmNlbnQgPSAxLjAgLSBwZXJjZW50O1xyXG4gICAgdGhpcy5mb3JlZ3JvdW5kRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGVYKCR7cGVyY2VudC50b0ZpeGVkKDMpfSlgO1xyXG4gICAgaWYgKHRoaXMuX2xlZnRUZXh0ICE9PSAnJykge1xyXG4gICAgICBpZiAodGhpcy5fbGVmdFRleHQgPT09ICdyZW1haW4nKVxyXG4gICAgICAgIHRoaXMubGVmdFRleHRFbGVtZW50LmlubmVyVGV4dCA9IGRpc3BsYXlSZW1haW47XHJcbiAgICAgIGVsc2UgaWYgKHRoaXMuX2xlZnRUZXh0ID09PSAnZHVyYXRpb24nKVxyXG4gICAgICAgIHRoaXMubGVmdFRleHRFbGVtZW50LmlubmVyVGV4dCA9IGAke2Rpc3BsYXlSZW1haW59IC8gJHt0aGlzLl9kdXJhdGlvbn1gO1xyXG4gICAgICBlbHNlIGlmICh0aGlzLl9sZWZ0VGV4dCA9PT0gJ3BlcmNlbnQnKVxyXG4gICAgICAgIHRoaXMubGVmdFRleHRFbGVtZW50LmlubmVyVGV4dCA9IGAkeyhwZXJjZW50ICogMTAwKS50b0ZpeGVkKDEpfSAlYDtcclxuICAgICAgZWxzZSBpZiAodGhpcy5fbGVmdFRleHQgPT09ICdlbGFwc2VkJylcclxuICAgICAgICB0aGlzLmxlZnRUZXh0RWxlbWVudC5pbm5lclRleHQgPSBkaXNwbGF5RWxhcHNlZDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLl9jZW50ZXJUZXh0ICE9PSAnJykge1xyXG4gICAgICBpZiAodGhpcy5fY2VudGVyVGV4dCA9PT0gJ3JlbWFpbicpXHJcbiAgICAgICAgdGhpcy5jZW50ZXJUZXh0RWxlbWVudC5pbm5lclRleHQgPSBkaXNwbGF5UmVtYWluO1xyXG4gICAgICBlbHNlIGlmICh0aGlzLl9jZW50ZXJUZXh0ID09PSAnZHVyYXRpb24nKVxyXG4gICAgICAgIHRoaXMuY2VudGVyVGV4dEVsZW1lbnQuaW5uZXJUZXh0ID0gYCR7ZGlzcGxheVJlbWFpbn0gLyAke3RoaXMuX2R1cmF0aW9ufWA7XHJcbiAgICAgIGVsc2UgaWYgKHRoaXMuX2NlbnRlclRleHQgPT09ICdwZXJjZW50JylcclxuICAgICAgICB0aGlzLmNlbnRlclRleHRFbGVtZW50LmlubmVyVGV4dCA9IGAkeyhwZXJjZW50ICogMTAwKS50b0ZpeGVkKDEpfSAlYDtcclxuICAgICAgZWxzZSBpZiAodGhpcy5fY2VudGVyVGV4dCA9PT0gJ2VsYXBzZWQnKVxyXG4gICAgICAgIHRoaXMuY2VudGVyVGV4dEVsZW1lbnQuaW5uZXJUZXh0ID0gZGlzcGxheUVsYXBzZWQ7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5fcmlnaHRUZXh0ICE9PSAnJykge1xyXG4gICAgICBpZiAodGhpcy5fcmlnaHRUZXh0ID09PSAncmVtYWluJylcclxuICAgICAgICB0aGlzLnJpZ2h0VGV4dEVsZW1lbnQuaW5uZXJUZXh0ID0gZGlzcGxheVJlbWFpbjtcclxuICAgICAgZWxzZSBpZiAodGhpcy5fcmlnaHRUZXh0ID09PSAnZHVyYXRpb24nKVxyXG4gICAgICAgIHRoaXMucmlnaHRUZXh0RWxlbWVudC5pbm5lclRleHQgPSBgJHtkaXNwbGF5UmVtYWlufSAvICR7dGhpcy5fZHVyYXRpb259YDtcclxuICAgICAgZWxzZSBpZiAodGhpcy5fcmlnaHRUZXh0ID09PSAncGVyY2VudCcpXHJcbiAgICAgICAgdGhpcy5yaWdodFRleHRFbGVtZW50LmlubmVyVGV4dCA9IGAkeyhwZXJjZW50ICogMTAwKS50b0ZpeGVkKDEpfSAlYDtcclxuICAgICAgZWxzZSBpZiAodGhpcy5fcmlnaHRUZXh0ID09PSAnZWxhcHNlZCcpXHJcbiAgICAgICAgdGhpcy5yaWdodFRleHRFbGVtZW50LmlubmVyVGV4dCA9IGRpc3BsYXlFbGFwc2VkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQXBwbHkgYWxsIHN0eWxlcyBmcm9tIGFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBDU1MgcHJvcGVydGllc1xyXG4gIGFwcGx5U3R5bGVzKHN0eWxlczogeyBbczogc3RyaW5nXTogc3RyaW5nIH0pOiB2b2lkIHtcclxuICAgIGNvbnN0IHMgPSBPYmplY3Qua2V5cyhzdHlsZXMpLm1hcCgoaykgPT4ge1xyXG4gICAgICByZXR1cm4gYCR7a306JHtzdHlsZXM/LltrXSA/PyAnJ307YDtcclxuICAgIH0pLmpvaW4oJycpO1xyXG5cclxuICAgIGNvbnN0IGxlZnQgPSB0aGlzLnNoYWRvd1Jvb3Q/LmdldEVsZW1lbnRCeUlkKCdsZWZ0dGV4dCcpO1xyXG4gICAgY29uc3QgY2VudGVyID0gdGhpcy5zaGFkb3dSb290Py5nZXRFbGVtZW50QnlJZCgnY2VudGVydGV4dCcpO1xyXG4gICAgY29uc3QgcmlnaHQgPSB0aGlzLnNoYWRvd1Jvb3Q/LmdldEVsZW1lbnRCeUlkKCdyaWdodHRleHQnKTtcclxuICAgIGlmICghbGVmdCB8fCAhY2VudGVyIHx8ICFyaWdodClcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgbGVmdC5zdHlsZS5jc3NUZXh0ICs9IHM7XHJcbiAgICBjZW50ZXIuc3R5bGUuY3NzVGV4dCArPSBzO1xyXG4gICAgcmlnaHQuc3R5bGUuY3NzVGV4dCArPSBzO1xyXG4gIH1cclxuXHJcbiAgc2V0dmFsdWUocmVtYWluU2VjOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGVsYXBzZWRTZWMgPSBNYXRoLm1heCgwLCB0aGlzLl9kdXJhdGlvbiAtIHJlbWFpblNlYyk7XHJcbiAgICB0aGlzLl9zdGFydCA9IERhdGUubm93KCkgLSBlbGFwc2VkU2VjICogMTAwMDtcclxuXHJcbiAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuc2hvdygpO1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hpZGVUaW1lciA/PyAwKTtcclxuICAgIHRoaXMuX2hpZGVUaW1lciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5hZHZhbmNlKCk7XHJcbiAgfVxyXG5cclxuICBhZHZhbmNlKCk6IHZvaWQge1xyXG4gICAgLy8gSWYgdGhlIGVsZW1lbnQgaGFzIGJlZW4gZGlzY29ubmVjdGVkIGZyb20gdGhlIERPTSwgc3RvcCByZXF1ZXN0aW5nIGFuaW1hdGlvbiBmcmFtZXNcclxuICAgIGlmICghdGhpcy5fY29ubmVjdGVkKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgZWxhcHNlZFNlYyA9IChEYXRlLm5vdygpIC0gdGhpcy5fc3RhcnQpIC8gMTAwMDtcclxuICAgIGlmIChlbGFwc2VkU2VjID49IHRoaXMuX2R1cmF0aW9uKSB7XHJcbiAgICAgIC8vIFRpbWVyIGNvbXBsZXRlZFxyXG4gICAgICBpZiAodGhpcy5fbG9vcCAmJiB0aGlzLl9kdXJhdGlvbiA+IDApIHtcclxuICAgICAgICAvLyBTZXRzIHRoZSByZW1haW5pbmcgdGltZSB0byBpbmNsdWRlIGFueSBleHRyYSBlbGFwc2VkIHNlY29uZHMgcGFzdCB0aGUgZHVyYXRpb25cclxuICAgICAgICB0aGlzLnNldHZhbHVlKHRoaXMuX2R1cmF0aW9uICsgKHRoaXMuX2R1cmF0aW9uIC0gZWxhcHNlZFNlYykgJSB0aGlzLl9kdXJhdGlvbik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTZXRzIHRoZSBhdHRyaWJ1dGUgdG8gMCBzbyB1c2VycyBjYW4gc2VlIHRoZSBjb3VudGVyIGlzIGRvbmUsIGFuZFxyXG4gICAgICAvLyBpZiB0aGV5IHNldCB0aGUgc2FtZSBkdXJhdGlvbiBhZ2FpbiBpdCB3aWxsIGNvdW50LlxyXG4gICAgICB0aGlzLl9kdXJhdGlvbiA9IDA7XHJcbiAgICAgIGlmICh0aGlzLl9oaWRlQWZ0ZXIgPiAwKVxyXG4gICAgICAgIHRoaXMuX2hpZGVUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KHRoaXMuaGlkZS5iaW5kKHRoaXMpLCB0aGlzLl9oaWRlQWZ0ZXIgKiAxMDAwKTtcclxuICAgICAgZWxzZSBpZiAodGhpcy5faGlkZUFmdGVyID09PSAwKVxyXG4gICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gVGltZXIgbm90IGNvbXBsZXRlZCwgcmVxdWVzdCBhbm90aGVyIGFuaW1hdGlvbiBmcmFtZVxyXG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYWR2YW5jZS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmRyYXcoKTtcclxuICB9XHJcblxyXG4gIHNob3coKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fY29ubmVjdGVkKVxyXG4gICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9jb25uZWN0ZWQpXHJcbiAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICB9XHJcbn1cclxuXHJcbndpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoJ3RpbWVyLWJhcicsIFRpbWVyQmFyKTtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcclxuICAgICd0aW1lci1iYXInOiBUaW1lckJhcjtcclxuICB9XHJcbn1cclxuIiwiLy8gVE9ETzogbWF5YmUgdGhpcyBzaG91bGQgYmUgc3RydWN0dXJlZCBpZGVudGljYWxseSB0byBhIHRpbWVsaW5lUmVwbGFjZSBzZWN0aW9uLlxyXG5cclxuaW1wb3J0IHsgTGFuZywgTm9uRW5MYW5nIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2xhbmd1YWdlcyc7XHJcblxyXG4vLyBUaGUgc2VhbCBrZXkgaXMga2luZCBvZiBhIGhhY2sgYmVjYXVzZSB3ZSB1c2UgaXQgaW4gYSBsb3Qgb2YgZGlmZmVyZW50XHJcbi8vIGNvbnRleHRzIGFuZCBuZWVkIHRvIGNvcnJlY3RseSBncmFiIHRoZSBuYW1lIG9mIHRoZSB6b25lIHRoYXQgaXMgc2VhbGVkLlxyXG4vLyBUaGVzZSBhcmUgc29tZSB2YXJpb3VzIGxvb2tiZWhpbmRzIGZvciB0aG9zZSBkaWZmZXJlbnQgY29udGV4dHM6XHJcblxyXG4vLyBSZWdleGVzIGZvciBhIHBhcnNlZCBBQ1QgbG9nIGxpbmVcclxuY29uc3QgcGFyc2VkTEIgPSAnMDA6MDgzOTo6JztcclxuLy8gUmVnZXhlcyBmb3IgYSBuZXR3b3JrIGxvZyBsaW5lXHJcbmNvbnN0IG5ldHdvcmtMQiA9ICcwMFxcXFx8W158XSpcXFxcfDA4MzlcXFxcfFxcXFx8JztcclxuLy8gUmVnZXggZm9yIGEgcmVnZXggZm9yIGEgbmV0d29yayBsb2cgbGluZS4gIDxfPFxyXG5jb25zdCBuZXRSZWdleExCID0gJ1xcXFxcXFxcXFxcXHwwODM5XFxcXFxcXFxcXFxcfFxcXFxbXFxcXF5cXFxcfFxcXFxdXFxcXCpcXFxcXFxcXFxcXFx8JztcclxuLy8gQSBiYXJlIHBhcmFtZXRlciAoZS5nLiBgWCB3aWxsIGJlIHNlYWxlZCBvZmZgIHZpYSBgbmV0UmVnZXg6IHsgbGluZTogJ1ggd2lsbCBiZSBzZWFsZWQgb2ZmJyB9LGApXHJcbmNvbnN0IHBhcmFtTEIgPSAnXic7XHJcblxyXG4vLyBJdCdzIGF3a3dhcmQgdG8gcmVmZXIgdG8gdGhlc2Ugc3RyaW5nIGtleXMsIHNvIG5hbWUgdGhlbSBhcyByZXBsYWNlU3luY1trZXlzLnNlYWxLZXldLlxyXG5leHBvcnQgY29uc3Qgc3luY0tleXMgPSB7XHJcbiAgLy8gU2VhbCBpcyB0cnlpbmcgdG8gbWF0Y2ggdGhlc2UgdHlwZXMgb2YgbGluZXMsIGFuZCBpcyBtb3JlIGNvbXBsaWNhdGVkIGJlY2F1c2UgaXQnc1xyXG4gIC8vIHRyeWluZyB0byBhbHNvIGNhcHR1cmUgdGhlIGFyZWEgbmFtZTpcclxuICAvLyAgIHBhcnNlZCBsb2cgbGluZXM6IDAwOjA4Mzk6OlNvbWV0aGluZyB3aWxsIGJlIHNlYWxlZCBvZmZcclxuICAvLyAgIG5ldHdvcmsgbG9nIGxpbmVzOiAwMHx0aW1lc3RhbXB8MDgzOXx8U29tZXRoaW5nIHdpbGwgYmUgc2VhbGVkIG9mZlxyXG4gIC8vICAgTmV0UmVnZXhlczogXl4wMFxcfFtefF0qXFx8MDgzOVxcfFtefF0qXFx8U29tZXRoaW5nIHdpbGwgYmUgc2VhbGVkIG9mZi4qP1xcfFxyXG4gIHNlYWw6XHJcbiAgICBgKD88PSR7cGFyc2VkTEJ9fCR7bmV0d29ya0xCfXwke25ldFJlZ2V4TEJ9fCR7cGFyYW1MQn0pKFtefDpdKikgd2lsbCBiZSBzZWFsZWQgb2ZmKD86IGluICg/OlswLTldKyBzZWNvbmRzKT8pP2AsXHJcbiAgdW5zZWFsOiAnaXMgbm8gbG9uZ2VyIHNlYWxlZCcsXHJcbiAgZW5nYWdlOiAnRW5nYWdlIScsXHJcbn07XHJcblxyXG5jb25zdCB0ZXh0S2V5cyA9IHtcclxuICAvLyBNYXRjaCBkaXJlY3Rpb25zIGluIHJlcGxhY2VUZXh0XHJcbiAgLy8gZWc6IGAoTilgLCBgKFNXKWAsIGAoTkUvTlcpYCwgZXRjLlxyXG4gIEU6ICcoPzw9IFxcXFwofFxcXFwvKUUoPz1cXFxcKXxcXFxcLyknLFxyXG4gIE46ICcoPzw9IFxcXFwofFxcXFwvKU4oPz1cXFxcKXxcXFxcLyknLFxyXG4gIFM6ICcoPzw9IFxcXFwofFxcXFwvKVMoPz1cXFxcKXxcXFxcLyknLFxyXG4gIFc6ICcoPzw9IFxcXFwofFxcXFwvKVcoPz1cXFxcKXxcXFxcLyknLFxyXG4gIE5FOiAnKD88PSBcXFxcKHxcXFxcLylORSg/PVxcXFwpfFxcXFwvKScsXHJcbiAgTlc6ICcoPzw9IFxcXFwofFxcXFwvKU5XKD89XFxcXCl8XFxcXC8pJyxcclxuICBTRTogJyg/PD0gXFxcXCh8XFxcXC8pU0UoPz1cXFxcKXxcXFxcLyknLFxyXG4gIFNXOiAnKD88PSBcXFxcKHxcXFxcLylTVyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgLy8gTWF0Y2ggUm9sZXMgaW4gcmVwbGFjZVRleHRcclxuICAvLyBlZzogYChUYW5rKWAsIGAoSGVhbGVyKWAsIGAoRFBTKWAsIGV0Y1xyXG4gIFRhbms6ICcoPzw9IFxcXFwofFxcXFwvKVRhbmtzPyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgSGVhbGVyOiAnKD88PSBcXFxcKHxcXFxcLylIZWFsZXJzPyg/PVxcXFwpfFxcXFwvKScsXHJcbiAgRFBTOiAnKD88PSBcXFxcKHxcXFxcLylEUFMoPz1cXFxcKXxcXFxcLyknLFxyXG4gIC8vIE1hdGNoIGAtLTEtLWAgc3R5bGUgdGV4dC5cclxuICBOdW1iZXI6ICctLShcXFxccypcXFxcZCtcXFxccyopLS0nLFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgQ29tbW9uUmVwbGFjZW1lbnQgPSB7XHJcbiAgcmVwbGFjZVN5bmM6IHtcclxuICAgIFtyZXBsYWNlS2V5OiBzdHJpbmddOiB7IFtrZXkgaW4gTGFuZ10/OiBzdHJpbmcgfTtcclxuICB9O1xyXG4gIHJlcGxhY2VUZXh0OiB7XHJcbiAgICBbcmVwbGFjZUtleTogc3RyaW5nXTpcclxuICAgICAgJiB7XHJcbiAgICAgICAgW2tleSBpbiBOb25FbkxhbmddPzogc3RyaW5nO1xyXG4gICAgICB9XHJcbiAgICAgICYge1xyXG4gICAgICAgIC8vIGRvbid0IHNldCB0aGlzIGtleSwgYnV0IGFsbG93IHVzIHRvIGFzayBpZiBpdCBleGlzdHNcclxuICAgICAgICBlbj86IG5ldmVyO1xyXG4gICAgICB9O1xyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29tbW9uUmVwbGFjZW1lbnQ6IENvbW1vblJlcGxhY2VtZW50ID0ge1xyXG4gIHJlcGxhY2VTeW5jOiB7XHJcbiAgICBbc3luY0tleXMuc2VhbF06IHtcclxuICAgICAgZW46ICckMSB3aWxsIGJlIHNlYWxlZCBvZmYnLFxyXG4gICAgICBkZTpcclxuICAgICAgICAnTm9jaCAxNSBTZWt1bmRlbiwgYmlzIHNpY2ggKD86KD86ZGVyfGRpZXxkYXMpICk/KD86WnVnYW5nIHp1KD86W3JtXXwgZGVuKT8gKT8kMSBzY2hsaWXDn3QnLFxyXG4gICAgICBmcjogJ0Zlcm1ldHVyZSBkKD86ZXx1fGVzKSAoPzpsXFwnfGxhIHxsZXM/ICk/JDEgZGFucycsXHJcbiAgICAgIGphOiAnJDHjga7lsIHpjpbjgb7jgafjgYLjgagnLFxyXG4gICAgICBjbjogJ+i3nSQx6KKr5bCB6ZSB6L+Y5pyJJyxcclxuICAgICAga286ICcxNey0iCDtm4Tsl5AgJDFb7J206rCAXSDrtInsh4TrkKnri4jri6QnLFxyXG4gICAgfSxcclxuICAgIFtzeW5jS2V5cy51bnNlYWxdOiB7XHJcbiAgICAgIGVuOiAnaXMgbm8gbG9uZ2VyIHNlYWxlZCcsXHJcbiAgICAgIGRlOiAnw7ZmZm5ldCBzaWNoICg/OndpZWRlcnxlcm5ldXQpJyxcclxuICAgICAgZnI6ICdPdXZlcnR1cmUgJyxcclxuICAgICAgamE6ICfjga7lsIHpjpbjgYzop6PjgYvjgozjgZ8nLFxyXG4gICAgICBjbjogJ+eahOWwgemUgeino+mZpOS6hicsXHJcbiAgICAgIGtvOiAn7J2YIOu0ieyHhOqwgCDtlbTsoJzrkJjsl4jsirXri4jri6QnLFxyXG4gICAgfSxcclxuICAgIFtzeW5jS2V5cy5lbmdhZ2VdOiB7XHJcbiAgICAgIGVuOiAnRW5nYWdlIScsXHJcbiAgICAgIGRlOiAnU3RhcnQhJyxcclxuICAgICAgZnI6ICfDgCBsXFwnYXR0YXF1ZScsXHJcbiAgICAgIGphOiAn5oim6ZeY6ZaL5aeL77yBJyxcclxuICAgICAgY246ICfmiJjmlpflvIDlp4vvvIEnLFxyXG4gICAgICBrbzogJ+yghO2IrCDsi5zsnpEhJyxcclxuICAgIH0sXHJcbiAgfSxcclxuICByZXBsYWNlVGV4dDoge1xyXG4gICAgJy0tYWRkcyBzcGF3bi0tJzoge1xyXG4gICAgICBkZTogJy0tQWRkcyBlcnNjaGVpbmVuLS0nLFxyXG4gICAgICBmcjogJy0tQXBwYXJpdGlvbiBkXFwnYWRkcy0tJyxcclxuICAgICAgamE6ICctLembkemtmuWHuuePvi0tJyxcclxuICAgICAgY246ICctLeWwj+aAquWHuueOsC0tJyxcclxuICAgICAga286ICctLeyrhCDshoztmZgtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tYWRkcyB0YXJnZXRhYmxlLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1BZGRzIGFudmlzaWVyYmFyLS0nLFxyXG4gICAgICBmcjogJy0tQWRkcyBjaWJsYWJsZXMtLScsXHJcbiAgICAgIGphOiAnLS3pm5HprZrjgr/jg7zjgrLjg4Pjg4jlj6/og70tLScsXHJcbiAgICAgIGNuOiAnLS3lsI/mgKrlj6/pgInkuK0tLScsXHJcbiAgICAgIGtvOiAnLS3sq4Qg7YOA6rKfIOqwgOuKpS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1jZW50ZXItLSc6IHtcclxuICAgICAgZGU6ICctLU1pdHRlLS0nLFxyXG4gICAgICBmcjogJy0tQ2VudHJlLS0nLFxyXG4gICAgICBqYTogJy0t44K744Oz44K/44O8LS0nLFxyXG4gICAgICBjbjogJy0t5Lit5aSuLS0nLFxyXG4gICAgICBrbzogJy0t7KSR7JWZLS0nLFxyXG4gICAgfSxcclxuICAgICdcXFxcKGNlbnRlclxcXFwpJzoge1xyXG4gICAgICBkZTogJyhNaXR0ZSknLFxyXG4gICAgICBmcjogJyhDZW50cmUpJyxcclxuICAgICAgamE6ICco44K744Oz44K/44O8KScsXHJcbiAgICAgIGNuOiAnKOS4reWkriknLFxyXG4gICAgICBrbzogJyjspJHslZkpJyxcclxuICAgIH0sXHJcbiAgICAnLS1jbG9uZXMgYXBwZWFyLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1LbG9uZSBlcnNjaGVpbmVuLS0nLFxyXG4gICAgICBmcjogJy0tQXBwYXJpdGlvbiBkZXMgY2xvbmVzLS0nLFxyXG4gICAgICBqYTogJy0t5bm75b2x5Ye654++LS0nLFxyXG4gICAgICBjbjogJy0t5bm75b2x5Ye6546wLS0nLFxyXG4gICAgICBrbzogJy0t67aE7IugIOyGjO2ZmC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1jb3JuZXItLSc6IHtcclxuICAgICAgZGU6ICctLUVja2UtLScsXHJcbiAgICAgIGZyOiAnLS1Db2luLS0nLFxyXG4gICAgICBqYTogJy0t44Kz44O844OK44O8LS0nLFxyXG4gICAgICBjbjogJy0t6KeS6JC9LS0nLFxyXG4gICAgICBrbzogJy0t6rWs7ISdLS0nLFxyXG4gICAgfSxcclxuICAgICctLWRwcyBidXJuLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1EUFMgYnVybi0tJyxcclxuICAgICAgZnI6ICctLUJ1cm4gZHBzLS0nLFxyXG4gICAgICBqYTogJy0t54Gr5Yqb5Ye644GbLS0nLFxyXG4gICAgICBjbjogJy0t6L2s54GrLS0nLFxyXG4gICAgICBrbzogJy0t65ScIOyytO2BrC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1lYXN0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Pc3Rlbi0tJyxcclxuICAgICAgZnI6ICctLUVzdC0tJyxcclxuICAgICAgamE6ICctLeadsS0tJyxcclxuICAgICAgY246ICctLeS4nC0tJyxcclxuICAgICAga286ICctLeuPmeyqvS0tJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChlYXN0XFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKE9zdGVuKScsXHJcbiAgICAgIGZyOiAnKEVzdCknLFxyXG4gICAgICBqYTogJyjmnbEpJyxcclxuICAgICAgY246ICco5LicKScsXHJcbiAgICAgIGtvOiAnKOuPmeyqvSknLFxyXG4gICAgfSxcclxuICAgICdFbnJhZ2UnOiB7XHJcbiAgICAgIGRlOiAnRmluYWxhbmdyaWZmJyxcclxuICAgICAgZnI6ICdFbnJhZ2UnLFxyXG4gICAgICBqYTogJ+aZgumWk+WIh+OCjCcsXHJcbiAgICAgIGNuOiAn54uC5pq0JyxcclxuICAgICAga286ICfsoITrqbjquLAnLFxyXG4gICAgfSxcclxuICAgICctLWZyb3plbi0tJzoge1xyXG4gICAgICBkZTogJy0tZWluZ2Vmcm9yZW4tLScsXHJcbiAgICAgIGZyOiAnLS1HZWzDqS0tJyxcclxuICAgICAgamE6ICctLeWHjee1kC0tJyxcclxuICAgICAgY246ICctLeWGu+e7ky0tJyxcclxuICAgICAga286ICctLeu5meqysC0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1pbi0tJzoge1xyXG4gICAgICBkZTogJy0tUmVpbi0tJyxcclxuICAgICAgZnI6ICctLUludMOpcmlldXItLScsXHJcbiAgICAgIGphOiAnLS3kuK0tLScsXHJcbiAgICAgIGNuOiAnLS3lhoUtLScsXHJcbiAgICAgIGtvOiAnLS3slYgtLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwoSW5cXFxcKSc6IHtcclxuICAgICAgZGU6ICcoUmVpbiknLFxyXG4gICAgICBmcjogJyhJbnTDqXJpZXVyKScsXHJcbiAgICAgIGphOiAnKOS4rSknLFxyXG4gICAgICBjbjogJyjlhoUpJyxcclxuICAgICAga286ICco7JWIKScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwoaW5uZXJcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoaW5uZW4pJyxcclxuICAgICAgZnI6ICcoaW50w6lyaWV1ciknLFxyXG4gICAgICBqYTogJyjkuK0pJyxcclxuICAgICAgY246ICco5YaFKScsXHJcbiAgICAgIGtvOiAnKOyViCknLFxyXG4gICAgfSxcclxuICAgICctLWp1bXAtLSc6IHtcclxuICAgICAgZGU6ICctLVNwcnVuZy0tJyxcclxuICAgICAgZnI6ICctLVNhdXQtLScsXHJcbiAgICAgIGphOiAnLS3jgrjjg6Pjg7Pjg5ctLScsXHJcbiAgICAgIGNuOiAnLS3ot7MtLScsXHJcbiAgICAgIGtvOiAnLS3soJDtlIQtLScsXHJcbiAgICB9LFxyXG4gICAgJy0ta25vY2tiYWNrLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Sw7xja3N0b8OfLS0nLFxyXG4gICAgICBmcjogJy0tUG91c3PDqWUtLScsXHJcbiAgICAgIGphOiAnLS3jg47jg4Pjgq/jg5Djg4Pjgq8tLScsXHJcbiAgICAgIGNuOiAnLS3lh7vpgIAtLScsXHJcbiAgICAgIGtvOiAnLS3rhInrsLEtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tbWlkZGxlLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1NaXR0ZS0tJyxcclxuICAgICAgZnI6ICctLU1pbGlldS0tJyxcclxuICAgICAgamE6ICctLeS4reWkri0tJyxcclxuICAgICAgY246ICctLeS4remXtC0tJyxcclxuICAgICAga286ICctLeykkeyVmS0tJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChtaWRkbGVcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoTWl0dGUpJyxcclxuICAgICAgZnI6ICcoTWlsaWV1KScsXHJcbiAgICAgIGphOiAnKOS4reWkriknLFxyXG4gICAgICBjbjogJyjkuK3pl7QpJyxcclxuICAgICAga286ICco7KSR7JWZKScsXHJcbiAgICB9LFxyXG4gICAgJy0tbm9ydGgtLSc6IHtcclxuICAgICAgZGU6ICctLU5vcmRlbi0tJyxcclxuICAgICAgZnI6ICctLU5vcmQtLScsXHJcbiAgICAgIGphOiAnLS3ljJctLScsXHJcbiAgICAgIGNuOiAnLS3ljJctLScsXHJcbiAgICAgIGtvOiAnLS3rtoHsqr0tLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwobm9ydGhcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoTm9yZGVuKScsXHJcbiAgICAgIGZyOiAnKE5vcmQpJyxcclxuICAgICAgamE6ICco5YyXKScsXHJcbiAgICAgIGNuOiAnKOWMlyknLFxyXG4gICAgICBrbzogJyjrtoHsqr0pJyxcclxuICAgIH0sXHJcbiAgICAnLS1ub3J0aGVhc3QtLSc6IHtcclxuICAgICAgZGU6ICctLU5vcmRvc3Rlbi0tJyxcclxuICAgICAgZnI6ICctLU5vcmQtRXN0LS0nLFxyXG4gICAgICBqYTogJy0t5YyX5p2xLS0nLFxyXG4gICAgICBjbjogJy0t5Lic5YyXLS0nLFxyXG4gICAgICBrbzogJy0t67aB64+ZLS0nLFxyXG4gICAgfSxcclxuICAgICctLW5vcnRod2VzdC0tJzoge1xyXG4gICAgICBkZTogJy0tTm9yZHdlc3Rlbi0tJyxcclxuICAgICAgZnI6ICctLU5vcmQtT3Vlc3QtLScsXHJcbiAgICAgIGphOiAnLS3ljJfopb8tLScsXHJcbiAgICAgIGNuOiAnLS3opb/ljJctLScsXHJcbiAgICAgIGtvOiAnLS3rtoHshJwtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tb3V0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS1SYXVzLS0nLFxyXG4gICAgICBmcjogJy0tRXh0w6lyaWV1ci0tJyxcclxuICAgICAgamE6ICctLeWkli0tJyxcclxuICAgICAgY246ICctLeWkli0tJyxcclxuICAgICAga286ICctLeuwli0tJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChPdXRcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoUmF1cyknLFxyXG4gICAgICBmcjogJyhFeHTDqXJpZXVyKScsXHJcbiAgICAgIGphOiAnKOWkliknLFxyXG4gICAgICBjbjogJyjlpJYpJyxcclxuICAgICAga286ICco67CWKScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwob3V0ZXJcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoYXXDn2VuKScsXHJcbiAgICAgIGZyOiAnKGV4dMOpcmlldXIpJyxcclxuICAgICAgamE6ICco5aSWKScsXHJcbiAgICAgIGNuOiAnKOWkliknLFxyXG4gICAgICBrbzogJyjrsJYpJyxcclxuICAgIH0sXHJcbiAgICAnXFxcXChvdXRzaWRlXFxcXCknOiB7XHJcbiAgICAgIGRlOiAnKERyYXXDn2VuKScsXHJcbiAgICAgIGZyOiAnKMOAIGxcXCdleHTDqXJpZXVyKScsXHJcbiAgICAgIGphOiAnKOWkliknLFxyXG4gICAgICBjbjogJyjlpJbpnaIpJyxcclxuICAgICAga286ICco67CU6rmlKScsXHJcbiAgICB9LFxyXG4gICAgJy0tcm90YXRlLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1yb3RpZXJlbi0tJyxcclxuICAgICAgZnI6ICctLXJvdGF0aW9uLS0nLFxyXG4gICAgICBqYTogJy0t5Zue6LuiLS0nLFxyXG4gICAgICBjbjogJy0t5peL6L2sLS0nLFxyXG4gICAgICBrbzogJy0t7ZqM7KCELS0nLFxyXG4gICAgfSxcclxuICAgICctLXNvdXRoLS0nOiB7XHJcbiAgICAgIGRlOiAnLS1Tw7xkZW4tLScsXHJcbiAgICAgIGZyOiAnLS1TdWQtLScsXHJcbiAgICAgIGphOiAnLS3ljZctLScsXHJcbiAgICAgIGNuOiAnLS3ljZctLScsXHJcbiAgICAgIGtvOiAnLS3rgqjsqr0tLScsXHJcbiAgICB9LFxyXG4gICAgJ1xcXFwoc291dGhcXFxcKSc6IHtcclxuICAgICAgZGU6ICcoU8O8ZGVuKScsXHJcbiAgICAgIGZyOiAnKFN1ZCknLFxyXG4gICAgICBqYTogJyjljZcpJyxcclxuICAgICAgY246ICco5Y2XKScsXHJcbiAgICAgIGtvOiAnKOuCqOyqvSknLFxyXG4gICAgfSxcclxuICAgICctLXNvdXRoZWFzdC0tJzoge1xyXG4gICAgICBkZTogJy0tU8O8ZG9zdGVuLS0nLFxyXG4gICAgICBmcjogJy0tU3VkLUVzdC0tJyxcclxuICAgICAgamE6ICctLeWNl+adsS0tJyxcclxuICAgICAgY246ICctLeS4nOWNly0tJyxcclxuICAgICAga286ICctLeuCqOuPmS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS1zb3V0aHdlc3QtLSc6IHtcclxuICAgICAgZGU6ICctLVPDvGR3ZXN0ZW4tLScsXHJcbiAgICAgIGZyOiAnLS1TdWQtT3Vlc3QtLScsXHJcbiAgICAgIGphOiAnLS3ljZfopb8tLScsXHJcbiAgICAgIGNuOiAnLS3opb/ljZctLScsXHJcbiAgICAgIGtvOiAnLS3rgqjshJwtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tc3BsaXQtLSc6IHtcclxuICAgICAgZGU6ICctLXRlaWxlbi0tJyxcclxuICAgICAgZnI6ICctLWRpdmlzaW9uLS0nLFxyXG4gICAgICBqYTogJy0t5YiG6KOCLS0nLFxyXG4gICAgICBjbjogJy0t5YiG6KOCLS0nLFxyXG4gICAgICBrbzogJy0t67aE7Je0LS0nLFxyXG4gICAgfSxcclxuICAgICctLXN0dW4tLSc6IHtcclxuICAgICAgZGU6ICctLUJldMOkdWJ1bmctLScsXHJcbiAgICAgIGZyOiAnLS3DiXRvdXJkaXNzZW1lbnQtLScsXHJcbiAgICAgIGphOiAnLS3jgrnjgr/jg7MtLScsXHJcbiAgICAgIGNuOiAnLS3lh7vmmZUtLScsXHJcbiAgICAgIGtvOiAnLS3quLDsoIgtLScsXHJcbiAgICB9LFxyXG4gICAgJy0tc3luYy0tJzoge1xyXG4gICAgICBkZTogJy0tc3luY2hyb25pc2F0aW9uLS0nLFxyXG4gICAgICBmcjogJy0tc3luY2hyb25pc2F0aW9uLS0nLFxyXG4gICAgICBqYTogJy0t44K344Oz44KvLS0nLFxyXG4gICAgICBjbjogJy0t5ZCM5q2l5YyWLS0nLFxyXG4gICAgICBrbzogJy0t64+Z6riw7ZmULS0nLFxyXG4gICAgfSxcclxuICAgICctLShbMC05XSt4ICk/dGFyZ2V0YWJsZS0tJzoge1xyXG4gICAgICBkZTogJy0tJDFhbnZpc2llcmJhci0tJyxcclxuICAgICAgZnI6ICctLSQxY2libGFibGUtLScsXHJcbiAgICAgIGphOiAnLS0kMeOCv+ODvOOCsuODg+ODiOWPr+iDvS0tJyxcclxuICAgICAgY246ICctLSQx5Y+v6YCJ5LitLS0nLFxyXG4gICAgICBrbzogJy0tJDHtg4Dqsp8g6rCA64qlLS0nLFxyXG4gICAgfSxcclxuICAgICctLXRlbGVwb3J0LS0nOiB7XHJcbiAgICAgIGRlOiAnLS10ZWxlcG9ydGF0aW9uLS0nLFxyXG4gICAgICBmcjogJy0tdMOpbMOpcG9ydGF0aW9uLS0nLFxyXG4gICAgICBqYTogJy0t44OG44Os44Od44O844OILS0nLFxyXG4gICAgICBjbjogJy0t5Lyg6YCBLS0nLFxyXG4gICAgICBrbzogJy0t7Iic6rCEIOydtOuPmS0tJyxcclxuICAgIH0sXHJcbiAgICAnLS11bnRhcmdldGFibGUtLSc6IHtcclxuICAgICAgZGU6ICctLW5pY2ggYW52aXNpZXJiYXItLScsXHJcbiAgICAgIGZyOiAnLS1ub24gY2libGFibGUtLScsXHJcbiAgICAgIGphOiAnLS3jgr/jg7zjgrLjg4Pjg4jkuI3lj68tLScsXHJcbiAgICAgIGNuOiAnLS3ml6Dms5XpgInkuK0tLScsXHJcbiAgICAgIGtvOiAnLS3tg4Dqsp8g67aI6rCA64qlLS0nLFxyXG4gICAgfSxcclxuICAgICctLXdlc3QtLSc6IHtcclxuICAgICAgZGU6ICctLVdlc3Rlbi0tJyxcclxuICAgICAgZnI6ICctLU91ZXN0LS0nLFxyXG4gICAgICBqYTogJy0t6KW/LS0nLFxyXG4gICAgICBjbjogJy0t6KW/LS0nLFxyXG4gICAgICBrbzogJy0t7ISc7Kq9LS0nLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5FXToge1xyXG4gICAgICBkZTogJ08nLFxyXG4gICAgICBmcjogJ0UnLFxyXG4gICAgICBqYTogJ+adsScsXHJcbiAgICAgIGNuOiAn5LicJyxcclxuICAgICAga286ICfrj5knLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5OXToge1xyXG4gICAgICBkZTogJ04nLFxyXG4gICAgICBmcjogJ04nLFxyXG4gICAgICBqYTogJ+WMlycsXHJcbiAgICAgIGNuOiAn5YyXJyxcclxuICAgICAga286ICfrtoEnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5TXToge1xyXG4gICAgICBkZTogJ1MnLFxyXG4gICAgICBmcjogJ1MnLFxyXG4gICAgICBqYTogJ+WNlycsXHJcbiAgICAgIGNuOiAn5Y2XJyxcclxuICAgICAga286ICfrgqgnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5XXToge1xyXG4gICAgICBkZTogJ1cnLFxyXG4gICAgICBmcjogJ08nLFxyXG4gICAgICBqYTogJ+ilvycsXHJcbiAgICAgIGNuOiAn6KW/JyxcclxuICAgICAga286ICfshJwnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5ORV06IHtcclxuICAgICAgZGU6ICdOTycsXHJcbiAgICAgIGZyOiAnTkUnLFxyXG4gICAgICBqYTogJ+WMl+adsScsXHJcbiAgICAgIGNuOiAn5Lic5YyXJyxcclxuICAgICAga286ICfrtoHrj5knLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5OV106IHtcclxuICAgICAgZGU6ICdOVycsXHJcbiAgICAgIGZyOiAnTk8nLFxyXG4gICAgICBqYTogJ+WMl+ilvycsXHJcbiAgICAgIGNuOiAn6KW/5YyXJyxcclxuICAgICAga286ICfrtoHshJwnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5TRV06IHtcclxuICAgICAgZGU6ICdTTycsXHJcbiAgICAgIGZyOiAnU0UnLFxyXG4gICAgICBqYTogJ+WNl+adsScsXHJcbiAgICAgIGNuOiAn5Lic5Y2XJyxcclxuICAgICAga286ICfrgqjrj5knLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5TV106IHtcclxuICAgICAgZGU6ICdTVycsXHJcbiAgICAgIGZyOiAnU08nLFxyXG4gICAgICBqYTogJ+WNl+ilvycsXHJcbiAgICAgIGNuOiAn6KW/5Y2XJyxcclxuICAgICAga286ICfrgqjshJwnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5UYW5rXToge1xyXG4gICAgICBkZTogJ1RhbmsnLFxyXG4gICAgICBmcjogJ1RhbmsnLFxyXG4gICAgICBqYTogJ+OCv+ODs+OCrycsXHJcbiAgICAgIGNuOiAn5Z2m5YWLJyxcclxuICAgICAga286ICftg7Hsu6QnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5IZWFsZXJdOiB7XHJcbiAgICAgIGRlOiAnSGVpbGVyJyxcclxuICAgICAgZnI6ICdIZWFsZXInLFxyXG4gICAgICBqYTogJ+ODkuODvOODqeODvCcsXHJcbiAgICAgIGNuOiAn5rK755aXJyxcclxuICAgICAga286ICftnpDrn6wnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5EUFNdOiB7XHJcbiAgICAgIGRlOiAnRFBTJyxcclxuICAgICAgZnI6ICdEUFMnLFxyXG4gICAgICBqYTogJ0RQUycsXHJcbiAgICAgIGNuOiAnRFBTJyxcclxuICAgICAga286ICfrlJzrn6wnLFxyXG4gICAgfSxcclxuICAgIFt0ZXh0S2V5cy5OdW1iZXJdOiB7XHJcbiAgICAgIGRlOiAnLS0kMS0tJyxcclxuICAgICAgZnI6ICctLSQxLS0nLFxyXG4gICAgICBqYTogJy0tJDEtLScsXHJcbiAgICAgIGNuOiAnLS0kMS0tJyxcclxuICAgICAga286ICctLSQxLS0nLFxyXG4gICAgfSxcclxuICB9LFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gS2V5cyBpbnRvIGNvbW1vblJlcGxhY2VtZW50IG9iamVjdHMgdGhhdCByZXByZXNlbnQgXCJwYXJ0aWFsXCIgdHJhbnNsYXRpb25zLFxyXG4vLyBpbiB0aGUgc2Vuc2UgdGhhdCBldmVuIGlmIGl0IGFwcGxpZXMsIHRoZXJlIHN0aWxsIG5lZWRzIHRvIGJlIGFub3RoZXJcclxuLy8gdHJhbnNsYXRpb24gZm9yIGl0IHRvIGJlIGNvbXBsZXRlLiAgVGhlc2Uga2V5cyBzaG91bGQgYmUgZXhhY3RseSB0aGUgc2FtZVxyXG4vLyBhcyB0aGUga2V5cyBmcm9tIHRoZSBjb21tb25SZXBsYWNlbWVudCBibG9jayBhYm92ZS4gIFRoZXNlIGFyZSB1c2VkIGZvclxyXG4vLyB0aW1lbGluZSByZWdleGVzIG9ubHkuXHJcbmV4cG9ydCBjb25zdCBwYXJ0aWFsQ29tbW9uVGltZWxpbmVSZXBsYWNlbWVudEtleXMgPSBbXHJcbiAgLy8gQmVjYXVzZSB0aGUgem9uZSBuYW1lIG5lZWRzIHRvIGJlIHRyYW5zbGF0ZWQgaGVyZSwgdGhpcyBpcyBwYXJ0aWFsLlxyXG4gIHN5bmNLZXlzLnNlYWwsXHJcbiAgLy8gRGlyZWN0aW9uc1xyXG4gIHRleHRLZXlzLkUsXHJcbiAgdGV4dEtleXMuTixcclxuICB0ZXh0S2V5cy5TLFxyXG4gIHRleHRLZXlzLlcsXHJcbiAgdGV4dEtleXMuTkUsXHJcbiAgdGV4dEtleXMuTlcsXHJcbiAgdGV4dEtleXMuU0UsXHJcbiAgdGV4dEtleXMuU1csXHJcbiAgLy8gUm9sZXNcclxuICB0ZXh0S2V5cy5UYW5rLFxyXG4gIHRleHRLZXlzLkhlYWxlcixcclxuICB0ZXh0S2V5cy5EUFMsXHJcbl07XHJcblxyXG4vLyBTYW1lIGFzIHRoZSB0aW1lbGluZSB2ZXJzaW9uIGFib3ZlLCBidXQgb25seSBmb3IgdHJpZ2dlciByZWdleGVzLlxyXG5leHBvcnQgY29uc3QgcGFydGlhbENvbW1vblRyaWdnZXJSZXBsYWNlbWVudEtleXMgPSBbXHJcbiAgLy8gQmVjYXVzZSB0aGUgem9uZSBuYW1lIG5lZWRzIHRvIGJlIHRyYW5zbGF0ZWQgaGVyZSwgdGhpcyBpcyBwYXJ0aWFsLlxyXG4gIHN5bmNLZXlzLnNlYWwsXHJcbl07XHJcbiIsImltcG9ydCB7IE5ldFBhcmFtcyB9IGZyb20gJy4uL3R5cGVzL25ldF9wcm9wcyc7XHJcbmltcG9ydCB7IENhY3Rib3RCYXNlUmVnRXhwLCBUcmlnZ2VyVHlwZXMgfSBmcm9tICcuLi90eXBlcy9uZXRfdHJpZ2dlcic7XHJcbmltcG9ydCB7XHJcbiAgY29tbW9uUmVwbGFjZW1lbnQsXHJcbiAgcGFydGlhbENvbW1vblRpbWVsaW5lUmVwbGFjZW1lbnRLZXlzLFxyXG4gIHBhcnRpYWxDb21tb25UcmlnZ2VyUmVwbGFjZW1lbnRLZXlzLFxyXG59IGZyb20gJy4uL3VpL3JhaWRib3NzL2NvbW1vbl9yZXBsYWNlbWVudCc7XHJcbmltcG9ydCB7IFRpbWVsaW5lUmVwbGFjZW1lbnQgfSBmcm9tICcuLi91aS9yYWlkYm9zcy90aW1lbGluZV9wYXJzZXInO1xyXG5cclxuaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4vbGFuZ3VhZ2VzJztcclxuaW1wb3J0IE5ldFJlZ2V4ZXMsIHsga2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb24gfSBmcm9tICcuL25ldHJlZ2V4ZXMnO1xyXG5pbXBvcnQgUmVnZXhlcyBmcm9tICcuL3JlZ2V4ZXMnO1xyXG5cclxuLy8gRmlsbCBpbiBMb2NhbGVSZWdleCBzbyB0aGF0IHRoaW5ncyBsaWtlIExvY2FsZVJlZ2V4LmNvdW50ZG93blN0YXJ0LmRlIGlzIGEgdmFsaWQgcmVnZXguXHJcbmNvbnN0IGxvY2FsZUxpbmVzID0ge1xyXG4gIGNvdW50ZG93blN0YXJ0OiB7XHJcbiAgICBlbjogJ0JhdHRsZSBjb21tZW5jaW5nIGluICg/PHRpbWU+XFxcXHl7RmxvYXR9KSBzZWNvbmRzISBcXFxcKCg/PHBsYXllcj4uKj8pXFxcXCknLFxyXG4gICAgZGU6ICdOb2NoICg/PHRpbWU+XFxcXHl7RmxvYXR9KSBTZWt1bmRlbiBiaXMgS2FtcGZiZWdpbm4hIFxcXFwoKD88cGxheWVyPi4qPylcXFxcKScsXHJcbiAgICBmcjogJ0TDqWJ1dCBkdSBjb21iYXQgZGFucyAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgc2Vjb25kZXNbIF0/ISBcXFxcKCg/PHBsYXllcj4uKj8pXFxcXCknLFxyXG4gICAgamE6ICfmiKbpl5jplovlp4vjgb7jgacoPzx0aW1lPlxcXFx5e0Zsb2F0fSnnp5LvvIEg77yIKD88cGxheWVyPi4qPynvvIknLFxyXG4gICAgY246ICfot53nprvmiJjmlpflvIDlp4vov5jmnIkoPzx0aW1lPlxcXFx5e0Zsb2F0fSnnp5LvvIEg77yIKD88cGxheWVyPi4qPynvvIknLFxyXG4gICAga286ICfsoITtiKwg7Iuc7J6RICg/PHRpbWU+XFxcXHl7RmxvYXR9Key0iCDsoIQhIFxcXFwoKD88cGxheWVyPi4qPylcXFxcKScsXHJcbiAgfSxcclxuICBjb3VudGRvd25FbmdhZ2U6IHtcclxuICAgIGVuOiAnRW5nYWdlIScsXHJcbiAgICBkZTogJ1N0YXJ0IScsXHJcbiAgICBmcjogJ8OAIGxcXCdhdHRhcXVlWyBdPyEnLFxyXG4gICAgamE6ICfmiKbpl5jplovlp4vvvIEnLFxyXG4gICAgY246ICfmiJjmlpflvIDlp4vvvIEnLFxyXG4gICAga286ICfsoITtiKwg7Iuc7J6RIScsXHJcbiAgfSxcclxuICBjb3VudGRvd25DYW5jZWw6IHtcclxuICAgIGVuOiAnQ291bnRkb3duIGNhbmNlbGVkIGJ5ICg/PHBsYXllcj5cXFxceXtOYW1lfSknLFxyXG4gICAgZGU6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0pIGhhdCBkZW4gQ291bnRkb3duIGFiZ2Vicm9jaGVuJyxcclxuICAgIGZyOiAnTGUgY29tcHRlIMOgIHJlYm91cnMgYSDDqXTDqSBpbnRlcnJvbXB1IHBhciAoPzxwbGF5ZXI+XFxcXHl7TmFtZX0pWyBdP1xcXFwuJyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBq+OCiOOCiuOAgeaIpumXmOmWi+Wni+OCq+OCpuODs+ODiOOBjOOCreODo+ODs+OCu+ODq+OBleOCjOOBvuOBl+OBn+OAgicsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnlj5bmtojkuobmiJjmlpflvIDlp4vlgJLorqHml7bjgIInLFxyXG4gICAga286ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0pIOuLmOydtCDstIjsnb3quLDrpbwg7Leo7IaM7ZaI7Iq164uI64ukXFxcXC4nLFxyXG4gIH0sXHJcbiAgYXJlYVNlYWw6IHtcclxuICAgIGVuOiAnKD88YXJlYT4uKj8pIHdpbGwgYmUgc2VhbGVkIG9mZiBpbiAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgc2Vjb25kcyEnLFxyXG4gICAgZGU6ICdOb2NoICg/PHRpbWU+XFxcXHl7RmxvYXR9KSBTZWt1bmRlbiwgYmlzIHNpY2ggKD88YXJlYT4uKj8pIHNjaGxpZcOfdCcsXHJcbiAgICBmcjogJ0Zlcm1ldHVyZSAoPzxhcmVhPi4qPykgZGFucyAoPzx0aW1lPlxcXFx5e0Zsb2F0fSkgc2Vjb25kZXNbIF0/XFxcXC4nLFxyXG4gICAgamE6ICcoPzxhcmVhPi4qPynjga7lsIHpjpbjgb7jgafjgYLjgagoPzx0aW1lPlxcXFx5e0Zsb2F0fSnnp5InLFxyXG4gICAgY246ICfot50oPzxhcmVhPi4qPynooqvlsIHplIHov5jmnIkoPzx0aW1lPlxcXFx5e0Zsb2F0fSnnp5InLFxyXG4gICAga286ICcoPzx0aW1lPlxcXFx5e0Zsb2F0fSnstIgg7ZuE7JeQICg/PGFyZWE+Lio/KSjsnbR86rCAKSDrtInsh4TrkKnri4jri6RcXFxcLicsXHJcbiAgfSxcclxuICBhcmVhVW5zZWFsOiB7XHJcbiAgICBlbjogJyg/PGFyZWE+Lio/KSBpcyBubyBsb25nZXIgc2VhbGVkLicsXHJcbiAgICBkZTogJyg/PGFyZWE+Lio/KSDDtmZmbmV0IHNpY2ggZXJuZXV0LicsXHJcbiAgICBmcjogJ091dmVydHVyZSAoPzxhcmVhPi4qPylbIF0/IScsXHJcbiAgICBqYTogJyg/PGFyZWE+Lio/KeOBruWwgemOluOBjOino+OBi+OCjOOBn+KApuKApicsXHJcbiAgICBjbjogJyg/PGFyZWE+Lio/KeeahOWwgemUgeino+mZpOS6hicsXHJcbiAgICBrbzogJyg/PGFyZWE+Lio/KeydmCDrtInsh4TqsIAg7ZW07KCc65CY7JeI7Iq164uI64ukXFxcXC4nLFxyXG4gIH0sXHJcbiAgLy8gUmVjaXBlIG5hbWUgYWx3YXlzIHN0YXJ0IHdpdGggXFx1ZTBiYlxyXG4gIC8vIEhRIGljb24gaXMgXFx1ZTAzY1xyXG4gIGNyYWZ0aW5nU3RhcnQ6IHtcclxuICAgIGVuOiAnWW91IGJlZ2luIHN5bnRoZXNpemluZyAoPzxjb3VudD4oYW4/fFxcXFxkKykgKT9cXHVlMGJiKD88cmVjaXBlPi4qKVxcXFwuJyxcclxuICAgIGRlOlxyXG4gICAgICAnRHUgaGFzdCBiZWdvbm5lbiwgZHVyY2ggU3ludGhlc2UgKD88Y291bnQ+KGVpbihlfGVzfGVtfGVyKT98XFxcXGQrKSApP1xcdWUwYmIoPzxyZWNpcGU+LiopIGhlcnp1c3RlbGxlblxcXFwuJyxcclxuICAgIGZyOiAnVm91cyBjb21tZW5jZXogw6AgZmFicmlxdWVyICg/PGNvdW50Pih1bmU/fFxcXFxkKykgKT9cXHVlMGJiKD88cmVjaXBlPi4qKVxcXFwuJyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr1xcdWUwYmIoPzxyZWNpcGU+LiopKMOXKD88Y291bnQ+XFxcXGQrKSk/44Gu6KO95L2c44KS6ZaL5aeL44GX44Gf44CCJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeW8gOWni+WItuS9nOKAnFxcdWUwYmIoPzxyZWNpcGU+Liop4oCdKMOXKD88Y291bnQ+XFxcXGQrKSk/44CCJyxcclxuICAgIGtvOiAnXFx1ZTBiYig/PHJlY2lwZT4uKikow5coPzxjb3VudD5cXFxcZCsp6rCcKT8g7KCc7J6R7J2EIOyLnOyeke2VqeuLiOuLpFxcXFwuJyxcclxuICB9LFxyXG4gIHRyaWFsQ3JhZnRpbmdTdGFydDoge1xyXG4gICAgZW46ICdZb3UgYmVnaW4gdHJpYWwgc3ludGhlc2lzIG9mIFxcdWUwYmIoPzxyZWNpcGU+LiopXFxcXC4nLFxyXG4gICAgZGU6ICdEdSBoYXN0IG1pdCBkZXIgVGVzdHN5bnRoZXNlIHZvbiBcXHVlMGJiKD88cmVjaXBlPi4qKSBiZWdvbm5lblxcXFwuJyxcclxuICAgIGZyOiAnVm91cyBjb21tZW5jZXogdW5lIHN5bnRow6hzZSBkXFwnZXNzYWkgcG91ciB1bmU/IFxcdWUwYmIoPzxyZWNpcGU+LiopXFxcXC4nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44GvXFx1ZTBiYig/PHJlY2lwZT4uKinjga7oo73kvZznt7Tnv5LjgpLplovlp4vjgZfjgZ/jgIInLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p5byA5aeL57uD5Lmg5Yi25L2cXFx1ZTBiYig/PHJlY2lwZT4uKinjgIInLFxyXG4gICAga286ICdcXHVlMGJiKD88cmVjaXBlPi4qKSDsoJzsnpEg7Jew7Iq17J2EIOyLnOyeke2VqeuLiOuLpFxcXFwuJyxcclxuICB9LFxyXG4gIGNyYWZ0aW5nRmluaXNoOiB7XHJcbiAgICBlbjogJ1lvdSBzeW50aGVzaXplICg/PGNvdW50Pihhbj98XFxcXGQrKSApP1xcdWUwYmIoPzxyZWNpcGU+LiopKFxcdWUwM2MpP1xcXFwuJyxcclxuICAgIGRlOlxyXG4gICAgICAnRHUgaGFzdCBlcmZvbGdyZWljaCAoPzxjb3VudD4oZWluKGV8ZXN8ZW18ZXIpP3xcXFxcZCspICk/KD88cmVjaXBlPi4qKShcXHVlMDNjKT8gaGVyZ2VzdGVsbHRcXFxcLicsXHJcbiAgICBmcjogJ1ZvdXMgZmFicmlxdWV6ICg/PGNvdW50Pih1bmU/fFxcXFxkKykgKT9cXHVlMGJiKD88cmVjaXBlPi4qKShcXHVlMDNjKT9cXFxcLicsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga9cXHVlMGJiKD88cmVjaXBlPi4qKShcXHVlMDNjKT8ow5coPzxjb3VudD5cXFxcZCspKT/jgpLlrozmiJDjgZXjgZvjgZ/vvIEnLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p5Yi25L2c4oCcXFx1ZTBiYig/PHJlY2lwZT4uKikoXFx1ZTAzYyk/4oCdKMOXKD88Y291bnQ+XFxcXGQrKSk/5oiQ5Yqf77yBJyxcclxuICAgIGtvOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KSDri5jsnbQgXFx1ZTBiYig/PHJlY2lwZT4uKikoXFx1ZTAzYyk/KMOXKD88Y291bnQ+XFxcXGQrKeqwnCk/KOydhHzrpbwpIOyZhOyEse2WiOyKteuLiOuLpCEnLFxyXG4gIH0sXHJcbiAgdHJpYWxDcmFmdGluZ0ZpbmlzaDoge1xyXG4gICAgZW46ICdZb3VyIHRyaWFsIHN5bnRoZXNpcyBvZiBcXHVlMGJiKD88cmVjaXBlPi4qKSBwcm92ZWQgYSBzdWNjZXNzIScsXHJcbiAgICBkZTogJ0RpZSBUZXN0c3ludGhlc2Ugdm9uIFxcdWUwYmIoPzxyZWNpcGU+LiopIHdhciBlcmZvbGdyZWljaCEnLFxyXG4gICAgZnI6ICdWb3RyZSBzeW50aMOoc2UgZFxcJ2Vzc2FpIHBvdXIgZmFicmlxdWVyIFxcdWUwYmIoPzxyZWNpcGU+LiopIGEgw6l0w6kgY291cm9ubsOpZSBkZSBzdWNjw6hzIScsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga9cXHVlMGJiKD88cmVjaXBlPi4qKeOBruijveS9nOe3tOe/kuOBq+aIkOWKn+OBl+OBn++8gScsXHJcbiAgICBjbjogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnnu4PkuaDliLbkvZxcXHVlMGJiKD88cmVjaXBlPi4qKeaIkOWKn+S6hu+8gScsXHJcbiAgICBrbzogJ1xcdWUwYmIoPzxyZWNpcGU+LiopIOygnOyekSDsl7DsirXsl5Ag7ISx6rO17ZaI7Iq164uI64ukIScsXHJcbiAgfSxcclxuICBjcmFmdGluZ0ZhaWw6IHtcclxuICAgIGVuOiAnWW91ciBzeW50aGVzaXMgZmFpbHMhJyxcclxuICAgIGRlOiAnRGVpbmUgU3ludGhlc2UgaXN0IGZlaGxnZXNjaGxhZ2VuIScsXHJcbiAgICBmcjogJ0xhIHN5bnRow6hzZSDDqWNob3VlXFxcXC57M30nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44Gv6KO95L2c44Gr5aSx5pWX44GX44Gf4oCm4oCmJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeWItuS9nOWksei0peS6huKApuKApicsXHJcbiAgICBrbzogJ+ygnOyekeyXkCDsi6TtjKjtlojsirXri4jri6TigKbigKZcXFxcLicsXHJcbiAgfSxcclxuICB0cmlhbENyYWZ0aW5nRmFpbDoge1xyXG4gICAgZW46ICdZb3VyIHRyaWFsIHN5bnRoZXNpcyBvZiBcXHVlMGJiKD88cmVjaXBlPi4qKSBmYWlsZWRcXFxcLnszfScsXHJcbiAgICBkZTogJ0RpZSBUZXN0c3ludGhlc2Ugdm9uIFxcdWUwYmIoPzxyZWNpcGU+LiopIGlzdCBmZWhsZ2VzY2hsYWdlblxcXFwuezN9JyxcclxuICAgIGZyOlxyXG4gICAgICAnVm90cmUgc3ludGjDqHNlIGRcXCdlc3NhaSBwb3VyIGZhYnJpcXVlciBcXHVlMGJiKD88cmVjaXBlPi4qKSBzXFwnZXN0IHNvbGTDqWUgcGFyIHVuIMOpY2hlY1xcXFwuezN9JyxcclxuICAgIGphOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeOBr1xcdWUwYmIoPzxyZWNpcGU+Liop44Gu6KO95L2c57e057+S44Gr5aSx5pWX44GX44Gf4oCm4oCmJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9Kee7g+S5oOWItuS9nFxcdWUwYmIoPzxyZWNpcGU+Liop5aSx6LSl5LqG4oCm4oCmJyxcclxuICAgIGtvOiAnXFx1ZTBiYig/PHJlY2lwZT4uKikg7KCc7J6RIOyXsOyKteyXkCDsi6TtjKjtlojsirXri4jri6TigKbigKZcXFxcLicsXHJcbiAgfSxcclxuICBjcmFmdGluZ0NhbmNlbDoge1xyXG4gICAgZW46ICdZb3UgY2FuY2VsIHRoZSBzeW50aGVzaXNcXFxcLicsXHJcbiAgICBkZTogJ0R1IGhhc3QgZGllIFN5bnRoZXNlIGFiZ2Vicm9jaGVuXFxcXC4nLFxyXG4gICAgZnI6ICdMYSBzeW50aMOoc2UgZXN0IGFubnVsw6llXFxcXC4nLFxyXG4gICAgamE6ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p44Gv6KO95L2c44KS5Lit5q2i44GX44Gf44CCJyxcclxuICAgIGNuOiAnKD88cGxheWVyPlxcXFx5e05hbWV9KeS4reatouS6huWItuS9nOS9nOS4muOAgicsXHJcbiAgICBrbzogJ+ygnOyekeydhCDspJHsp4DtlojsirXri4jri6RcXFxcLicsXHJcbiAgfSxcclxuICB0cmlhbENyYWZ0aW5nQ2FuY2VsOiB7XHJcbiAgICBlbjogJ1lvdSBhYmFuZG9uZWQgdHJpYWwgc3ludGhlc2lzXFxcXC4nLFxyXG4gICAgZGU6ICdUZXN0c3ludGhlc2UgYWJnZWJyb2NoZW5cXFxcLicsXHJcbiAgICBmcjogJ1ZvdXMgYXZleiBpbnRlcnJvbXB1IGxhIHN5bnRow6hzZSBkXFwnZXNzYWlcXFxcLicsXHJcbiAgICBqYTogJyg/PHBsYXllcj5cXFxceXtOYW1lfSnjga/oo73kvZznt7Tnv5LjgpLkuK3mraLjgZfjgZ/jgIInLFxyXG4gICAgY246ICcoPzxwbGF5ZXI+XFxcXHl7TmFtZX0p5YGc5q2i5LqG57uD5Lmg44CCJyxcclxuICAgIGtvOiAn7KCc7J6RIOyXsOyKteydhCDspJHsp4DtlojsirXri4jri6RcXFxcLicsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbnR5cGUgTG9jYWxlTGluZSA9IHsgZW46IHN0cmluZyB9ICYgUGFydGlhbDxSZWNvcmQ8RXhjbHVkZTxMYW5nLCAnZW4nPiwgc3RyaW5nPj47XHJcblxyXG50eXBlIExvY2FsZVJlZ2V4ZXNPYmogPSBSZWNvcmQ8a2V5b2YgdHlwZW9mIGxvY2FsZUxpbmVzLCBSZWNvcmQ8TGFuZywgUmVnRXhwPj47XHJcblxyXG5leHBvcnQgdHlwZSBBbm9uTmV0UmVnZXhQYXJhbXMgPSB7XHJcbiAgW25hbWU6IHN0cmluZ106IHN0cmluZyB8IHJlYWRvbmx5IHN0cmluZ1tdIHwgYm9vbGVhbiB8IHVuZGVmaW5lZCB8IHVua25vd25bXTtcclxufTtcclxuXHJcbmNsYXNzIFJlZ2V4U2V0IHtcclxuICByZWdleGVzPzogTG9jYWxlUmVnZXhlc09iajtcclxuICBuZXRSZWdleGVzPzogTG9jYWxlUmVnZXhlc09iajtcclxuXHJcbiAgZ2V0IGxvY2FsZVJlZ2V4KCk6IExvY2FsZVJlZ2V4ZXNPYmoge1xyXG4gICAgaWYgKHRoaXMucmVnZXhlcylcclxuICAgICAgcmV0dXJuIHRoaXMucmVnZXhlcztcclxuICAgIHRoaXMucmVnZXhlcyA9IHRoaXMuYnVpbGRMb2NhbGVSZWdleGVzKFxyXG4gICAgICBsb2NhbGVMaW5lcyxcclxuICAgICAgKHM6IHN0cmluZykgPT4gUmVnZXhlcy5nYW1lTG9nKHsgbGluZTogYCR7c30uKj9gIH0pLFxyXG4gICAgKTtcclxuICAgIHJldHVybiB0aGlzLnJlZ2V4ZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgbG9jYWxlTmV0UmVnZXgoKTogTG9jYWxlUmVnZXhlc09iaiB7XHJcbiAgICBpZiAodGhpcy5uZXRSZWdleGVzKVxyXG4gICAgICByZXR1cm4gdGhpcy5uZXRSZWdleGVzO1xyXG4gICAgdGhpcy5uZXRSZWdleGVzID0gdGhpcy5idWlsZExvY2FsZVJlZ2V4ZXMoXHJcbiAgICAgIGxvY2FsZUxpbmVzLFxyXG4gICAgICAoczogc3RyaW5nKSA9PiBOZXRSZWdleGVzLmdhbWVMb2coeyBsaW5lOiBgJHtzfVtefF0qP2AgfSksXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHRoaXMubmV0UmVnZXhlcztcclxuICB9XHJcblxyXG4gIGJ1aWxkTG9jYWxlUmVnZXhlcyhcclxuICAgIGxvY2FsZXM6IHR5cGVvZiBsb2NhbGVMaW5lcyxcclxuICAgIGJ1aWxkZXI6IChzOiBzdHJpbmcpID0+IENhY3Rib3RCYXNlUmVnRXhwPCdHYW1lTG9nJz4gfCBSZWdFeHAsXHJcbiAgKTogTG9jYWxlUmVnZXhlc09iaiB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKFxyXG4gICAgICBPYmplY3RcclxuICAgICAgICAuZW50cmllcyhsb2NhbGVzKVxyXG4gICAgICAgIC5tYXAoKFtrZXksIGxpbmVzXSkgPT4gW2tleSwgdGhpcy5idWlsZExvY2FsZVJlZ2V4KGxpbmVzLCBidWlsZGVyKV0pLFxyXG4gICAgKSBhcyBMb2NhbGVSZWdleGVzT2JqO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRMb2NhbGVSZWdleChcclxuICAgIGxpbmVzOiBMb2NhbGVMaW5lLFxyXG4gICAgYnVpbGRlcjogKHM6IHN0cmluZykgPT4gQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB8IFJlZ0V4cCxcclxuICApOiBSZWNvcmQ8TGFuZywgQ2FjdGJvdEJhc2VSZWdFeHA8J0dhbWVMb2cnPiB8IFJlZ0V4cD4ge1xyXG4gICAgY29uc3QgcmVnZXhFbiA9IGJ1aWxkZXIobGluZXMuZW4pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZW46IHJlZ2V4RW4sXHJcbiAgICAgIGRlOiBsaW5lcy5kZSAhPT0gdW5kZWZpbmVkID8gYnVpbGRlcihsaW5lcy5kZSkgOiByZWdleEVuLFxyXG4gICAgICBmcjogbGluZXMuZnIgIT09IHVuZGVmaW5lZCA/IGJ1aWxkZXIobGluZXMuZnIpIDogcmVnZXhFbixcclxuICAgICAgamE6IGxpbmVzLmphICE9PSB1bmRlZmluZWQgPyBidWlsZGVyKGxpbmVzLmphKSA6IHJlZ2V4RW4sXHJcbiAgICAgIGNuOiBsaW5lcy5jbiAhPT0gdW5kZWZpbmVkID8gYnVpbGRlcihsaW5lcy5jbikgOiByZWdleEVuLFxyXG4gICAgICBrbzogbGluZXMua28gIT09IHVuZGVmaW5lZCA/IGJ1aWxkZXIobGluZXMua28pIDogcmVnZXhFbixcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCByZWdleFNldCA9IG5ldyBSZWdleFNldCgpO1xyXG5cclxuZXhwb3J0IGNvbnN0IExvY2FsZVJlZ2V4ID0gcmVnZXhTZXQubG9jYWxlUmVnZXg7XHJcbmV4cG9ydCBjb25zdCBMb2NhbGVOZXRSZWdleCA9IHJlZ2V4U2V0LmxvY2FsZU5ldFJlZ2V4O1xyXG5cclxuLy8gVHJhbnNsYXRlIGEgdHJpZ2dlciBvciB0aW1lbGluZSByZWdleCAocmVwbGFjZVN5bmMpIG9yIHRpbWVsaW5lIHRleHQgKHJlcGxhY2VUZXh0KSxcclxuLy8gcmV0dXJuaW5nIHRoZSB0ZXh0IGFuZCB3aGV0aGVyIG9yIG5vdCBpdCBjYW4gYmUgY29uc2lkZXJlZCBcInRyYW5zbGF0ZWRcIi5cclxuLy8gTm90ZSwgdGhpcyB3b24ndCBjYXRjaCBhbnl0aGluZyB0aGF0IG5lZWRzIG11bHRpcGxlIHRyYW5zbGF0aW9ucywgYnV0IHdpbGwgY2F0Y2hcclxuLy8gYW55dGhpbmcgZnJvbSBjb21tb24gdHJhbnNsYXRpb25zIHRoYXQgYXJlIHBhcnRpYWwgKGUuZy4gYSBzZWFsIHJlZ2V4IG5lZWRzXHJcbi8vIGEgem9uZSBuYW1lIHRvIGJlIGNvbnNpZGVyZWQgYSBmdWxsIHRyYW5zbGF0aW9uLlxyXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlV2l0aFJlcGxhY2VtZW50cyA9IChcclxuICB0ZXh0OiBzdHJpbmcsXHJcbiAgcmVwbGFjZUtleTogJ3JlcGxhY2VTeW5jJyB8ICdyZXBsYWNlVGV4dCcsXHJcbiAgcmVwbGFjZUxhbmc6IExhbmcsXHJcbiAgcmVwbGFjZW1lbnRzPzogVGltZWxpbmVSZXBsYWNlbWVudFtdLFxyXG4pOiB7IHRleHQ6IHN0cmluZzsgd2FzVHJhbnNsYXRlZDogYm9vbGVhbiB9ID0+IHtcclxuICAvLyBTcGVjaWFsIGNhc2VzIGZvciBlbXB0eSBhbmQgXCJub3QgZW1wdHlcIi5cclxuICBpZiAodGV4dCA9PT0gJycgfHwgdGV4dCA9PT0gJ1teOl0rJyB8fCB0ZXh0ID09PSAnW158XSsnKVxyXG4gICAgcmV0dXJuIHsgdGV4dDogdGV4dCwgd2FzVHJhbnNsYXRlZDogdHJ1ZSB9O1xyXG5cclxuICAvLyBBbGwgcmVnZXggcmVwbGFjZW1lbnRzIGFyZSBhbHdheXMgZ2xvYmFsLlxyXG4gIGNvbnN0IGlzR2xvYmFsID0gcmVwbGFjZUtleSA9PT0gJ3JlcGxhY2VTeW5jJztcclxuXHJcbiAgbGV0IHdhc1RyYW5zbGF0ZWQgPSBmYWxzZTtcclxuICBmb3IgKGNvbnN0IHIgb2YgcmVwbGFjZW1lbnRzID8/IFtdKSB7XHJcbiAgICBpZiAoci5sb2NhbGUgJiYgci5sb2NhbGUgIT09IHJlcGxhY2VMYW5nKVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIGNvbnN0IHJlcHMgPSByW3JlcGxhY2VLZXldO1xyXG4gICAgaWYgKCFyZXBzKVxyXG4gICAgICBjb250aW51ZTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJlcHMpKSB7XHJcbiAgICAgIGNvbnN0IHJlZ2V4ID0gaXNHbG9iYWwgPyBSZWdleGVzLnBhcnNlR2xvYmFsKGtleSkgOiBSZWdleGVzLnBhcnNlKGtleSk7XHJcbiAgICAgIGlmICh0ZXh0Lm1hdGNoKHJlZ2V4KSlcclxuICAgICAgICB3YXNUcmFuc2xhdGVkID0gdHJ1ZTtcclxuICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShyZWdleCwgdmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ29tbW9uIFJlcGxhY2VtZW50c1xyXG4gIGNvbnN0IHJlcGxhY2VtZW50ID0gY29tbW9uUmVwbGFjZW1lbnRbcmVwbGFjZUtleV07XHJcbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocmVwbGFjZW1lbnQgPz8ge30pKSB7XHJcbiAgICBjb25zdCByZXBsID0gdmFsdWVbcmVwbGFjZUxhbmddO1xyXG4gICAgaWYgKHJlcGwgPT09IHVuZGVmaW5lZClcclxuICAgICAgY29udGludWU7XHJcbiAgICBjb25zdCByZWdleCA9IGlzR2xvYmFsID8gUmVnZXhlcy5wYXJzZUdsb2JhbChrZXkpIDogUmVnZXhlcy5wYXJzZShrZXkpO1xyXG5cclxuICAgIGNvbnN0IHBhcnRpYWxLZXlzID0gcmVwbGFjZUtleSA9PT0gJ3JlcGxhY2VTeW5jJ1xyXG4gICAgICA/IHBhcnRpYWxDb21tb25UcmlnZ2VyUmVwbGFjZW1lbnRLZXlzXHJcbiAgICAgIDogcGFydGlhbENvbW1vblRpbWVsaW5lUmVwbGFjZW1lbnRLZXlzO1xyXG4gICAgaWYgKHRleHQubWF0Y2gocmVnZXgpKSB7XHJcbiAgICAgIC8vIENvbnNpZGVyIGFueSBwYXJ0aWFsIHRyYW5zbGF0aW9ucyBhcyBcIm5vdCBmb3VuZFwiIChlLmcuIGEgc2VhbFxyXG4gICAgICAvLyBtZXNzYWdlIHRoYXQgc3RpbGwgbmVlZHMgdGhlIHpvbmUgbmFtZSB0byBiZSB0cmFuc2xhdGVkIHRvIGJlXHJcbiAgICAgIC8vIGNvbnNpZGVyZWQgZnVsbHkgdHJhbnNsYXRlZCkuXHJcbiAgICAgIGxldCBpc1BhcnRpYWwgPSBmYWxzZTtcclxuICAgICAgZm9yIChjb25zdCBwYXJ0aWFsS2V5IG9mIHBhcnRpYWxLZXlzKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4ZXMucGFyc2VHbG9iYWwocGFydGlhbEtleSkudGVzdChrZXkpKSB7XHJcbiAgICAgICAgICBpc1BhcnRpYWwgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghaXNQYXJ0aWFsKVxyXG4gICAgICAgIHdhc1RyYW5zbGF0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVnZXgsIHJlcGwpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgdGV4dCwgd2FzVHJhbnNsYXRlZCB9O1xyXG59O1xyXG5cclxuLy8gVHJhbnNsYXRlcyBhIHRpbWVsaW5lIG9yIHRyaWdnZXIgcmVnZXggZm9yIGEgZ2l2ZW4gbGFuZ3VhZ2UuXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVSZWdleCA9IChcclxuICB0ZXh0OiBzdHJpbmcgfCBSZWdFeHAsXHJcbiAgcmVwbGFjZUxhbmc6IExhbmcsXHJcbiAgcmVwbGFjZW1lbnRzPzogVGltZWxpbmVSZXBsYWNlbWVudFtdLFxyXG4pOiBzdHJpbmcgPT4ge1xyXG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycpXHJcbiAgICByZXR1cm4gdHJhbnNsYXRlV2l0aFJlcGxhY2VtZW50cyh0ZXh0LCAncmVwbGFjZVN5bmMnLCByZXBsYWNlTGFuZywgcmVwbGFjZW1lbnRzKS50ZXh0O1xyXG4gIHJldHVybiB0cmFuc2xhdGVXaXRoUmVwbGFjZW1lbnRzKHRleHQuc291cmNlLCAncmVwbGFjZVN5bmMnLCByZXBsYWNlTGFuZywgcmVwbGFjZW1lbnRzKS50ZXh0O1xyXG59O1xyXG5cclxuLy8gVHJhbnNsYXRlcyBhIHRpbWVsaW5lIHRleHQgZm9yIGEgZ2l2ZW4gbGFuZ3VhZ2UuXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVUZXh0ID0gKFxyXG4gIHRleHQ6IHN0cmluZyxcclxuICByZXBsYWNlTGFuZzogTGFuZyxcclxuICByZXBsYWNlbWVudHM/OiBUaW1lbGluZVJlcGxhY2VtZW50W10sXHJcbik6IHN0cmluZyA9PiB0cmFuc2xhdGVXaXRoUmVwbGFjZW1lbnRzKHRleHQsICdyZXBsYWNlVGV4dCcsIHJlcGxhY2VMYW5nLCByZXBsYWNlbWVudHMpLnRleHQ7XHJcblxyXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtID0gPFQgZXh0ZW5kcyBUcmlnZ2VyVHlwZXM+KFxyXG4gIHBhcmFtczogTmV0UGFyYW1zW1RdLFxyXG4gIHJlcGxhY2VMYW5nOiBMYW5nLFxyXG4gIHJlcGxhY2VtZW50cz86IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSxcclxuKToge1xyXG4gIHBhcmFtczogTmV0UGFyYW1zW1RdO1xyXG4gIHdhc1RyYW5zbGF0ZWQ6IGJvb2xlYW47XHJcbiAgbWlzc2luZ0ZpZWxkcz86IHN0cmluZ1tdO1xyXG59ID0+IHtcclxuICByZXR1cm4gdHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtQW5vbihwYXJhbXMsIHJlcGxhY2VMYW5nLCByZXBsYWNlbWVudHMpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHRyYW5zbGF0ZVJlZ2V4QnVpbGRQYXJhbUFub24gPSAoXHJcbiAgYW5vblBhcmFtczogUmVhZG9ubHk8QW5vbk5ldFJlZ2V4UGFyYW1zPixcclxuICByZXBsYWNlTGFuZzogTGFuZyxcclxuICByZXBsYWNlbWVudHM/OiBUaW1lbGluZVJlcGxhY2VtZW50W10sXHJcbik6IHtcclxuICBwYXJhbXM6IEFub25OZXRSZWdleFBhcmFtcztcclxuICB3YXNUcmFuc2xhdGVkOiBib29sZWFuO1xyXG4gIG1pc3NpbmdGaWVsZHM/OiBzdHJpbmdbXTtcclxufSA9PiB7XHJcbiAgbGV0IG1pc3NpbmdGaWVsZHM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gIGxldCB3YXNUcmFuc2xhdGVkID0gdHJ1ZTtcclxuXHJcbiAgLy8gVE9ETzogaXQncyBwcm9iYWJseSBvayB0aGF0IHRoaXMgaXNuJ3QgYSBkZWVwIGNvcHkgYmVjYXVzZSB3ZSBkb24ndFxyXG4gIC8vIG1vZGlmeSBzdHJpbmdbXSBkaXJlY3RseSwgYnV0IGl0IHByb2JhYmx5IHNob3VsZCBiZSBhbnl3YXkuXHJcbiAgY29uc3QgcGFyYW1zOiBBbm9uTmV0UmVnZXhQYXJhbXMgPSB7IC4uLmFub25QYXJhbXMgfTtcclxuXHJcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb24pIHtcclxuICAgIGNvbnN0IHZhbHVlID0gYW5vblBhcmFtc1trZXldO1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSB1bmRlZmluZWQpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgLy8gVE9ETzogaWRlYWxseSwgaXQnZCBiZSBuaWNlIHRvIGFzc2lnbiBkaXJlY3RseSBiYWNrIHRvIHBhcmFtc1trZXldIGluc3RlYWQgb2ZcclxuICAgIC8vIGNoZWF0aW5nIGFuZCBhc3NpZ25pbmcgYmFjayB0aHJvdWdoIGFub25QYXJhbXMuICBUaGUgcmVhc29uIHRoaXMgaXMgbW9zdGx5XHJcbiAgICAvLyBvayBpcyB0aGF0IGlmIHBhcmFtc1trZXldIGlzIGEgc3RyaW5nIGl0IG9ubHkgZ2V0cyBhc3NpZ25lZCBhIHN0cmluZyxcclxuICAgIC8vIGFuZCBpZiBpdCBpcyBhIHN0cmluZ1tdIGl0IG9ubHkgZ2V0cyBhc3NpZ25lZCBhIHN0cmluZ1tdLCBzbyB0aGUgdHlwZSBjYW4ndFxyXG4gICAgLy8gY2hhbmdlLiAgSXQgbWlnaHQgYmUgcG9zc2libGUgdG8gYXNzaWduIHRvIHBhcmFtc1trZXldIGlmIHdlIG1ha2VcclxuICAgIC8vIHRpbWVzdGFtcCBhIHN0cmluZyB8IHN0cmluZ1tdP1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gdHJhbnNsYXRlV2l0aFJlcGxhY2VtZW50cyhcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICAncmVwbGFjZVN5bmMnLFxyXG4gICAgICAgIHJlcGxhY2VMYW5nLFxyXG4gICAgICAgIHJlcGxhY2VtZW50cyxcclxuICAgICAgKTtcclxuICAgICAgcGFyYW1zW2tleV0gPSByZXN1bHQudGV4dDtcclxuICAgICAgd2FzVHJhbnNsYXRlZCA9IHdhc1RyYW5zbGF0ZWQgJiYgcmVzdWx0Lndhc1RyYW5zbGF0ZWQ7XHJcbiAgICAgIGlmICghcmVzdWx0Lndhc1RyYW5zbGF0ZWQpXHJcbiAgICAgICAgKG1pc3NpbmdGaWVsZHMgPz89IFtdKS5wdXNoKGtleSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwYXJhbXNba2V5XSA9IHZhbHVlLm1hcCgoeCkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgeCAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB0cmFuc2xhdGVXaXRoUmVwbGFjZW1lbnRzKHgsICdyZXBsYWNlU3luYycsIHJlcGxhY2VMYW5nLCByZXBsYWNlbWVudHMpO1xyXG4gICAgICAgIHdhc1RyYW5zbGF0ZWQgPSB3YXNUcmFuc2xhdGVkICYmIHJlc3VsdC53YXNUcmFuc2xhdGVkO1xyXG4gICAgICAgIGlmICghcmVzdWx0Lndhc1RyYW5zbGF0ZWQpXHJcbiAgICAgICAgICAobWlzc2luZ0ZpZWxkcyA/Pz0gW10pLnB1c2goa2V5KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LnRleHQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgcGFyYW1zLCB3YXNUcmFuc2xhdGVkLCBtaXNzaW5nRmllbGRzIH07XHJcbn07XHJcbiIsImltcG9ydCB7IExhbmcgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuaW1wb3J0IFVzZXJDb25maWcsIHsgQ29uZmlnVmFsdWUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdXNlcl9jb25maWcnO1xyXG5pbXBvcnQgeyBCYXNlT3B0aW9ucywgUmFpZGJvc3NEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvZGF0YSc7XHJcbmltcG9ydCB7IE1hdGNoZXMgfSBmcm9tICcuLi8uLi90eXBlcy9uZXRfbWF0Y2hlcyc7XHJcbmltcG9ydCB7IFBhcnR5TWVtYmVyUGFyYW1PYmplY3RLZXlzLCBQYXJ0eVRyYWNrZXJPcHRpb25zIH0gZnJvbSAnLi4vLi4vdHlwZXMvcGFydHknO1xyXG5pbXBvcnQge1xyXG4gIExvb3NlVHJpZ2dlclNldCxcclxuICBUcmlnZ2VyQXV0b0NvbmZpZyxcclxuICBUcmlnZ2VyRmllbGQsXHJcbiAgVHJpZ2dlck91dHB1dCxcclxuICBUcmlnZ2VyU2V0QXV0b0NvbmZpZyxcclxufSBmcm9tICcuLi8uLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbi8vIFRoaXMgZmlsZSBkZWZpbmVzIHRoZSBiYXNlIG9wdGlvbnMgdGhhdCByYWlkYm9zcyBleHBlY3RzIHRvIHNlZS5cclxuXHJcbi8vIEJhY2t3YXJkcyBjb21wYXQgZm9yIHRoaXMgb2xkIHN0eWxlIG9mIG92ZXJyaWRpbmcgdHJpZ2dlcnMuXHJcbi8vIFRPRE86IHdlIHNob3VsZCBwcm9iYWJseSBkZXByZWNhdGUgYW5kIHJlbW92ZSB0aGlzLlxyXG5leHBvcnQgdHlwZSBQZXJUcmlnZ2VyT3B0aW9uID0gUGFydGlhbDx7XHJcbiAgVGV4dEFsZXJ0OiBib29sZWFuO1xyXG4gIFNvdW5kQWxlcnQ6IGJvb2xlYW47XHJcbiAgU3BlZWNoQWxlcnQ6IGJvb2xlYW47XHJcbiAgR3JvdXBTcGVlY2hBbGVydDogYm9vbGVhbjsgLy8gVE9ETzogd2Ugc2hvdWxkIHJlbW92ZSB0aGlzXHJcbiAgU291bmRPdmVycmlkZTogc3RyaW5nO1xyXG4gIFZvbHVtZU92ZXJyaWRlOiBudW1iZXI7XHJcbiAgQ29uZGl0aW9uOiBUcmlnZ2VyRmllbGQ8UmFpZGJvc3NEYXRhLCBNYXRjaGVzLCBib29sZWFuPjtcclxuICBJbmZvVGV4dDogVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXM+O1xyXG4gIEFsZXJ0VGV4dDogVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXM+O1xyXG4gIEFsYXJtVGV4dDogVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXM+O1xyXG4gIFRUU1RleHQ6IFRyaWdnZXJPdXRwdXQ8UmFpZGJvc3NEYXRhLCBNYXRjaGVzPjtcclxufT47XHJcblxyXG5leHBvcnQgdHlwZSBUaW1lbGluZUNvbmZpZyA9IFBhcnRpYWw8e1xyXG4gIElnbm9yZTogc3RyaW5nW107XHJcbiAgUmVuYW1lOiB7IFt0ZXh0OiBzdHJpbmddOiBzdHJpbmcgfTtcclxuICBBZGQ6IHsgdGltZTogbnVtYmVyOyB0ZXh0OiBzdHJpbmc7IGR1cmF0aW9uPzogbnVtYmVyIH1bXTtcclxufT47XHJcblxyXG5leHBvcnQgdHlwZSBQZXJUcmlnZ2VyQXV0b0NvbmZpZyA9IHsgW3RyaWdnZXJJZDogc3RyaW5nXTogVHJpZ2dlckF1dG9Db25maWcgfTtcclxuZXhwb3J0IHR5cGUgUGVyVHJpZ2dlclNldEF1dG9Db25maWcgPSB7IFt0cmlnZ2VyU2V0SWQ6IHN0cmluZ106IFRyaWdnZXJTZXRBdXRvQ29uZmlnIH07XHJcbmV4cG9ydCB0eXBlIFBlclRyaWdnZXJPcHRpb25zID0geyBbdHJpZ2dlcklkOiBzdHJpbmddOiBQZXJUcmlnZ2VyT3B0aW9uIH07XHJcbmV4cG9ydCB0eXBlIERpc2FibGVkVHJpZ2dlcnMgPSB7IFt0cmlnZ2VySWQ6IHN0cmluZ106IGJvb2xlYW4gfTtcclxuZXhwb3J0IHR5cGUgUGVyWm9uZVRpbWVsaW5lQ29uZmlnID0geyBbem9uZUlkOiBudW1iZXJdOiBUaW1lbGluZUNvbmZpZyB9O1xyXG5leHBvcnQgdHlwZSBUcmlnZ2VyU2V0Q29uZmlnID0geyBbdHJpZ2dlclNldElkOiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IENvbmZpZ1ZhbHVlIH0gfTtcclxuXHJcbnR5cGUgUmFpZGJvc3NOb25Db25maWdPcHRpb25zID0ge1xyXG4gIFBsYXllck5pY2tzOiB7IFtnYW1lTmFtZTogc3RyaW5nXTogc3RyaW5nIH07XHJcbiAgSW5mb1NvdW5kOiBzdHJpbmc7XHJcbiAgQWxlcnRTb3VuZDogc3RyaW5nO1xyXG4gIEFsYXJtU291bmQ6IHN0cmluZztcclxuICBMb25nU291bmQ6IHN0cmluZztcclxuICBQdWxsU291bmQ6IHN0cmluZztcclxuICBBdWRpb0FsbG93ZWQ6IGJvb2xlYW47XHJcbiAgRGlzYWJsZWRUcmlnZ2VyczogRGlzYWJsZWRUcmlnZ2VycztcclxuICBQZXJUcmlnZ2VyQXV0b0NvbmZpZzogUGVyVHJpZ2dlckF1dG9Db25maWc7XHJcbiAgUGVyVHJpZ2dlclNldEF1dG9Db25maWc6IFBlclRyaWdnZXJTZXRBdXRvQ29uZmlnO1xyXG4gIFBlclRyaWdnZXJPcHRpb25zOiBQZXJUcmlnZ2VyT3B0aW9ucztcclxuICBQZXJab25lVGltZWxpbmVDb25maWc6IFBlclpvbmVUaW1lbGluZUNvbmZpZztcclxuICBUcmlnZ2VyU2V0Q29uZmlnOiBUcmlnZ2VyU2V0Q29uZmlnO1xyXG4gIFRyaWdnZXJzOiBMb29zZVRyaWdnZXJTZXRbXTtcclxuICBQbGF5ZXJOYW1lT3ZlcnJpZGU/OiBzdHJpbmc7XHJcbiAgSXNSZW1vdGVSYWlkYm9zczogYm9vbGVhbjtcclxuICAvLyBUcmFuc2Zvcm1zIHRleHQgYmVmb3JlIHBhc3NpbmcgaXQgdG8gVFRTLlxyXG4gIFRyYW5zZm9ybVR0czogKHRleHQ6IHN0cmluZykgPT4gc3RyaW5nO1xyXG59O1xyXG5cclxuLy8gVGhlc2Ugb3B0aW9ucyBhcmUgb25lcyB0aGF0IGFyZSBub3QgYXV0by1kZWZpbmVkIGJ5IHJhaWRib3NzX2NvbmZpZy5qcy5cclxuY29uc3QgZGVmYXVsdFJhaWRib3NzTm9uQ29uZmlnT3B0aW9uczogUmFpZGJvc3NOb25Db25maWdPcHRpb25zID0ge1xyXG4gIFBsYXllck5pY2tzOiB7fSxcclxuXHJcbiAgSW5mb1NvdW5kOiAnLi4vLi4vcmVzb3VyY2VzL3NvdW5kcy9mcmVlc291bmQvcGVyY3Vzc2lvbl9oaXQud2VibScsXHJcbiAgQWxlcnRTb3VuZDogJy4uLy4uL3Jlc291cmNlcy9zb3VuZHMvQmlnV2lncy9BbGVydC53ZWJtJyxcclxuICBBbGFybVNvdW5kOiAnLi4vLi4vcmVzb3VyY2VzL3NvdW5kcy9CaWdXaWdzL0FsYXJtLndlYm0nLFxyXG4gIExvbmdTb3VuZDogJy4uLy4uL3Jlc291cmNlcy9zb3VuZHMvQmlnV2lncy9Mb25nLndlYm0nLFxyXG4gIFB1bGxTb3VuZDogJy4uLy4uL3Jlc291cmNlcy9zb3VuZHMvZnJlZXNvdW5kL3NvbmFyLndlYm0nLFxyXG5cclxuICBBdWRpb0FsbG93ZWQ6IHRydWUsXHJcblxyXG4gIERpc2FibGVkVHJpZ2dlcnM6IHt9LFxyXG5cclxuICBQZXJUcmlnZ2VyQXV0b0NvbmZpZzoge30sXHJcbiAgUGVyVHJpZ2dlclNldEF1dG9Db25maWc6IHt9LFxyXG4gIFBlclRyaWdnZXJPcHRpb25zOiB7fSxcclxuICBQZXJab25lVGltZWxpbmVDb25maWc6IHt9LFxyXG4gIFRyaWdnZXJTZXRDb25maWc6IHt9LFxyXG5cclxuICBUcmlnZ2VyczogW10sXHJcblxyXG4gIElzUmVtb3RlUmFpZGJvc3M6IGZhbHNlLFxyXG5cclxuICBUcmFuc2Zvcm1UdHM6ICh0KSA9PiB0LFxyXG59O1xyXG5cclxuLy8gVE9ETzogZmlndXJlIG91dCBob3cgdG8gZ2V0IHRoaXMgdHlwZSBmcm9tIHJhaWRib3NzX2NvbmZpZz8/XHJcbi8vIFRoZXNlIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4gYW5kIGFyZSBqdXN0IGhlcmUgZm9yIHR5cGluZy5cclxuY29uc3QgZGVmYXVsdFJhaWRib3NzQ29uZmlnT3B0aW9ucyA9IHtcclxuICBEZWZhdWx0QWxlcnRPdXRwdXQ6ICd0ZXh0QW5kU291bmQnLFxyXG4gIEFsZXJ0c0xhbmd1YWdlOiB1bmRlZmluZWQgYXMgKExhbmcgfCB1bmRlZmluZWQpLFxyXG4gIFRpbWVsaW5lTGFuZ3VhZ2U6IHVuZGVmaW5lZCBhcyAoTGFuZyB8IHVuZGVmaW5lZCksXHJcbiAgVGltZWxpbmVFbmFibGVkOiB0cnVlLFxyXG4gIEFsZXJ0c0VuYWJsZWQ6IHRydWUsXHJcbiAgRGVmYXVsdFBsYXllckxhYmVsOiAnbmljaycgYXMgUGFydHlNZW1iZXJQYXJhbU9iamVjdEtleXMsXHJcbiAgU2hvd1RpbWVyQmFyc0F0U2Vjb25kczogMzAsXHJcbiAgS2VlcEV4cGlyZWRUaW1lckJhcnNGb3JTZWNvbmRzOiAwLjcsXHJcbiAgQmFyRXhwaXJlc1Nvb25TZWNvbmRzOiA2LFxyXG4gIE1heE51bWJlck9mVGltZXJCYXJzOiA2LFxyXG4gIFJldmVyc2VUaW1lbGluZTogZmFsc2UsXHJcbiAgRGlzcGxheUFsYXJtVGV4dEZvclNlY29uZHM6IDMsXHJcbiAgRGlzcGxheUFsZXJ0VGV4dEZvclNlY29uZHM6IDMsXHJcbiAgRGlzcGxheUluZm9UZXh0Rm9yU2Vjb25kczogMyxcclxuICBBbGFybVNvdW5kVm9sdW1lOiAxLFxyXG4gIEFsZXJ0U291bmRWb2x1bWU6IDEsXHJcbiAgSW5mb1NvdW5kVm9sdW1lOiAxLFxyXG4gIExvbmdTb3VuZFZvbHVtZTogMSxcclxuICBQdWxsU291bmRWb2x1bWU6IDEsXHJcbiAgUnVtYmxlRW5hYmxlZDogZmFsc2UsXHJcbiAgSW5mb1J1bWJsZUR1cmF0aW9uOiA0MDAsXHJcbiAgSW5mb1J1bWJsZVdlYWs6IDAuNSxcclxuICBJbmZvUnVtYmxlU3Ryb25nOiAwLFxyXG4gIEFsZXJ0UnVtYmxlRHVyYXRpb246IDUwMCxcclxuICBBbGVydFJ1bWJsZVdlYWs6IDAsXHJcbiAgQWxlcnRSdW1ibGVTdHJvbmc6IDAuNSxcclxuICBBbGFybVJ1bWJsZUR1cmF0aW9uOiA3NTAsXHJcbiAgQWxhcm1SdW1ibGVXZWFrOiAwLjc1LFxyXG4gIEFsYXJtUnVtYmxlU3Ryb25nOiAwLjc1LFxyXG59O1xyXG50eXBlIFJhaWRib3NzQ29uZmlnT3B0aW9ucyA9IHR5cGVvZiBkZWZhdWx0UmFpZGJvc3NDb25maWdPcHRpb25zO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSYWlkYm9zc09wdGlvbnNcclxuICBleHRlbmRzIEJhc2VPcHRpb25zLCBSYWlkYm9zc05vbkNvbmZpZ09wdGlvbnMsIFJhaWRib3NzQ29uZmlnT3B0aW9ucywgUGFydHlUcmFja2VyT3B0aW9ucyB7fVxyXG5cclxuLy8gU2VlIHVzZXIvcmFpZGJvc3MtZXhhbXBsZS5qcyBmb3IgZG9jdW1lbnRhdGlvbi5cclxuY29uc3QgT3B0aW9uczogUmFpZGJvc3NPcHRpb25zID0ge1xyXG4gIC4uLlVzZXJDb25maWcuZ2V0RGVmYXVsdEJhc2VPcHRpb25zKCksXHJcbiAgLi4uZGVmYXVsdFJhaWRib3NzTm9uQ29uZmlnT3B0aW9ucyxcclxuICAuLi5kZWZhdWx0UmFpZGJvc3NDb25maWdPcHRpb25zLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgT3B0aW9ucztcclxuIiwiaW1wb3J0IEpTT041IGZyb20gJ2pzb241JztcclxuXHJcbmltcG9ydCB7IExhbmcgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuaW1wb3J0IGxvZ0RlZmluaXRpb25zLCB7IExvZ0RlZmluaXRpb25UeXBlcyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9uZXRsb2dfZGVmcyc7XHJcbmltcG9ydCB7IGJ1aWxkTmV0UmVnZXhGb3JUcmlnZ2VyIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL25ldHJlZ2V4ZXMnO1xyXG5pbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbm90X3JlYWNoZWQnO1xyXG5pbXBvcnQgUmVnZXhlcyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvcmVnZXhlcyc7XHJcbmltcG9ydCB7XHJcbiAgdHJhbnNsYXRlUmVnZXgsXHJcbiAgdHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtQW5vbixcclxuICB0cmFuc2xhdGVUZXh0LFxyXG59IGZyb20gJy4uLy4uL3Jlc291cmNlcy90cmFuc2xhdGlvbnMnO1xyXG5pbXBvcnQgeyBOZXRQYXJhbXMgfSBmcm9tICcuLi8uLi90eXBlcy9uZXRfcHJvcHMnO1xyXG5pbXBvcnQgeyBMb29zZVRpbWVsaW5lVHJpZ2dlciwgVHJpZ2dlckF1dG9Db25maWcgfSBmcm9tICcuLi8uLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbmltcG9ydCBkZWZhdWx0T3B0aW9ucywgeyBSYWlkYm9zc09wdGlvbnMsIFRpbWVsaW5lQ29uZmlnIH0gZnJvbSAnLi9yYWlkYm9zc19vcHRpb25zJztcclxuXHJcbmNvbnN0IGlzTG9nRGVmaW5pdGlvblR5cGVzID0gKHR5cGU6IHN0cmluZyk6IHR5cGUgaXMgTG9nRGVmaW5pdGlvblR5cGVzID0+IHtcclxuICByZXR1cm4gdHlwZSBpbiBsb2dEZWZpbml0aW9ucztcclxufTtcclxuXHJcbmNvbnN0IGlzU3RyaW5nQXJyYXkgPSAodmFsdWU6IHVua25vd25bXSk6IHZhbHVlIGlzIHN0cmluZ1tdID0+IHtcclxuICByZXR1cm4gdmFsdWUuZmluZCgodikgPT4gdHlwZW9mIHYgIT09ICdzdHJpbmcnKSA9PT0gdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuY29uc3QgaXNTdHJpbmdPclN0cmluZ0FycmF5ID0gKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgc3RyaW5nIHwgc3RyaW5nW10gPT4ge1xyXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgaWYgKGlzU3RyaW5nQXJyYXkodmFsdWUpKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBUaW1lbGluZU5ldFBhcmFtcyA9IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW10gfTtcclxuY29uc3QgaXNUaW1lbGluZU5ldFBhcmFtcyA9ICh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFRpbWVsaW5lTmV0UGFyYW1zID0+IHtcclxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSlcclxuICAgIHJldHVybiBmYWxzZTtcclxuICBjb25zdCBvYmogPSB2YWx1ZSBhcyB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfTtcclxuICBmb3IgKGNvbnN0IGlubmVyVmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhvYmopKSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nT3JTdHJpbmdBcnJheShpbm5lclZhbHVlKSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmNvbnN0IGlzVmFsaWROZXRQYXJhbXMgPSA8VCBleHRlbmRzIExvZ0RlZmluaXRpb25UeXBlcz4oXHJcbiAgdHlwZTogVCxcclxuICBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LFxyXG4pOiBwYXJhbXMgaXMgTmV0UGFyYW1zW1RdID0+IHtcclxuICBmb3IgKGNvbnN0IGtleSBpbiBwYXJhbXMpIHtcclxuICAgIC8vIE1ha2Ugc3VyZSBhbGwga2V5cyBhcmUgcHJlc2VudCBvbiBvdXIgZGVmaW5pdGlvbiB0eXBlXHJcbiAgICBpZiAoIShrZXkgaW4gbG9nRGVmaW5pdGlvbnNbdHlwZV0uZmllbGRzKSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gTWFrZSBzdXJlIG91ciB2YWx1ZSBpcyBlaXRoZXIgYSBzdHJpbmcvaW50IG9yIGFuIGFycmF5IG9mIHN0cmluZ3MvaW50c1xyXG4gICAgaWYgKCFpc1N0cmluZ09yU3RyaW5nQXJyYXkocGFyYW1zW2tleV0pKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyBUaGVzZSBzaG91bGQgbmV2ZXIgYmUgc3BlY2lmaWVkIG9uIGEgdGltZWxpbmUgbmV0IHJlZ2V4LlxyXG4gICAgaWYgKGtleSA9PT0gJ2NhcHR1cmUnIHx8IGtleSA9PT0gJ3RpbWVzdGFtcCcpXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5jb25zdCBpc09iamVjdCA9ICh4OiB1bmtub3duKTogeCBpcyB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSA9PiB7XHJcbiAgLy8gSmF2YVNjcmlwdCBjb25zaWRlcnMgW10gdG8gYmUgYW4gb2JqZWN0LCBzbyBjaGVjayBmb3IgdGhhdCBleHBsaWNpdGx5LlxyXG4gIHJldHVybiB4IGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHgpO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVGltZWxpbmVSZXBsYWNlbWVudCA9IHtcclxuICBsb2NhbGU6IExhbmc7XHJcbiAgbWlzc2luZ1RyYW5zbGF0aW9ucz86IGJvb2xlYW47XHJcbiAgcmVwbGFjZVN5bmM/OiB7IFtyZWdleFN0cmluZzogc3RyaW5nXTogc3RyaW5nIH07XHJcbiAgcmVwbGFjZVRleHQ/OiB7IFt0aW1lbGluZVRleHQ6IHN0cmluZ106IHN0cmluZyB9O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgVGltZWxpbmVTdHlsZSA9IHtcclxuICBzdHlsZTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcclxuICByZWdleDogUmVnRXhwO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRXZlbnQgPSB7XHJcbiAgaWQ6IHN0cmluZztcclxuICB0aW1lOiBudW1iZXI7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBhY3RpdmVUaW1lPzogbnVtYmVyO1xyXG4gIGxpbmVOdW1iZXI/OiBudW1iZXI7XHJcbiAgZHVyYXRpb24/OiBudW1iZXI7XHJcbiAgc29ydEtleTogbnVtYmVyO1xyXG4gIGlzRHVyPzogYm9vbGVhbjtcclxuICBzdHlsZT86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH07XHJcbiAgc3luYz86IFN5bmM7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFcnJvciA9IHtcclxuICBsaW5lTnVtYmVyPzogbnVtYmVyO1xyXG4gIGxpbmU/OiBzdHJpbmc7XHJcbiAgZXJyb3I6IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFN5bmMgPSB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICBvcmlnSW5wdXQ6IHN0cmluZyB8IFRpbWVsaW5lTmV0UGFyYW1zO1xyXG4gIHJlZ2V4VHlwZTogJ3BhcnNlZCcgfCAnbmV0JztcclxuICByZWdleDogUmVnRXhwO1xyXG4gIHN0YXJ0OiBudW1iZXI7XHJcbiAgZW5kOiBudW1iZXI7XHJcbiAgdGltZTogbnVtYmVyO1xyXG4gIGxpbmVOdW1iZXI6IG51bWJlcjtcclxuICBldmVudDogRXZlbnQ7XHJcbiAganVtcD86IG51bWJlcjtcclxuICAvLyBUT0RPOiBjb3VsZCBjb25zaWRlciBcIm1heWJlXCIganVtcHMgaGVyZSB0byBzYXkgXCJBYmlsaXR5P1wiLlxyXG4gIC8vIFRPRE86IGFsc28gaXQnZCBiZSBuaWNlIHRvIGJlIGFibGUgdG8gYGZvcmNlanVtcGAgd2l0aCBvdXQgYSBgc3luYyAvL2BcclxuICBqdW1wVHlwZT86ICdmb3JjZScgfCAnbm9ybWFsJztcclxufTtcclxuXHJcbnR5cGUgUGFyc2VkUG9wdXBUZXh0ID0ge1xyXG4gIHR5cGU6ICdpbmZvJyB8ICdhbGVydCcgfCAnYWxhcm0nIHwgJ3R0cyc7XHJcbiAgc2Vjb25kc0JlZm9yZT86IG51bWJlcjtcclxuICB0ZXh0OiBzdHJpbmc7XHJcbn07XHJcblxyXG50eXBlIFBhcnNlZFRyaWdnZXJUZXh0ID0ge1xyXG4gIHR5cGU6ICd0cmlnZ2VyJztcclxuICBzZWNvbmRzQmVmb3JlPzogbnVtYmVyO1xyXG4gIHRleHQ/OiBzdHJpbmc7XHJcbiAgbWF0Y2hlczogUmVnRXhwRXhlY0FycmF5IHwgbnVsbDtcclxuICB0cmlnZ2VyOiBMb29zZVRpbWVsaW5lVHJpZ2dlcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFBhcnNlZFRleHQgPSBQYXJzZWRQb3B1cFRleHQgfCBQYXJzZWRUcmlnZ2VyVGV4dDtcclxuXHJcbmV4cG9ydCB0eXBlIFRleHQgPSBQYXJzZWRUZXh0ICYgeyB0aW1lOiBudW1iZXIgfTtcclxuXHJcbmNvbnN0IHJlZ2V4ZXMgPSB7XHJcbiAgY29tbWVudDogL15cXHMqIy8sXHJcbiAgY29tbWVudExpbmU6IC8jLiokLyxcclxuICBkdXJhdGlvbkNvbW1hbmQ6IC8oPzpbXiNdKj9cXHMpPyg/PHRleHQ+ZHVyYXRpb25cXHMrKD88c2Vjb25kcz5bMC05XSsoPzpcXC5bMC05XSspPykpKFxccy4qKT8kLyxcclxuICBpZ25vcmU6IC9eaGlkZWFsbFxccytcXFwiKD88aWQ+W15cIl0rKVxcXCIoPzpcXHMqIy4qKT8kLyxcclxuICBqdW1wQ29tbWFuZDpcclxuICAgIC8oPzpbXiNdKj9cXHMpPyg/PHRleHQ+KD88Y29tbWFuZD4oPzpmb3JjZXwpanVtcClcXHMrKD86XCIoPzxsYWJlbD5bXlwiXSopXCJ8KD88c2Vjb25kcz5bMC05XSsoPzpcXC5bMC05XSspPykpKSg/Olxccy4qKT8kLyxcclxuICBsYWJlbDogL14oPzx0aW1lPlswLTldKyg/OlxcLlswLTldKyk/KVxccysoPzx0ZXh0PmxhYmVsXFxzK1wiKD88bGFiZWw+W15cIl0qKVwiKVxccyokLyxcclxuICBsaW5lOiAvXig/PHRleHQ+KD88dGltZT5bMC05XSsoPzpcXC5bMC05XSspPylcXHMrXCIoPzxuYW1lPi4qPylcIikoXFxzKyguKikpPy8sXHJcbiAgcG9wdXBUZXh0OlxyXG4gICAgL14oPzx0eXBlPmluZm98YWxlcnR8YWxhcm0pdGV4dFxccytcXFwiKD88aWQ+W15cIl0rKVxcXCJcXHMrYmVmb3JlXFxzKyg/PGJlZm9yZVNlY29uZHM+LT9bMC05XSsoPzpcXC5bMC05XSspPykoPzpcXHMrXFxcIig/PHRleHQ+W15cIl0rKVxcXCIpPyQvLFxyXG4gIHNvdW5kQWxlcnQ6IC9eZGVmaW5lXFxzK3NvdW5kYWxlcnRcXHMrXCJbXlwiXSpcIlxccytcIlteXCJdKlwiJC8sXHJcbiAgc3BlYWtlcjpcclxuICAgIC9kZWZpbmUgc3BlYWtlciBcIlteXCJdKlwiKFxccytcIlteXCJdKlwiKT9cXHMrKC0/WzAtOV0rKD86XFwuWzAtOV0rKT8pXFxzKygtP1swLTldKyg/OlxcLlswLTldKyk/KS8sXHJcbiAgc3luY1JlZ2V4Q29tbWFuZDogLyg/OlteI10qP1xccyk/KD88dGV4dD5zeW5jXFxzKlxcLyg/PHJlZ2V4Pi4qKVxcLykoPzxhcmdzPlxccy4qKT8kLyxcclxuICBzeW5jTmV0UmVnZXg6IG5ldyBSZWdFeHAoXHJcbiAgICBgKD86W14jXSo/XFxcXHMpPyg/PG5ldFJlZ2V4VHlwZT4ke1xyXG4gICAgICBPYmplY3Qua2V5cyhsb2dEZWZpbml0aW9ucykuam9pbignfCcpXHJcbiAgICB9KVxcXFxzKig/PG5ldFJlZ2V4PlxcXFx7LipcXFxcfSkoPzxhcmdzPlxcXFxzLiopPyRgLFxyXG4gICksXHJcbiAgdHRzOlxyXG4gICAgL15hbGVydGFsbFxccytcIig/PGlkPlteXCJdKilcIlxccytiZWZvcmVcXHMrKD88YmVmb3JlU2Vjb25kcz4tP1swLTldKyg/OlxcLlswLTldKyk/KVxccysoPzxjb21tYW5kPnNvdW5kfHNwZWFrXFxzK1wiW15cIl0qXCIpXFxzK1wiKD88dGV4dD5bXlwiXSopXCIkLyxcclxuICB3aW5kb3dDb21tYW5kOlxyXG4gICAgLyg/OlteI10qP1xccyk/KD88dGV4dD53aW5kb3dcXHMrKD86KD88c3RhcnQ+WzAtOV0rKD86XFwuWzAtOV0rKT8pLCk/KD88ZW5kPlswLTldKyg/OlxcLlswLTldKyk/KSkoPzpcXHMuKik/JC8sXHJcbn07XHJcblxyXG4vLyBUaGlzIGNsYXNzIHJlYWRzIHRoZSBmb3JtYXQgb2YgQUNUIFRpbWVsaW5lIHBsdWdpbiwgZGVzY3JpYmVkIGluXHJcbi8vIGRvY3MvVGltZWxpbmVHdWlkZS5tZFxyXG5leHBvcnQgY2xhc3MgVGltZWxpbmVQYXJzZXIge1xyXG4gIHByb3RlY3RlZCBvcHRpb25zOiBSYWlkYm9zc09wdGlvbnM7XHJcbiAgcHJvdGVjdGVkIHBlclRyaWdnZXJBdXRvQ29uZmlnOiB7IFt0cmlnZ2VySWQ6IHN0cmluZ106IFRyaWdnZXJBdXRvQ29uZmlnIH07XHJcbiAgcHJvdGVjdGVkIHJlcGxhY2VtZW50czogVGltZWxpbmVSZXBsYWNlbWVudFtdO1xyXG4gIHByaXZhdGUgdGltZWxpbmVDb25maWc6IFRpbWVsaW5lQ29uZmlnO1xyXG5cclxuICAvLyBBIHNldCBvZiBuYW1lcyB3aGljaCB3aWxsIG5vdCBiZSBub3RpZmllZCBhYm91dC5cclxuICBwdWJsaWMgaWdub3JlczogeyBbaWdub3JlSWQ6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xyXG4gIC8vIFNvcnRlZCBieSBldmVudCBvY2N1cnJlbmNlIHRpbWUuXHJcbiAgcHVibGljIGV2ZW50czogRXZlbnRbXSA9IFtdO1xyXG4gIC8vIFNvcnRlZCBieSBldmVudCBvY2N1cnJlbmNlIHRpbWUuXHJcbiAgcHVibGljIHRleHRzOiBUZXh0W10gPSBbXTtcclxuICAvLyBTb3J0ZWQgYnkgc3luYy5zdGFydCB0aW1lLlxyXG4gIHB1YmxpYyBzeW5jU3RhcnRzOiBTeW5jW10gPSBbXTtcclxuICAvLyBTb3J0ZWQgYnkgc3luYy5lbmQgdGltZS5cclxuICBwdWJsaWMgc3luY0VuZHM6IFN5bmNbXSA9IFtdO1xyXG4gIC8vIFNvcnRlZCBieSBldmVudCBvY2N1cnJlbmNlIHRpbWUuXHJcbiAgcHVibGljIGZvcmNlSnVtcHM6IFN5bmNbXSA9IFtdO1xyXG4gIC8vIFNvcnRlZCBieSBsaW5lLlxyXG4gIHB1YmxpYyBlcnJvcnM6IEVycm9yW10gPSBbXTtcclxuICAvLyBNYXAgb2YgZW5jb3VudGVyZWQgbGFiZWwgbmFtZXMgdG8gdGhlaXIgdGltZS5cclxuICBwcml2YXRlIGxhYmVsVG9UaW1lOiB7IFtuYW1lOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xyXG4gIC8vIE1hcCBvZiBlbmNvdW50ZXJlZCBzeW5jcyB0byB0aGUgbGFiZWwgdGhleSBhcmUganVtcGluZyB0by5cclxuICBwcml2YXRlIGxhYmVsVG9TeW5jOiB7IFtuYW1lOiBzdHJpbmddOiBTeW5jW10gfSA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHRleHQ6IHN0cmluZyxcclxuICAgIHJlcGxhY2VtZW50czogVGltZWxpbmVSZXBsYWNlbWVudFtdLFxyXG4gICAgdHJpZ2dlcnM6IExvb3NlVGltZWxpbmVUcmlnZ2VyW10sXHJcbiAgICBzdHlsZXM/OiBUaW1lbGluZVN0eWxlW10sXHJcbiAgICBvcHRpb25zPzogUmFpZGJvc3NPcHRpb25zLFxyXG4gICAgem9uZUlkPzogbnVtYmVyLFxyXG4gICkge1xyXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyBkZWZhdWx0T3B0aW9ucztcclxuICAgIHRoaXMucGVyVHJpZ2dlckF1dG9Db25maWcgPSB0aGlzLm9wdGlvbnMuUGVyVHJpZ2dlckF1dG9Db25maWc7XHJcbiAgICB0aGlzLnJlcGxhY2VtZW50cyA9IHJlcGxhY2VtZW50cztcclxuXHJcbiAgICB0aGlzLnRpbWVsaW5lQ29uZmlnID0gdHlwZW9mIHpvbmVJZCA9PT0gJ251bWJlcidcclxuICAgICAgPyB0aGlzLm9wdGlvbnMuUGVyWm9uZVRpbWVsaW5lQ29uZmlnW3pvbmVJZF0gPz8ge31cclxuICAgICAgOiB7fTtcclxuICAgIGZvciAoY29uc3QgdGV4dCBvZiB0aGlzLnRpbWVsaW5lQ29uZmlnLklnbm9yZSA/PyBbXSlcclxuICAgICAgdGhpcy5pZ25vcmVzW3RleHRdID0gdHJ1ZTtcclxuXHJcbiAgICBsZXQgdW5pcXVlSWQgPSAwO1xyXG4gICAgZm9yIChjb25zdCBldmVudCBvZiB0aGlzLnRpbWVsaW5lQ29uZmlnLkFkZCA/PyBbXSkge1xyXG4gICAgICB0aGlzLmV2ZW50cy5wdXNoKHtcclxuICAgICAgICBpZDogYCR7Kyt1bmlxdWVJZH1gLFxyXG4gICAgICAgIHRpbWU6IGV2ZW50LnRpbWUsXHJcbiAgICAgICAgbmFtZTogZXZlbnQudGV4dCxcclxuICAgICAgICB0ZXh0OiBldmVudC50ZXh0LFxyXG4gICAgICAgIGR1cmF0aW9uOiBldmVudC5kdXJhdGlvbixcclxuICAgICAgICBhY3RpdmVUaW1lOiAwLFxyXG4gICAgICAgIHNvcnRLZXk6IDAsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucGFyc2UodGV4dCwgdHJpZ2dlcnMsIHN0eWxlcyA/PyBbXSwgdW5pcXVlSWQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwYXJzZShcclxuICAgIHRleHQ6IHN0cmluZyxcclxuICAgIHRyaWdnZXJzOiBMb29zZVRpbWVsaW5lVHJpZ2dlcltdLFxyXG4gICAgc3R5bGVzOiBUaW1lbGluZVN0eWxlW10sXHJcbiAgICBpbml0aWFsSWQ6IG51bWJlcixcclxuICApOiB2b2lkIHtcclxuICAgIGxldCB1bmlxdWVpZCA9IGluaXRpYWxJZDtcclxuICAgIGNvbnN0IHRleHRzOiB7IFtpZDogc3RyaW5nXTogUGFyc2VkVGV4dFtdIH0gPSB7fTtcclxuXHJcbiAgICAvLyBNYWtlIGFsbCByZWdleGVzIGNhc2UgaW5zZW5zaXRpdmUsIGFuZCBwYXJzZSBhbnkgc3BlY2lhbCBcXHl7fSBncm91cHMuXHJcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdHJpZ2dlcnMgPz8gW10pIHtcclxuICAgICAgaWYgKHRyaWdnZXIucmVnZXgpXHJcbiAgICAgICAgdHJpZ2dlci5yZWdleCA9IFJlZ2V4ZXMucGFyc2UodHJpZ2dlci5yZWdleCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcclxuICAgIGxldCBsaW5lTnVtYmVyID0gMDtcclxuICAgIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgICAgKytsaW5lTnVtYmVyO1xyXG4gICAgICBsaW5lID0gbGluZS50cmltKCk7XHJcbiAgICAgIC8vIERyb3AgY29tbWVudHMgYW5kIGVtcHR5IGxpbmVzLlxyXG4gICAgICBpZiAoIWxpbmUgfHwgcmVnZXhlcy5jb21tZW50LnRlc3QobGluZSkpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsTGluZSA9IGxpbmU7XHJcblxyXG4gICAgICBsZXQgbWF0Y2ggPSByZWdleGVzLmlnbm9yZS5leGVjKGxpbmUpO1xyXG4gICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbJ2dyb3VwcyddKSB7XHJcbiAgICAgICAgY29uc3QgaWdub3JlID0gbWF0Y2hbJ2dyb3VwcyddO1xyXG4gICAgICAgIGlmIChpZ25vcmUuaWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHRoaXMuaWdub3Jlc1tpZ25vcmUuaWRdID0gdHJ1ZTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWF0Y2ggPSByZWdleGVzLnR0cy5leGVjKGxpbmUpO1xyXG4gICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbJ2dyb3VwcyddKSB7XHJcbiAgICAgICAgY29uc3QgdHRzID0gbWF0Y2hbJ2dyb3VwcyddO1xyXG4gICAgICAgIGlmICh0dHMuaWQgPT09IHVuZGVmaW5lZCB8fCB0dHMuYmVmb3JlU2Vjb25kcyA9PT0gdW5kZWZpbmVkIHx8IHR0cy5jb21tYW5kID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICAgICAgLy8gVE9ETzogU3VwcG9ydCBhbGVydCBzb3VuZHM/XHJcbiAgICAgICAgaWYgKHR0cy5jb21tYW5kID09PSAnc291bmQnKVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgdHRzSXRlbXMgPSB0ZXh0c1t0dHMuaWRdIHx8IFtdO1xyXG4gICAgICAgIHRleHRzW3R0cy5pZF0gPSB0dHNJdGVtcztcclxuICAgICAgICB0dHNJdGVtcy5wdXNoKHtcclxuICAgICAgICAgIHR5cGU6ICd0dHMnLFxyXG4gICAgICAgICAgc2Vjb25kc0JlZm9yZTogcGFyc2VGbG9hdCh0dHMuYmVmb3JlU2Vjb25kcyksXHJcbiAgICAgICAgICB0ZXh0OiB0dHMudGV4dCA/PyB0dHMuaWQsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgbWF0Y2ggPSByZWdleGVzLnNvdW5kQWxlcnQuZXhlYyhsaW5lKTtcclxuICAgICAgaWYgKG1hdGNoKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMuc3BlYWtlci5leGVjKGxpbmUpO1xyXG4gICAgICBpZiAobWF0Y2gpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMucG9wdXBUZXh0LmV4ZWMobGluZSk7XHJcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsnZ3JvdXBzJ10pIHtcclxuICAgICAgICBjb25zdCBwb3B1cFRleHQgPSBtYXRjaFsnZ3JvdXBzJ107XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgcG9wdXBUZXh0LnR5cGUgPT09IHVuZGVmaW5lZCB8fCBwb3B1cFRleHQuaWQgPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgcG9wdXBUZXh0LmJlZm9yZVNlY29uZHMgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgIClcclxuICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgICBjb25zdCBwb3B1cFRleHRJdGVtcyA9IHRleHRzW3BvcHVwVGV4dC5pZF0gfHwgW107XHJcbiAgICAgICAgdGV4dHNbcG9wdXBUZXh0LmlkXSA9IHBvcHVwVGV4dEl0ZW1zO1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBwb3B1cFRleHQudHlwZTtcclxuICAgICAgICBpZiAodHlwZSAhPT0gJ2luZm8nICYmIHR5cGUgIT09ICdhbGVydCcgJiYgdHlwZSAhPT0gJ2FsYXJtJylcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIHBvcHVwVGV4dEl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgIHNlY29uZHNCZWZvcmU6IHBhcnNlRmxvYXQocG9wdXBUZXh0LmJlZm9yZVNlY29uZHMpLFxyXG4gICAgICAgICAgdGV4dDogcG9wdXBUZXh0LnRleHQgPz8gcG9wdXBUZXh0LmlkLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMubGFiZWwuZXhlYyhsaW5lKTtcclxuICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWydncm91cHMnXSkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZExpbmUgPSBtYXRjaFsnZ3JvdXBzJ107XHJcbiAgICAgICAgaWYgKHBhcnNlZExpbmUudGltZSA9PT0gdW5kZWZpbmVkIHx8IHBhcnNlZExpbmUubGFiZWwgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgICBjb25zdCBzZWNvbmRzID0gcGFyc2VGbG9hdChwYXJzZWRMaW5lLnRpbWUpO1xyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gcGFyc2VkTGluZS5sYWJlbDtcclxuXHJcbiAgICAgICAgY29uc3QgcHJldlRpbWUgPSB0aGlzLmxhYmVsVG9UaW1lW2xhYmVsXTtcclxuICAgICAgICBpZiAocHJldlRpbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgY29uc3QgdGV4dCA9IGBEdXBsaWNhdGUgJHtsYWJlbH0gbmFtZSBmb3VuZCBmb3IgdGltZSAke3ByZXZUaW1lfSBhbmQgJHtzZWNvbmRzfWA7XHJcbiAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKHtcclxuICAgICAgICAgICAgZXJyb3I6IHRleHQsXHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sYWJlbFRvVGltZVtsYWJlbF0gPSBzZWNvbmRzO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBtYXRjaCA9IHJlZ2V4ZXMubGluZS5leGVjKGxpbmUpO1xyXG4gICAgICBpZiAoIShtYXRjaCAmJiBtYXRjaFsnZ3JvdXBzJ10pKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaCh7XHJcbiAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxyXG4gICAgICAgICAgbGluZTogb3JpZ2luYWxMaW5lLFxyXG4gICAgICAgICAgZXJyb3I6ICdJbnZhbGlkIGZvcm1hdCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcGFyc2VkTGluZSA9IG1hdGNoWydncm91cHMnXTtcclxuICAgICAgLy8gVGVjaG5pY2FsbHkgdGhlIG5hbWUgY2FuIGJlIGVtcHR5XHJcbiAgICAgIGlmIChcclxuICAgICAgICBwYXJzZWRMaW5lLnRleHQgPT09IHVuZGVmaW5lZCB8fCBwYXJzZWRMaW5lLnRpbWUgPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgIHBhcnNlZExpbmUubmFtZSA9PT0gdW5kZWZpbmVkXHJcbiAgICAgIClcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcbiAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UocGFyc2VkTGluZS50ZXh0LCAnJykudHJpbSgpO1xyXG4gICAgICAvLyBUaGVyZSBjYW4gYmUgIyBpbiB0aGUgYWJpbGl0eSBuYW1lLCBidXQgcHJvYmFibHkgbm90IGluIHRoZSByZWdleC5cclxuICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShyZWdleGVzLmNvbW1lbnRMaW5lLCAnJykudHJpbSgpO1xyXG5cclxuICAgICAgY29uc3Qgc2Vjb25kcyA9IHBhcnNlRmxvYXQocGFyc2VkTGluZS50aW1lKTtcclxuICAgICAgY29uc3QgZTogRXZlbnQgPSB7XHJcbiAgICAgICAgaWQ6IGAkeysrdW5pcXVlaWR9YCxcclxuICAgICAgICB0aW1lOiBzZWNvbmRzLFxyXG4gICAgICAgIC8vIFRoZSBvcmlnaW5hbCBhYmlsaXR5IG5hbWUgaW4gdGhlIHRpbWVsaW5lLiAgVXNlZCBmb3IgaGlkZWFsbCwgaW5mb3RleHQsIGV0Yy5cclxuICAgICAgICBuYW1lOiBwYXJzZWRMaW5lLm5hbWUsXHJcbiAgICAgICAgLy8gVGhlIHRleHQgdG8gZGlzcGxheS4gIE5vdCB1c2VkIGZvciBhbnkgbG9naWMuXHJcbiAgICAgICAgdGV4dDogdGhpcy5HZXRSZXBsYWNlZFRleHQocGFyc2VkTGluZS5uYW1lKSxcclxuICAgICAgICBhY3RpdmVUaW1lOiAwLFxyXG4gICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXHJcbiAgICAgICAgc29ydEtleTogMCxcclxuICAgICAgfTtcclxuICAgICAgaWYgKGxpbmUpIHtcclxuICAgICAgICBsaW5lID0gdGhpcy5tYXRjaER1cmF0aW9uQ29tbWFuZChsaW5lLCBlKTtcclxuXHJcbiAgICAgICAgbGluZSA9IHRoaXMubWF0Y2hTeW5jUmVnZXhDb21tYW5kKGxpbmUsIHVuaXF1ZWlkLCBzZWNvbmRzLCBsaW5lTnVtYmVyLCBlKTtcclxuXHJcbiAgICAgICAgbGluZSA9IHRoaXMubWF0Y2hTeW5jTmV0UmVnZXgobGluZSwgbGluZU51bWJlciwgb3JpZ2luYWxMaW5lLCB1bmlxdWVpZCwgc2Vjb25kcywgZSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gSWYgdGhlcmUncyB0ZXh0IGxlZnQgdGhhdCBpc24ndCBhIGNvbW1lbnQgdGhlbiB3ZSBkaWRuJ3QgcGFyc2UgdGhhdCB0ZXh0IHNvIHJlcG9ydCBpdC5cclxuICAgICAgaWYgKGxpbmUgJiYgIXJlZ2V4ZXMuY29tbWVudC5leGVjKGxpbmUpKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaCh7XHJcbiAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxyXG4gICAgICAgICAgbGluZTogb3JpZ2luYWxMaW5lLFxyXG4gICAgICAgICAgZXJyb3I6ICdFeHRyYSB0ZXh0JyxcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmFsaWRhdGUgdGhhdCBhbGwgdGltZWxpbmUgdHJpZ2dlcnMgbWF0Y2ggc29tZXRoaW5nLlxyXG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRyaWdnZXJzID8/IFtdKSB7XHJcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHRoaXMuZXZlbnRzKSB7XHJcbiAgICAgICAgaWYgKHRyaWdnZXIucmVnZXggJiYgdHJpZ2dlci5yZWdleC50ZXN0KGV2ZW50Lm5hbWUpKSB7XHJcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFmb3VuZCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSBgTm8gbWF0Y2ggZm9yIHRpbWVsaW5lIHRyaWdnZXIgJHtcclxuICAgICAgICAgIHRyaWdnZXIucmVnZXg/LnNvdXJjZSA/P1xyXG4gICAgICAgICAgICAnJ1xyXG4gICAgICAgIH0gaW4gJHt0cmlnZ2VyLmlkID8/ICcnfWA7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaCh7IGVycm9yOiB0ZXh0IH0pO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYCoqKiBFUlJPUjogJHt0ZXh0fWApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVmFsaWRhdGUgdGhhdCBhbGwgdGhlIGp1bXBzIGdvIHRvIGxhYmVscyB0aGF0IGV4aXN0LlxyXG4gICAgZm9yIChjb25zdCBbbGFiZWwsIHN5bmNzXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmxhYmVsVG9TeW5jKSkge1xyXG4gICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IHRoaXMubGFiZWxUb1RpbWVbbGFiZWxdO1xyXG4gICAgICBpZiAoZGVzdGluYXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSBgTm8gbGFiZWwgbmFtZWQgJHtsYWJlbH0gZm91bmQgdG8ganVtcCB0b2A7XHJcbiAgICAgICAgZm9yIChjb25zdCBzeW5jIG9mIHN5bmNzKSB7XHJcbiAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKHtcclxuICAgICAgICAgICAgZXJyb3I6IHRleHQsXHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IHN5bmMubGluZU51bWJlcixcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKGNvbnN0IHN5bmMgb2Ygc3luY3MpXHJcbiAgICAgICAgc3luYy5qdW1wID0gZGVzdGluYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZXZlbnRzKSB7XHJcbiAgICAgIGZvciAoY29uc3QgbWF0Y2hlZFRleHRFdmVudCBvZiB0ZXh0c1tlLm5hbWVdID8/IFtdKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IG1hdGNoZWRUZXh0RXZlbnQudHlwZTtcclxuICAgICAgICBpZiAodHlwZSAhPT0gJ2luZm8nICYmIHR5cGUgIT09ICdhbGVydCcgJiYgdHlwZSAhPT0gJ2FsYXJtJylcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIHRoaXMudGV4dHMucHVzaCh7XHJcbiAgICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgICAgdGltZTogZS50aW1lIC0gKG1hdGNoZWRUZXh0RXZlbnQuc2Vjb25kc0JlZm9yZSB8fCAwKSxcclxuICAgICAgICAgIHRleHQ6IG1hdGNoZWRUZXh0RXZlbnQudGV4dCA/PyAnJyxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmF0aGVyIHRoYW4gbWF0Y2hpbmcgdHJpZ2dlcnMgYXQgcnVuIHRpbWUsIHByZS1tYXRjaCBhbGwgdGhlIHRyaWdnZXJzXHJcbiAgICAgIC8vIGFnYWluc3QgdGltZWxpbmUgdGV4dCBhbmQgaW5zZXJ0IHRoZW0gYXMgdGV4dCBldmVudHMgdG8gcnVuLlxyXG4gICAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdHJpZ2dlcnMgPz8gW10pIHtcclxuICAgICAgICBjb25zdCBtID0gdHJpZ2dlci5yZWdleD8uZXhlYyhlLm5hbWUpO1xyXG4gICAgICAgIGlmICghbSlcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBiZWZvcmVTZWNvbmRzIHNob3VsZCBzdXBwb3J0IGJlaW5nIGEgZnVuY3Rpb24uXHJcbiAgICAgICAgY29uc3QgYXV0b0NvbmZpZyA9IHRyaWdnZXIuaWQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnBlclRyaWdnZXJBdXRvQ29uZmlnW3RyaWdnZXIuaWRdIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IGJlZm9yZVNlY29uZHMgPSBhdXRvQ29uZmlnWydCZWZvcmVTZWNvbmRzJ10gPz8gdHJpZ2dlci5iZWZvcmVTZWNvbmRzO1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBhbHNvIHB1dCB0aGVzZSBiZWZvcmUgYW55IGZvcmNlanVtcCBhcyB3ZWxsOyB0aGlzIHdpbGwgc29sdmVcclxuICAgICAgICAvLyBoYXZpbmcgdG8gY2FyZSBhYm91dCB0aGlzIGF0IHJ1bnRpbWUuXHJcbiAgICAgICAgLy8gZS5nLiBpZiB0aGUgYmVmb3JlU2Vjb25kcyB3b3VsZCBwdXQgdGhlIHRleHQgcHJpb3IgdG8gdGhlIGp1bXAgZGVzdGluYXRpb25cclxuICAgICAgICB0aGlzLnRleHRzLnB1c2goe1xyXG4gICAgICAgICAgdHlwZTogJ3RyaWdnZXInLFxyXG4gICAgICAgICAgdGltZTogZS50aW1lIC0gKGJlZm9yZVNlY29uZHMgfHwgMCksXHJcbiAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxyXG4gICAgICAgICAgbWF0Y2hlczogbSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChjb25zdCBzdHlsZSBvZiBzdHlsZXMgPz8gW10pIHtcclxuICAgICAgICBpZiAoIXN0eWxlLnJlZ2V4LnRlc3QoZS5uYW1lKSlcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGUuc3R5bGUgPSBzdHlsZS5zdHlsZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNvcnQgYnkgdGltZSwgYnV0IHdoZW4gdGhlIHRpbWUgaXMgdGhlIHNhbWUsIHNvcnQgYnkgZmlsZSBvcmRlci5cclxuICAgIC8vIFRoZW4gYXNzaWduIGEgc29ydEtleSB0byBlYWNoIGV2ZW50IHNvIHRoYXQgd2UgY2FuIG1haW50YWluIHRoYXQgb3JkZXIuXHJcbiAgICB0aGlzLmV2ZW50cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGlmIChhLnRpbWUgPT09IGIudGltZSlcclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoYS5pZCkgLSBwYXJzZUludChiLmlkKTtcclxuICAgICAgcmV0dXJuIGEudGltZSAtIGIudGltZTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ldmVudHMuZm9yRWFjaCgoZXZlbnQsIGlkeCkgPT4gZXZlbnQuc29ydEtleSA9IGlkeCk7XHJcblxyXG4gICAgdGhpcy50ZXh0cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLnRpbWUgLSBiLnRpbWU7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3luY1N0YXJ0cy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLnN0YXJ0IC0gYi5zdGFydDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5zeW5jRW5kcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIHJldHVybiBhLmVuZCAtIGIuZW5kO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLmZvcmNlSnVtcHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICByZXR1cm4gYS50aW1lIC0gYi50aW1lO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1hdGNoU3luY05ldFJlZ2V4KFxyXG4gICAgbGluZTogc3RyaW5nLFxyXG4gICAgbGluZU51bWJlcjogbnVtYmVyLFxyXG4gICAgb3JpZ2luYWxMaW5lOiBzdHJpbmcsXHJcbiAgICB1bmlxdWVpZDogbnVtYmVyLFxyXG4gICAgc2Vjb25kczogbnVtYmVyLFxyXG4gICAgZTogRXZlbnQsXHJcbiAgKSB7XHJcbiAgICBjb25zdCBjb21tYW5kTWF0Y2ggPSByZWdleGVzLnN5bmNOZXRSZWdleC5leGVjKGxpbmUpO1xyXG4gICAgaWYgKCFjb21tYW5kTWF0Y2ggfHwgIWNvbW1hbmRNYXRjaFsnZ3JvdXBzJ10pXHJcbiAgICAgIHJldHVybiBsaW5lO1xyXG5cclxuICAgIGNvbnN0IHN5bmNDb21tYW5kID0gY29tbWFuZE1hdGNoWydncm91cHMnXTtcclxuICAgIGlmIChzeW5jQ29tbWFuZC5uZXRSZWdleFR5cGUgPT09IHVuZGVmaW5lZCB8fCBzeW5jQ29tbWFuZC5uZXRSZWdleCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgbGluZSA9IGxpbmUucmVwbGFjZShzeW5jQ29tbWFuZC5uZXRSZWdleFR5cGUsICcnKS50cmltKCk7XHJcblxyXG4gICAgY29uc3QgbmV0UmVnZXhUeXBlID0gc3luY0NvbW1hbmQubmV0UmVnZXhUeXBlO1xyXG4gICAgaWYgKCFpc0xvZ0RlZmluaXRpb25UeXBlcyhuZXRSZWdleFR5cGUpKSB7XHJcbiAgICAgIHRoaXMuZXJyb3JzLnB1c2goe1xyXG4gICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXHJcbiAgICAgICAgbGluZTogb3JpZ2luYWxMaW5lLFxyXG4gICAgICAgIGVycm9yOiAnSW52YWxpZCBOZXRSZWdleCB0eXBlJyxcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBsaW5lO1xyXG4gICAgfVxyXG5cclxuICAgIGxpbmUgPSBsaW5lLnJlcGxhY2Uoc3luY0NvbW1hbmQubmV0UmVnZXgsICcnKS50cmltKCk7XHJcblxyXG4gICAgbGV0IHBhcmFtczogdW5rbm93bjtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIFVzZSBqc29uNSBoZXJlIHRvIHN1cHBvcnQgYmFyZXdvcmQga2V5cyBhbmQgZGlmZmVyZW50IHF1b3Rpbmcgc3R5bGVzLlxyXG4gICAgICBwYXJhbXMgPSBKU09ONS5wYXJzZShzeW5jQ29tbWFuZC5uZXRSZWdleCk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHRoaXMuZXJyb3JzLnB1c2goe1xyXG4gICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXHJcbiAgICAgICAgbGluZTogb3JpZ2luYWxMaW5lLFxyXG4gICAgICAgIGVycm9yOiAnSW52YWxpZCBOZXRSZWdleCBKU09OJyxcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBsaW5lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNPYmplY3QocGFyYW1zKSB8fCAhaXNWYWxpZE5ldFBhcmFtcyhuZXRSZWdleFR5cGUsIHBhcmFtcykpIHtcclxuICAgICAgdGhpcy5lcnJvcnMucHVzaCh7XHJcbiAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcclxuICAgICAgICBsaW5lOiBvcmlnaW5hbExpbmUsXHJcbiAgICAgICAgZXJyb3I6ICdJbnZhbGlkIE5ldFJlZ2V4IGFyZ3VtZW50cycsXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gbGluZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cmFuc2xhdGVkUGFyYW1zID0gdHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtQW5vbihcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICB0aGlzLm9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2UsXHJcbiAgICAgIHRoaXMucmVwbGFjZW1lbnRzLFxyXG4gICAgKS5wYXJhbXM7XHJcblxyXG4gICAgY29uc3QgcmVnZXggPSBidWlsZE5ldFJlZ2V4Rm9yVHJpZ2dlcihuZXRSZWdleFR5cGUsIHtcclxuICAgICAgLi4udHJhbnNsYXRlZFBhcmFtcyxcclxuICAgICAgY2FwdHVyZTogZmFsc2UsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBUaGUgb3JpZ2luYWwgcGFyYW1zIHNob3VsZCBiZSBUaW1lbGluZU5ldFBhcmFtcywgdGh1cyBzbyBzaG91bGQgdGhlIG91dHB1dC5cclxuICAgIGlmICghaXNUaW1lbGluZU5ldFBhcmFtcyh0cmFuc2xhdGVkUGFyYW1zKSlcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmJ1aWxkUmVnZXhTeW5jKFxyXG4gICAgICB1bmlxdWVpZCxcclxuICAgICAgJ25ldCcsXHJcbiAgICAgIHRyYW5zbGF0ZWRQYXJhbXMsXHJcbiAgICAgIFJlZ2V4ZXMucGFyc2UocmVnZXgpLFxyXG4gICAgICBzeW5jQ29tbWFuZC5hcmdzLFxyXG4gICAgICBzZWNvbmRzLFxyXG4gICAgICBsaW5lTnVtYmVyLFxyXG4gICAgICBlLFxyXG4gICAgICBsaW5lLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWF0Y2hTeW5jUmVnZXhDb21tYW5kKFxyXG4gICAgbGluZTogc3RyaW5nLFxyXG4gICAgdW5pcXVlaWQ6IG51bWJlcixcclxuICAgIHNlY29uZHM6IG51bWJlcixcclxuICAgIGxpbmVOdW1iZXI6IG51bWJlcixcclxuICAgIGU6IEV2ZW50LFxyXG4gICkge1xyXG4gICAgY29uc3QgY29tbWFuZE1hdGNoID0gcmVnZXhlcy5zeW5jUmVnZXhDb21tYW5kLmV4ZWMobGluZSk7XHJcbiAgICBpZiAoIWNvbW1hbmRNYXRjaCB8fCAhY29tbWFuZE1hdGNoWydncm91cHMnXSlcclxuICAgICAgcmV0dXJuIGxpbmU7XHJcbiAgICBjb25zdCBzeW5jQ29tbWFuZCA9IGNvbW1hbmRNYXRjaFsnZ3JvdXBzJ107XHJcbiAgICBpZiAoc3luY0NvbW1hbmQudGV4dCA9PT0gdW5kZWZpbmVkIHx8IHN5bmNDb21tYW5kLnJlZ2V4ID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgIGxpbmUgPSBsaW5lLnJlcGxhY2Uoc3luY0NvbW1hbmQudGV4dCwgJycpLnRyaW0oKTtcclxuICAgIHJldHVybiB0aGlzLmJ1aWxkUmVnZXhTeW5jKFxyXG4gICAgICB1bmlxdWVpZCxcclxuICAgICAgJ3BhcnNlZCcsXHJcbiAgICAgIHN5bmNDb21tYW5kLnJlZ2V4LFxyXG4gICAgICBSZWdleGVzLnBhcnNlKHRoaXMuR2V0UmVwbGFjZWRTeW5jKHN5bmNDb21tYW5kLnJlZ2V4KSksXHJcbiAgICAgIHN5bmNDb21tYW5kLmFyZ3MsXHJcbiAgICAgIHNlY29uZHMsXHJcbiAgICAgIGxpbmVOdW1iZXIsXHJcbiAgICAgIGUsXHJcbiAgICAgIGxpbmUsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZFJlZ2V4U3luYyhcclxuICAgIHVuaXF1ZWlkOiBudW1iZXIsXHJcbiAgICByZWdleFR5cGU6ICdwYXJzZWQnIHwgJ25ldCcsXHJcbiAgICBvcmlnSW5wdXQ6IHN0cmluZyB8IFRpbWVsaW5lTmV0UGFyYW1zLFxyXG4gICAgcGFyc2VkUmVnZXg6IFJlZ0V4cCxcclxuICAgIGFyZ3M6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICAgIHNlY29uZHM6IG51bWJlcixcclxuICAgIGxpbmVOdW1iZXI6IG51bWJlcixcclxuICAgIGU6IEV2ZW50LFxyXG4gICAgbGluZTogc3RyaW5nLFxyXG4gICkge1xyXG4gICAgY29uc3Qgc3luYzogU3luYyA9IHtcclxuICAgICAgaWQ6IHVuaXF1ZWlkLFxyXG4gICAgICBvcmlnSW5wdXQ6IG9yaWdJbnB1dCxcclxuICAgICAgcmVnZXhUeXBlOiByZWdleFR5cGUsXHJcbiAgICAgIHJlZ2V4OiBwYXJzZWRSZWdleCxcclxuICAgICAgc3RhcnQ6IHNlY29uZHMgLSAyLjUsXHJcbiAgICAgIGVuZDogc2Vjb25kcyArIDIuNSxcclxuICAgICAgdGltZTogc2Vjb25kcyxcclxuICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcclxuICAgICAgZXZlbnQ6IGUsXHJcbiAgICB9O1xyXG4gICAgZS5zeW5jID0gc3luYztcclxuICAgIGlmIChhcmdzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbGV0IGFyZ01hdGNoID0gcmVnZXhlcy53aW5kb3dDb21tYW5kLmV4ZWMoYXJncyk7XHJcbiAgICAgIGlmIChhcmdNYXRjaCAmJiBhcmdNYXRjaFsnZ3JvdXBzJ10pIHtcclxuICAgICAgICBjb25zdCB3aW5kb3dDb21tYW5kID0gYXJnTWF0Y2hbJ2dyb3VwcyddO1xyXG4gICAgICAgIGlmICh3aW5kb3dDb21tYW5kLnRleHQgPT09IHVuZGVmaW5lZCB8fCB3aW5kb3dDb21tYW5kLmVuZCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2Uod2luZG93Q29tbWFuZC50ZXh0LCAnJykudHJpbSgpO1xyXG4gICAgICAgIGlmICh3aW5kb3dDb21tYW5kLnN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHN5bmMuc3RhcnQgPSBzZWNvbmRzIC0gcGFyc2VGbG9hdCh3aW5kb3dDb21tYW5kLnN0YXJ0KTtcclxuICAgICAgICAgIHN5bmMuZW5kID0gc2Vjb25kcyArIHBhcnNlRmxvYXQod2luZG93Q29tbWFuZC5lbmQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzeW5jLnN0YXJ0ID0gc2Vjb25kcyAtIHBhcnNlRmxvYXQod2luZG93Q29tbWFuZC5lbmQpIC8gMjtcclxuICAgICAgICAgIHN5bmMuZW5kID0gc2Vjb25kcyArIHBhcnNlRmxvYXQod2luZG93Q29tbWFuZC5lbmQpIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYXJnTWF0Y2ggPSByZWdleGVzLmp1bXBDb21tYW5kLmV4ZWMoYXJncyk7XHJcbiAgICAgIGlmIChhcmdNYXRjaCAmJiBhcmdNYXRjaFsnZ3JvdXBzJ10pIHtcclxuICAgICAgICBjb25zdCBqdW1wQ29tbWFuZCA9IGFyZ01hdGNoWydncm91cHMnXTtcclxuICAgICAgICBpZiAoanVtcENvbW1hbmQudGV4dCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoanVtcENvbW1hbmQudGV4dCwgJycpLnRyaW0oKTtcclxuXHJcbiAgICAgICAgaWYgKGp1bXBDb21tYW5kLnNlY29uZHMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHN5bmMuanVtcCA9IHBhcnNlRmxvYXQoanVtcENvbW1hbmQuc2Vjb25kcyk7XHJcbiAgICAgICAgZWxzZSBpZiAoanVtcENvbW1hbmQubGFiZWwgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICh0aGlzLmxhYmVsVG9TeW5jW2p1bXBDb21tYW5kLmxhYmVsXSA/Pz0gW10pLnB1c2goc3luYyk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG4gICAgICAgIGlmIChqdW1wQ29tbWFuZC5jb21tYW5kID09PSAnZm9yY2VqdW1wJylcclxuICAgICAgICAgIHN5bmMuanVtcFR5cGUgPSAnZm9yY2UnO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgIHN5bmMuanVtcFR5cGUgPSAnbm9ybWFsJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5zeW5jU3RhcnRzLnB1c2goc3luYyk7XHJcbiAgICB0aGlzLnN5bmNFbmRzLnB1c2goc3luYyk7XHJcbiAgICBpZiAoc3luYy5qdW1wVHlwZSA9PT0gJ2ZvcmNlJylcclxuICAgICAgdGhpcy5mb3JjZUp1bXBzLnB1c2goc3luYyk7XHJcbiAgICByZXR1cm4gbGluZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbWF0Y2hEdXJhdGlvbkNvbW1hbmQobGluZTogc3RyaW5nLCBlOiBFdmVudCkge1xyXG4gICAgY29uc3QgY29tbWFuZE1hdGNoID0gcmVnZXhlcy5kdXJhdGlvbkNvbW1hbmQuZXhlYyhsaW5lKTtcclxuICAgIGlmIChjb21tYW5kTWF0Y2ggJiYgY29tbWFuZE1hdGNoWydncm91cHMnXSkge1xyXG4gICAgICBjb25zdCBkdXJhdGlvbkNvbW1hbmQgPSBjb21tYW5kTWF0Y2hbJ2dyb3VwcyddO1xyXG4gICAgICBpZiAoZHVyYXRpb25Db21tYW5kLnRleHQgPT09IHVuZGVmaW5lZCB8fCBkdXJhdGlvbkNvbW1hbmQuc2Vjb25kcyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShkdXJhdGlvbkNvbW1hbmQudGV4dCwgJycpLnRyaW0oKTtcclxuICAgICAgZS5kdXJhdGlvbiA9IHBhcnNlRmxvYXQoZHVyYXRpb25Db21tYW5kLnNlY29uZHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpbmU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIEdldFJlcGxhY2VkVGV4dCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgLy8gQW55dGhpbmcgaW4gdGhlIHRpbWVsaW5lIGNvbmZpZyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGltZWxpbmVSZXBsYWNlIHNlY3Rpb25zIGluXHJcbiAgICAvLyB0aGUgdHJpZ2dlciBmaWxlLiAgSXQgaXMgYWxzbyBhIGZ1bGwgcmVwbGFjZW1lbnQsIHZzIHRoZSByZWdleC1zdHlsZSBHZXRSZXBsYWNlZEhlbHBlci5cclxuICAgIGNvbnN0IHJlbmFtZSA9IHRoaXMudGltZWxpbmVDb25maWc/LlJlbmFtZT8uW3RleHRdO1xyXG4gICAgaWYgKHJlbmFtZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm4gcmVuYW1lO1xyXG5cclxuICAgIGNvbnN0IHJlcGxhY2VMYW5nID0gdGhpcy5vcHRpb25zLlRpbWVsaW5lTGFuZ3VhZ2UgPz8gdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlID8/ICdlbic7XHJcbiAgICByZXR1cm4gdHJhbnNsYXRlVGV4dCh0ZXh0LCByZXBsYWNlTGFuZywgdGhpcy5yZXBsYWNlbWVudHMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBHZXRSZXBsYWNlZFN5bmMoc3luYzogc3RyaW5nIHwgUmVnRXhwKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHJlcGxhY2VMYW5nID0gdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlID8/ICdlbic7XHJcbiAgICByZXR1cm4gdHJhbnNsYXRlUmVnZXgoc3luYywgcmVwbGFjZUxhbmcsIHRoaXMucmVwbGFjZW1lbnRzKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBHZXRNaXNzaW5nVHJhbnNsYXRpb25zVG9JZ25vcmUoKTogUmVnRXhwW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJy0tUmVzZXQtLScsXHJcbiAgICAgICctLXN5bmMtLScsXHJcbiAgICAgICdTdGFydCcsXHJcbiAgICAgICdeID8yMTonLFxyXG4gICAgICAnXiggPzI1Nyk/IDEwMTonLFxyXG4gICAgICAnXihcXFxcKFxcXFw/XFxcXDx0aW1lc3RhbXBcXFxcPlxcXFxeXFxcXC5cXFxcezE0XFxcXH1cXFxcKSkgKDFCfDIxfDIzKTonLFxyXG4gICAgICAnXihcXFxcXlxcXFwuXFxcXHsxNFxcXFx9KT8gPygxQnwyMXwyMyk6JyxcclxuICAgICAgJ146OlxcXFx5e0FiaWxpdHlDb2RlfTokJyxcclxuICAgICAgJ15cXFxcLlxcXFwqJCcsXHJcbiAgICAgICdeIDFcXFxcWzU2XFxcXF06XFxcXFtcXFxcXjpcXFxcXVxcXFwqOlxcXFxbXFxcXF46XFxcXF1cXFxcKjonLFxyXG4gICAgICAnXiggPzI2MCk/IDEwNDonLFxyXG4gICAgICAnXiA/Mjk6JyxcclxuICAgIF0ubWFwKCh4KSA9PiBSZWdleGVzLnBhcnNlKHgpKTtcclxuICB9XHJcblxyXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24uICBUaGlzIGNvdWxkIGJlIGEgZnVuY3Rpb24gb24gVGltZWxpbmVQYXJzZXIsIGJ1dCBpdCBzZWVtcyB3ZWlyZCB0b1xyXG4gIC8vIHN0b3JlIGFsbCBvZiB0aGUgb3JpZ2luYWwgdGltZWxpbmUgdGV4dHMgdW5uZWNlc3NhcmlseSB3aGVuIG9ubHkgY29uZmlnL3V0aWxpdGllcyBuZWVkIGl0LlxyXG4gIHB1YmxpYyBzdGF0aWMgVHJhbnNsYXRlKFxyXG4gICAgdGltZWxpbmU6IFRpbWVsaW5lUGFyc2VyLFxyXG4gICAgdGltZWxpbmVUZXh0OiBzdHJpbmcsXHJcbiAgICBzeW5jRXJyb3JzPzogeyBbbGluZU51bWJlcjogbnVtYmVyXTogYm9vbGVhbiB9LFxyXG4gICAgdGV4dEVycm9ycz86IHsgW2xpbmVOdW1iZXI6IG51bWJlcl06IGJvb2xlYW4gfSxcclxuICApOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBsaW5lVG9UZXh0OiB7IFtsaW5lTnVtYmVyOiBudW1iZXJdOiBFdmVudCB9ID0ge307XHJcbiAgICBjb25zdCBsaW5lVG9TeW5jOiB7IFtsaW5lTnVtYmVyOiBudW1iZXJdOiBTeW5jIH0gPSB7fTtcclxuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgdGltZWxpbmUuZXZlbnRzKSB7XHJcbiAgICAgIGlmICghZXZlbnQubGluZU51bWJlcilcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgbGluZVRvVGV4dFtldmVudC5saW5lTnVtYmVyXSA9IGV2ZW50O1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBldmVudCBvZiB0aW1lbGluZS5zeW5jU3RhcnRzKVxyXG4gICAgICBsaW5lVG9TeW5jW2V2ZW50LmxpbmVOdW1iZXJdID0gZXZlbnQ7XHJcblxyXG4gICAgLy8gQ29tYmluZSByZXBsYWNlZCBsaW5lcyB3aXRoIGVycm9ycy5cclxuICAgIGNvbnN0IHRpbWVsaW5lTGluZXMgPSB0aW1lbGluZVRleHQuc3BsaXQoL1xcbi8pO1xyXG4gICAgY29uc3QgdHJhbnNsYXRlZExpbmVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgdGltZWxpbmVMaW5lcy5mb3JFYWNoKCh0aW1lbGluZUxpbmUsIGlkeCkgPT4ge1xyXG4gICAgICBjb25zdCBsaW5lTnVtYmVyID0gaWR4ICsgMTtcclxuICAgICAgbGV0IGxpbmUgPSB0aW1lbGluZUxpbmUudHJpbSgpO1xyXG5cclxuICAgICAgY29uc3QgbGluZVRleHQgPSBsaW5lVG9UZXh0W2xpbmVOdW1iZXJdO1xyXG4gICAgICBpZiAobGluZVRleHQpXHJcbiAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShgIFwiJHtsaW5lVGV4dC5uYW1lfVwiYCwgYCBcIiR7bGluZVRleHQudGV4dH1cImApO1xyXG4gICAgICBjb25zdCBsaW5lU3luYyA9IGxpbmVUb1N5bmNbbGluZU51bWJlcl07XHJcbiAgICAgIGlmIChsaW5lU3luYykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbGluZVN5bmMub3JpZ0lucHV0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShgc3luYyAvJHtsaW5lU3luYy5vcmlnSW5wdXR9L2AsIGBzeW5jIC8ke2xpbmVTeW5jLnJlZ2V4LnNvdXJjZX0vYCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRQYXJhbXMgPSB0cmFuc2xhdGVSZWdleEJ1aWxkUGFyYW1Bbm9uKFxyXG4gICAgICAgICAgICBsaW5lU3luYy5vcmlnSW5wdXQsXHJcbiAgICAgICAgICAgIHRpbWVsaW5lLm9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2UsXHJcbiAgICAgICAgICAgIHRpbWVsaW5lLnJlcGxhY2VtZW50cyxcclxuICAgICAgICAgICkucGFyYW1zO1xyXG4gICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgve1tefV0qfS8sIGB7ICR7SlNPTi5zdHJpbmdpZnkodHJhbnNsYXRlZFBhcmFtcyl9IH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzeW5jRXJyb3JzPy5bbGluZU51bWJlcl0pXHJcbiAgICAgICAgbGluZSArPSAnICNNSVNTSU5HU1lOQyc7XHJcbiAgICAgIGlmICh0ZXh0RXJyb3JzPy5bbGluZU51bWJlcl0pXHJcbiAgICAgICAgbGluZSArPSAnICNNSVNTSU5HVEVYVCc7XHJcbiAgICAgIHRyYW5zbGF0ZWRMaW5lcy5wdXNoKGxpbmUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHRyYW5zbGF0ZWRMaW5lcztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY29tbW9uTmV0UmVnZXggfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbmV0cmVnZXhlcyc7XHJcbmltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9ub3RfcmVhY2hlZCc7XHJcbmltcG9ydCB7IExvY2FsZVJlZ2V4IH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3RyYW5zbGF0aW9ucyc7XHJcbmltcG9ydCB7IEV2ZW50UmVzcG9uc2VzLCBMb2dFdmVudCB9IGZyb20gJy4uLy4uL3R5cGVzL2V2ZW50JztcclxuaW1wb3J0IHsgQ2FjdGJvdEJhc2VSZWdFeHAgfSBmcm9tICcuLi8uLi90eXBlcy9uZXRfdHJpZ2dlcic7XHJcbmltcG9ydCB7IExvb3NlVGltZWxpbmVUcmlnZ2VyLCBSYWlkYm9zc0ZpbGVEYXRhIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHJpZ2dlcic7XHJcblxyXG5pbXBvcnQgeyBQb3B1cFRleHRHZW5lcmF0b3IgfSBmcm9tICcuL3BvcHVwLXRleHQnO1xyXG5pbXBvcnQgeyBSYWlkYm9zc09wdGlvbnMgfSBmcm9tICcuL3JhaWRib3NzX29wdGlvbnMnO1xyXG5pbXBvcnQge1xyXG4gIEV2ZW50LFxyXG4gIFN5bmMsXHJcbiAgVGV4dCxcclxuICBUaW1lbGluZVBhcnNlcixcclxuICBUaW1lbGluZVJlcGxhY2VtZW50LFxyXG4gIFRpbWVsaW5lU3R5bGUsXHJcbn0gZnJvbSAnLi90aW1lbGluZV9wYXJzZXInO1xyXG5cclxuLy8gSGksIHNvcnJ5IGFib3V0IHRoaXMgd2hvbGUgY2xhc3MuICBUaGlzIGlzIGFsbCBwcmV0dHkgb2xkIGNvZGUgYW5kIGhvbmVzdGx5IGNvdWxkXHJcbi8vIHByb2JhYmx5IGFsbCBiZSBlbnRpcmVseSByZXdyaXR0ZW4gYXQgdGhpcyBwb2ludCBpZiBhbnlib2R5IGhhcyB0aGUgdGltZSBvciBicmFpbi5cclxuLy9cclxuLy8gVGhpcyBUaW1lbGluZUNvbnRyb2xsZXIgY2xhc3MgaXMgaW52b2x2ZWQgaW4gcGxheWluZyBiYWNrIHRoZSB0aW1lbGluZSBlZmZpY2llbnRseS5cclxuLy8gQXMgaXQgc2F5cyBvbiB0aGUgdGluLCBpdCdzIHRoZSBjb250cm9sbGVyIGhlcmUgYW5kIEh0bWxUaW1lbGluZVVJIGlzIHRoZSB2aWV3LlxyXG4vLyBUaGUgVUkgZG9lcyB2ZXJ5IGxpdHRsZSBhbmQgcmVsaWVzIG9uIFRpbWVsaW5lQ29udHJvbGxlciB0byBtYW51YWxseSBhZGQgYW5kIHJlbW92ZVxyXG4vLyB0aW1lciBiYXJzIGFzIG5lY2Vzc2FyeS4gIEl0IGRvZXMgc29tZSBhbmltYXRpb25zIHdoZW4gdGhpbmdzIGFyZSByZW1vdmVkLCBidXRcclxuLy8gb25seSB3aGVuIGl0J3MgYmVlbiB0b2xkIHRvIHJlbW92ZSB0aGVtLlxyXG4vL1xyXG4vLyBXaGVuIGFueSB0aW1lIGlzIHJlc3luY2VkIGV2ZW4gc2xpZ2h0bHksIHRoZW4gYWxsIG9mIHRoZSBiYXJzIGFyZSByZW1vdmVkIGFuZCByZWFkZGVkXHJcbi8vIHdpdGggbmV3IHRpbWVzLiAgKFRoaXMgY291bGQgcHJvYmFibHkgYmUgYmV0dGVyIHRvIGp1c3QgdXBkYXRlIHRoZW0gaW4gcGxhY2UhKS5cclxuLy8gU2ltaWxhcmx5LCBhbnkganVtcCAoZXZlbiB3aXRoIGxvb2thaGVhZCkgY2FuJ3QgZG8gYW55IFVJIGFuaW1hdGlvbnMgb3IgYW55dGhpbmdcclxuLy8gYmVjYXVzZSB0aGUgbG9va2FoZWFkIGJhcnMgZG9uJ3Qga25vdyBhbnl0aGluZyBhYm91dCB0aGUgbmV3IGJhcnMgYXQgdGhlIGp1bXAgbG9jYXRpb24uXHJcbi8vIFRoaXMgaXMga2luZCBvZiBqYXJyaW5nIGJ1dCBob3BlZnVsbHkgbW9zdCBwZW9wbGUgZG9uJ3Qgbm90aWNlIGl0LlxyXG4vL1xyXG4vLyBUaGluZ3MgYXJlIGFsc28gdmVyeSBwcmVjYXJpb3VzIGluIHRlcm1zIG9mIGhvdyB0aGlzIGNsYXNzIHdhbGtzIHRocm91Z2ggdGhpbmdzLlxyXG4vLyBJZiB0aGlzLmFjdGl2ZUV2ZW50cyBpcyBvdXQgb2Ygc3luYyBvciB1bnNvcnRlZCwgdGhlbiBpdCB3aWxsIGNsb2cgdXAgYW5kIG5ldyBiYXJzXHJcbi8vIHdpbGwgbm90IGJlIGFibGUgdG8gYmUgYWRkZWQuICBEdXJhdGlvbnMgYXJlIGV4dHJlbWVseSBhd2t3YXJkIGFzIHRoZXkgYXJlIG1hbnVhbGx5XHJcbi8vIGFkZGVkIG9uY2UgdGhlaXIgb3JpZ2luYWwgZXZlbnQgaGFzIHBhc3NlZC4gIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgZXZlciBqdW1wXHJcbi8vIHRvIGEgbmV3IGxvY2F0aW9uIHdpdGggYW4gb25nb2luZyBkdXJhdGlvbiBmcm9tIHRoZSBwYXN0LCBpdCB3aWxsIG5vdCBhcHBlYXIuXHJcbi8vIEl0IGFsc28gaGFzIHNvbWUgaXNzdWVzIGlmIHRoZSBkdXJhdGlvbiBleHRlbmRzIHBhc3QgdGhlIGp1bXAgKHNlZSBjb21tZW50cyBpbmxpbmUpLlxyXG4vLyBBbHNvIGJlY2F1c2Ugb2YgdGhpcywgd2UgaGF2ZSB0byBsb29rIHRocm91Z2ggZXZlcnkgZXZlbnQgYWxsIHRoZSB0aW1lIHRvIGZpZ3VyZVxyXG4vLyBvdXQgaWYgdGhlcmUncyBhIGR1cmF0aW9uIHRvIGNhcmUgYWJvdXQgKGFuZCBwcm9iYWJseSB3ZSBjb3VsZCBmaWd1cmUgdGhpcyBvdXRcclxuLy8gYWhlYWQgb2YgdGltZSBsaWtlIHdlIGRvIHdpdGggcGxhY2luZyB0ZXh0IGV2ZW50cyArIGJlZm9yZVNlY29uZHMgYXQgdGhlIGNvcnJlY3RcclxuLy8gcGxhY2UgaW4gdGhlIHRpbWVsaW5lKS5cclxuLy9cclxuLy8gVGhlcmUncyBhbHNvIG5vIHRlc3RpbmcsIHNvcnJ5LlxyXG5cclxuLy8gVE9ETzogd2Ugc2hvdWxkIGFsc28gcmVmYWN0b3IgdXNlcyBvZiBgd2luZG93YCBvdXQgb2YgaGVyZSBhbmQgbWF5YmUgaW50b1xyXG4vLyBzZXQvY2xlYXIgdGltZW91dCB3cmFwcGVycyBpbiBodG1sX3RpbWVsaW5lX3VpIGFzIHdlbGwuXHJcblxyXG5jb25zdCBrQmlnID0gMTAwMDAwMDAwMDsgLy8gU29tZXRoaW5nIGJpZ2dlciB0aGFuIGFueSBmaWdodCBsZW5ndGggaW4gc2Vjb25kcy5cclxuXHJcbmNvbnN0IGFjdGl2ZVRleHQgPSB7XHJcbiAgZW46ICdBY3RpdmU6JyxcclxuICBkZTogJ0FrdGl2OicsXHJcbiAgZnI6ICdBY3RpdmUgOicsXHJcbiAgamE6ICco6YCy6KGMKTonLFxyXG4gIGNuOiAnKOi/m+ihjOS4rSk6JyxcclxuICBrbzogJ+yLnOyghOykkTonLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVsaW5lVUkge1xyXG4gIHByb3RlY3RlZCB0aW1lbGluZTogVGltZWxpbmUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgcHJvdGVjdGVkIEluaXQoKTogdm9pZCB7XHJcbiAgICAvKiBub29wICovXHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgQWRkRGVidWdJbnN0cnVjdGlvbnMoKTogdm9pZCB7XHJcbiAgICAvKiBub29wICovXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgU2V0UG9wdXBUZXh0SW50ZXJmYWNlKF9wb3B1cFRleHQ6IFBvcHVwVGV4dEdlbmVyYXRvcik6IHZvaWQge1xyXG4gICAgLyogbm9vcCAqL1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIFJlc2V0KCk6IHZvaWQge1xyXG4gICAgLyogbm9vcCAqL1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFNldFRpbWVsaW5lKHRpbWVsaW5lOiBUaW1lbGluZSB8IG51bGwpOiB2b2lkIHtcclxuICAgIHRoaXMuSW5pdCgpO1xyXG4gICAgdGhpcy5SZXNldCgpO1xyXG5cclxuICAgIHRoaXMudGltZWxpbmUgPSB0aW1lbGluZTtcclxuICAgIGlmICh0aGlzLnRpbWVsaW5lKVxyXG4gICAgICB0aGlzLnRpbWVsaW5lLnVpID0gdGhpcztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBPbkFkZFRpbWVyKF9maWdodE5vdzogbnVtYmVyLCBfZTogRXZlbnQsIF9jaGFubmVsaW5nOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAvKiBub29wICovXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgT25SZW1vdmVUaW1lcihfZTogRXZlbnQsIF9mb3JjZSA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAvKiBub29wICovXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgT25TaG93SW5mb1RleHQoX3RleHQ6IHN0cmluZywgX2N1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8qIG5vb3AgKi9cclxuICB9XHJcblxyXG4gIHB1YmxpYyBPblNob3dBbGVydFRleHQoX3RleHQ6IHN0cmluZywgX2N1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8qIG5vb3AgKi9cclxuICB9XHJcblxyXG4gIHB1YmxpYyBPblNob3dBbGFybVRleHQoX3RleHQ6IHN0cmluZywgX2N1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8qIG5vb3AgKi9cclxuICB9XHJcblxyXG4gIHB1YmxpYyBPblNwZWFrVFRTKF90ZXh0OiBzdHJpbmcsIF9jdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAvKiBub29wICovXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgT25UcmlnZ2VyKFxyXG4gICAgX3RyaWdnZXI6IExvb3NlVGltZWxpbmVUcmlnZ2VyLFxyXG4gICAgX21hdGNoZXM6IFJlZ0V4cEV4ZWNBcnJheSB8IG51bGwsXHJcbiAgICBfY3VycmVudFRpbWU6IG51bWJlcixcclxuICApOiB2b2lkIHtcclxuICAgIC8qIG5vb3AgKi9cclxuICB9XHJcblxyXG4gIHB1YmxpYyBPblN5bmNUaW1lKF9maWdodE5vdzogbnVtYmVyLCBfcnVubmluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgLyogbm9vcCAqL1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgaW5pdGlhbE5leHRFdmVudFN0YXRlID0ge1xyXG4gIGluZGV4OiAwLFxyXG4gIG1pbkZpZ2h0Tm93OiAwLFxyXG4gIHRpbWVPZmZzZXQ6IDAsXHJcbiAgc29ydEtleU9mZnNldDogMCxcclxuICBqdW1wQ291bnQ6IDAsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZWxpbmUge1xyXG4gIHByaXZhdGUgcmVwbGFjZW1lbnRzOiBUaW1lbGluZVJlcGxhY2VtZW50W107XHJcblxyXG4gIHByaXZhdGUgYWN0aXZlVGV4dDogc3RyaW5nO1xyXG5cclxuICBwcm90ZWN0ZWQgYWN0aXZlU3luY3M6IFN5bmNbXTtcclxuICBwcm90ZWN0ZWQgYWN0aXZlTmV0U3luY3M6IFN5bmNbXTtcclxuICBwcml2YXRlIGFjdGl2ZUV2ZW50czogRXZlbnRbXTtcclxuICBwcml2YXRlIGtlZXBBbGl2ZUV2ZW50czoge1xyXG4gICAgZXZlbnQ6IEV2ZW50O1xyXG4gICAgdGltZW91dDogbnVtYmVyO1xyXG4gIH1bXTtcclxuICBwcml2YXRlIGFjdGl2ZUxhc3RGb3JjZUp1bXBTeW5jPzogU3luYztcclxuXHJcbiAgcHVibGljIGlnbm9yZXM6IHsgW2lnbm9yZUlkOiBzdHJpbmddOiBib29sZWFuIH07XHJcbiAgcHVibGljIGV2ZW50czogRXZlbnRbXTtcclxuICBwdWJsaWMgdGV4dHM6IFRleHRbXTtcclxuICBwdWJsaWMgc3luY1N0YXJ0czogU3luY1tdO1xyXG4gIHB1YmxpYyBzeW5jRW5kczogU3luY1tdO1xyXG4gIHB1YmxpYyBmb3JjZUp1bXBzOiBTeW5jW107XHJcblxyXG4gIHB1YmxpYyB0aW1lYmFzZSA9IDA7XHJcblxyXG4gIHByaXZhdGUgbmV4dEV2ZW50U3RhdGU6IHtcclxuICAgIGluZGV4OiBudW1iZXI7XHJcbiAgICBtaW5GaWdodE5vdzogbnVtYmVyO1xyXG4gICAgdGltZU9mZnNldDogbnVtYmVyO1xyXG4gICAgc29ydEtleU9mZnNldDogbnVtYmVyO1xyXG4gICAganVtcENvdW50OiBudW1iZXI7XHJcbiAgfSA9IHsgLi4uaW5pdGlhbE5leHRFdmVudFN0YXRlIH07XHJcbiAgcHJpdmF0ZSBuZXh0VGV4dCA9IDA7XHJcbiAgcHJpdmF0ZSBuZXh0U3luY1N0YXJ0ID0gMDtcclxuICBwcml2YXRlIG5leHRTeW5jRW5kID0gMDtcclxuICBwcml2YXRlIG5leHRGb3JjZUp1bXAgPSAwO1xyXG5cclxuICBwcml2YXRlIHVwZGF0ZVRpbWVyID0gMDtcclxuXHJcbiAgcHVibGljIHVpPzogVGltZWxpbmVVSTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB0ZXh0OiBzdHJpbmcsXHJcbiAgICByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSxcclxuICAgIHRyaWdnZXJzOiBMb29zZVRpbWVsaW5lVHJpZ2dlcltdLFxyXG4gICAgc3R5bGVzOiBUaW1lbGluZVN0eWxlW10sXHJcbiAgICBwcml2YXRlIG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucyxcclxuICAgIHByaXZhdGUgem9uZUlkOiBudW1iZXIsXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJlcGxhY2VtZW50cyA9IHJlcGxhY2VtZW50cztcclxuXHJcbiAgICBjb25zdCBsYW5nID0gdGhpcy5vcHRpb25zLlRpbWVsaW5lTGFuZ3VhZ2UgfHwgdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlIHx8ICdlbic7XHJcbiAgICB0aGlzLmFjdGl2ZVRleHQgPSBsYW5nIGluIGFjdGl2ZVRleHQgPyBhY3RpdmVUZXh0W2xhbmddIDogYWN0aXZlVGV4dFsnZW4nXTtcclxuXHJcbiAgICAvLyBOb3Qgc29ydGVkLlxyXG4gICAgdGhpcy5hY3RpdmVTeW5jcyA9IFtdO1xyXG4gICAgdGhpcy5hY3RpdmVOZXRTeW5jcyA9IFtdO1xyXG4gICAgLy8gU29ydGVkIGJ5IGV2ZW50IG9jY3VycmVuY2UgdGltZS5cclxuICAgIHRoaXMuYWN0aXZlRXZlbnRzID0gW107XHJcbiAgICAvLyBFdmVudHMgdGhhdCBhcmUgbm8gbG9uZ2VyIGFjdGl2ZSBidXQgd2UgYXJlIGtlZXBpbmcgb24gc2NyZWVuIGJyaWVmbHkuXHJcbiAgICB0aGlzLmtlZXBBbGl2ZUV2ZW50cyA9IFtdO1xyXG4gICAgLy8gQSBzZXQgb2YgbmFtZXMgd2hpY2ggd2lsbCBub3QgYmUgbm90aWZpZWQgYWJvdXQuXHJcbiAgICB0aGlzLmlnbm9yZXMgPSB7fTtcclxuICAgIC8vIFNvcnRlZCBieSBldmVudCBvY2N1cnJlbmNlIHRpbWUuXHJcbiAgICB0aGlzLmV2ZW50cyA9IFtdO1xyXG4gICAgLy8gU29ydGVkIGJ5IGV2ZW50IG9jY3VycmVuY2UgdGltZS5cclxuICAgIHRoaXMudGV4dHMgPSBbXTtcclxuICAgIC8vIFNvcnRlZCBieSBzeW5jLnN0YXJ0IHRpbWUuXHJcbiAgICB0aGlzLnN5bmNTdGFydHMgPSBbXTtcclxuICAgIC8vIFNvcnRlZCBieSBzeW5jLmVuZCB0aW1lLlxyXG4gICAgdGhpcy5zeW5jRW5kcyA9IFtdO1xyXG4gICAgLy8gU29ydGVkIGJ5IGV2ZW50IG9jY3VycmVuY2UgdGltZS5cclxuICAgIHRoaXMuZm9yY2VKdW1wcyA9IFtdO1xyXG5cclxuICAgIHRoaXMuTG9hZEZpbGUodGV4dCwgdHJpZ2dlcnMsIHN0eWxlcyk7XHJcbiAgICB0aGlzLlN0b3AoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgTG9hZEZpbGUodGV4dDogc3RyaW5nLCB0cmlnZ2VyczogTG9vc2VUaW1lbGluZVRyaWdnZXJbXSwgc3R5bGVzOiBUaW1lbGluZVN0eWxlW10pOiB2b2lkIHtcclxuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBUaW1lbGluZVBhcnNlcihcclxuICAgICAgdGV4dCxcclxuICAgICAgdGhpcy5yZXBsYWNlbWVudHMsXHJcbiAgICAgIHRyaWdnZXJzLFxyXG4gICAgICBzdHlsZXMsXHJcbiAgICAgIHRoaXMub3B0aW9ucyxcclxuICAgICAgdGhpcy56b25lSWQsXHJcbiAgICApO1xyXG4gICAgdGhpcy5pZ25vcmVzID0gcGFyc2VkLmlnbm9yZXM7XHJcbiAgICB0aGlzLmV2ZW50cyA9IHBhcnNlZC5ldmVudHM7XHJcbiAgICB0aGlzLnRleHRzID0gcGFyc2VkLnRleHRzO1xyXG4gICAgdGhpcy5zeW5jU3RhcnRzID0gcGFyc2VkLnN5bmNTdGFydHM7XHJcbiAgICB0aGlzLnN5bmNFbmRzID0gcGFyc2VkLnN5bmNFbmRzO1xyXG4gICAgdGhpcy5mb3JjZUp1bXBzID0gcGFyc2VkLmZvcmNlSnVtcHM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgU3RvcCgpOiB2b2lkIHtcclxuICAgIHRoaXMudGltZWJhc2UgPSAwO1xyXG5cclxuICAgIHRoaXMubmV4dEV2ZW50U3RhdGUgPSB7IC4uLmluaXRpYWxOZXh0RXZlbnRTdGF0ZSB9O1xyXG4gICAgdGhpcy5uZXh0VGV4dCA9IDA7XHJcbiAgICB0aGlzLm5leHRTeW5jU3RhcnQgPSAwO1xyXG4gICAgdGhpcy5uZXh0U3luY0VuZCA9IDA7XHJcbiAgICB0aGlzLm5leHRGb3JjZUp1bXAgPSAwO1xyXG5cclxuICAgIGNvbnN0IGZpZ2h0Tm93ID0gMDtcclxuICAgIHRoaXMuX0FkdmFuY2VUaW1lVG8oZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fQ29sbGVjdEFjdGl2ZVN5bmNzKGZpZ2h0Tm93KTtcclxuXHJcbiAgICB0aGlzLl9DbGVhclRpbWVycygpO1xyXG4gICAgdGhpcy5fQ2FuY2VsVXBkYXRlKCk7XHJcblxyXG4gICAgdGhpcy51aT8uT25TeW5jVGltZShmaWdodE5vdywgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIFN5bmNUbyhmaWdodE5vdzogbnVtYmVyLCBjdXJyZW50VGltZTogbnVtYmVyLCBfc3luYz86IFN5bmMpOiB2b2lkIHtcclxuICAgIC8vIElmIHdlIGV2ZXIgc3luYyBzb21ld2hlcmUgZWxzZSwgdGhlbiByZW1vdmUgYW55IGFjdGl2ZSBvdmVyaGFuZ2luZyB3aW5kb3dzIGZyb20gZm9yY2UganVtcHMuXHJcbiAgICB0aGlzLmFjdGl2ZUxhc3RGb3JjZUp1bXBTeW5jID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIC8vIFRoaXMgcmVjb3JkcyB0aGUgYWN0dWFsIHRpbWUgd2hpY2ggYWxpZ25zIHdpdGggXCIwXCIgaW4gdGhlIHRpbWVsaW5lLlxyXG4gICAgY29uc3QgbmV3VGltZWJhc2UgPSBuZXcgRGF0ZShjdXJyZW50VGltZSAtIGZpZ2h0Tm93ICogMTAwMCkudmFsdWVPZigpO1xyXG4gICAgLy8gU2tpcCBzeW5jcyB0aGF0IGFyZSB0b28gY2xvc2UuICBNYW55IHN5bmNzIGhhcHBlbiBvbiBhYmlsaXRpZXMgdGhhdFxyXG4gICAgLy8gaGl0IDggdG8gMjQgcGVvcGxlLCBhbmQgc28gdGhpcyBpcyBhIGxvdCBvZiBjaHVybi5cclxuICAgIGlmIChNYXRoLmFicyhuZXdUaW1lYmFzZSAtIHRoaXMudGltZWJhc2UpIDw9IDIpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHRoaXMudGltZWJhc2UgPSBuZXdUaW1lYmFzZTtcclxuXHJcbiAgICB0aGlzLm5leHRFdmVudFN0YXRlID0geyAuLi5pbml0aWFsTmV4dEV2ZW50U3RhdGUgfTtcclxuICAgIHRoaXMubmV4dFRleHQgPSAwO1xyXG4gICAgdGhpcy5uZXh0U3luY1N0YXJ0ID0gMDtcclxuICAgIHRoaXMubmV4dFN5bmNFbmQgPSAwO1xyXG5cclxuICAgIC8vIFRoaXMgd2lsbCBza2lwIHRleHQgZXZlbnRzIHdpdGhvdXQgcnVubmluZyB0aGVtLlxyXG4gICAgdGhpcy5fQWR2YW5jZVRpbWVUbyhmaWdodE5vdyk7XHJcbiAgICB0aGlzLl9Db2xsZWN0QWN0aXZlU3luY3MoZmlnaHROb3cpO1xyXG5cclxuICAgIC8vIENsZWFyIGFsbCB0aW1lcnMgZXhjZXB0IGFueSBzeW50aGV0aWMgZHVyYXRpb24gZXZlbnRzLlxyXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIGlmIHRoZSBzeW5jIGdvZXMgZXZlbiBhIGhhaXIgaW50byB0aGUgZnV0dXJlLCB0aGVuXHJcbiAgICAvLyB0aGUgZHVyYXRpb24gZW5kaW5nIGV2ZW50IHdpbGwgZ2V0IGRyb3BwZWQgaGVyZS5cclxuXHJcbiAgICAvLyBGSVhNRTogd2UgY291bGQgYmUgc21hcnRlciBoZXJlIGFuZCBrbm93IGFoZWFkIG9mIHRpbWUgd2hlcmUgYWxsIHRoZSBkdXJhdGlvblxyXG4gICAgLy8gZXZlbnRzIGFyZSwgc28gdGhhdCB3ZSBjb3VsZCBza2lwIGFoZWFkIGludG8gdGhlIGZ1dHVyZSB3aGVyZSBhIGR1cmF0aW9uXHJcbiAgICAvLyBldmVudCBoYXMgc3RhcnRlZCBidXQgbm90IGV4cGlyZWQgYW5kIGhhdmUgdGhhdCB3b3JrIHByb3Blcmx5LlxyXG4gICAgdGhpcy5fQWRkRHVyYXRpb25UaW1lcnMoZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fQ2xlYXJFeGNlcHRSdW5uaW5nRHVyYXRpb25UaW1lcnMoZmlnaHROb3cpO1xyXG5cclxuICAgIHRoaXMuX0FkZFVwY29taW5nVGltZXJzKGZpZ2h0Tm93KTtcclxuICAgIHRoaXMuX0NhbmNlbFVwZGF0ZSgpO1xyXG4gICAgdGhpcy5fU2NoZWR1bGVVcGRhdGUoZmlnaHROb3cpO1xyXG5cclxuICAgIHRoaXMudWk/Lk9uU3luY1RpbWUoZmlnaHROb3csIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfQ29sbGVjdEFjdGl2ZVN5bmNzKGZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuYWN0aXZlU3luY3MgPSBbXTtcclxuICAgIHRoaXMuYWN0aXZlTmV0U3luY3MgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSB0aGlzLm5leHRTeW5jRW5kOyBpIDwgdGhpcy5zeW5jRW5kcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCBzeW5jRW5kID0gdGhpcy5zeW5jRW5kc1tpXTtcclxuICAgICAgaWYgKHN5bmNFbmQgJiYgc3luY0VuZC5zdGFydCA8PSBmaWdodE5vdykge1xyXG4gICAgICAgIGlmIChzeW5jRW5kLnJlZ2V4VHlwZSA9PT0gJ3BhcnNlZCcpXHJcbiAgICAgICAgICB0aGlzLmFjdGl2ZVN5bmNzLnB1c2goc3luY0VuZCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgdGhpcy5hY3RpdmVOZXRTeW5jcy5wdXNoKHN5bmNFbmQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0aGlzLmFjdGl2ZUxhc3RGb3JjZUp1bXBTeW5jICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgdGhpcy5hY3RpdmVMYXN0Rm9yY2VKdW1wU3luYy5zdGFydCA8PSBmaWdodE5vdyAmJlxyXG4gICAgICB0aGlzLmFjdGl2ZUxhc3RGb3JjZUp1bXBTeW5jLmVuZCA+IGZpZ2h0Tm93XHJcbiAgICApIHtcclxuICAgICAgaWYgKHRoaXMuYWN0aXZlTGFzdEZvcmNlSnVtcFN5bmMucmVnZXhUeXBlID09PSAncGFyc2VkJylcclxuICAgICAgICB0aGlzLmFjdGl2ZVN5bmNzLnB1c2godGhpcy5hY3RpdmVMYXN0Rm9yY2VKdW1wU3luYyk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0aGlzLmFjdGl2ZU5ldFN5bmNzLnB1c2godGhpcy5hY3RpdmVMYXN0Rm9yY2VKdW1wU3luYyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmFjdGl2ZUxhc3RGb3JjZUp1bXBTeW5jID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIE9uTG9nTGluZUp1bXAoc3luYzogU3luYywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKCdqdW1wJyBpbiBzeW5jKSB7XHJcbiAgICAgIGlmICghc3luYy5qdW1wKSB7XHJcbiAgICAgICAgdGhpcy5TeW5jVG8oMCwgY3VycmVudFRpbWUsIHN5bmMpO1xyXG4gICAgICAgIHRoaXMuU3RvcCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuU3luY1RvKHN5bmMuanVtcCwgY3VycmVudFRpbWUsIHN5bmMpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLlN5bmNUbyhzeW5jLnRpbWUsIGN1cnJlbnRUaW1lLCBzeW5jKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBPbkxvZ0xpbmUobGluZTogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IHN5bmMgb2YgdGhpcy5hY3RpdmVTeW5jcykge1xyXG4gICAgICBpZiAoc3luYy5yZWdleC50ZXN0KGxpbmUpKSB7XHJcbiAgICAgICAgdGhpcy5PbkxvZ0xpbmVKdW1wKHN5bmMsIGN1cnJlbnRUaW1lKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIE9uTmV0TG9nTGluZShsaW5lOiBzdHJpbmcsIGN1cnJlbnRUaW1lOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGZvciAoY29uc3Qgc3luYyBvZiB0aGlzLmFjdGl2ZU5ldFN5bmNzKSB7XHJcbiAgICAgIGlmIChzeW5jLnJlZ2V4LnRlc3QobGluZSkpIHtcclxuICAgICAgICB0aGlzLk9uTG9nTGluZUp1bXAoc3luYywgY3VycmVudFRpbWUpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9BZHZhbmNlVGltZVRvKGZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWR2YW5jZXMgdGltZSB0byBmaWdodE5vdyB3aXRob3V0IHByb2Nlc3NpbmcgYW55IGV2ZW50cy5cclxuICAgIGxldCBldmVudCA9IHRoaXMuZXZlbnRzW3RoaXMubmV4dEV2ZW50U3RhdGUuaW5kZXhdO1xyXG4gICAgd2hpbGUgKFxyXG4gICAgICB0aGlzLm5leHRFdmVudFN0YXRlLmluZGV4IDwgdGhpcy5ldmVudHMubGVuZ3RoICYmIGV2ZW50ICYmXHJcbiAgICAgIGV2ZW50LnRpbWUgKyB0aGlzLm5leHRFdmVudFN0YXRlLnRpbWVPZmZzZXQgPD0gZmlnaHROb3dcclxuICAgIClcclxuICAgICAgZXZlbnQgPSB0aGlzLmV2ZW50c1srK3RoaXMubmV4dEV2ZW50U3RhdGUuaW5kZXhdO1xyXG4gICAgbGV0IHRleHQgPSB0aGlzLnRleHRzW3RoaXMubmV4dFRleHRdO1xyXG4gICAgd2hpbGUgKHRoaXMubmV4dFRleHQgPCB0aGlzLnRleHRzLmxlbmd0aCAmJiB0ZXh0ICYmIHRleHQudGltZSA8PSBmaWdodE5vdylcclxuICAgICAgdGV4dCA9IHRoaXMudGV4dHNbKyt0aGlzLm5leHRUZXh0XTtcclxuICAgIGxldCBzeW5jU3RhcnQgPSB0aGlzLnN5bmNTdGFydHNbdGhpcy5uZXh0U3luY1N0YXJ0XTtcclxuICAgIHdoaWxlICh0aGlzLm5leHRTeW5jU3RhcnQgPCB0aGlzLnN5bmNTdGFydHMubGVuZ3RoICYmIHN5bmNTdGFydCAmJiBzeW5jU3RhcnQuc3RhcnQgPD0gZmlnaHROb3cpXHJcbiAgICAgIHN5bmNTdGFydCA9IHRoaXMuc3luY1N0YXJ0c1srK3RoaXMubmV4dFN5bmNTdGFydF07XHJcbiAgICBsZXQgc3luY0VuZCA9IHRoaXMuc3luY0VuZHNbdGhpcy5uZXh0U3luY0VuZF07XHJcbiAgICB3aGlsZSAodGhpcy5uZXh0U3luY0VuZCA8IHRoaXMuc3luY0VuZHMubGVuZ3RoICYmIHN5bmNFbmQgJiYgc3luY0VuZC5lbmQgPD0gZmlnaHROb3cpXHJcbiAgICAgIHN5bmNFbmQgPSB0aGlzLnN5bmNFbmRzWysrdGhpcy5uZXh0U3luY0VuZF07XHJcbiAgICBsZXQgZm9yY2VKdW1wID0gdGhpcy5mb3JjZUp1bXBzW3RoaXMubmV4dEZvcmNlSnVtcF07XHJcbiAgICB3aGlsZSAodGhpcy5uZXh0Rm9yY2VKdW1wIDwgdGhpcy5mb3JjZUp1bXBzLmxlbmd0aCAmJiBmb3JjZUp1bXAgJiYgZm9yY2VKdW1wLnRpbWUgPD0gZmlnaHROb3cpXHJcbiAgICAgIGZvcmNlSnVtcCA9IHRoaXMuZm9yY2VKdW1wc1srK3RoaXMubmV4dEZvcmNlSnVtcF07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9DbGVhclRpbWVycygpOiB2b2lkIHtcclxuICAgIGZvciAoY29uc3QgYWN0aXZlRXZlbnQgb2YgdGhpcy5hY3RpdmVFdmVudHMpXHJcbiAgICAgIHRoaXMudWk/Lk9uUmVtb3ZlVGltZXIoYWN0aXZlRXZlbnQsIGZhbHNlKTtcclxuICAgIHRoaXMuYWN0aXZlRXZlbnRzID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGtlZXBBbGl2ZSBvZiB0aGlzLmtlZXBBbGl2ZUV2ZW50cykge1xyXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGtlZXBBbGl2ZS50aW1lb3V0KTtcclxuICAgICAgdGhpcy51aT8uT25SZW1vdmVUaW1lcihrZWVwQWxpdmUuZXZlbnQsIGZhbHNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgX0NsZWFyRXhjZXB0UnVubmluZ0R1cmF0aW9uVGltZXJzKGZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IGR1cmF0aW9uRXZlbnRzID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIHRoaXMuYWN0aXZlRXZlbnRzKSB7XHJcbiAgICAgIGlmIChldmVudC5pc0R1ciAmJiBldmVudC50aW1lID4gZmlnaHROb3cpIHtcclxuICAgICAgICBkdXJhdGlvbkV2ZW50cy5wdXNoKGV2ZW50KTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnVpPy5PblJlbW92ZVRpbWVyKGV2ZW50LCB0cnVlKTtcclxuICAgIH1cclxuICAgIC8vIERvIG5vdCBjbGVhciBrZWVwIGFsaXZlIGV2ZW50cyBoZXJlLCBhcyB0aGlzIGlzIHBhcnQgb2YgYSBzeW5jIGp1bXBcclxuICAgIC8vIGFuZCBrZWVwIGFsaXZlIHRpbWluZyBpcyBpbmRlcGVuZGVudCBvZiB0aW1lbGluZSB0aW1lLlxyXG5cclxuICAgIHRoaXMuYWN0aXZlRXZlbnRzID0gZHVyYXRpb25FdmVudHM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9SZW1vdmVFeHBpcmVkVGltZXJzKGZpZ2h0Tm93OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIGxldCBhY3RpdmVFdmVudCA9IHRoaXMuYWN0aXZlRXZlbnRzWzBdO1xyXG4gICAgd2hpbGUgKHRoaXMuYWN0aXZlRXZlbnRzLmxlbmd0aCAmJiBhY3RpdmVFdmVudCAmJiBhY3RpdmVFdmVudC50aW1lIDw9IGZpZ2h0Tm93KSB7XHJcbiAgICAgIGNvbnN0IGV2ZW50ID0gYWN0aXZlRXZlbnQ7XHJcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm9wdGlvbnMuS2VlcEV4cGlyZWRUaW1lckJhcnNGb3JTZWNvbmRzID4gMCkge1xyXG4gICAgICAgIHRoaXMua2VlcEFsaXZlRXZlbnRzLnB1c2goe1xyXG4gICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgdGltZW91dDogd2luZG93LnNldFRpbWVvdXQoXHJcbiAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAvLyBGaW5kIGFuZCByZW1vdmUgdGhlIGZpcnN0IGtlZXBhbGl2ZSBldmVudCB3aXRoIHRoaXMgaWQuXHJcbiAgICAgICAgICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgdGhpcy5rZWVwQWxpdmVFdmVudHMgPSB0aGlzLmtlZXBBbGl2ZUV2ZW50cy5maWx0ZXIoKHgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZClcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoeC5ldmVudC5pZCA9PT0gZXZlbnQuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB0aGlzLnVpPy5PblJlbW92ZVRpbWVyKGV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgLy8gQmVjYXVzZSBrZWVwYWxpdmUgZXZlbnRzIGFyZSBpbiBcInJlYWwgdGltZVwiIGp1c3QgdXBkYXRlIHRoZSB0aW1lclxyXG4gICAgICAgICAgICAgIC8vIHdoZW5ldmVyIGFueSBoYXMgYmVlbiByZW1vdmVkIGluIGNhc2UgbW9yZSBiYXJzIG5lZWQgdG8gYmUgYWRkZWQuXHJcbiAgICAgICAgICAgICAgdGhpcy5fT25VcGRhdGVUaW1lcihEYXRlLm5vdygpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLktlZXBFeHBpcmVkVGltZXJCYXJzRm9yU2Vjb25kcyAqIDEwMDAsXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudWk/Lk9uUmVtb3ZlVGltZXIoYWN0aXZlRXZlbnQsIGZhbHNlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5hY3RpdmVFdmVudHMuc3BsaWNlKDAsIDEpO1xyXG4gICAgICBhY3RpdmVFdmVudCA9IHRoaXMuYWN0aXZlRXZlbnRzWzBdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfQWRkRHVyYXRpb25UaW1lcnMoZmlnaHROb3c6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgZXZlbnRzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWN0aXZlRXZlbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGUgPSB0aGlzLmFjdGl2ZUV2ZW50c1tpXTtcclxuICAgICAgaWYgKGUgJiYgZS50aW1lIDw9IGZpZ2h0Tm93ICYmIGUuZHVyYXRpb24pIHtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbkV2ZW50OiBFdmVudCA9IHtcclxuICAgICAgICAgIC8vIEZJWE1FOiBpdCBpcyBpbmNvcnJlY3QgdG8gaGF2ZSBhIGR1cmF0aW9uIHRpbWVyIHNoYXJlIGFuIGlkIHdpdGggaXRzIG5vbi1kdXJhdGlvblxyXG4gICAgICAgICAgLy8gb3JpZ2luIHdoZW4gdGhlIGR1cmF0aW9uIGV4dGVuZHMgYWNyb3NzIHRoZSBlbmQgb2YgYSBzaG9ydCBsb29wLiAgUmUtYWRkaW5nIHRoZVxyXG4gICAgICAgICAgLy8gbm9uLWR1cmF0aW9uIG9yaWdpbiB3aWxsIHJlbW92ZSAoZHVlIHRvIHNhbWUgaWQpIHRoZSBvbmdvaW5nIGR1cmF0aW9uIHRpbWVyLlxyXG4gICAgICAgICAgLy8gSE9XRVZFUiwgdGhlcmUncyBhbHNvIHZhcmlvdXMgaXNzdWVzIChzb3J0S2V5IGlzIGluY29ycmVjdCwgYW5kIGFjdGl2ZUV2ZW50LnRpbWVcclxuICAgICAgICAgIC8vIGFsc28gbmVlZHMgdG8gYmUgYWRqdXN0ZWQpIHNvIGZvciBub3cgd2UnbGwgd29yayBhcm91bmQgdGhpcyBieSBqdXN0IG5vdCBzdXBwb3J0aW5nXHJcbiAgICAgICAgICAvLyBkdXJhdGlvbnMgdGhhdCBleHRlbmQgYWNyb3NzIGp1bXBzLlxyXG4gICAgICAgICAgLy9cclxuICAgICAgICAgIC8vIEV4YW1wbGUgdGltZWxpbmU6XHJcbiAgICAgICAgICAvLyAgIDMgXCJMb29wIFRhcmdldFwiXHJcbiAgICAgICAgICAvLyAgIDcgXCJMb25nIER1cmF0aW9uIEV2ZW50XCIgZHVyYXRpb24gMTAwXHJcbiAgICAgICAgICAvLyAgIDggXCJKdW1wIEJhY2t3YXJkcyB0byBMb29wIFRhcmdldFwiIHN5bmMgL2V0Yy8ganVtcCAzXHJcbiAgICAgICAgICBpZDogZS5pZCxcclxuICAgICAgICAgIHRpbWU6IGUudGltZSArIGUuZHVyYXRpb24sXHJcbiAgICAgICAgICBzb3J0S2V5OiBlLnNvcnRLZXksXHJcbiAgICAgICAgICBuYW1lOiBlLm5hbWUsXHJcbiAgICAgICAgICB0ZXh0OiBgJHt0aGlzLmFjdGl2ZVRleHR9ICR7ZS50ZXh0fWAsXHJcbiAgICAgICAgICBpc0R1cjogdHJ1ZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGV2ZW50cy5wdXNoKGR1cmF0aW9uRXZlbnQpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlRXZlbnRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB0aGlzLnVpPy5PblJlbW92ZVRpbWVyKGUsIHRydWUpO1xyXG4gICAgICAgIHRoaXMudWk/Lk9uQWRkVGltZXIoZmlnaHROb3csIGR1cmF0aW9uRXZlbnQsIHRydWUpO1xyXG4gICAgICAgIC0taTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGV2ZW50cy5sZW5ndGgpXHJcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRoaXMuYWN0aXZlRXZlbnRzLCBldmVudHMpO1xyXG4gICAgdGhpcy5hY3RpdmVFdmVudHMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICByZXR1cm4gYS50aW1lIC0gYi50aW1lO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9BZGRVcGNvbWluZ1RpbWVycyhmaWdodE5vdzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB3aGlsZSAoXHJcbiAgICAgIHRoaXMubmV4dEV2ZW50U3RhdGUuaW5kZXggPCB0aGlzLmV2ZW50cy5sZW5ndGggJiZcclxuICAgICAgdGhpcy5hY3RpdmVFdmVudHMubGVuZ3RoICsgdGhpcy5rZWVwQWxpdmVFdmVudHMubGVuZ3RoIDwgdGhpcy5vcHRpb25zLk1heE51bWJlck9mVGltZXJCYXJzXHJcbiAgICApIHtcclxuICAgICAgY29uc3QgZSA9IHRoaXMuZXZlbnRzW3RoaXMubmV4dEV2ZW50U3RhdGUuaW5kZXhdO1xyXG4gICAgICBpZiAoZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuXHJcbiAgICAgIC8vIElmIHdlIGhhdmUgdG9vIG1hbnkgYmFycywganVzdCBob2xkIGF0IHRoaXMgbmV4dCBldmVudCBzdGF0ZVxyXG4gICAgICAvLyB1bnRpbCBzcGFjZSBmcmVlcyB1cCBhbmQgd2UgY2FuIHN0YXJ0IHByb2Nlc3NpbmcgYWdhaW4uXHJcbiAgICAgIGNvbnN0IHRpbWVVbnRpbEV2ZW50ID0gZS50aW1lICsgdGhpcy5uZXh0RXZlbnRTdGF0ZS50aW1lT2Zmc2V0IC0gZmlnaHROb3c7XHJcbiAgICAgIGlmICh0aW1lVW50aWxFdmVudCA+IHRoaXMub3B0aW9ucy5TaG93VGltZXJCYXJzQXRTZWNvbmRzKVxyXG4gICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgKyt0aGlzLm5leHRFdmVudFN0YXRlLmluZGV4O1xyXG5cclxuICAgICAgLy8gSWYgdGhpcyBldmVudCBpcyBiZWZvcmUgYSBmb3JjZWQganVtcCBvciBoYXMgYWxyZWFkeSBoYXBwZW5lZCwgc2tpcC5cclxuICAgICAgaWYgKGUudGltZSA8PSB0aGlzLm5leHRFdmVudFN0YXRlLm1pbkZpZ2h0Tm93IHx8IHRpbWVVbnRpbEV2ZW50IDw9IDApXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBpZiAoIShlLm5hbWUgaW4gdGhpcy5pZ25vcmVzKSkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUV2ZW50OiBFdmVudCA9IHtcclxuICAgICAgICAgIC4uLmUsXHJcbiAgICAgICAgICBpZDogYCR7ZS5pZH0tJHt0aGlzLm5leHRFdmVudFN0YXRlLmp1bXBDb3VudH1gLFxyXG4gICAgICAgICAgdGltZTogZS50aW1lICsgdGhpcy5uZXh0RXZlbnRTdGF0ZS50aW1lT2Zmc2V0LFxyXG4gICAgICAgICAgc29ydEtleTogZS5zb3J0S2V5ICsgdGhpcy5uZXh0RXZlbnRTdGF0ZS5zb3J0S2V5T2Zmc2V0LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hY3RpdmVFdmVudHMucHVzaChhY3RpdmVFdmVudCk7XHJcbiAgICAgICAgdGhpcy51aT8uT25BZGRUaW1lcihmaWdodE5vdywgYWN0aXZlRXZlbnQsIGZhbHNlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgc3luYyA9IGUuc3luYztcclxuICAgICAgaWYgKHN5bmM/Lmp1bXBUeXBlID09PSAnZm9yY2UnICYmIHN5bmM/Lmp1bXAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMubmV4dEV2ZW50U3RhdGUuaW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMubmV4dEV2ZW50U3RhdGUubWluRmlnaHROb3cgPSBzeW5jLmp1bXA7XHJcbiAgICAgICAgdGhpcy5uZXh0RXZlbnRTdGF0ZS50aW1lT2Zmc2V0ICs9IHN5bmMudGltZSAtIHN5bmMuanVtcDtcclxuICAgICAgICB0aGlzLm5leHRFdmVudFN0YXRlLmp1bXBDb3VudCsrO1xyXG4gICAgICAgIC8vIEFsbCBldmVudHMgYXJlIG51bWJlcmVkIHdpdGggYSBzb3J0IGtleS4gIFdlIGNvdWxkIGZpbmQgdGhlIG1heCBzb3J0IGtleSBvZiBhbGxcclxuICAgICAgICAvLyB0aW1lbGluZSBlbnRyaWVzIGFuZCBtdWx0aXBseSBieSBqdW1wIGNvdW50IHRvIGdldCBhbiBvcmRlcmluZyBzdWNoIHRoYXRcclxuICAgICAgICAvLyBhbGwgc29ydCBrZXlzIGF0IGEgaGlnaGVyIGp1bXAgY291bnQgc29ydCBhZnRlciBwcmV2aW91cyBvbmVzLiAgSG93ZXZlcixcclxuICAgICAgICAvLyBzaW5jZSB3ZSBkb2luZyBhIGZvcmNlZCBqdW1wIGxvb2thaGVhZCBhdCB0aGlzIHBvaW50LCB3ZSB3aWxsIG5ldmVyIHNlZSBhbnl0aGluZyBoaWdoZXJcclxuICAgICAgICAvLyB0aGFuIGBlLnNvcnRLZXlgLCBzbyB3ZSBjYW4gdXNlIHRoYXQgYXMgYSBtYXguICBPbmNlIHRoZSB0aW1lbGluZSBzeW5jcyBmb3IgYW55XHJcbiAgICAgICAgLy8gcmVhc29uLCB3ZSdsbCBiZSBiYWNrIHRvIGp1bXBDb3VudD0wIGFuZCBub3JtYWwgc29ydCBrZXlzLiAgU2FkbHksIHRoaXMgd2lsbCBub3RcclxuICAgICAgICAvLyBiZSB0cnVlIGlmIHdlIGV2ZXIgZml4IHRoZSBkdXJhdGlvbiBidWcgYWNyb3NzIGxvb3BzIChzZWUgY29tbWVudHMgaW5saW5lKVxyXG4gICAgICAgIC8vIGJ1dCBpdCdzIGEgYmFuZC1haWQgZm9yIG5vdywgc29ycnkuICBQcm9iYWJseSBIdG1sVGltZWxpbmVVSSBuZWVkcyBzbWFydGVyIG9yZGVyaW5nLlxyXG4gICAgICAgIHRoaXMubmV4dEV2ZW50U3RhdGUuc29ydEtleU9mZnNldCA9IGUuc29ydEtleSAqIHRoaXMubmV4dEV2ZW50U3RhdGUuanVtcENvdW50O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9BZGRQYXNzZWRUZXh0cyhmaWdodE5vdzogbnVtYmVyLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB3aGlsZSAodGhpcy5uZXh0VGV4dCA8IHRoaXMudGV4dHMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IHQgPSB0aGlzLnRleHRzW3RoaXMubmV4dFRleHRdO1xyXG4gICAgICBpZiAoIXQpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGlmICh0LnRpbWUgPiBmaWdodE5vdylcclxuICAgICAgICBicmVhaztcclxuICAgICAgaWYgKHQudHlwZSA9PT0gJ2luZm8nKVxyXG4gICAgICAgIHRoaXMudWk/Lk9uU2hvd0luZm9UZXh0KHQudGV4dCwgY3VycmVudFRpbWUpO1xyXG4gICAgICBlbHNlIGlmICh0LnR5cGUgPT09ICdhbGVydCcpXHJcbiAgICAgICAgdGhpcy51aT8uT25TaG93QWxlcnRUZXh0KHQudGV4dCwgY3VycmVudFRpbWUpO1xyXG4gICAgICBlbHNlIGlmICh0LnR5cGUgPT09ICdhbGFybScpXHJcbiAgICAgICAgdGhpcy51aT8uT25TaG93QWxhcm1UZXh0KHQudGV4dCwgY3VycmVudFRpbWUpO1xyXG4gICAgICBlbHNlIGlmICh0LnR5cGUgPT09ICd0dHMnKVxyXG4gICAgICAgIHRoaXMudWk/Lk9uU3BlYWtUVFModC50ZXh0LCBjdXJyZW50VGltZSk7XHJcbiAgICAgIGVsc2UgaWYgKHQudHlwZSA9PT0gJ3RyaWdnZXInKVxyXG4gICAgICAgIHRoaXMudWk/Lk9uVHJpZ2dlcih0LnRyaWdnZXIsIHQubWF0Y2hlcywgY3VycmVudFRpbWUpO1xyXG4gICAgICArK3RoaXMubmV4dFRleHQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9DYW5jZWxVcGRhdGUoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy51cGRhdGVUaW1lcikge1xyXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudXBkYXRlVGltZXIpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRpbWVyID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBfU2NoZWR1bGVVcGRhdGUoZmlnaHROb3c6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc29sZS5hc3NlcnQodGhpcy50aW1lYmFzZSwgJ19TY2hlZHVsZVVwZGF0ZSBjYWxsZWQgd2hpbGUgc3RvcHBlZCcpO1xyXG5cclxuICAgIGxldCBuZXh0RXZlbnRTdGFydGluZyA9IGtCaWc7XHJcbiAgICBsZXQgbmV4dFRleHRPY2N1cnMgPSBrQmlnO1xyXG4gICAgbGV0IG5leHRFdmVudEVuZGluZyA9IGtCaWc7XHJcbiAgICBsZXQgbmV4dFN5bmNTdGFydGluZyA9IGtCaWc7XHJcbiAgICBsZXQgbmV4dFN5bmNFbmRpbmcgPSBrQmlnO1xyXG5cclxuICAgIGlmICh0aGlzLm5leHRFdmVudFN0YXRlLmluZGV4IDwgdGhpcy5ldmVudHMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IG5leHRFdmVudCA9IHRoaXMuZXZlbnRzW3RoaXMubmV4dEV2ZW50U3RhdGUuaW5kZXhdO1xyXG4gICAgICBpZiAobmV4dEV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgbmV4dEV2ZW50RW5kc0F0ID0gbmV4dEV2ZW50LnRpbWUgKyB0aGlzLm5leHRFdmVudFN0YXRlLnRpbWVPZmZzZXQ7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoXHJcbiAgICAgICAgICBuZXh0RXZlbnRTdGFydGluZyA+IGZpZ2h0Tm93LFxyXG4gICAgICAgICAgJ25leHRFdmVudCB3YXNuXFwndCB1cGRhdGVkIGJlZm9yZSBjYWxsaW5nIF9TY2hlZHVsZVVwZGF0ZScsXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBUaGVyZSBtaWdodCBiZSBtb3JlIGV2ZW50cyB0aGFuIHdlIGNhbiBzaG93LCBzbyB0aGUgbmV4dCBldmVudCBtaWdodCBiZSBpblxyXG4gICAgICAgIC8vIHRoZSBwYXN0LiBJZiB0aGF0IGhhcHBlbnMsIHRoZW4gaWdub3JlIGl0LCBhcyB3ZSBjYW4ndCB1c2UgdGhhdCBmb3Igb3VyIHRpbWVyLlxyXG4gICAgICAgIGNvbnN0IHNob3dOZXh0RXZlbnRBdCA9IG5leHRFdmVudEVuZHNBdCAtIHRoaXMub3B0aW9ucy5TaG93VGltZXJCYXJzQXRTZWNvbmRzO1xyXG4gICAgICAgIGlmIChzaG93TmV4dEV2ZW50QXQgPiBmaWdodE5vdylcclxuICAgICAgICAgIG5leHRFdmVudFN0YXJ0aW5nID0gc2hvd05leHRFdmVudEF0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5uZXh0VGV4dCA8IHRoaXMudGV4dHMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IG5leHRUZXh0ID0gdGhpcy50ZXh0c1t0aGlzLm5leHRUZXh0XTtcclxuICAgICAgaWYgKG5leHRUZXh0KSB7XHJcbiAgICAgICAgbmV4dFRleHRPY2N1cnMgPSBuZXh0VGV4dC50aW1lO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KFxyXG4gICAgICAgICAgbmV4dFRleHRPY2N1cnMgPiBmaWdodE5vdyxcclxuICAgICAgICAgICduZXh0VGV4dCB3YXNuXFwndCB1cGRhdGVkIGJlZm9yZSBjYWxsaW5nIF9TY2hlZHVsZVVwZGF0ZScsXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuYWN0aXZlRXZlbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgYWN0aXZlRXZlbnQgPSB0aGlzLmFjdGl2ZUV2ZW50c1swXTtcclxuICAgICAgaWYgKGFjdGl2ZUV2ZW50KSB7XHJcbiAgICAgICAgbmV4dEV2ZW50RW5kaW5nID0gYWN0aXZlRXZlbnQudGltZTtcclxuICAgICAgICBjb25zb2xlLmFzc2VydChcclxuICAgICAgICAgIG5leHRFdmVudEVuZGluZyA+IGZpZ2h0Tm93LFxyXG4gICAgICAgICAgJ0V4cGlyZWQgYWN0aXZlRXZlbnRzIHdlcmVuXFwndCBwcnVuZWQgYmVmb3JlIGNhbGxpbmcgX1NjaGVkdWxlVXBkYXRlJyxcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5uZXh0U3luY1N0YXJ0IDwgdGhpcy5zeW5jU3RhcnRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBzeW5jU3RhcnRzID0gdGhpcy5zeW5jU3RhcnRzW3RoaXMubmV4dFN5bmNTdGFydF07XHJcbiAgICAgIGlmIChzeW5jU3RhcnRzKSB7XHJcbiAgICAgICAgbmV4dFN5bmNTdGFydGluZyA9IHN5bmNTdGFydHMuc3RhcnQ7XHJcbiAgICAgICAgY29uc29sZS5hc3NlcnQoXHJcbiAgICAgICAgICBuZXh0U3luY1N0YXJ0aW5nID4gZmlnaHROb3csXHJcbiAgICAgICAgICAnbmV4dFN5bmNTdGFydCB3YXNuXFwndCB1cGRhdGVkIGJlZm9yZSBjYWxsaW5nIF9TY2hlZHVsZVVwZGF0ZScsXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubmV4dFN5bmNFbmQgPCB0aGlzLnN5bmNFbmRzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCBzeW5jRW5kcyA9IHRoaXMuc3luY0VuZHNbdGhpcy5uZXh0U3luY0VuZF07XHJcbiAgICAgIGlmIChzeW5jRW5kcykge1xyXG4gICAgICAgIG5leHRTeW5jRW5kaW5nID0gc3luY0VuZHMuZW5kO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KFxyXG4gICAgICAgICAgbmV4dFN5bmNFbmRpbmcgPiBmaWdodE5vdyxcclxuICAgICAgICAgICduZXh0U3luY0VuZCB3YXNuXFwndCB1cGRhdGVkIGJlZm9yZSBjYWxsaW5nIF9TY2hlZHVsZVVwZGF0ZScsXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZvcmNlRW5kID0gdGhpcy5hY3RpdmVMYXN0Rm9yY2VKdW1wU3luYz8uZW5kO1xyXG4gICAgaWYgKGZvcmNlRW5kICE9PSB1bmRlZmluZWQgJiYgZm9yY2VFbmQgPCBuZXh0U3luY0VuZGluZylcclxuICAgICAgbmV4dFN5bmNFbmRpbmcgPSBmb3JjZUVuZDtcclxuXHJcbiAgICBjb25zdCBuZXh0VGltZSA9IE1hdGgubWluKFxyXG4gICAgICBuZXh0RXZlbnRTdGFydGluZyxcclxuICAgICAgbmV4dEV2ZW50RW5kaW5nLFxyXG4gICAgICBuZXh0VGV4dE9jY3VycyxcclxuICAgICAgbmV4dFN5bmNTdGFydGluZyxcclxuICAgICAgbmV4dFN5bmNFbmRpbmcsXHJcbiAgICApO1xyXG4gICAgaWYgKG5leHRUaW1lID09PSBrQmlnKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc29sZS5hc3NlcnQobmV4dFRpbWUgPiBmaWdodE5vdywgJ25leHRUaW1lIGlzIGluIHRoZSBwYXN0Jyk7XHJcbiAgICB0aGlzLl9DYW5jZWxVcGRhdGUoKTtcclxuICAgIHRoaXMudXBkYXRlVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChcclxuICAgICAgKCkgPT4gdGhpcy5fT25VcGRhdGVUaW1lcihEYXRlLm5vdygpKSxcclxuICAgICAgKG5leHRUaW1lIC0gZmlnaHROb3cpICogMTAwMCxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgX09uVXBkYXRlVGltZXIoY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc29sZS5hc3NlcnQodGhpcy50aW1lYmFzZSwgJ19PblRpbWVyVXBkYXRlIGNhbGxlZCB3aGlsZSBzdG9wcGVkJyk7XHJcbiAgICAvLyBSb3VuZCB0byB+MzBtcyBwcmVjaXNpb24gdG8gYXZvaWQgbWljcm8gY2hhbmdlcyBvZiBmaWdodE5vdyBmcm9tIDEwIHRvIDEwLjAwMy5cclxuICAgIC8vIEFsc28gcm91bmQgKnVwKiwgYXMgdGhlc2UgdGltZXJzIGFyZSBhbHdheXMgc2NoZWR1bGVkIGZvciB0aGUgbmV4dCBldmVudFxyXG4gICAgLy8gYW5kIGl0IGRvZXNuJ3QgbWFrZSBzZW5zZSB0byBzY2hlZHVsZSBzb21ldGhpbmcgZm9yIDAuOHMgb3V0IGFuZCB0aGVuXHJcbiAgICAvLyByb3VuZCBkb3duIHRvIDAuNzk5cyBhbmQgbmVlZCBhbm90aGVyIHRpbWVyIHRvIGhhdmUgdGhhdCB0ZXh0IGNvbXBsZXRlLlxyXG4gICAgY29uc3QgZmlnaHROb3cgPSBNYXRoLmNlaWwoMzIgKiAoY3VycmVudFRpbWUgLSB0aGlzLnRpbWViYXNlKSAvIDEwMDApIC8gMzI7XHJcblxyXG4gICAgLy8gVW5saWtlIG90aGVyIGp1bXBzIHdoaWNoIGhhcHBlbiBcImltbWVkaWF0ZWx5XCIsIGFuIHVuY29uZGl0aW9uYWwganVtcCBtYXkgaGF2ZSBoYXBwZW5lZFxyXG4gICAgLy8gaW4gdGhlIHBhc3QgKCsvLSBzb21lIHRpbWVyIHZhcmlhdGlvbikuICBTaG91bGQgd2UganVzdCBjb25zaWRlciB0aGF0IHRoZSB1cGRhdGVcclxuICAgIC8vIGFsd2F5cyBoYXBwZW5zIGV4YWN0bHkgYXQgdGhlIHRpbWUgaXQgc2hvdWxkP1xyXG4gICAgY29uc3QgdW5jb25kaXRpb25hbEp1bXAgPSB0aGlzLl9DaGVja1VuY29uZGl0aW9uYWxKdW1wKGZpZ2h0Tm93KTtcclxuICAgIGlmICh1bmNvbmRpdGlvbmFsSnVtcCkge1xyXG4gICAgICBjb25zdCBqdW1wU291cmNlID0gdW5jb25kaXRpb25hbEp1bXAudGltZTtcclxuICAgICAgdGhpcy5fQWRkUGFzc2VkVGV4dHMoanVtcFNvdXJjZSwgY3VycmVudFRpbWUpO1xyXG4gICAgICBjb25zdCBqdW1wRGVzdCA9IHVuY29uZGl0aW9uYWxKdW1wLmp1bXA7XHJcbiAgICAgIGlmIChqdW1wRGVzdCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNvZGUoKTtcclxuICAgICAgY29uc3Qgb2Zmc2V0ID0gZmlnaHROb3cgLSBqdW1wU291cmNlO1xyXG4gICAgICB0aGlzLlN5bmNUbyhqdW1wRGVzdCwgY3VycmVudFRpbWUgLSBvZmZzZXQpO1xyXG5cclxuICAgICAgLy8gSGFuZGxlIFwib3ZlcmhhbmdpbmdcIiB3aW5kb3dzIG9uIHVuY29uZGl0aW9uYWwganVtcHMsIGJ5IHJld3JpdGluZzpcclxuICAgICAgLy8gICBvbGQ6IDUwMC4wIHN5bmMgL3NvbWV0aGluZy8gd2luZG93IDIwLDEwIGp1bXAgMzAwXHJcbiAgICAgIC8vICAgbmV3OiAzMDAuMCBzeW5jIC9zb21ldGhpbmcgd2luZG93IDAsMTAganVtcCAzMDBcclxuICAgICAgdGhpcy5hY3RpdmVMYXN0Rm9yY2VKdW1wU3luYyA9IHtcclxuICAgICAgICAuLi51bmNvbmRpdGlvbmFsSnVtcCxcclxuICAgICAgICB0aW1lOiBqdW1wRGVzdCxcclxuICAgICAgICBzdGFydDoganVtcERlc3QsXHJcbiAgICAgICAgZW5kOiB1bmNvbmRpdGlvbmFsSnVtcC5lbmQgLSB1bmNvbmRpdGlvbmFsSnVtcC50aW1lICsganVtcERlc3QsXHJcbiAgICAgICAganVtcFR5cGU6ICdub3JtYWwnLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5fT25VcGRhdGVUaW1lcihjdXJyZW50VGltZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZW5kIHRleHQgZXZlbnRzIG5vdyBvciB0aGV5J2QgYmUgc2tpcHBlZCBieSBfQWR2YW5jZVRpbWVUbygpLlxyXG4gICAgdGhpcy5fQWRkUGFzc2VkVGV4dHMoZmlnaHROb3csIGN1cnJlbnRUaW1lKTtcclxuICAgIHRoaXMuX0FkdmFuY2VUaW1lVG8oZmlnaHROb3cpO1xyXG4gICAgdGhpcy5fQ29sbGVjdEFjdGl2ZVN5bmNzKGZpZ2h0Tm93KTtcclxuXHJcbiAgICB0aGlzLl9BZGREdXJhdGlvblRpbWVycyhmaWdodE5vdyk7XHJcbiAgICB0aGlzLl9SZW1vdmVFeHBpcmVkVGltZXJzKGZpZ2h0Tm93KTtcclxuICAgIHRoaXMuX0FkZFVwY29taW5nVGltZXJzKGZpZ2h0Tm93KTtcclxuICAgIHRoaXMuX1NjaGVkdWxlVXBkYXRlKGZpZ2h0Tm93KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBfQ2hlY2tVbmNvbmRpdGlvbmFsSnVtcChmaWdodE5vdzogbnVtYmVyKTogU3luYyB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBmb3JjZUp1bXAgPSB0aGlzLmZvcmNlSnVtcHNbdGhpcy5uZXh0Rm9yY2VKdW1wXTtcclxuICAgIGlmIChmb3JjZUp1bXAgJiYgZm9yY2VKdW1wLnRpbWUgPD0gZmlnaHROb3cpXHJcbiAgICAgIHJldHVybiBmb3JjZUp1bXA7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGltZWxpbmVDb250cm9sbGVyIHtcclxuICBwcm90ZWN0ZWQgdGltZWxpbmVzOiB7IFtmaWxlbmFtZTogc3RyaW5nXTogc3RyaW5nIH07XHJcblxyXG4gIHByaXZhdGUgc3VwcHJlc3NOZXh0RW5nYWdlOiBib29sZWFuO1xyXG4gIHByaXZhdGUgd2lwZVJlZ2V4OiBDYWN0Ym90QmFzZVJlZ0V4cDwnQWN0b3JDb250cm9sJz47XHJcbiAgcHJvdGVjdGVkIGFjdGl2ZVRpbWVsaW5lOiBUaW1lbGluZSB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBvcHRpb25zOiBSYWlkYm9zc09wdGlvbnMsXHJcbiAgICBwcm90ZWN0ZWQgdWk6IFRpbWVsaW5lVUksXHJcbiAgICByYWlkYm9zc0RhdGFGaWxlczogUmFpZGJvc3NGaWxlRGF0YSxcclxuICApIHtcclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB0aGlzLnVpID0gdWk7XHJcblxyXG4gICAgdGhpcy50aW1lbGluZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3QgW2ZpbGVuYW1lLCBmaWxlXSBvZiBPYmplY3QuZW50cmllcyhyYWlkYm9zc0RhdGFGaWxlcykpIHtcclxuICAgICAgaWYgKCFmaWxlbmFtZS5lbmRzV2l0aCgnLnR4dCcpIHx8IHR5cGVvZiBmaWxlICE9PSAnc3RyaW5nJylcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgdGhpcy50aW1lbGluZXNbZmlsZW5hbWVdID0gZmlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2VkIHRvIHN1cHByZXNzIGFueSBFbmdhZ2UhIGlmIHRoZXJlJ3MgYSB3aXBlIGJldHdlZW4gL2NvdW50ZG93biBhbmQgRW5nYWdlIS5cclxuICAgIHRoaXMuc3VwcHJlc3NOZXh0RW5nYWdlID0gZmFsc2U7XHJcbiAgICB0aGlzLndpcGVSZWdleCA9IGNvbW1vbk5ldFJlZ2V4LndpcGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgU2V0UG9wdXBUZXh0SW50ZXJmYWNlKHBvcHVwVGV4dDogUG9wdXBUZXh0R2VuZXJhdG9yKTogdm9pZCB7XHJcbiAgICB0aGlzLnVpLlNldFBvcHVwVGV4dEludGVyZmFjZShwb3B1cFRleHQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFNldEluQ29tYmF0KGluQ29tYmF0OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAvLyBXaXBlIGxpbmVzIGNvbWUgYmVmb3JlIGNvbWJhdCBpcyBmYWxzZSwgYnV0IGJlY2F1c2UgT25Mb2dFdmVudCBkb2Vzbid0IHByb2Nlc3NcclxuICAgIC8vIGxpbmVzIHdoZW4gb3V0IG9mIGNvbWJhdCwgc3VwcHJlc3MgYW55IGVuZ2FnZXMgdGhhdCBjb21lIGJlZm9yZSB0aGUgbmV4dCBjb3VudGRvd25cclxuICAgIC8vIGp1c3QgYXMgYSBzYWZldHksIGVzcGVjaWFsbHkgZm9yIG9sZCBBUlIgY29udGVudCB3aGVyZSB3aXBlIGxpbmVzIGRvbid0IGhhcHBlbi5cclxuICAgIGlmICghaW5Db21iYXQpXHJcbiAgICAgIHRoaXMuc3VwcHJlc3NOZXh0RW5nYWdlID0gdHJ1ZTtcclxuICAgIGlmICghaW5Db21iYXQgJiYgdGhpcy5hY3RpdmVUaW1lbGluZSlcclxuICAgICAgdGhpcy5hY3RpdmVUaW1lbGluZS5TdG9wKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgT25Mb2dFdmVudChlOiBMb2dFdmVudCk6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLmFjdGl2ZVRpbWVsaW5lKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgIGZvciAoY29uc3QgbG9nIG9mIGUuZGV0YWlsLmxvZ3MpIHtcclxuICAgICAgaWYgKExvY2FsZVJlZ2V4LmNvdW50ZG93blN0YXJ0W3RoaXMub3B0aW9ucy5QYXJzZXJMYW5ndWFnZV0udGVzdChsb2cpKSB7XHJcbiAgICAgICAgLy8gQXMgeW91IGNhbid0IHN0YXJ0IGEgY291bnRkb3duIHdoaWxlIGluIGNvbWJhdCwgdGhlIG5leHQgZW5nYWdlIGlzIHJlYWwuXHJcbiAgICAgICAgdGhpcy5zdXBwcmVzc05leHRFbmdhZ2UgPSBmYWxzZTtcclxuICAgICAgfSBlbHNlIGlmIChMb2NhbGVSZWdleC5jb3VudGRvd25FbmdhZ2VbdGhpcy5vcHRpb25zLlBhcnNlckxhbmd1YWdlXS50ZXN0KGxvZykpIHtcclxuICAgICAgICAvLyBJZiB3ZSBzZWUgYW4gZW5nYWdlIGFmdGVyIGEgd2lwZSwgYnV0IGJlZm9yZSBjb21iYXQgaGFzIHN0YXJ0ZWQgb3RoZXJ3aXNlXHJcbiAgICAgICAgLy8gKGUuZy4gY291bnRkb3duID4gd2lwZSA+IGZhY2UgcHVsbCA+IGVuZ2FnZSksIGRvbid0IHByb2Nlc3MgdGhpcyBlbmdhZ2UgbGluZVxyXG4gICAgICAgIGlmICh0aGlzLnN1cHByZXNzTmV4dEVuZ2FnZSlcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMud2lwZVJlZ2V4LnRlc3QobG9nKSkge1xyXG4gICAgICAgIC8vIElmIHdlIHNlZSBhIHdpcGUsIGlnbm9yZSB0aGUgbmV4dCBlbmdhZ2UuICBJZiB3ZSBzZWUgYSBjb3VudGRvd24gYmVmb3JlIHRoYXQgd2lwZSxcclxuICAgICAgICAvLyB3ZSB3aWxsIGNsZWFyIHRoaXMuICBUaGVyZWZvcmUsIHRoaXMgd2lsbCBvbmx5IGFwcGx5IHRvIGFjdGl2ZSBjb3VudGRvd25zLlxyXG4gICAgICAgIHRoaXMuc3VwcHJlc3NOZXh0RW5nYWdlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lLk9uTG9nTGluZShsb2csIGN1cnJlbnRUaW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE9uTmV0TG9nKGU6IEV2ZW50UmVzcG9uc2VzWydMb2dMaW5lJ10pOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5hY3RpdmVUaW1lbGluZSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICAvLyBUT0RPOiBDaGVjayBmb3IgdGhlIGNvdW50ZG93biA9PiB3aXBlID0+IGVuZ2FnZSBsb2dpYyBmb3IgbmV0d29yayBsaW5lc1xyXG4gICAgdGhpcy5hY3RpdmVUaW1lbGluZS5Pbk5ldExvZ0xpbmUoZS5yYXdMaW5lLCBjdXJyZW50VGltZSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgU2V0QWN0aXZlVGltZWxpbmUoXHJcbiAgICB0aW1lbGluZUZpbGVzOiBzdHJpbmdbXSxcclxuICAgIHRpbWVsaW5lczogc3RyaW5nW10sXHJcbiAgICByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSxcclxuICAgIHRyaWdnZXJzOiBMb29zZVRpbWVsaW5lVHJpZ2dlcltdLFxyXG4gICAgc3R5bGVzOiBUaW1lbGluZVN0eWxlW10sXHJcbiAgICB6b25lSWQ6IG51bWJlcixcclxuICApOiB2b2lkIHtcclxuICAgIHRoaXMuYWN0aXZlVGltZWxpbmUgPSBudWxsO1xyXG5cclxuICAgIGxldCB0ZXh0ID0gJyc7XHJcblxyXG4gICAgLy8gR2V0IHRoZSB0ZXh0IGZyb20gZWFjaCBmaWxlIGluIHx0aW1lbGluZUZpbGVzfC5cclxuICAgIGZvciAoY29uc3QgdGltZWxpbmVGaWxlIG9mIHRpbWVsaW5lRmlsZXMpIHtcclxuICAgICAgY29uc3QgbmFtZSA9IHRoaXMudGltZWxpbmVzW3RpbWVsaW5lRmlsZV07XHJcbiAgICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGV4dCA9IGAke3RleHR9XFxuJHtuYW1lfWA7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBjb25zb2xlLmxvZyhgVGltZWxpbmUgZmlsZSBub3QgZm91bmQ6ICR7dGltZWxpbmVGaWxlfWApO1xyXG4gICAgfVxyXG4gICAgLy8gQXBwZW5kIHRleHQgZnJvbSBlYWNoIGJsb2NrIGluIHx0aW1lbGluZXN8LlxyXG4gICAgZm9yIChjb25zdCB0aW1lbGluZSBvZiB0aW1lbGluZXMpXHJcbiAgICAgIHRleHQgPSBgJHt0ZXh0fVxcbiR7dGltZWxpbmV9YDtcclxuXHJcbiAgICBpZiAodGV4dCkge1xyXG4gICAgICB0aGlzLmFjdGl2ZVRpbWVsaW5lID0gbmV3IFRpbWVsaW5lKFxyXG4gICAgICAgIHRleHQsXHJcbiAgICAgICAgcmVwbGFjZW1lbnRzLFxyXG4gICAgICAgIHRyaWdnZXJzLFxyXG4gICAgICAgIHN0eWxlcyxcclxuICAgICAgICB0aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgem9uZUlkLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgdGhpcy51aS5TZXRUaW1lbGluZSh0aGlzLmFjdGl2ZVRpbWVsaW5lKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBJc1JlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudGltZWxpbmVzICE9PSBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVsaW5lTG9hZGVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRpbWVsaW5lQ29udHJvbGxlcjogVGltZWxpbmVDb250cm9sbGVyKSB7XHJcbiAgICB0aGlzLnRpbWVsaW5lQ29udHJvbGxlciA9IHRpbWVsaW5lQ29udHJvbGxlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBTZXRUaW1lbGluZXMoXHJcbiAgICB0aW1lbGluZUZpbGVzOiBzdHJpbmdbXSxcclxuICAgIHRpbWVsaW5lczogc3RyaW5nW10sXHJcbiAgICByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSxcclxuICAgIHRyaWdnZXJzOiBMb29zZVRpbWVsaW5lVHJpZ2dlcltdLFxyXG4gICAgc3R5bGVzOiBUaW1lbGluZVN0eWxlW10sXHJcbiAgICB6b25lSWQ6IG51bWJlcixcclxuICApOiB2b2lkIHtcclxuICAgIHRoaXMudGltZWxpbmVDb250cm9sbGVyLlNldEFjdGl2ZVRpbWVsaW5lKFxyXG4gICAgICB0aW1lbGluZUZpbGVzLFxyXG4gICAgICB0aW1lbGluZXMsXHJcbiAgICAgIHJlcGxhY2VtZW50cyxcclxuICAgICAgdHJpZ2dlcnMsXHJcbiAgICAgIHN0eWxlcyxcclxuICAgICAgem9uZUlkLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBJc1JlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudGltZWxpbmVDb250cm9sbGVyLklzUmVhZHkoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBTdG9wQ29tYmF0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50aW1lbGluZUNvbnRyb2xsZXIuU2V0SW5Db21iYXQoZmFsc2UpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMYW5nLCBsYW5nVG9Mb2NhbGUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuaW1wb3J0IHsgVW5yZWFjaGFibGVDb2RlIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL25vdF9yZWFjaGVkJztcclxuaW1wb3J0IFRpbWVyQmFyIGZyb20gJy4uLy4uL3Jlc291cmNlcy90aW1lcmJhcic7XHJcbmltcG9ydCB7IExvb3NlVGltZWxpbmVUcmlnZ2VyIH0gZnJvbSAnLi4vLi4vdHlwZXMvdHJpZ2dlcic7XHJcblxyXG5pbXBvcnQgeyBQb3B1cFRleHRHZW5lcmF0b3IgfSBmcm9tICcuL3BvcHVwLXRleHQnO1xyXG5pbXBvcnQgeyBSYWlkYm9zc09wdGlvbnMgfSBmcm9tICcuL3JhaWRib3NzX29wdGlvbnMnO1xyXG5pbXBvcnQgeyBUaW1lbGluZVVJIH0gZnJvbSAnLi90aW1lbGluZSc7XHJcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi90aW1lbGluZV9wYXJzZXInO1xyXG5cclxuY29uc3Qga0JpZyA9IDEwMDAwMDAwMDA7IC8vIFNvbWV0aGluZyBiaWdnZXIgdGhhbiBhbnkgZmlnaHQgbGVuZ3RoIGluIHNlY29uZHMuXHJcblxyXG5jb25zdCB0aW1lbGluZUluc3RydWN0aW9ucyA9IHtcclxuICBlbjogW1xyXG4gICAgJ1RoZXNlIGxpbmVzIGFyZScsXHJcbiAgICAnZGVidWcgdGltZWxpbmUgZW50cmllcy4nLFxyXG4gICAgJ0lmIHlvdSBsb2NrIHRoZSBvdmVybGF5LCcsXHJcbiAgICAndGhleSB3aWxsIGRpc2FwcGVhciEnLFxyXG4gICAgJ1JlYWwgdGltZWxpbmVzIGF1dG9tYXRpY2FsbHknLFxyXG4gICAgJ2FwcGVhciB3aGVuIHN1cHBvcnRlZC4nLFxyXG4gIF0sXHJcbiAgZGU6IFtcclxuICAgICdEaWVzZSBaZWlsZW4gc2luZCcsXHJcbiAgICAnVGltZWxpbmUgRGVidWctRWludHLDpGdlLicsXHJcbiAgICAnV2VubiBkdSBkYXMgT3ZlcmxheSBzcGVycnN0LCcsXHJcbiAgICAnd2VyZGVuIHNpZSB2ZXJzY2h3aW5kZW4hJyxcclxuICAgICdFY2h0ZSBUaW1lbGluZXMgZXJzY2hlaW5lbiBhdXRvbWF0aXNjaCwnLFxyXG4gICAgJ3dlbm4gc2llIHVudGVyc3TDvHR6dCB3ZXJkZW4uJyxcclxuICBdLFxyXG4gIGZyOiBbXHJcbiAgICAnQ2VzIGxpZ25lcyBzb250JyxcclxuICAgICdkZXMgdGltZWxpbmVzIGRlIHRlc3QuJyxcclxuICAgICdTaSB2b3VzIGJsb3F1ZXogbFxcJ292ZXJsYXksJyxcclxuICAgICdlbGxlcyBkaXNwYXJhw650cm9udCAhJyxcclxuICAgICdMZXMgdnJhaWVzIFRpbWVsaW5lcycsXHJcbiAgICAnYXBwYXJhw650cm9udCBhdXRvbWF0aXF1ZW1lbnQuJyxcclxuICBdLFxyXG4gIGphOiBbXHJcbiAgICAn44GT44Gh44KJ44Gv44OH44OQ44OD44Kw55So44GuJyxcclxuICAgICfjgr/jgqTjg6Djg6njgqTjg7PjgafjgZnjgIInLFxyXG4gICAgJ+OCquODvOODkOODvOODrOOCpOOCkuODreODg+OCr+OBmeOCjOOBsOOAgScsXHJcbiAgICAn44OH44OQ44OD44Kw55So44OG44Kt44K544OI44KC5raI44GI44KLJyxcclxuICAgICfjgrXjg53jg7zjg4jjgZnjgovjgr7jg7zjg7Pjgavjga/jgr/jgqTjg6AnLFxyXG4gICAgJ+ODqeOCpOODs+OCkuWLleeahOOBq+ODreODvOODieOBmeOCi+OAgicsXHJcbiAgXSxcclxuICBjbjogW1xyXG4gICAgJ+aYvuekuuWcqOatpOWkhOeahOaYrycsXHJcbiAgICAn6LCD6K+V55So5pe26Ze06L2044CCJyxcclxuICAgICflsIbmraTmgqzmta7nqpfplIHlrponLFxyXG4gICAgJ+WImeS8mueri+WIu+a2iOWksScsXHJcbiAgICAn55yf5a6e55qE5pe26Ze06L205Lya5qC55o2uJyxcclxuICAgICflvZPliY3ljLrln5/liqjmgIHliqDovb3lubbmmL7npLonLFxyXG4gIF0sXHJcbiAga286IFtcclxuICAgICfsnbQg66eJ64yA67CU64qUIOuUlOuyhOq3uOyaqScsXHJcbiAgICAn7YOA7J6E65287J24IOyeheuLiOuLpC4nLFxyXG4gICAgJ+yYpOuyhOugiOydtOulvCDsnITsuZjsnqDquIjtlZjrqbQsJyxcclxuICAgICfsnbQg66eJ64yA67CU64+EIOyCrOudvOynkeuLiOuLpC4nLFxyXG4gICAgJ+yngOybkOuQmOuKlCDqtazsl63sl5DshJwg7YOA7J6E65287J247J20JyxcclxuICAgICfsnpDrj5nsnLzroZwg7ZGc7Iuc65Cp64uI64ukLicsXHJcbiAgXSxcclxufTtcclxuXHJcbi8vIFRPRE86IER1cGxpY2F0ZWQgaW4gJ2pvYnMnXHJcbmNvbnN0IGNvbXB1dGVCYWNrZ3JvdW5kRnJvbSA9IChlbGVtZW50OiBIVE1MRWxlbWVudCwgY2xhc3NMaXN0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGNvbnN0IGNsYXNzZXMgPSBjbGFzc0xpc3Quc3BsaXQoJy4nKTtcclxuICBmb3IgKGNvbnN0IGNscyBvZiBjbGFzc2VzKVxyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoY2xzKTtcclxuICBlbGVtZW50LmFwcGVuZENoaWxkKGRpdik7XHJcbiAgY29uc3QgY29sb3IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaXYpLmJhY2tncm91bmQ7XHJcbiAgZWxlbWVudC5yZW1vdmVDaGlsZChkaXYpO1xyXG4gIHJldHVybiBjb2xvcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEFjdGl2ZUJhciA9IHtcclxuICBiYXI6IFRpbWVyQmFyO1xyXG4gIHNvb25UaW1lb3V0PzogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEhUTUxUaW1lbGluZVVJIGV4dGVuZHMgVGltZWxpbmVVSSB7XHJcbiAgcHJpdmF0ZSBpbml0ID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBsYW5nOiBMYW5nO1xyXG5cclxuICBwcml2YXRlIHJvb3Q6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBiYXJDb2xvcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSBiYXJFeHBpcmVzU29vbkNvbG9yOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcclxuICBwcml2YXRlIHRpbWVybGlzdDogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgcHJpdmF0ZSBhY3RpdmVCYXJzOiB7IFthY3RpdmViYXI6IHN0cmluZ106IEFjdGl2ZUJhciB9ID0ge307XHJcblxyXG4gIHByaXZhdGUgZGVidWdFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gIHByaXZhdGUgZGVidWdGaWdodFRpbWVyOiBUaW1lckJhciB8IG51bGwgPSBudWxsO1xyXG5cclxuICBwcml2YXRlIHBvcHVwVGV4dD86IFBvcHVwVGV4dEdlbmVyYXRvcjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMubGFuZyA9IHRoaXMub3B0aW9ucy5UaW1lbGluZUxhbmd1YWdlIHx8IHRoaXMub3B0aW9ucy5QYXJzZXJMYW5ndWFnZSB8fCAnZW4nO1xyXG4gICAgdGhpcy5BZGREZWJ1Z0luc3RydWN0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIEluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pbml0KVxyXG4gICAgICByZXR1cm47XHJcbiAgICB0aGlzLmluaXQgPSB0cnVlO1xyXG5cclxuICAgIHRoaXMucm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lbGluZS1jb250YWluZXInKTtcclxuICAgIGlmICghdGhpcy5yb290KVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3QgZmluZCB0aW1lbGluZS1jb250YWluZXInKTtcclxuXHJcbiAgICAvLyBUT0RPOiBsZWZ0IGZvciBub3cgYXMgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCB1c2VyIGNzcy4gIFJlbW92ZSB0aGlzIGxhdGVyPz9cclxuICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKGBsYW5nLSR7dGhpcy5sYW5nfWApO1xyXG4gICAgdGhpcy5yb290LmxhbmcgPSBsYW5nVG9Mb2NhbGUodGhpcy5sYW5nKTtcclxuICAgIGlmICh0aGlzLm9wdGlvbnMuU2tpbiAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChgc2tpbi0ke3RoaXMub3B0aW9ucy5Ta2lufWApO1xyXG5cclxuICAgIHRoaXMuYmFyQ29sb3IgPSBjb21wdXRlQmFja2dyb3VuZEZyb20odGhpcy5yb290LCAndGltZWxpbmUtYmFyLWNvbG9yJyk7XHJcbiAgICB0aGlzLmJhckV4cGlyZXNTb29uQ29sb3IgPSBjb21wdXRlQmFja2dyb3VuZEZyb20odGhpcy5yb290LCAndGltZWxpbmUtYmFyLWNvbG9yLnNvb24nKTtcclxuXHJcbiAgICB0aGlzLnRpbWVybGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lbGluZScpO1xyXG4gICAgaWYgKHRoaXMudGltZXJsaXN0KSB7XHJcbiAgICAgIHRoaXMudGltZXJsaXN0LnN0eWxlLmdyaWRUZW1wbGF0ZVJvd3MgPVxyXG4gICAgICAgIGByZXBlYXQoJHt0aGlzLm9wdGlvbnMuTWF4TnVtYmVyT2ZUaW1lckJhcnN9LCBtaW4tY29udGVudClgO1xyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLlJldmVyc2VUaW1lbGluZSlcclxuICAgICAgICB0aGlzLnRpbWVybGlzdC5jbGFzc0xpc3QuYWRkKCdyZXZlcnNlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYWN0aXZlQmFycyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIEFkZERlYnVnSW5zdHJ1Y3Rpb25zKCk6IHZvaWQge1xyXG4gICAgY29uc3QgbGFuZyA9IHRoaXMubGFuZyBpbiB0aW1lbGluZUluc3RydWN0aW9ucyA/IHRoaXMubGFuZyA6ICdlbic7XHJcbiAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSB0aW1lbGluZUluc3RydWN0aW9uc1tsYW5nXTtcclxuXHJcbiAgICAvLyBIZWxwZXIgZm9yIHBvc2l0aW9uaW5nL3Jlc2l6aW5nIHdoZW4gbG9ja2VkLlxyXG4gICAgY29uc3QgaGVscGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVsaW5lLXJlc2l6ZS1oZWxwZXInKTtcclxuICAgIGlmICghaGVscGVyKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBjb25zdCByb3dzID0gTWF0aC5tYXgoNiwgdGhpcy5vcHRpb25zLk1heE51bWJlck9mVGltZXJCYXJzKTtcclxuICAgIGhlbHBlci5zdHlsZS5ncmlkVGVtcGxhdGVSb3dzID0gYHJlcGVhdCgke3Jvd3N9LCAxZnIpYDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3B0aW9ucy5NYXhOdW1iZXJPZlRpbWVyQmFyczsgKytpKSB7XHJcbiAgICAgIGNvbnN0IGhlbHBlckJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBoZWxwZXJCYXIuY2xhc3NMaXN0LmFkZCgndGV4dCcpO1xyXG4gICAgICBoZWxwZXJCYXIuY2xhc3NMaXN0LmFkZCgncmVzaXplLWhlbHBlci1iYXInKTtcclxuICAgICAgaGVscGVyQmFyLmNsYXNzTGlzdC5hZGQoJ3RpbWVsaW5lLWJhci1jb2xvcicpO1xyXG4gICAgICBpZiAoaSA8IDEpXHJcbiAgICAgICAgaGVscGVyQmFyLmNsYXNzTGlzdC5hZGQoJ3Nvb24nKTtcclxuICAgICAgaWYgKGkgPCBpbnN0cnVjdGlvbnMubGVuZ3RoKVxyXG4gICAgICAgIGhlbHBlckJhci5pbm5lclRleHQgPSBpbnN0cnVjdGlvbnNbaV0gPz8gJyc7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICBoZWxwZXJCYXIuaW5uZXJUZXh0ID0gYCR7aSArIDF9YDtcclxuICAgICAgaGVscGVyLmFwcGVuZENoaWxkKGhlbHBlckJhcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9yIHNpbXBsaWNpdHkgaW4gY29kZSwgYWx3YXlzIG1ha2UgZGVidWdFbGVtZW50IHZhbGlkLFxyXG4gICAgLy8gaG93ZXZlciBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgcmFpZCBlbXVsYXRvci5cclxuICAgIHRoaXMuZGVidWdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVsaW5lLWRlYnVnJyk7XHJcbiAgICBpZiAoIXRoaXMuZGVidWdFbGVtZW50KVxyXG4gICAgICB0aGlzLmRlYnVnRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIFNldFBvcHVwVGV4dEludGVyZmFjZShwb3B1cFRleHQ6IFBvcHVwVGV4dEdlbmVyYXRvcik6IHZvaWQge1xyXG4gICAgdGhpcy5wb3B1cFRleHQgPSBwb3B1cFRleHQ7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgUmVzZXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy50aW1lbGluZSkge1xyXG4gICAgICBkZWxldGUgdGhpcy50aW1lbGluZS51aTtcclxuICAgICAgd2hpbGUgKHRoaXMudGltZXJsaXN0ICYmIHRoaXMudGltZXJsaXN0Lmxhc3RDaGlsZClcclxuICAgICAgICB0aGlzLnRpbWVybGlzdC5yZW1vdmVDaGlsZCh0aGlzLnRpbWVybGlzdC5sYXN0Q2hpbGQpO1xyXG4gICAgICBpZiAodGhpcy5kZWJ1Z0VsZW1lbnQpXHJcbiAgICAgICAgdGhpcy5kZWJ1Z0VsZW1lbnQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyID0gbnVsbDtcclxuICAgICAgLy8gVE9ETzogY2xlYXIgYWxsIHRpbWVvdXRzP1xyXG4gICAgICB0aGlzLmFjdGl2ZUJhcnMgPSB7fTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBPbkFkZFRpbWVyKGZpZ2h0Tm93OiBudW1iZXIsIGU6IEV2ZW50LCBjaGFubmVsaW5nOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnN0IGJhciA9IFRpbWVyQmFyLmNyZWF0ZSgpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ3RpbWVyLWJhcicpO1xyXG4gICAgZGl2LmFwcGVuZENoaWxkKGJhcik7XHJcbiAgICBiYXIuZHVyYXRpb24gPSBjaGFubmVsaW5nID8gZS50aW1lIC0gZmlnaHROb3cgOiB0aGlzLm9wdGlvbnMuU2hvd1RpbWVyQmFyc0F0U2Vjb25kcztcclxuICAgIGJhci52YWx1ZSA9IGUudGltZSAtIGZpZ2h0Tm93O1xyXG4gICAgYmFyLnJpZ2h0dGV4dCA9ICdyZW1haW4nO1xyXG4gICAgYmFyLmxlZnR0ZXh0ID0gZS50ZXh0O1xyXG4gICAgYmFyLnRvd2FyZCA9ICdyaWdodCc7XHJcbiAgICBiYXIuc3R5bGVmaWxsID0gIWNoYW5uZWxpbmcgPyAnZmlsbCcgOiAnZW1wdHknO1xyXG5cclxuICAgIGlmIChlLnN0eWxlKVxyXG4gICAgICBiYXIuYXBwbHlTdHlsZXMoZS5zdHlsZSk7XHJcblxyXG4gICAgLy8gQWRkaW5nIGEgdGltZXIgd2l0aCB0aGUgc2FtZSBpZCBpbW1lZGlhdGVseSByZW1vdmVzIHRoZSBwcmV2aW91cy5cclxuICAgIGNvbnN0IGFjdGl2ZUJhciA9IHRoaXMuYWN0aXZlQmFyc1tlLmlkXTtcclxuICAgIGlmIChhY3RpdmVCYXIpIHtcclxuICAgICAgY29uc3QgcGFyZW50RGl2ID0gYWN0aXZlQmFyLmJhci5wYXJlbnROb2RlO1xyXG4gICAgICBwYXJlbnREaXY/LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKHBhcmVudERpdik7XHJcbiAgICAgIC8vIFNvb24gdGltZW91dCBpcyBqdXN0IGFuIG9wdGltaXphdGlvbiB0byByZW1vdmUsIGFzIGl0J3MgdW5uZWNlc3NhcnkuXHJcbiAgICAgIGlmIChhY3RpdmVCYXIuc29vblRpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoYWN0aXZlQmFyLnNvb25UaW1lb3V0KTtcclxuICAgICAgICBhY3RpdmVCYXIuc29vblRpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgc29vblRpbWVvdXQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgIGlmICghY2hhbm5lbGluZyAmJiBlLnRpbWUgLSBmaWdodE5vdyA+IHRoaXMub3B0aW9ucy5CYXJFeHBpcmVzU29vblNlY29uZHMpIHtcclxuICAgICAgYmFyLmZnID0gdGhpcy5iYXJDb2xvcjtcclxuICAgICAgc29vblRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChcclxuICAgICAgICAoKSA9PiBiYXIuZmcgPSB0aGlzLmJhckV4cGlyZXNTb29uQ29sb3IsXHJcbiAgICAgICAgKGUudGltZSAtIGZpZ2h0Tm93IC0gdGhpcy5vcHRpb25zLkJhckV4cGlyZXNTb29uU2Vjb25kcykgKiAxMDAwLFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYmFyLmZnID0gdGhpcy5iYXJFeHBpcmVzU29vbkNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlLnNvcnRLZXkpIHtcclxuICAgICAgLy8gSW52ZXJ0IHRoZSBvcmRlciBpZiB0aGUgdGltZXIgYmFycyBzaG91bGQgXCJncm93XCIgaW4gdGhlIHJldmVyc2UgZGlyZWN0aW9uXHJcbiAgICAgIGRpdi5zdHlsZS5vcmRlciA9ICgodGhpcy5vcHRpb25zLlJldmVyc2VUaW1lbGluZSA/IC0xIDogMSkgKiBlLnNvcnRLZXkpLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRpbWVybGlzdD8uYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgIHRoaXMuYWN0aXZlQmFyc1tlLmlkXSA9IHtcclxuICAgICAgYmFyOiBiYXIsXHJcbiAgICAgIHNvb25UaW1lb3V0OiBzb29uVGltZW91dCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgT25SZW1vdmVUaW1lcihlOiBFdmVudCwgZm9yY2U6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIGNvbnN0IGFjdGl2ZUJhciA9IHRoaXMuYWN0aXZlQmFyc1tlLmlkXTtcclxuICAgIGlmICghYWN0aXZlQmFyKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgZGl2ID0gYWN0aXZlQmFyLmJhci5wYXJlbnROb2RlO1xyXG4gICAgaWYgKCEoZGl2IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgY29uc3QgcmVtb3ZlQmFyID0gKCkgPT4ge1xyXG4gICAgICBkaXY/LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKGRpdik7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmFjdGl2ZUJhcnNbZS5pZF07XHJcbiAgICB9O1xyXG5cclxuICAgIGlmICghZm9yY2UpXHJcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLXRpbWVyLWJhci1yZW1vdmVkJyk7XHJcbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZGl2KS5hbmltYXRpb25OYW1lICE9PSAnbm9uZScpIHtcclxuICAgICAgLy8gV2FpdCBmb3IgYW5pbWF0aW9uIHRvIGZpbmlzaFxyXG4gICAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgcmVtb3ZlQmFyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlbW92ZUJhcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIE9uU2hvd0luZm9UZXh0KHRleHQ6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucG9wdXBUZXh0KVxyXG4gICAgICB0aGlzLnBvcHVwVGV4dC5JbmZvKHRleHQsIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBPblNob3dBbGVydFRleHQodGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wb3B1cFRleHQpXHJcbiAgICAgIHRoaXMucG9wdXBUZXh0LkFsZXJ0KHRleHQsIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBPblNob3dBbGFybVRleHQodGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wb3B1cFRleHQpXHJcbiAgICAgIHRoaXMucG9wdXBUZXh0LkFsYXJtKHRleHQsIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBPblNwZWFrVFRTKHRleHQ6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucG9wdXBUZXh0KVxyXG4gICAgICB0aGlzLnBvcHVwVGV4dC5UVFModGV4dCwgY3VycmVudFRpbWUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIE9uVHJpZ2dlcihcclxuICAgIHRyaWdnZXI6IExvb3NlVGltZWxpbmVUcmlnZ2VyLFxyXG4gICAgbWF0Y2hlczogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCxcclxuICAgIGN1cnJlbnRUaW1lOiBudW1iZXIsXHJcbiAgKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wb3B1cFRleHQpXHJcbiAgICAgIHRoaXMucG9wdXBUZXh0LlRyaWdnZXIodHJpZ2dlciwgbWF0Y2hlcywgY3VycmVudFRpbWUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIE9uU3luY1RpbWUoZmlnaHROb3c6IG51bWJlciwgcnVubmluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuRGVidWcgfHwgIXRoaXMuZGVidWdFbGVtZW50KVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgaWYgKCFydW5uaW5nKSB7XHJcbiAgICAgIGlmICh0aGlzLmRlYnVnRmlnaHRUaW1lcilcclxuICAgICAgICB0aGlzLmRlYnVnRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmRlYnVnRmlnaHRUaW1lcik7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyID0gbnVsbDtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIpIHtcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIgPSBUaW1lckJhci5jcmVhdGUoKTtcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIud2lkdGggPSAnMTAwcHgnO1xyXG4gICAgICB0aGlzLmRlYnVnRmlnaHRUaW1lci5oZWlnaHQgPSAnMTdweCc7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyLmR1cmF0aW9uID0ga0JpZztcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIubGVmdHRleHQgPSAnZWxhcHNlZCc7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyLnRvd2FyZCA9ICdyaWdodCc7XHJcbiAgICAgIHRoaXMuZGVidWdGaWdodFRpbWVyLnN0eWxlZmlsbCA9ICdmaWxsJztcclxuICAgICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIuYmcgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgICB0aGlzLmRlYnVnRmlnaHRUaW1lci5mZyA9ICd0cmFuc3BhcmVudCc7XHJcbiAgICAgIC8vIEFsaWduIGl0IHRvIHRoZSAnZmlyc3QnIGl0ZW0gaW4gdGhlIHRpbWVsaW5lIGNvbnRhaW5lclxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLlJldmVyc2VUaW1lbGluZSlcclxuICAgICAgICB0aGlzLmRlYnVnRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdyZXZlcnNlZCcpO1xyXG4gICAgICB0aGlzLmRlYnVnRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmRlYnVnRmlnaHRUaW1lcik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9yY2UgdGhpcyB0byBiZSByZXNldC5cclxuICAgIHRoaXMuZGVidWdGaWdodFRpbWVyLmVsYXBzZWQgPSAwO1xyXG4gICAgdGhpcy5kZWJ1Z0ZpZ2h0VGltZXIuZWxhcHNlZCA9IGZpZ2h0Tm93O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBQYXJ0eSB9IGZyb20gJy4uL3R5cGVzL2V2ZW50JztcclxuaW1wb3J0IHsgSm9iLCBSb2xlIH0gZnJvbSAnLi4vdHlwZXMvam9iJztcclxuaW1wb3J0IHsgUGFydHlNZW1iZXJQYXJhbU9iamVjdCwgUGFydHlUcmFja2VyT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzL3BhcnR5JztcclxuaW1wb3J0IHsgTG9jYWxlVGV4dCB9IGZyb20gJy4uL3R5cGVzL3RyaWdnZXInO1xyXG5cclxuaW1wb3J0IFV0aWwgZnJvbSAnLi91dGlsJztcclxuXHJcbmNvbnN0IGVtcHR5Um9sZVRvUGFydHlOYW1lcyA9ICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdGFuazogW10sXHJcbiAgICBoZWFsZXI6IFtdLFxyXG4gICAgZHBzOiBbXSxcclxuICAgIGNyYWZ0ZXI6IFtdLFxyXG4gICAgZ2F0aGVyZXI6IFtdLFxyXG4gICAgbm9uZTogW10sXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IHJvbGVMb2NhbGl6ZWQ6IFJlY29yZDxSb2xlLCBMb2NhbGVUZXh0PiA9IHtcclxuICB0YW5rOiB7XHJcbiAgICBlbjogJ3RhbmsnLFxyXG4gICAgZGU6ICdWZXJ0ZWlkaWdlcicsXHJcbiAgICBmcjogJ1RhbmsnLFxyXG4gICAgamE6ICfjgr/jg7Pjgq8nLFxyXG4gICAgY246ICflnablhYsnLFxyXG4gICAga286ICftg7Hsu6QnLFxyXG4gIH0sXHJcbiAgaGVhbGVyOiB7XHJcbiAgICBlbjogJ2hlYWxlcicsXHJcbiAgICBkZTogJ0hlaWxlcicsXHJcbiAgICBmcjogJ1NvaWduZXVyJyxcclxuICAgIGphOiAn44OS44O844Op44O8JyxcclxuICAgIGNuOiAn5rK755aXJyxcclxuICAgIGtvOiAn7Z6Q65+sJyxcclxuICB9LFxyXG4gIGRwczoge1xyXG4gICAgZW46ICdkcHMnLFxyXG4gICAgZGU6ICdEUFMnLFxyXG4gICAgZnI6ICdEUFMnLFxyXG4gICAgamE6ICdEUFMnLFxyXG4gICAgY246ICfovpPlh7onLFxyXG4gICAga286ICfrlJzrn6wnLFxyXG4gIH0sXHJcbiAgY3JhZnRlcjoge1xyXG4gICAgZW46ICdjcmFmdGVyJyxcclxuICAgIGRlOiAnSGFuZHdlcmtlcicsXHJcbiAgICBmcjogJ0FydGlzYW4nLFxyXG4gICAgamE6ICfjgq/jg6njg5Xjgr/jg7wnLFxyXG4gICAgY246ICfog73lt6Xlt6fljKAnLFxyXG4gICAga286ICfsoJzsnpHqsIAnLFxyXG4gIH0sXHJcbiAgZ2F0aGVyZXI6IHtcclxuICAgIGVuOiAnZ2F0aGVyZXInLFxyXG4gICAgZGU6ICdTYW1tbGVyJyxcclxuICAgIGZyOiAnUsOpY29sdGV1cicsXHJcbiAgICBqYTogJ+OCruODo+OCtuODqeODvCcsXHJcbiAgICBjbjogJ+Wkp+WcsOS9v+iAhScsXHJcbiAgICBrbzogJ+yxhOynkeqwgCcsXHJcbiAgfSxcclxuICBub25lOiB7XHJcbiAgICBlbjogJ25vbmUnLFxyXG4gICAgZGU6ICdLZWluZScsXHJcbiAgICBmcjogJ0F1Y3VuJyxcclxuICAgIGphOiAn5YaS6Zm66ICFJyxcclxuICAgIGNuOiAn5YaS6Zmp6ICFJyxcclxuICAgIGtvOiAn66qo7ZeY6rCAJyxcclxuICB9LFxyXG59O1xyXG5cclxuY29uc3Qgam9iTG9jYWxpemVkQWJicjogUmVjb3JkPEpvYiwgTG9jYWxlVGV4dD4gPSB7XHJcbiAgTk9ORToge1xyXG4gICAgZW46ICdOT05FJyxcclxuICAgIGRlOiAnS2VpbmUnLFxyXG4gICAgZnI6ICdBdWN1bicsXHJcbiAgICBqYTogJ+WGkumZuuiAhScsXHJcbiAgICBjbjogJ+WGkumZqScsXHJcbiAgICBrbzogJ+uqqO2XmOqwgCcsXHJcbiAgfSxcclxuICBHTEE6IHtcclxuICAgIGVuOiAnR0xBJyxcclxuICAgIGRlOiAnR0xBJyxcclxuICAgIGZyOiAnR0xBJyxcclxuICAgIGphOiAn5Ymj6KGT5aOrJyxcclxuICAgIGNuOiAn5YmR5pyvJyxcclxuICAgIGtvOiAn6rKA7IigJyxcclxuICB9LFxyXG4gIFBHTDoge1xyXG4gICAgZW46ICdQR0wnLFxyXG4gICAgZGU6ICdGU1QnLFxyXG4gICAgZnI6ICdQR0wnLFxyXG4gICAgamE6ICfmoLzpl5jlo6snLFxyXG4gICAgY246ICfmoLzmlpcnLFxyXG4gICAga286ICfqsqntiKwnLFxyXG4gIH0sXHJcbiAgTVJEOiB7XHJcbiAgICBlbjogJ01SRCcsXHJcbiAgICBkZTogJ01BUicsXHJcbiAgICBmcjogJ01SRCcsXHJcbiAgICBqYTogJ+aWp+ihk+WjqycsXHJcbiAgICBjbjogJ+aWp+acrycsXHJcbiAgICBrbzogJ+uPhOuBvOyIoCcsXHJcbiAgfSxcclxuICBMTkM6IHtcclxuICAgIGVuOiAnTE5DJyxcclxuICAgIGRlOiAnUElLJyxcclxuICAgIGZyOiAnSEFTJyxcclxuICAgIGphOiAn5qeN6KGT5aOrJyxcclxuICAgIGNuOiAn5p6q5pyvJyxcclxuICAgIGtvOiAn7LC97IigJyxcclxuICB9LFxyXG4gIEFSQzoge1xyXG4gICAgZW46ICdBUkMnLFxyXG4gICAgZGU6ICdXREwnLFxyXG4gICAgZnI6ICdBUkMnLFxyXG4gICAgamE6ICflvJPooZPlo6snLFxyXG4gICAgY246ICflvJPnrq0nLFxyXG4gICAga286ICfqtoHsiKAnLFxyXG4gIH0sXHJcbiAgQ05KOiB7XHJcbiAgICBlbjogJ0NOSicsXHJcbiAgICBkZTogJ0RSVScsXHJcbiAgICBmcjogJ8OJTE0nLFxyXG4gICAgamE6ICflubvooZPlo6snLFxyXG4gICAgY246ICflubvmnK8nLFxyXG4gICAga286ICftmZjsiKAnLFxyXG4gIH0sXHJcbiAgVEhNOiB7XHJcbiAgICBlbjogJ1RITScsXHJcbiAgICBkZTogJ1RITScsXHJcbiAgICBmcjogJ09DQycsXHJcbiAgICBqYTogJ+WRquihk+WjqycsXHJcbiAgICBjbjogJ+WSkuacrycsXHJcbiAgICBrbzogJ+yjvOyIoCcsXHJcbiAgfSxcclxuICBDUlA6IHtcclxuICAgIGVuOiAnQ1JQJyxcclxuICAgIGRlOiAnWk1SJyxcclxuICAgIGZyOiAnTUVOJyxcclxuICAgIGphOiAn5pyo5belJyxcclxuICAgIGNuOiAn5Yi75pyoJyxcclxuICAgIGtvOiAn66qp7IiYJyxcclxuICB9LFxyXG4gIEJTTToge1xyXG4gICAgZW46ICdCU00nLFxyXG4gICAgZGU6ICdHUlMnLFxyXG4gICAgZnI6ICdGUkcnLFxyXG4gICAgamE6ICfpjZvlhrYnLFxyXG4gICAgY246ICfplLvpk4EnLFxyXG4gICAga286ICfrjIDsnqUnLFxyXG4gIH0sXHJcbiAgQVJNOiB7XHJcbiAgICBlbjogJ0FSTScsXHJcbiAgICBkZTogJ1BMQScsXHJcbiAgICBmcjogJ0FSTScsXHJcbiAgICBqYTogJ+eUsuWGkScsXHJcbiAgICBjbjogJ+mTuOeUsicsXHJcbiAgICBrbzogJ+qwkeyjvCcsXHJcbiAgfSxcclxuICBHU006IHtcclxuICAgIGVuOiAnR1NNJyxcclxuICAgIGRlOiAnR0xEJyxcclxuICAgIGZyOiAnT1JGJyxcclxuICAgIGphOiAn5b2r6YeRJyxcclxuICAgIGNuOiAn6ZuV6YeRJyxcclxuICAgIGtvOiAn67O07ISdJyxcclxuICB9LFxyXG4gIExUVzoge1xyXG4gICAgZW46ICdMVFcnLFxyXG4gICAgZGU6ICdHRVInLFxyXG4gICAgZnI6ICdUQU4nLFxyXG4gICAgamE6ICfpnanntLAnLFxyXG4gICAgY246ICfliLbpnaknLFxyXG4gICAga286ICfqsIDso70nLFxyXG4gIH0sXHJcbiAgV1ZSOiB7XHJcbiAgICBlbjogJ1dWUicsXHJcbiAgICBkZTogJ1dFQicsXHJcbiAgICBmcjogJ0NPVScsXHJcbiAgICBqYTogJ+ijgee4qycsXHJcbiAgICBjbjogJ+ijgeihoycsXHJcbiAgICBrbzogJ+yerOu0iScsXHJcbiAgfSxcclxuICBBTEM6IHtcclxuICAgIGVuOiAnQUxDJyxcclxuICAgIGRlOiAnQUxDJyxcclxuICAgIGZyOiAnQUxDJyxcclxuICAgIGphOiAn6Yys6YeRJyxcclxuICAgIGNuOiAn54K86YeRJyxcclxuICAgIGtvOiAn7Jew6riIJyxcclxuICB9LFxyXG4gIENVTDoge1xyXG4gICAgZW46ICdDVUwnLFxyXG4gICAgZGU6ICdHUk0nLFxyXG4gICAgZnI6ICdDVUknLFxyXG4gICAgamE6ICfoqr/nkIYnLFxyXG4gICAgY246ICfng7nosIMnLFxyXG4gICAga286ICfsmpTrpqwnLFxyXG4gIH0sXHJcbiAgTUlOOiB7XHJcbiAgICBlbjogJ01JTicsXHJcbiAgICBkZTogJ01JTicsXHJcbiAgICBmcjogJ01JTicsXHJcbiAgICBqYTogJ+aOoeaOmCcsXHJcbiAgICBjbjogJ+mHh+efvycsXHJcbiAgICBrbzogJ+q0keu2gCcsXHJcbiAgfSxcclxuICBCVE46IHtcclxuICAgIGVuOiAnQlROJyxcclxuICAgIGRlOiAnR8OEUicsXHJcbiAgICBmcjogJ0JPVCcsXHJcbiAgICBqYTogJ+WckuiKuCcsXHJcbiAgICBjbjogJ+WbreiJuicsXHJcbiAgICBrbzogJ+ybkOyYiCcsXHJcbiAgfSxcclxuICBGU0g6IHtcclxuICAgIGVuOiAnRlNIJyxcclxuICAgIGRlOiAnRklTJyxcclxuICAgIGZyOiAnUEVDJyxcclxuICAgIGphOiAn5ryB5birJyxcclxuICAgIGNuOiAn5o2V6bG8JyxcclxuICAgIGtvOiAn7Ja067aAJyxcclxuICB9LFxyXG4gIFBMRDoge1xyXG4gICAgZW46ICdQTEQnLFxyXG4gICAgZGU6ICdQTEQnLFxyXG4gICAgZnI6ICdQTEQnLFxyXG4gICAgamE6ICfjg4rjgqTjg4gnLFxyXG4gICAgY246ICfpqpHlo6snLFxyXG4gICAga286ICfrgpjsnbTtirgnLFxyXG4gIH0sXHJcbiAgTU5LOiB7XHJcbiAgICBlbjogJ01OSycsXHJcbiAgICBkZTogJ03Dlk4nLFxyXG4gICAgZnI6ICdNT0knLFxyXG4gICAgamE6ICfjg6Ljg7Pjgq8nLFxyXG4gICAgY246ICfmrablg6cnLFxyXG4gICAga286ICfrqr3tgawnLFxyXG4gIH0sXHJcbiAgV0FSOiB7XHJcbiAgICBlbjogJ1dBUicsXHJcbiAgICBkZTogJ0tSRycsXHJcbiAgICBmcjogJ0dVRScsXHJcbiAgICBqYTogJ+aIpuWjqycsXHJcbiAgICBjbjogJ+aImOWjqycsXHJcbiAgICBrbzogJ+yghOyCrCcsXHJcbiAgfSxcclxuICBEUkc6IHtcclxuICAgIGVuOiAnRFJHJyxcclxuICAgIGRlOiAnRFJHJyxcclxuICAgIGZyOiAnRFJHJyxcclxuICAgIGphOiAn56uc6aiO5aOrJyxcclxuICAgIGNuOiAn6b6Z6aqRJyxcclxuICAgIGtvOiAn7Jqp6riw7IKsJyxcclxuICB9LFxyXG4gIEJSRDoge1xyXG4gICAgZW46ICdCUkQnLFxyXG4gICAgZGU6ICdCUkQnLFxyXG4gICAgZnI6ICdCUkQnLFxyXG4gICAgamE6ICfoqankuronLFxyXG4gICAgY246ICfor5fkuronLFxyXG4gICAga286ICfsnYzsnKAnLFxyXG4gIH0sXHJcbiAgV0hNOiB7XHJcbiAgICBlbjogJ1dITScsXHJcbiAgICBkZTogJ1dNQScsXHJcbiAgICBmcjogJ01CTCcsXHJcbiAgICBqYTogJ+eZvemtlCcsXHJcbiAgICBjbjogJ+eZvemtlCcsXHJcbiAgICBrbzogJ+uwseuniCcsXHJcbiAgfSxcclxuICBCTE06IHtcclxuICAgIGVuOiAnQkxNJyxcclxuICAgIGRlOiAnU01BJyxcclxuICAgIGZyOiAnTU5PJyxcclxuICAgIGphOiAn6buS6a2UJyxcclxuICAgIGNuOiAn6buR6a2UJyxcclxuICAgIGtvOiAn7Z2R66eIJyxcclxuICB9LFxyXG4gIEFDTjoge1xyXG4gICAgZW46ICdBQ04nLFxyXG4gICAgZGU6ICdIUlQnLFxyXG4gICAgZnI6ICdBQ04nLFxyXG4gICAgamE6ICflt7TooZPlo6snLFxyXG4gICAgY246ICfnp5jmnK8nLFxyXG4gICAga286ICfruYTsiKAnLFxyXG4gIH0sXHJcbiAgU01OOiB7XHJcbiAgICBlbjogJ1NNTicsXHJcbiAgICBkZTogJ0JTVycsXHJcbiAgICBmcjogJ0lOVicsXHJcbiAgICBqYTogJ+WPrOWWmicsXHJcbiAgICBjbjogJ+WPrOWUpCcsXHJcbiAgICBrbzogJ+yGjO2ZmCcsXHJcbiAgfSxcclxuICBTQ0g6IHtcclxuICAgIGVuOiAnU0NIJyxcclxuICAgIGRlOiAnR0xUJyxcclxuICAgIGZyOiAnRVJVJyxcclxuICAgIGphOiAn5a2m6ICFJyxcclxuICAgIGNuOiAn5a2m6ICFJyxcclxuICAgIGtvOiAn7ZWZ7J6QJyxcclxuICB9LFxyXG4gIFJPRzoge1xyXG4gICAgZW46ICdST0cnLFxyXG4gICAgZGU6ICdTQ0gnLFxyXG4gICAgZnI6ICdTVVInLFxyXG4gICAgamE6ICflj4zliaPlo6snLFxyXG4gICAgY246ICflj4zliZEnLFxyXG4gICAga286ICfsjI3qsoAnLFxyXG4gIH0sXHJcbiAgTklOOiB7XHJcbiAgICBlbjogJ05JTicsXHJcbiAgICBkZTogJ05JTicsXHJcbiAgICBmcjogJ05JTicsXHJcbiAgICBqYTogJ+W/jeiAhScsXHJcbiAgICBjbjogJ+W/jeiAhScsXHJcbiAgICBrbzogJ+uLjOyekCcsXHJcbiAgfSxcclxuICBNQ0g6IHtcclxuICAgIGVuOiAnTUNIJyxcclxuICAgIGRlOiAnTUNIJyxcclxuICAgIGZyOiAnTUNIJyxcclxuICAgIGphOiAn5qmf5belJyxcclxuICAgIGNuOiAn5py65belJyxcclxuICAgIGtvOiAn6riw6rO1JyxcclxuICB9LFxyXG4gIERSSzoge1xyXG4gICAgZW46ICdEUksnLFxyXG4gICAgZGU6ICdES1InLFxyXG4gICAgZnI6ICdDSE4nLFxyXG4gICAgamE6ICfmmpfpu5InLFxyXG4gICAgY246ICfmmpfpqpEnLFxyXG4gICAga286ICfslZTquLAnLFxyXG4gIH0sXHJcbiAgQVNUOiB7XHJcbiAgICBlbjogJ0FTVCcsXHJcbiAgICBkZTogJ0FTVCcsXHJcbiAgICBmcjogJ0FTVCcsXHJcbiAgICBqYTogJ+WNoOaYnycsXHJcbiAgICBjbjogJ+WNoOaYnycsXHJcbiAgICBrbzogJ+ygkOyEsScsXHJcbiAgfSxcclxuICBTQU06IHtcclxuICAgIGVuOiAnU0FNJyxcclxuICAgIGRlOiAnU0FNJyxcclxuICAgIGZyOiAnU0FNJyxcclxuICAgIGphOiAn5L6NJyxcclxuICAgIGNuOiAn5q2m5aOrJyxcclxuICAgIGtvOiAn7IKs66y0JyxcclxuICB9LFxyXG4gIFJETToge1xyXG4gICAgZW46ICdSRE0nLFxyXG4gICAgZGU6ICdSTUEnLFxyXG4gICAgZnI6ICdNUkcnLFxyXG4gICAgamE6ICfotaTprZQnLFxyXG4gICAgY246ICfotaTprZQnLFxyXG4gICAga286ICfsoIHrp4gnLFxyXG4gIH0sXHJcbiAgQkxVOiB7XHJcbiAgICBlbjogJ0JMVScsXHJcbiAgICBkZTogJ0JNQScsXHJcbiAgICBmcjogJ01CVScsXHJcbiAgICBqYTogJ+mdkumtlCcsXHJcbiAgICBjbjogJ+mdkumtlCcsXHJcbiAgICBrbzogJ+yyreuniCcsXHJcbiAgfSxcclxuICBHTkI6IHtcclxuICAgIGVuOiAnR05CJyxcclxuICAgIGRlOiAnUkVWJyxcclxuICAgIGZyOiAnUFNCJyxcclxuICAgIGphOiAn44Ks44Oz44OW44OsJyxcclxuICAgIGNuOiAn57ud5p6qJyxcclxuICAgIGtvOiAn6rG067iMJyxcclxuICB9LFxyXG4gIEROQzoge1xyXG4gICAgZW46ICdETkMnLFxyXG4gICAgZGU6ICdUw4ROJyxcclxuICAgIGZyOiAnRE5TJyxcclxuICAgIGphOiAn6LiK44KK5a2QJyxcclxuICAgIGNuOiAn6Iie6ICFJyxcclxuICAgIGtvOiAn66y064+EJyxcclxuICB9LFxyXG4gIFJQUjoge1xyXG4gICAgZW46ICdSUFInLFxyXG4gICAgZGU6ICdTTlQnLFxyXG4gICAgZnI6ICdGQ0gnLFxyXG4gICAgamE6ICfjg6rjg7zjg5Hjg7wnLFxyXG4gICAgY246ICfpkpDplbAnLFxyXG4gICAga286ICfrpqztjbwnLFxyXG4gIH0sXHJcbiAgU0dFOiB7XHJcbiAgICBlbjogJ1NHRScsXHJcbiAgICBkZTogJ1dFSScsXHJcbiAgICBmcjogJ1NBRycsXHJcbiAgICBqYTogJ+izouiAhScsXHJcbiAgICBjbjogJ+i0pOiAhScsXHJcbiAgICBrbzogJ+2YhOyekCcsXHJcbiAgfSxcclxufTtcclxuXHJcbmNvbnN0IGpvYkxvY2FsaXplZEZ1bGw6IFJlY29yZDxKb2IsIExvY2FsZVRleHQ+ID0ge1xyXG4gIE5PTkU6IHtcclxuICAgIGVuOiAnQWR2ZW50dXJlcicsXHJcbiAgICBkZTogJ0FiZW50ZXVyZXInLFxyXG4gICAgZnI6ICdBdmVudHVyaWVyJyxcclxuICAgIGphOiAn5YaS6Zm66ICFJyxcclxuICAgIGNuOiAn5YaS6Zmp6ICFJyxcclxuICAgIGtvOiAn66qo7ZeY6rCAJyxcclxuICB9LFxyXG4gIEdMQToge1xyXG4gICAgZW46ICdHbGFkaWF0b3InLFxyXG4gICAgZGU6ICdHbGFkaWF0b3InLFxyXG4gICAgZnI6ICdHbGFkaWF0ZXVyJyxcclxuICAgIGphOiAn5Ymj6KGT5aOrJyxcclxuICAgIGNuOiAn5YmR5pyv5biIJyxcclxuICAgIGtvOiAn6rKA7Iig7IKsJyxcclxuICB9LFxyXG4gIFBHTDoge1xyXG4gICAgZW46ICdQdWdpbGlzdCcsXHJcbiAgICBkZTogJ0ZhdXN0a8OkbXBmZXInLFxyXG4gICAgZnI6ICdQdWdpbGlzdGUnLFxyXG4gICAgamE6ICfmoLzpl5jlo6snLFxyXG4gICAgY246ICfmoLzmlpflrrYnLFxyXG4gICAga286ICfqsqntiKzqsIAnLFxyXG4gIH0sXHJcbiAgTVJEOiB7XHJcbiAgICBlbjogJ01hcmF1ZGVyJyxcclxuICAgIGRlOiAnTWFyb2RldXInLFxyXG4gICAgZnI6ICdNYXJhdWRldXInLFxyXG4gICAgamE6ICfmlqfooZPlo6snLFxyXG4gICAgY246ICfmlqfmnK/luIgnLFxyXG4gICAga286ICfrj4TrgbzsiKDsgqwnLFxyXG4gIH0sXHJcbiAgTE5DOiB7XHJcbiAgICBlbjogJ0xhbmNlcicsXHJcbiAgICBkZTogJ1Bpa2VuaWVyJyxcclxuICAgIGZyOiAnTWHDrnRyZSBkXFwnSGFzdCcsXHJcbiAgICBqYTogJ+anjeihk+WjqycsXHJcbiAgICBjbjogJ+aequacr+W4iCcsXHJcbiAgICBrbzogJ+ywveyIoOyCrCcsXHJcbiAgfSxcclxuICBBUkM6IHtcclxuICAgIGVuOiAnQXJjaGVyJyxcclxuICAgIGRlOiAnV2FsZGzDpHVmZXInLFxyXG4gICAgZnI6ICdBcmNoZXInLFxyXG4gICAgamE6ICflvJPooZPlo6snLFxyXG4gICAgY246ICflvJPnrq3miYsnLFxyXG4gICAga286ICfqtoHsiKDsgqwnLFxyXG4gIH0sXHJcbiAgQ05KOiB7XHJcbiAgICBlbjogJ0Nvbmp1cmVyJyxcclxuICAgIGRlOiAnRHJ1aWRlJyxcclxuICAgIGZyOiAnw4lsw6ltZW50YWxpc3RlJyxcclxuICAgIGphOiAn5bm76KGT5aOrJyxcclxuICAgIGNuOiAn5bm75pyv5biIJyxcclxuICAgIGtvOiAn7ZmY7Iig7IKsJyxcclxuICB9LFxyXG4gIFRITToge1xyXG4gICAgZW46ICdUaGF1bWF0dXJnZScsXHJcbiAgICBkZTogJ1RoYXVtYXR1cmcnLFxyXG4gICAgZnI6ICdPY2N1bHRpc3RlJyxcclxuICAgIGphOiAn5ZGq6KGT5aOrJyxcclxuICAgIGNuOiAn5ZKS5pyv5biIJyxcclxuICAgIGtvOiAn7KO87Iig7IKsJyxcclxuICB9LFxyXG4gIENSUDoge1xyXG4gICAgZW46ICdDYXJwZW50ZXInLFxyXG4gICAgZGU6ICdaaW1tZXJlcicsXHJcbiAgICBmcjogJ0NoYXJwZW50aWVyJyxcclxuICAgIGphOiAn5pyo5bel5birJyxcclxuICAgIGNuOiAn5Yi75pyo5YygJyxcclxuICAgIGtvOiAn66qp7IiYJyxcclxuICB9LFxyXG4gIEJTTToge1xyXG4gICAgZW46ICdCbGFja3NtaXRoJyxcclxuICAgIGRlOiAnR3JvYnNjaG1pZWQnLFxyXG4gICAgZnI6ICdGb3JnZXJvbicsXHJcbiAgICBqYTogJ+mNm+WGtuW4qycsXHJcbiAgICBjbjogJ+mUu+mTgeWMoCcsXHJcbiAgICBrbzogJ+uMgOyepeyepeydtCcsXHJcbiAgfSxcclxuICBBUk06IHtcclxuICAgIGVuOiAnQXJtb3JlcicsXHJcbiAgICBkZTogJ1BsYXR0bmVyJyxcclxuICAgIGZyOiAnQXJtdXJpZXInLFxyXG4gICAgamE6ICfnlLLlhpHluKsnLFxyXG4gICAgY246ICfpk7jnlLLljKAnLFxyXG4gICAga286ICfqsJHso7zsoJzsnpHsgqwnLFxyXG4gIH0sXHJcbiAgR1NNOiB7XHJcbiAgICBlbjogJ0dvbGRzbWl0aCcsXHJcbiAgICBkZTogJ0dvbGRzY2htaWVkJyxcclxuICAgIGZyOiAnT3Jmw6h2cmUnLFxyXG4gICAgamE6ICflvavph5HluKsnLFxyXG4gICAgY246ICfpm5Xph5HljKAnLFxyXG4gICAga286ICfrs7TshJ3qs7XsmIjqsIAnLFxyXG4gIH0sXHJcbiAgTFRXOiB7XHJcbiAgICBlbjogJ0xlYXRoZXJ3b3JrZXInLFxyXG4gICAgZGU6ICdHZXJiZXInLFxyXG4gICAgZnI6ICdUYW5uZXVyJyxcclxuICAgIGphOiAn6Z2p57Sw5bel5birJyxcclxuICAgIGNuOiAn5Yi26Z2p5YygJyxcclxuICAgIGtvOiAn6rCA7KO96rO17JiI6rCAJyxcclxuICB9LFxyXG4gIFdWUjoge1xyXG4gICAgZW46ICdXZWF2ZXInLFxyXG4gICAgZGU6ICdXZWJlcicsXHJcbiAgICBmcjogJ0NvdXR1cmllcicsXHJcbiAgICBqYTogJ+ijgee4q+W4qycsXHJcbiAgICBjbjogJ+ijgeiho+WMoCcsXHJcbiAgICBrbzogJ+yerOu0ieyCrCcsXHJcbiAgfSxcclxuICBBTEM6IHtcclxuICAgIGVuOiAnQWxjaGVtaXN0JyxcclxuICAgIGRlOiAnQWxjaGVtaXN0JyxcclxuICAgIGZyOiAnQWxjaGltaXN0ZScsXHJcbiAgICBqYTogJ+mMrOmHkeihk+W4qycsXHJcbiAgICBjbjogJ+eCvOmHkeacr+WjqycsXHJcbiAgICBrbzogJ+yXsOq4iOyIoOyCrCcsXHJcbiAgfSxcclxuICBDVUw6IHtcclxuICAgIGVuOiAnQ3VsaW5hcmlhbicsXHJcbiAgICBkZTogJ0dvdXJtZXQnLFxyXG4gICAgZnI6ICdDdWlzaW5pZXInLFxyXG4gICAgamE6ICfoqr/nkIbluKsnLFxyXG4gICAgY246ICfng7nosIPluIgnLFxyXG4gICAga286ICfsmpTrpqzsgqwnLFxyXG4gIH0sXHJcbiAgTUlOOiB7XHJcbiAgICBlbjogJ01pbmVyJyxcclxuICAgIGRlOiAnTWluZW5hcmJlaXRlcicsXHJcbiAgICBmcjogJ01pbmV1cicsXHJcbiAgICBqYTogJ+aOoeaOmOW4qycsXHJcbiAgICBjbjogJ+mHh+efv+W3pScsXHJcbiAgICBrbzogJ+q0keu2gCcsXHJcbiAgfSxcclxuICBCVE46IHtcclxuICAgIGVuOiAnQm90YW5pc3QnLFxyXG4gICAgZGU6ICdHw6RydG5lcicsXHJcbiAgICBmcjogJ0JvdGFuaXN0ZScsXHJcbiAgICBqYTogJ+WckuiKuOW4qycsXHJcbiAgICBjbjogJ+WbreiJuuW3pScsXHJcbiAgICBrbzogJ+ybkOyYiOqwgCcsXHJcbiAgfSxcclxuICBGU0g6IHtcclxuICAgIGVuOiAnRmlzaGVyJyxcclxuICAgIGRlOiAnRmlzY2hlcicsXHJcbiAgICBmcjogJ1DDqmNoZXVyJyxcclxuICAgIGphOiAn5ryB5birJyxcclxuICAgIGNuOiAn5o2V6bG85Lq6JyxcclxuICAgIGtvOiAn7Ja067aAJyxcclxuICB9LFxyXG4gIFBMRDoge1xyXG4gICAgZW46ICdQYWxhZGluJyxcclxuICAgIGRlOiAnUGFsYWRpbicsXHJcbiAgICBmcjogJ1BhbGFkaW4nLFxyXG4gICAgamE6ICfjg4rjgqTjg4gnLFxyXG4gICAgY246ICfpqpHlo6snLFxyXG4gICAga286ICfrgpjsnbTtirgnLFxyXG4gIH0sXHJcbiAgTU5LOiB7XHJcbiAgICBlbjogJ01vbmsnLFxyXG4gICAgZGU6ICdNw7ZuY2gnLFxyXG4gICAgZnI6ICdNb2luZScsXHJcbiAgICBqYTogJ+ODouODs+OCrycsXHJcbiAgICBjbjogJ+atpuWDpycsXHJcbiAgICBrbzogJ+uqve2BrCcsXHJcbiAgfSxcclxuICBXQVI6IHtcclxuICAgIGVuOiAnV2FycmlvcicsXHJcbiAgICBkZTogJ0tyaWVnZXInLFxyXG4gICAgZnI6ICdHdWVycmllcicsXHJcbiAgICBqYTogJ+aIpuWjqycsXHJcbiAgICBjbjogJ+aImOWjqycsXHJcbiAgICBrbzogJ+yghOyCrCcsXHJcbiAgfSxcclxuICBEUkc6IHtcclxuICAgIGVuOiAnRHJhZ29vbicsXHJcbiAgICBkZTogJ0RyYWdvb24nLFxyXG4gICAgZnI6ICdDaGV2YWxpZXIgZHJhZ29uJyxcclxuICAgIGphOiAn56uc6aiO5aOrJyxcclxuICAgIGNuOiAn6b6Z6aqR5aOrJyxcclxuICAgIGtvOiAn7Jqp6riw7IKsJyxcclxuICB9LFxyXG4gIEJSRDoge1xyXG4gICAgZW46ICdCYXJkJyxcclxuICAgIGRlOiAnQmFyZGUnLFxyXG4gICAgZnI6ICdCYXJkZScsXHJcbiAgICBqYTogJ+WQn+mBiuipqeS6uicsXHJcbiAgICBjbjogJ+WQn+a4uOivl+S6uicsXHJcbiAgICBrbzogJ+ydjOycoOyLnOyduCcsXHJcbiAgfSxcclxuICBXSE06IHtcclxuICAgIGVuOiAnV2hpdGUgTWFnZScsXHJcbiAgICBkZTogJ1dlacOfbWFnaWVyJyxcclxuICAgIGZyOiAnTWFnZSBibGFuYycsXHJcbiAgICBqYTogJ+eZvemtlOmBk+WjqycsXHJcbiAgICBjbjogJ+eZvemtlOazleW4iCcsXHJcbiAgICBrbzogJ+uwseuniOuPhOyCrCcsXHJcbiAgfSxcclxuICBCTE06IHtcclxuICAgIGVuOiAnQmxhY2sgTWFnZScsXHJcbiAgICBkZTogJ1NjaHdhcnptYWdpZXInLFxyXG4gICAgZnI6ICdNYWdlIG5vaXInLFxyXG4gICAgamE6ICfpu5LprZTpgZPlo6snLFxyXG4gICAgY246ICfpu5HprZTms5XluIgnLFxyXG4gICAga286ICftnZHrp4jrj4TsgqwnLFxyXG4gIH0sXHJcbiAgQUNOOiB7XHJcbiAgICBlbjogJ0FyY2FuaXN0JyxcclxuICAgIGRlOiAnSGVybWV0aWtlcicsXHJcbiAgICBmcjogJ0FyY2FuaXN0ZScsXHJcbiAgICBqYTogJ+W3tOihk+WjqycsXHJcbiAgICBjbjogJ+enmOacr+W4iCcsXHJcbiAgICBrbzogJ+u5hOyKrOyCrCcsXHJcbiAgfSxcclxuICBTTU46IHtcclxuICAgIGVuOiAnU3VtbW9uZXInLFxyXG4gICAgZGU6ICdCZXNjaHfDtnJlcicsXHJcbiAgICBmcjogJ0ludm9jYXRldXInLFxyXG4gICAgamE6ICflj6zllprlo6snLFxyXG4gICAgY246ICflj6zllKTluIgnLFxyXG4gICAga286ICfshoztmZjsgqwnLFxyXG4gIH0sXHJcbiAgU0NIOiB7XHJcbiAgICBlbjogJ1NjaG9sYXInLFxyXG4gICAgZGU6ICdHZWxlaHJ0ZXInLFxyXG4gICAgZnI6ICfDiXJ1ZGl0JyxcclxuICAgIGphOiAn5a2m6ICFJyxcclxuICAgIGNuOiAn5a2m6ICFJyxcclxuICAgIGtvOiAn7ZWZ7J6QJyxcclxuICB9LFxyXG4gIFJPRzoge1xyXG4gICAgZW46ICdSb2d1ZScsXHJcbiAgICBkZTogJ1NjaHVya2UnLFxyXG4gICAgZnI6ICdTdXJpbmV1cicsXHJcbiAgICBqYTogJ+WPjOWJo+WjqycsXHJcbiAgICBjbjogJ+WPjOWJkeW4iCcsXHJcbiAgICBrbzogJ+yMjeqygOyCrCcsXHJcbiAgfSxcclxuICBOSU46IHtcclxuICAgIGVuOiAnTmluamEnLFxyXG4gICAgZGU6ICdOaW5qYScsXHJcbiAgICBmcjogJ05pbmphJyxcclxuICAgIGphOiAn5b+N6ICFJyxcclxuICAgIGNuOiAn5b+N6ICFJyxcclxuICAgIGtvOiAn64uM7J6QJyxcclxuICB9LFxyXG4gIE1DSDoge1xyXG4gICAgZW46ICdNYWNoaW5pc3QnLFxyXG4gICAgZGU6ICdNYXNjaGluaXN0JyxcclxuICAgIGZyOiAnTWFjaGluaXN0ZScsXHJcbiAgICBqYTogJ+apn+W3peWjqycsXHJcbiAgICBjbjogJ+acuuW3peWjqycsXHJcbiAgICBrbzogJ+q4sOqzteyCrCcsXHJcbiAgfSxcclxuICBEUks6IHtcclxuICAgIGVuOiAnRGFyayBLbmlnaHQnLFxyXG4gICAgZGU6ICdEdW5rZWxyaXR0ZXInLFxyXG4gICAgZnI6ICdDaGV2YWxpZXIgbm9pcicsXHJcbiAgICBqYTogJ+aal+m7kumojuWjqycsXHJcbiAgICBjbjogJ+aal+m7kemqkeWjqycsXHJcbiAgICBrbzogJ+yVlO2dkeq4sOyCrCcsXHJcbiAgfSxcclxuICBBU1Q6IHtcclxuICAgIGVuOiAnQXN0cm9sb2dpYW4nLFxyXG4gICAgZGU6ICdBc3Ryb2xvZ2UnLFxyXG4gICAgZnI6ICdBc3Ryb21hbmNpZW4nLFxyXG4gICAgamE6ICfljaDmmJ/ooZPluKsnLFxyXG4gICAgY246ICfljaDmmJ/mnK/lo6snLFxyXG4gICAga286ICfsoJDshLHsiKDsgqwnLFxyXG4gIH0sXHJcbiAgU0FNOiB7XHJcbiAgICBlbjogJ1NhbXVyYWknLFxyXG4gICAgZGU6ICdTYW11cmFpJyxcclxuICAgIGZyOiAnU2FtdXJhw68nLFxyXG4gICAgamE6ICfkvo0nLFxyXG4gICAgY246ICfmrablo6snLFxyXG4gICAga286ICfsgqzrrLTrnbzsnbQnLFxyXG4gIH0sXHJcbiAgUkRNOiB7XHJcbiAgICBlbjogJ1JlZCBNYWdlJyxcclxuICAgIGRlOiAnUm90bWFnaWVyJyxcclxuICAgIGZyOiAnTWFnZSByb3VnZScsXHJcbiAgICBqYTogJ+i1pOmtlOmBk+WjqycsXHJcbiAgICBjbjogJ+i1pOmtlOazleW4iCcsXHJcbiAgICBrbzogJ+yggeuniOuPhOyCrCcsXHJcbiAgfSxcclxuICBCTFU6IHtcclxuICAgIGVuOiAnQmx1ZSBNYWdlJyxcclxuICAgIGRlOiAnQmxhdW1hZ2llcicsXHJcbiAgICBmcjogJ01hZ2UgYmxldScsXHJcbiAgICBqYTogJ+mdkumtlOmBk+WjqycsXHJcbiAgICBjbjogJ+mdkumtlOazleW4iCcsXHJcbiAgICBrbzogJ+yyreuniOuPhOyCrCcsXHJcbiAgfSxcclxuICBHTkI6IHtcclxuICAgIGVuOiAnR3VuYnJlYWtlcicsXHJcbiAgICBkZTogJ1Jldm9sdmVya2xpbmdlJyxcclxuICAgIGZyOiAnUGlzdG9zYWJyZXVyJyxcclxuICAgIGphOiAn44Ks44Oz44OW44Os44Kk44Kr44O8JyxcclxuICAgIGNuOiAn57ud5p6q5oiY5aOrJyxcclxuICAgIGtvOiAn6rG067iM66CI7J207LukJyxcclxuICB9LFxyXG4gIEROQzoge1xyXG4gICAgZW46ICdEYW5jZXInLFxyXG4gICAgZGU6ICdUw6RuemVyJyxcclxuICAgIGZyOiAnRGFuc2V1cicsXHJcbiAgICBqYTogJ+i4iuOCiuWtkCcsXHJcbiAgICBjbjogJ+iInuiAhScsXHJcbiAgICBrbzogJ+ustOuPhOqwgCcsXHJcbiAgfSxcclxuICBSUFI6IHtcclxuICAgIGVuOiAnUmVhcGVyJyxcclxuICAgIGRlOiAnU2Nobml0dGVyJyxcclxuICAgIGZyOiAnRmF1Y2hldXInLFxyXG4gICAgamE6ICfjg6rjg7zjg5Hjg7wnLFxyXG4gICAgY246ICfpkpDplbDlrqInLFxyXG4gICAga286ICfrpqztjbwnLFxyXG4gIH0sXHJcbiAgU0dFOiB7XHJcbiAgICBlbjogJ1NhZ2UnLFxyXG4gICAgZGU6ICdXZWlzZXInLFxyXG4gICAgZnI6ICdTYWdlJyxcclxuICAgIGphOiAn6LOi6ICFJyxcclxuICAgIGNuOiAn6LSk6ICFJyxcclxuICAgIGtvOiAn7ZiE7J6QJyxcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFydHlUcmFja2VyIHtcclxuICBkZXRhaWxzOiBQYXJ0eVtdID0gW107XHJcbiAgcGFydHlOYW1lc186IHN0cmluZ1tdID0gW107XHJcbiAgcGFydHlJZHNfOiBzdHJpbmdbXSA9IFtdO1xyXG4gIGFsbGlhbmNlTmFtZXNfOiBzdHJpbmdbXSA9IFtdO1xyXG4gIGFsbGlhbmNlSWRzXzogc3RyaW5nW10gPSBbXTtcclxuICBuYW1lVG9Sb2xlXzogeyBbbmFtZTogc3RyaW5nXTogUm9sZSB9ID0ge307XHJcbiAgaWRUb05hbWVfOiB7IFtpZDogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcclxuICByb2xlVG9QYXJ0eU5hbWVzXzogUmVjb3JkPFJvbGUsIHN0cmluZ1tdPiA9IGVtcHR5Um9sZVRvUGFydHlOYW1lcygpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG9wdGlvbnM6IFBhcnR5VHJhY2tlck9wdGlvbnMpIHt9XHJcblxyXG4gIC8vIEJpbmQgdGhpcyB0byBQYXJ0eUNoYW5nZWQgZXZlbnRzLlxyXG4gIG9uUGFydHlDaGFuZ2VkKGU6IHsgcGFydHk6IFBhcnR5W10gfSk6IHZvaWQge1xyXG4gICAgdGhpcy5yZXNldCgpO1xyXG4gICAgdGhpcy5kZXRhaWxzID0gZS5wYXJ0eTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHAgb2YgZS5wYXJ0eSkge1xyXG4gICAgICB0aGlzLmFsbGlhbmNlSWRzXy5wdXNoKHAuaWQpO1xyXG4gICAgICB0aGlzLmFsbGlhbmNlTmFtZXNfLnB1c2gocC5uYW1lKTtcclxuICAgICAgY29uc3Qgam9iTmFtZSA9IFV0aWwuam9iRW51bVRvSm9iKHAuam9iKTtcclxuICAgICAgY29uc3Qgcm9sZSA9IFV0aWwuam9iVG9Sb2xlKGpvYk5hbWUpO1xyXG4gICAgICB0aGlzLmlkVG9OYW1lX1twLmlkXSA9IHAubmFtZTtcclxuICAgICAgdGhpcy5uYW1lVG9Sb2xlX1twLm5hbWVdID0gcm9sZTtcclxuICAgICAgaWYgKHAuaW5QYXJ0eSkge1xyXG4gICAgICAgIHRoaXMucGFydHlJZHNfLnB1c2gocC5pZCk7XHJcbiAgICAgICAgdGhpcy5wYXJ0eU5hbWVzXy5wdXNoKHAubmFtZSk7XHJcbiAgICAgICAgdGhpcy5yb2xlVG9QYXJ0eU5hbWVzX1tyb2xlXS5wdXNoKHAubmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgLy8gb3JpZ2luYWwgZXZlbnQgZGF0YVxyXG4gICAgdGhpcy5kZXRhaWxzID0gW107XHJcbiAgICB0aGlzLnBhcnR5TmFtZXNfID0gW107XHJcbiAgICB0aGlzLnBhcnR5SWRzXyA9IFtdO1xyXG4gICAgdGhpcy5hbGxpYW5jZU5hbWVzXyA9IFtdO1xyXG4gICAgdGhpcy5hbGxpYW5jZUlkc18gPSBbXTtcclxuICAgIHRoaXMubmFtZVRvUm9sZV8gPSB7fTtcclxuICAgIHRoaXMuaWRUb05hbWVfID0ge307XHJcblxyXG4gICAgLy8gcm9sZSAtPiBbbmFtZXNdIGJ1dCBvbmx5IGZvciBwYXJ0eVxyXG4gICAgdGhpcy5yb2xlVG9QYXJ0eU5hbWVzXyA9IGVtcHR5Um9sZVRvUGFydHlOYW1lcygpO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbmFtZXMgb2YgcGxheWVycyBpbiB5b3VyIGltbWVkaWF0ZSBwYXJ0eVxyXG4gIGdldCBwYXJ0eU5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLnBhcnR5TmFtZXNfO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHBhcnR5SWRzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLnBhcnR5SWRzXztcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIHBsYXllcnMgaW4geW91ciBhbGxpYW5jZVxyXG4gIGdldCBhbGxpYW5jZU5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLmFsbGlhbmNlTmFtZXNfO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbmFtZXMgb2YgdGFua3MgaW4geW91ciBpbW1lZGlhdGUgcGFydHlcclxuICBnZXQgdGFua05hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLnJvbGVUb1BhcnR5TmFtZXNfWyd0YW5rJ107XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBuYW1lcyBvZiBoZWFsZXJzIGluIHlvdXIgaW1tZWRpYXRlIHBhcnR5XHJcbiAgZ2V0IGhlYWxlck5hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLnJvbGVUb1BhcnR5TmFtZXNfWydoZWFsZXInXTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG5hbWVzIG9mIGRwcyBwbGF5ZXJzIGluIHlvdXIgaW1tZWRpYXRlIHBhcnR5XHJcbiAgZ2V0IGRwc05hbWVzKCk6IHJlYWRvbmx5IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiB0aGlzLnJvbGVUb1BhcnR5TmFtZXNfWydkcHMnXTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgbmFtZWQgcGxheWVyIGluIHlvdXIgYWxsaWFuY2UgaXMgYSBwYXJ0aWN1bGFyIHJvbGVcclxuICBpc1JvbGUobmFtZTogc3RyaW5nLCByb2xlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLm5hbWVUb1JvbGVfW25hbWVdID09PSByb2xlO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBuYW1lZCBwbGF5ZXIgaW4geW91ciBhbGxpYW5jZSBpcyBhIHRhbmtcclxuICBpc1RhbmsobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5pc1JvbGUobmFtZSwgJ3RhbmsnKTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgbmFtZWQgcGxheWVyIGluIHlvdXIgYWxsaWFuY2UgaXMgYSBoZWFsZXJcclxuICBpc0hlYWxlcihuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmlzUm9sZShuYW1lLCAnaGVhbGVyJyk7XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRydWUgaWYgdGhlIG5hbWVkIHBsYXllciBpbiB5b3VyIGFsbGlhbmNlIGlzIGEgZHBzXHJcbiAgaXNEUFMobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5pc1JvbGUobmFtZSwgJ2RwcycpO1xyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJucyB0cnVlIGlmIHRoZSBuYW1lZCBwbGF5ZXIgaXMgaW4geW91ciBpbW1lZGlhdGUgcGFydHlcclxuICBpblBhcnR5KG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMucGFydHlOYW1lcy5pbmNsdWRlcyhuYW1lKTtcclxuICB9XHJcblxyXG4gIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgbmFtZWQgcGxheWVyIGlzIGluIHlvdXIgYWxsaWFuY2VcclxuICBpbkFsbGlhbmNlKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuYWxsaWFuY2VOYW1lcy5pbmNsdWRlcyhuYW1lKTtcclxuICB9XHJcblxyXG4gIC8vIGZvciBhIG5hbWVkIHBsYXllciwgcmV0dXJucyB0aGUgb3RoZXIgdGFuayBpbiB5b3VyIGltbWVkaWF0ZSBwYXJ0eVxyXG4gIC8vIGlmIG5hbWVkIHBsYXllciBpcyBub3QgYSB0YW5rLCBvciB0aGVyZSdzIG5vdCBleGFjdGx5IHR3byB0YW5rc1xyXG4gIC8vIGluIHlvdXIgaW1tZWRpYXRlIHBhcnR5LCByZXR1cm5zIG51bGwuXHJcbiAgb3RoZXJUYW5rKG5hbWU6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBuYW1lcyA9IHRoaXMudGFua05hbWVzO1xyXG4gICAgaWYgKG5hbWVzLmxlbmd0aCAhPT0gMilcclxuICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKG5hbWVzWzBdID09PSBuYW1lKVxyXG4gICAgICByZXR1cm4gbmFtZXNbMV07XHJcbiAgICBpZiAobmFtZXNbMV0gPT09IG5hbWUpXHJcbiAgICAgIHJldHVybiBuYW1lc1swXTtcclxuICB9XHJcblxyXG4gIC8vIHNlZTogb3RoZXJUYW5rLCBidXQgZm9yIGhlYWxlcnMuXHJcbiAgb3RoZXJIZWFsZXIobmFtZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IG5hbWVzID0gdGhpcy5oZWFsZXJOYW1lcztcclxuICAgIGlmIChuYW1lcy5sZW5ndGggIT09IDIpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGlmIChuYW1lc1swXSA9PT0gbmFtZSlcclxuICAgICAgcmV0dXJuIG5hbWVzWzFdO1xyXG4gICAgaWYgKG5hbWVzWzFdID09PSBuYW1lKVxyXG4gICAgICByZXR1cm4gbmFtZXNbMF07XHJcbiAgfVxyXG5cclxuICAvLyByZXR1cm5zIHRoZSBqb2IgbmFtZSBvZiB0aGUgc3BlY2lmaWVkIHBhcnR5IG1lbWJlclxyXG4gIGpvYk5hbWUobmFtZTogc3RyaW5nKTogSm9iIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IHBhcnR5SW5kZXggPSB0aGlzLnBhcnR5TmFtZXMuaW5kZXhPZihuYW1lKTtcclxuICAgIGlmIChwYXJ0eUluZGV4IDwgMClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgY29uc3Qgam9iID0gdGhpcy5kZXRhaWxzW3BhcnR5SW5kZXhdPy5qb2I7XHJcbiAgICBpZiAoam9iID09PSB1bmRlZmluZWQpXHJcbiAgICAgIHJldHVybjtcclxuICAgIHJldHVybiBVdGlsLmpvYkVudW1Ub0pvYihqb2IpO1xyXG4gIH1cclxuXHJcbiAgbmFtZUZyb21JZChpZDogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmlkVG9OYW1lX1tpZF07XHJcbiAgfVxyXG5cclxuICBtZW1iZXIobmFtZT86IHN0cmluZyk6IFBhcnR5TWVtYmVyUGFyYW1PYmplY3Qge1xyXG4gICAgLy8gRm9yIGJvaWxlcnBsYXRlIGNvbnZlbmllbmNlIGluIHRyaWdnZXJzLCBoYW5kbGUgdW5kZWZpbmVkIG5hbWVzLlxyXG4gICAgaWYgKG5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCB1bmtub3duID0gJz8/Pyc7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZTogdW5rbm93bixcclxuICAgICAgICBuaWNrOiB1bmtub3duLFxyXG4gICAgICAgIHRvU3RyaW5nOiAoKSA9PiB1bmtub3duLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBhcnR5TWVtYmVyID0gdGhpcy5kZXRhaWxzLmZpbmQoKG1lbWJlcikgPT4gbWVtYmVyLm5hbWUgPT09IG5hbWUpO1xyXG4gICAgbGV0IHJldDogUGFydHlNZW1iZXJQYXJhbU9iamVjdDtcclxuICAgIGNvbnN0IG5pY2sgPSBVdGlsLnNob3J0TmFtZShuYW1lLCB0aGlzLm9wdGlvbnMuUGxheWVyTmlja3MpO1xyXG5cclxuICAgIGlmICghcGFydHlNZW1iZXIpIHtcclxuICAgICAgLy8gSWYgd2UgY2FuJ3QgZmluZCB0aGlzIHBhcnR5IG1lbWJlciBmb3Igc29tZSByZWFzb24sIHVzZSBzb21lIHNvcnQgb2YgZGVmYXVsdC5cclxuICAgICAgcmV0ID0ge1xyXG4gICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgbmljazogbmljayxcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGxhbmcgPSB0aGlzLm9wdGlvbnMuRGlzcGxheUxhbmd1YWdlO1xyXG4gICAgICBjb25zdCBqb2IgPSBVdGlsLmpvYkVudW1Ub0pvYihwYXJ0eU1lbWJlci5qb2IpO1xyXG4gICAgICBjb25zdCBqb2JBYmJyID0gam9iTG9jYWxpemVkQWJicltqb2JdPy5bbGFuZ10gPz8gam9iO1xyXG4gICAgICBjb25zdCBqb2JGdWxsID0gam9iTG9jYWxpemVkRnVsbFtqb2JdPy5bbGFuZ10gPz8gam9iO1xyXG4gICAgICBjb25zdCByb2xlID0gVXRpbC5qb2JUb1JvbGUoam9iKTtcclxuICAgICAgY29uc3Qgcm9sZU5hbWUgPSByb2xlTG9jYWxpemVkW3JvbGVdPy5bbGFuZ10gPz8gcm9sZTtcclxuICAgICAgcmV0ID0ge1xyXG4gICAgICAgIGlkOiBwYXJ0eU1lbWJlci5pZCxcclxuICAgICAgICBqb2I6IGpvYkFiYnIsXHJcbiAgICAgICAgam9iRnVsbDogam9iRnVsbCxcclxuICAgICAgICByb2xlOiByb2xlTmFtZSxcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIG5pY2s6IG5pY2ssXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTmVlZCB0byBhc3NpZ24gdGhpcyBhZnRlcndhcmRzIHNvIGl0IGNhbiByZWZlcmVuY2UgYHJldGAuXHJcbiAgICByZXQudG9TdHJpbmcgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJldFZhbCA9IHJldFt0aGlzLm9wdGlvbnMuRGVmYXVsdFBsYXllckxhYmVsXTtcclxuICAgICAgaWYgKHR5cGVvZiByZXRWYWwgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgIHJldHVybiByZXRWYWw7XHJcbiAgICAgIHJldHVybiByZXQubmljaztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b3BsYXlIZWxwZXIge1xyXG4gIHByaXZhdGUgc3RhdGljIGNvbnRleHQ/OiBBdWRpb0NvbnRleHQ7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgaXNCdXR0b25DcmVhdGVkID0gZmFsc2U7XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGdldENvbnRleHQoKTogQXVkaW9Db250ZXh0IHtcclxuICAgIEF1dG9wbGF5SGVscGVyLmNvbnRleHQgPz89IG5ldyBBdWRpb0NvbnRleHQoKTtcclxuICAgIHJldHVybiBBdXRvcGxheUhlbHBlci5jb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIENoZWNrSWZBbHJlYWR5UnVubmluZygpOiBib29sZWFuIHtcclxuICAgIC8vIFRoaXMgY2hlY2sgd2lsbCBvbmx5IGV2ZXIgc3VjY2VlZCBvbiBydW5uaW5nIENocm9taXVtIHBhc3NpbmdcclxuICAgIC8vICAtLWF1dG9wbGF5LXBvbGljeT1uby11c2VyLWdlc3R1cmUtcmVxdWlyZWRcclxuICAgIC8vIGFzIGNvbW1hbmQgbGluZSBhcmd1bWVudCBvciBjb25maWd1cmluZyBDRUYgdGhlIGNvcnJlY3Qgd2F5LlxyXG4gICAgLy8gT25jZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMTA2MzgwXHJcbiAgICAvLyBpcyBmaXhlZCB0aGlzIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGZhbHNlIG9uIGV2ZXJ5ICh1cC10by1kYXRlKSBicm93c2VyXHJcbiAgICBjb25zdCBjb250ZXh0ID0gQXV0b3BsYXlIZWxwZXIuZ2V0Q29udGV4dCgpO1xyXG4gICAgcmV0dXJuIGNvbnRleHQuc3RhdGUgPT09ICdydW5uaW5nJztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBQcm9tcHQoKTogdm9pZCB7XHJcbiAgICBpZiAoQXV0b3BsYXlIZWxwZXIuaXNCdXR0b25DcmVhdGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGNvbnRleHQgPSBBdXRvcGxheUhlbHBlci5nZXRDb250ZXh0KCk7XHJcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGJ1dHRvbi5pbm5lclRleHQgPSAnQ2xpY2sgdG8gZW5hYmxlIGF1ZGlvJztcclxuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhdXRvcGxheS1oZWxwZXItYnV0dG9uJyk7XHJcbiAgICBidXR0b24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2b2lkIGNvbnRleHQucmVzdW1lKCk7XHJcbiAgICB9O1xyXG4gICAgY29udGV4dC5vbnN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGJ1dHRvbi5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGJ1dHRvbik7XHJcbiAgICBBdXRvcGxheUhlbHBlci5pc0J1dHRvbkNyZWF0ZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIENoZWNrQW5kUHJvbXB0KCk6IHZvaWQge1xyXG4gICAgaWYgKCFBdXRvcGxheUhlbHBlci5DaGVja0lmQWxyZWFkeVJ1bm5pbmcoKSlcclxuICAgICAgQXV0b3BsYXlIZWxwZXIuUHJvbXB0KCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IExhbmcgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbGFuZ3VhZ2VzJztcclxuXHJcbmNsYXNzIFRUU0l0ZW0ge1xyXG4gIHJlYWRvbmx5IHRleHQ6IHN0cmluZztcclxuICByZWFkb25seSBpdGVtOiBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRleHQ6IHN0cmluZywgbGFuZz86IHN0cmluZywgdm9pY2U/OiBTcGVlY2hTeW50aGVzaXNWb2ljZSkge1xyXG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuICAgIHRoaXMuaXRlbSA9IG5ldyBTcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UodGV4dCk7XHJcbiAgICBpZiAobGFuZyAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICB0aGlzLml0ZW0ubGFuZyA9IGxhbmc7XHJcbiAgICBpZiAodm9pY2UpXHJcbiAgICAgIHRoaXMuaXRlbS52b2ljZSA9IHZvaWNlO1xyXG4gIH1cclxuXHJcbiAgcGxheSgpIHtcclxuICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuc3BlYWsodGhpcy5pdGVtKTtcclxuICB9XHJcbn1cclxuXHJcbnR5cGUgVFRTSXRlbURpY3Rpb25hcnkgPSB7XHJcbiAgW2tleTogc3RyaW5nXTogVFRTSXRlbTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyb3dzZXJUVFNFbmdpbmUge1xyXG4gIHJlYWRvbmx5IHR0c0l0ZW1zOiBUVFNJdGVtRGljdGlvbmFyeSA9IHt9O1xyXG4gIHByaXZhdGUgc3BlZWNoTGFuZz86IHN0cmluZztcclxuICBwcml2YXRlIHNwZWVjaFZvaWNlPzogU3BlZWNoU3ludGhlc2lzVm9pY2U7XHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplQXR0ZW1wdHMgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhY3Rib3RMYW5nOiBMYW5nKSB7XHJcbiAgICBpZiAod2luZG93LnNwZWVjaFN5bnRoZXNpcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTMzNDg0N1xyXG4gICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLmdldFZvaWNlcygpO1xyXG4gICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLm9udm9pY2VzY2hhbmdlZCA9ICgpID0+IHRoaXMuaW5pdGlhbGl6ZVZvaWNlKCk7XHJcbiAgICB9IGVsc2VcclxuICAgICAgY29uc29sZS5lcnJvcignQnJvd3NlclRUUyBlcnJvcjogbm8gYnJvd3NlciBzdXBwb3J0IGZvciB3aW5kb3cuc3BlZWNoU3ludGhlc2lzJyk7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplVm9pY2UoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAod2luZG93LnNwZWVjaFN5bnRoZXNpcyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodGhpcy5zcGVlY2hWb2ljZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGlmICh0aGlzLmluaXRpYWxpemVBdHRlbXB0cyA+IDUpXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZUF0dGVtcHRzKys7XHJcblxyXG4gICAgY29uc3QgY2FjdGJvdExhbmdUb1NwZWVjaExhbmcgPSB7XHJcbiAgICAgIGVuOiAnZW4tVVMnLFxyXG4gICAgICBkZTogJ2RlLURFJyxcclxuICAgICAgZnI6ICdmci1GUicsXHJcbiAgICAgIGphOiAnamEtSlAnLFxyXG4gICAgICAvLyBUT0RPOiBtYXliZSBuZWVkIHRvIHByb3ZpZGUgYW4gb3B0aW9uIG9mIHpoLUNOLCB6aC1ISywgemgtVFc/XHJcbiAgICAgIGNuOiAnemgtQ04nLFxyXG4gICAgICBrbzogJ2tvLUtSJyxcclxuICAgIH07XHJcblxyXG4gICAgLy8gZmlndXJlIG91dCB3aGF0IFRUUyBlbmdpbmUgdHlwZSB3ZSBuZWVkXHJcbiAgICBjb25zdCBzcGVlY2hMYW5nID0gY2FjdGJvdExhbmdUb1NwZWVjaExhbmdbdGhpcy5jYWN0Ym90TGFuZ107XHJcbiAgICBjb25zdCB2b2ljZSA9IHdpbmRvdy5zcGVlY2hTeW50aGVzaXMuZ2V0Vm9pY2VzKCkuZmluZCgodm9pY2UpID0+XHJcbiAgICAgIHZvaWNlLmxhbmcucmVwbGFjZUFsbCgnXycsICctJykgPT09IHNwZWVjaExhbmdcclxuICAgICk7XHJcbiAgICBpZiAodm9pY2UpIHtcclxuICAgICAgdGhpcy5zcGVlY2hMYW5nID0gc3BlZWNoTGFuZztcclxuICAgICAgdGhpcy5zcGVlY2hWb2ljZSA9IHZvaWNlO1xyXG4gICAgICB3aW5kb3cuc3BlZWNoU3ludGhlc2lzLm9udm9pY2VzY2hhbmdlZCA9IG51bGw7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Jyb3dzZXJUVFMgZXJyb3I6IGNvdWxkIG5vdCBmaW5kIHZvaWNlJyk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwbGF5KHRleHQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgLy8gVE9ETzogdHJ5IHRvIGFkZHJlc3MgYSByZXBvcnQgb2YgdGhlIGNvbnN0cnVjdG9yIG5vdCBmaW5kaW5nIHZvaWNlc1xyXG4gICAgLy8gYnkgbGF6aWx5IGxvb2tpbmcgbGF0ZXIuXHJcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZVZvaWNlKCkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgdHRzSXRlbSA9IHRoaXMudHRzSXRlbXNbdGV4dF07XHJcbiAgICAgIGlmICghdHRzSXRlbSkge1xyXG4gICAgICAgIHR0c0l0ZW0gPSBuZXcgVFRTSXRlbSh0ZXh0LCB0aGlzLnNwZWVjaExhbmcsIHRoaXMuc3BlZWNoVm9pY2UpO1xyXG4gICAgICAgIHRoaXMudHRzSXRlbXNbdGV4dF0gPSB0dHNJdGVtO1xyXG4gICAgICB9XHJcbiAgICAgIHR0c0l0ZW0ucGxheSgpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFeGNlcHRpb24gcGVyZm9ybWluZyBUVFMnLCBlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTGFuZyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9sYW5ndWFnZXMnO1xyXG5pbXBvcnQgeyBidWlsZE5ldFJlZ2V4Rm9yVHJpZ2dlciwgY29tbW9uTmV0UmVnZXggfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbmV0cmVnZXhlcyc7XHJcbmltcG9ydCB7IFVucmVhY2hhYmxlQ29kZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9ub3RfcmVhY2hlZCc7XHJcbmltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciwgY2FsbE92ZXJsYXlIYW5kbGVyIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL292ZXJsYXlfcGx1Z2luX2FwaSc7XHJcbmltcG9ydCBQYXJ0eVRyYWNrZXIgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3BhcnR5JztcclxuaW1wb3J0IHtcclxuICBhZGRQbGF5ZXJDaGFuZ2VkT3ZlcnJpZGVMaXN0ZW5lcixcclxuICBQbGF5ZXJDaGFuZ2VkRGV0YWlsLFxyXG59IGZyb20gJy4uLy4uL3Jlc291cmNlcy9wbGF5ZXJfb3ZlcnJpZGUnO1xyXG5pbXBvcnQgUmVnZXhlcyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvcmVnZXhlcyc7XHJcbmltcG9ydCB7IHRyYW5zbGF0ZVJlZ2V4LCB0cmFuc2xhdGVSZWdleEJ1aWxkUGFyYW0gfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdHJhbnNsYXRpb25zJztcclxuaW1wb3J0IFVzZXJDb25maWcsIHsgQ29uZmlnVmFsdWUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdXNlcl9jb25maWcnO1xyXG5pbXBvcnQgVXRpbCBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdXRpbCc7XHJcbmltcG9ydCBab25lSWQgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3pvbmVfaWQnO1xyXG5pbXBvcnQgeyBSYWlkYm9zc0RhdGEgfSBmcm9tICcuLi8uLi90eXBlcy9kYXRhJztcclxuaW1wb3J0IHsgRXZlbnRSZXNwb25zZXMsIExvZ0V2ZW50IH0gZnJvbSAnLi4vLi4vdHlwZXMvZXZlbnQnO1xyXG5pbXBvcnQgeyBKb2IsIFJvbGUgfSBmcm9tICcuLi8uLi90eXBlcy9qb2InO1xyXG5pbXBvcnQgeyBNYXRjaGVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvbmV0X21hdGNoZXMnO1xyXG5pbXBvcnQge1xyXG4gIERhdGFJbml0aWFsaXplRnVuYyxcclxuICBHZW5lcmFsTmV0UmVnZXhUcmlnZ2VyLFxyXG4gIExvb3NlVHJpZ2dlcixcclxuICBMb29zZVRyaWdnZXJTZXQsXHJcbiAgT3V0cHV0LFxyXG4gIE91dHB1dFN0cmluZ3MsXHJcbiAgUGFydGlhbFRyaWdnZXJPdXRwdXQsXHJcbiAgUmFpZGJvc3NGaWxlRGF0YSxcclxuICBSZWdleFRyaWdnZXIsXHJcbiAgUmVzcG9uc2VGaWVsZCxcclxuICBSZXNwb25zZU91dHB1dCxcclxuICBUaW1lbGluZUZpZWxkLFxyXG4gIFRpbWVsaW5lRnVuYyxcclxuICBUcmlnZ2VyQXV0b0NvbmZpZyxcclxuICBUcmlnZ2VyRmllbGQsXHJcbiAgVHJpZ2dlck91dHB1dCxcclxuICBUcmlnZ2VyU2V0QXV0b0NvbmZpZyxcclxufSBmcm9tICcuLi8uLi90eXBlcy90cmlnZ2VyJztcclxuXHJcbmltcG9ydCBBdXRvcGxheUhlbHBlciBmcm9tICcuL2F1dG9wbGF5X2hlbHBlcic7XHJcbmltcG9ydCBCcm93c2VyVFRTRW5naW5lIGZyb20gJy4vYnJvd3Nlcl90dHNfZW5naW5lJztcclxuaW1wb3J0IHsgUGVyVHJpZ2dlckF1dG9Db25maWcsIFBlclRyaWdnZXJPcHRpb24sIFJhaWRib3NzT3B0aW9ucyB9IGZyb20gJy4vcmFpZGJvc3Nfb3B0aW9ucyc7XHJcbmltcG9ydCB7IFRpbWVsaW5lTG9hZGVyIH0gZnJvbSAnLi90aW1lbGluZSc7XHJcbmltcG9ydCB7IFRpbWVsaW5lUmVwbGFjZW1lbnQgfSBmcm9tICcuL3RpbWVsaW5lX3BhcnNlcic7XHJcblxyXG5jb25zdCBpc1JhaWRib3NzTG9vc2VUaW1lbGluZVRyaWdnZXIgPSAoXHJcbiAgdHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlcixcclxuKTogdHJpZ2dlciBpcyBQcm9jZXNzZWRUaW1lbGluZVRyaWdnZXIgPT4ge1xyXG4gIHJldHVybiAnaXNUaW1lbGluZVRyaWdnZXInIGluIHRyaWdnZXI7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaXNOZXRSZWdleFRyaWdnZXIgPSAoXHJcbiAgdHJpZ2dlcj86IFByb2Nlc3NlZFRyaWdnZXIsXHJcbik6IHRyaWdnZXIgaXMgR2VuZXJhbE5ldFJlZ2V4VHJpZ2dlcjxSYWlkYm9zc0RhdGEsICdOb25lJz4gJiBQcm9jZXNzZWRUcmlnZ2VyID0+IHtcclxuICBpZiAodHJpZ2dlciAmJiAhaXNSYWlkYm9zc0xvb3NlVGltZWxpbmVUcmlnZ2VyKHRyaWdnZXIpKVxyXG4gICAgcmV0dXJuICduZXRSZWdleCcgaW4gdHJpZ2dlcjtcclxuICByZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG50eXBlIFBhcnRpYWxFeGNlcHQ8T3JpZywgSyBleHRlbmRzIGtleW9mIE9yaWc+ID0gUGFydGlhbDxPbWl0PE9yaWcsIEs+PiAmIFBpY2s8T3JpZywgSz47XHJcbnR5cGUgUmVnZXhQcm9jZXNzZWRUcmlnZ2VyID0gUGFydGlhbEV4Y2VwdDxSZWdleFRyaWdnZXI8UmFpZGJvc3NEYXRhPiAmIFByb2Nlc3NlZFRyaWdnZXIsICdyZWdleCc+O1xyXG5leHBvcnQgY29uc3QgaXNSZWdleFRyaWdnZXIgPSAoXHJcbiAgdHJpZ2dlcj86IFByb2Nlc3NlZFRyaWdnZXIsXHJcbik6IHRyaWdnZXIgaXMgUmVnZXhQcm9jZXNzZWRUcmlnZ2VyID0+IHtcclxuICBpZiAodHJpZ2dlciAmJiAhaXNSYWlkYm9zc0xvb3NlVGltZWxpbmVUcmlnZ2VyKHRyaWdnZXIpKVxyXG4gICAgcmV0dXJuICdyZWdleCcgaW4gdHJpZ2dlcjtcclxuICByZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBQcm9jZXNzZWRUcmlnZ2VyID0gTG9vc2VUcmlnZ2VyICYge1xyXG4gIGZpbGVuYW1lPzogc3RyaW5nO1xyXG4gIGxvY2FsUmVnZXg/OiBSZWdFeHA7XHJcbiAgbG9jYWxOZXRSZWdleD86IFJlZ0V4cDtcclxuICBvdXRwdXQ/OiBPdXRwdXQ7XHJcbiAgdHJpZ2dlclNldEF1dG9Db25maWc/OiBSZWFkb25seTxUcmlnZ2VyU2V0QXV0b0NvbmZpZz47XHJcbn07XHJcblxyXG50eXBlIFByb2Nlc3NlZFRpbWVsaW5lVHJpZ2dlciA9IFByb2Nlc3NlZFRyaWdnZXIgJiB7XHJcbiAgaXNUaW1lbGluZVRyaWdnZXI/OiB0cnVlO1xyXG59O1xyXG5cclxudHlwZSBQcm9jZXNzZWRUcmlnZ2VyU2V0ID0gTG9vc2VUcmlnZ2VyU2V0ICYge1xyXG4gIGZpbGVuYW1lPzogc3RyaW5nO1xyXG4gIHRpbWVsaW5lVHJpZ2dlcnM/OiBQcm9jZXNzZWRUaW1lbGluZVRyaWdnZXJbXTtcclxuICB0cmlnZ2Vycz86IFByb2Nlc3NlZFRyaWdnZXJbXTtcclxufTtcclxuXHJcbi8vIFRoZXJlIHNob3VsZCBiZSAoYXQgbW9zdCkgc2l4IGxpbmVzIG9mIGluc3RydWN0aW9ucy5cclxuY29uc3QgcmFpZGJvc3NJbnN0cnVjdGlvbnM6IHsgW2xhbmcgaW4gTGFuZ106IHN0cmluZ1tdIH0gPSB7XHJcbiAgZW46IFtcclxuICAgICdJbnN0cnVjdGlvbnMgYXMgZm9sbG93czonLFxyXG4gICAgJ1RoaXMgaXMgZGVidWcgdGV4dCBmb3IgcmVzaXppbmcuJyxcclxuICAgICdJdCBnb2VzIGF3YXkgd2hlbiB5b3UgbG9jayB0aGUgb3ZlcmxheScsXHJcbiAgICAnYWxvbmcgd2l0aCB0aGUgYmx1ZSBiYWNrZ3JvdW5kLicsXHJcbiAgICAnVGltZWxpbmVzIGFuZCB0cmlnZ2VycyB3aWxsIHNob3cgdXAgaW4gc3VwcG9ydGVkIHpvbmVzLicsXHJcbiAgICAnVGVzdCByYWlkYm9zcyB3aXRoIGEgL2NvdW50ZG93biBpbiBTdW1tZXJmb3JkIEZhcm1zLicsXHJcbiAgXSxcclxuICBkZTogW1xyXG4gICAgJ0Fud2Vpc3VuZ2VuIHdpZSBmb2xndDonLFxyXG4gICAgJ0RpZXMgaXN0IGVpbiBEZWJ1Zy1UZXh0IHp1ciBHcsO2w59lbsOkbmRlcnVuZy4nLFxyXG4gICAgJ0VyIHZlcnNjaHdpbmRldCwgd2VubiBkdSBkYXMgT3ZlcmxheSBzcGVycnN0LCcsXHJcbiAgICAnenVzYW1tZW4gbWl0IGRlbSBibGF1ZW4gSGludGVyZ3J1bmQuJyxcclxuICAgICdUaW1lbGluZSB1bmQgVHJpZ2dlciB3ZXJkZW4gaW4gZGVuIHVudGVyc3TDvHR6dGVuIFpvbmVuIGFuZ2V6ZWlndC4nLFxyXG4gICAgJ1Rlc3RlbiBTaWUgUmFpZGJvc3MgbWl0IGVpbmVtIC9jb3VudGRvd24gaW4gU29tbWVyZnVydC1Iw7ZmZS4nLFxyXG4gIF0sXHJcbiAgZnI6IFtcclxuICAgICdJbnN0cnVjdGlvbnMgOicsXHJcbiAgICAnQ2VjaSBlc3QgdW4gdGV4dGUgZGUgdGVzdCBwb3VyIHJlZGltZW5zaW9ubmVyLicsXHJcbiAgICAnSWwgZGlzcGFyYWl0cmEgXFwoYWluc2kgcXVlIGxlIGZvbmQgYmxldVxcKSBxdWFuZCcsXHJcbiAgICAnbFxcJ292ZXJsYXkgc2VyYSBibG9xdcOpLicsXHJcbiAgICAnTGVzIHRpbWVsaW5lcyBldCB0cmlnZ2VycyBzZXJvbnQgYWZmaWNow6lzIGRhbnMgbGVzIHpvbmVzIHN1cHBvcnTDqWVzLicsXHJcbiAgICAnVGVzdGV6IHJhaWRib3NzIGF2ZWMgdW4gL2NvdW50ZG93biBhdXggVmVyZ2VycyBkXFwnRXN0aXZhbCcsXHJcbiAgXSxcclxuICBqYTogW1xyXG4gICAgJ+aTjeS9nOaJi+mghu+8micsXHJcbiAgICAn44OH44OQ44OD44Kw55So44Gu44OG44Kt44K544OI44Gn44GZ44CCJyxcclxuICAgICfpnZLoibLjga7jgqrjg7zjg5Djg7zjg6zjgqTjgpInLFxyXG4gICAgJ+ODreODg+OCr+OBmeOCjOOBsOa2iOOBiOOCi+OAgicsXHJcbiAgICAn44K144Od44O844OI44GZ44KL44K+44O844Oz44Gr44K/44Kk44Og44Op44Kk44Oz44Go44OI44Oq44Ks44O844OG44Kt44K544OI44GM6KGo56S644Gn44GN44KL44CCJyxcclxuICAgICfjgrXjg57jg7zjg5Xjgqnjg7zjg4nluoTjgasvY291bnRkb3du44Kz44Oe44Oz44OJ44KS5a6f6KGM44GX44CBcmFpZGJvc3PjgpLjg4bjgrnjg4jjgafjgY3jgovjgIInLFxyXG4gIF0sXHJcbiAgY246IFtcclxuICAgICfor7fmjInku6XkuIvmraXpqqTmk43kvZzvvJonLFxyXG4gICAgJ+i/meaYr+S+m+eUqOaIt+iwg+aVtOaCrOa1rueql+Wkp+Wwj+eahOiwg+ivleeUqOaWh+acrCcsXHJcbiAgICAn5b2T5L2g6ZSB5a6a5q2k6JOd6Imy6IOM5pmv55qE5oKs5rWu56qXJyxcclxuICAgICfor6XmlofmnKzljbPkvJrmtojlpLHjgIInLFxyXG4gICAgJ+WcqOaUr+aMgeeahOWMuuWfn+S4reS8muiHquWKqOWKoOi9veaXtumXtOi9tOWSjOinpuWPkeWZqOOAgicsXHJcbiAgICAn5Y+v5Zyo55ub5aSP5Yac5bqE5L2/55SoL2NvdW50ZG93buWRveS7pOa1i+ivleivpXJhaWRib3Nz5qih5Z2X44CCJyxcclxuICBdLFxyXG4gIGtvOiBbXHJcbiAgICAnPOyhsOyekSDshKTrqoU+JyxcclxuICAgICftgazquLAg7KGw7KCV7J2EIOychO2VnCDrlJTrsoTqt7gg7LC97J6F64uI64ukJyxcclxuICAgICftjIzrnoAg67Cw6rK96rO8IOydtCDthY3siqTtirjripQnLFxyXG4gICAgJ+yYpOuyhOugiOydtOulvCDsnITsuZjsnqDquIjtlZjrqbQg7IKs65287KeR64uI64ukJyxcclxuICAgICfsp4Dsm5DrkJjripQg6rWs7Jet7JeQ7IScIO2DgOyehOudvOyduOqzvCDtirjrpqzqsbDqsIAg7ZGc7Iuc65Cp64uI64ukJyxcclxuICAgICfsl6zrpoTsl6zsmrgg64aN7J6l7JeQ7IScIOy0iOydveq4sOulvCDsi6TtlontlZjsl6wg7YWM7Iqk7Yq4IO2VtOuzvCDsiJgg7J6I7Iq164uI64ukJyxcclxuICBdLFxyXG59O1xyXG5cclxuLy8gQmVjYXVzZSBhcHBhcmVudGx5IHBlb3BsZSBkb24ndCB1bmRlcnN0YW5kIHVwcGVyY2FzZSBncmVlayBsZXR0ZXJzLFxyXG4vLyBhZGQgYSBzcGVjaWFsIGNhc2UgdG8gbm90IHVwcGVyY2FzZSB0aGVtLlxyXG5jb25zdCB0cmlnZ2VyVXBwZXJDYXNlID0gKHN0cjogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tezrHOss6zzrRdL2csICh4KSA9PiB4LnRvVXBwZXJDYXNlKCkpO1xyXG59O1xyXG5cclxuY29uc3Qgb25UcmlnZ2VyRXhjZXB0aW9uID0gKHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXIsIGU6IHVua25vd24pID0+IHtcclxuICAvLyBXaGVuIGEgZmlnaHQgZW5kcyBhbmQgdGhlcmUgYXJlIG9wZW4gcHJvbWlzZXMsIGZyb20gZGVsYXlTZWNvbmRzIG9yIHByb21pc2UgaXRzZWxmLFxyXG4gIC8vIGFsbCBwcm9taXNlcyB3aWxsIGJlIHJlamVjdGVkLiAgSW4gdGhpcyBjYXNlIHRoZXJlIGlzIG5vIGVycm9yOyBzaW1wbHkgcmV0dXJuIHdpdGhvdXQgbG9nZ2luZy5cclxuICBpZiAoZSA9PT0gbnVsbCB8fCB0eXBlb2YgZSAhPT0gJ29iamVjdCcpXHJcbiAgICByZXR1cm47XHJcblxyXG4gIGxldCBzdHIgPSBgRXJyb3IgaW4gdHJpZ2dlcjogJHt0cmlnZ2VyLmlkICE9PSB1bmRlZmluZWQgPyB0cmlnZ2VyLmlkIDogJ1t1bmtub3duIHRyaWdnZXIgaWRdJ31gO1xyXG5cclxuICBpZiAodHJpZ2dlci5maWxlbmFtZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgc3RyICs9IGAgKCR7dHJpZ2dlci5maWxlbmFtZX0pYDtcclxuICBjb25zb2xlLmVycm9yKHN0cik7XHJcblxyXG4gIGlmIChlIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgIGNvbnN0IGxpbmVzID0gZS5zdGFjaz8uc3BsaXQoJ1xcbicpID8/IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSlcclxuICAgICAgY29uc29sZS5lcnJvcihsaW5lc1tpXSk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3Qgc291bmRzID0gWydBbGFybScsICdBbGVydCcsICdJbmZvJywgJ0xvbmcnLCAnUHVsbCddIGFzIGNvbnN0O1xyXG5jb25zdCBzb3VuZFN0cnM6IHJlYWRvbmx5IHN0cmluZ1tdID0gc291bmRzO1xyXG5cclxudHlwZSBTb3VuZCA9IHR5cGVvZiBzb3VuZHNbbnVtYmVyXTtcclxudHlwZSBTb3VuZFR5cGUgPSBgJHtTb3VuZH1Tb3VuZGA7XHJcbnR5cGUgU291bmRUeXBlVm9sdW1lID0gYCR7U291bmRUeXBlfVZvbHVtZWA7XHJcblxyXG5jb25zdCB0ZXh0cyA9IFsnaW5mbycsICdhbGVydCcsICdhbGFybSddIGFzIGNvbnN0O1xyXG5cclxuZXhwb3J0IHR5cGUgVGV4dCA9IHR5cGVvZiB0ZXh0c1tudW1iZXJdO1xyXG50eXBlIFRleHRVcHBlciA9IGAke0NhcGl0YWxpemU8VGV4dD59YDtcclxuZXhwb3J0IHR5cGUgVGV4dFRleHQgPSBgJHtUZXh0fVRleHRgO1xyXG50eXBlIFRleHRVcHBlclRleHQgPSBgJHtUZXh0VXBwZXJ9VGV4dGA7XHJcblxyXG50eXBlIFRleHRNYXAgPSB7XHJcbiAgW3RleHQgaW4gVGV4dF06IHtcclxuICAgIHRleHQ6IFRleHRUZXh0O1xyXG4gICAgdXBwZXJUZXh0OiBUZXh0VXBwZXJUZXh0O1xyXG4gICAgdXBwZXJTb3VuZDogU291bmRUeXBlO1xyXG4gICAgdXBwZXJTb3VuZFZvbHVtZTogU291bmRUeXBlVm9sdW1lO1xyXG4gICAgcnVtYmxlRHVyYXRpb246IGAke1RleHRVcHBlcn1SdW1ibGVEdXJhdGlvbmA7XHJcbiAgICBydW1ibGVXZWFrOiBgJHtUZXh0VXBwZXJ9UnVtYmxlV2Vha2A7XHJcbiAgICBydW1ibGVTdHJvbmc6IGAke1RleHRVcHBlcn1SdW1ibGVTdHJvbmdgO1xyXG4gIH07XHJcbn07XHJcblxyXG5jb25zdCB0ZXh0TWFwOiBUZXh0TWFwID0ge1xyXG4gIGluZm86IHtcclxuICAgIHRleHQ6ICdpbmZvVGV4dCcsXHJcbiAgICB1cHBlclRleHQ6ICdJbmZvVGV4dCcsXHJcbiAgICB1cHBlclNvdW5kOiAnSW5mb1NvdW5kJyxcclxuICAgIHVwcGVyU291bmRWb2x1bWU6ICdJbmZvU291bmRWb2x1bWUnLFxyXG4gICAgcnVtYmxlRHVyYXRpb246ICdJbmZvUnVtYmxlRHVyYXRpb24nLFxyXG4gICAgcnVtYmxlV2VhazogJ0luZm9SdW1ibGVXZWFrJyxcclxuICAgIHJ1bWJsZVN0cm9uZzogJ0luZm9SdW1ibGVTdHJvbmcnLFxyXG4gIH0sXHJcbiAgYWxlcnQ6IHtcclxuICAgIHRleHQ6ICdhbGVydFRleHQnLFxyXG4gICAgdXBwZXJUZXh0OiAnQWxlcnRUZXh0JyxcclxuICAgIHVwcGVyU291bmQ6ICdBbGVydFNvdW5kJyxcclxuICAgIHVwcGVyU291bmRWb2x1bWU6ICdBbGVydFNvdW5kVm9sdW1lJyxcclxuICAgIHJ1bWJsZUR1cmF0aW9uOiAnQWxlcnRSdW1ibGVEdXJhdGlvbicsXHJcbiAgICBydW1ibGVXZWFrOiAnQWxlcnRSdW1ibGVXZWFrJyxcclxuICAgIHJ1bWJsZVN0cm9uZzogJ0FsZXJ0UnVtYmxlU3Ryb25nJyxcclxuICB9LFxyXG4gIGFsYXJtOiB7XHJcbiAgICB0ZXh0OiAnYWxhcm1UZXh0JyxcclxuICAgIHVwcGVyVGV4dDogJ0FsYXJtVGV4dCcsXHJcbiAgICB1cHBlclNvdW5kOiAnQWxhcm1Tb3VuZCcsXHJcbiAgICB1cHBlclNvdW5kVm9sdW1lOiAnQWxhcm1Tb3VuZFZvbHVtZScsXHJcbiAgICBydW1ibGVEdXJhdGlvbjogJ0FsYXJtUnVtYmxlRHVyYXRpb24nLFxyXG4gICAgcnVtYmxlV2VhazogJ0FsYXJtUnVtYmxlV2VhaycsXHJcbiAgICBydW1ibGVTdHJvbmc6ICdBbGFybVJ1bWJsZVN0cm9uZycsXHJcbiAgfSxcclxufTtcclxuXHJcbi8vIEhlbHBlciBmb3IgaGFuZGxpbmcgdHJpZ2dlciBvdmVycmlkZXMuXHJcbi8vXHJcbi8vIGFzTGlzdCB3aWxsIHJldHVybiBhIGxpc3Qgb2YgdHJpZ2dlcnMgaW4gdGhlIHNhbWUgb3JkZXIgYXMgYXBwZW5kIHdhcyBjYWxsZWQsIGV4Y2VwdDpcclxuLy8gSWYgYSBsYXRlciB0cmlnZ2VyIGhhcyB0aGUgc2FtZSBpZCBhcyBhIHByZXZpb3VzIHRyaWdnZXIsIGl0IHdpbGwgcmVwbGFjZSB0aGUgcHJldmlvdXMgdHJpZ2dlclxyXG4vLyBhbmQgYXBwZWFyIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhlIHByZXZpb3VzIHRyaWdnZXIgYXBwZWFyZWQuXHJcbi8vIGUuZy4gYSwgYjEsIGMsIGIyICh3aGVyZSBiMSBhbmQgYjIgc2hhcmUgdGhlIHNhbWUgaWQpIHlpZWxkcyBbYSwgYjIsIGNdIGFzIHRoZSBmaW5hbCBsaXN0LlxyXG4vL1xyXG4vLyBKYXZhU2NyaXB0IGRpY3Rpb25hcmllcyBhcmUgKmFsbW9zdCogb3JkZXJlZCBhdXRvbWF0aWNhbGx5IGFzIHdlIHdvdWxkIHdhbnQsXHJcbi8vIGJ1dCB3YW50IHRvIGhhbmRsZSBtaXNzaW5nIGlkcyBhbmQgaW50ZWdlciBpZHMgKHlvdSBzaG91bGRuJ3QsIGJ1dCBqdXN0IGluIGNhc2UpLlxyXG5jbGFzcyBPcmRlcmVkVHJpZ2dlckxpc3Qge1xyXG4gIHRyaWdnZXJzOiBQcm9jZXNzZWRUcmlnZ2VyW10gPSBbXTtcclxuICBpZFRvSW5kZXg6IHsgW2lkOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xyXG5cclxuICBwdXNoKHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXIpIHtcclxuICAgIGNvbnN0IGlkeCA9IHRyaWdnZXIuaWQgIT09IHVuZGVmaW5lZCA/IHRoaXMuaWRUb0luZGV4W3RyaWdnZXIuaWRdIDogdW5kZWZpbmVkO1xyXG4gICAgaWYgKGlkeCAhPT0gdW5kZWZpbmVkICYmIHRyaWdnZXIuaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBvbGRUcmlnZ2VyID0gdGhpcy50cmlnZ2Vyc1tpZHhdO1xyXG5cclxuICAgICAgaWYgKG9sZFRyaWdnZXIgPT09IHVuZGVmaW5lZClcclxuICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgICAvLyBUT0RPOiBiZSB2ZXJib3NlIG5vdyB3aGlsZSB0aGlzIGlzIGZyZXNoLCBidXQgaGlkZSB0aGlzIG91dHB1dCBiZWhpbmQgZGVidWcgZmxhZ3MgbGF0ZXIuXHJcbiAgICAgIGNvbnN0IHRyaWdnZXJGaWxlID0gKHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXIpID0+XHJcbiAgICAgICAgdHJpZ2dlci5maWxlbmFtZSAhPT0gdW5kZWZpbmVkID8gYCcke3RyaWdnZXIuZmlsZW5hbWV9J2AgOiAndXNlciBvdmVycmlkZSc7XHJcbiAgICAgIGNvbnN0IG9sZEZpbGUgPSB0cmlnZ2VyRmlsZShvbGRUcmlnZ2VyKTtcclxuICAgICAgY29uc3QgbmV3RmlsZSA9IHRyaWdnZXJGaWxlKHRyaWdnZXIpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgT3ZlcnJpZGluZyAnJHt0cmlnZ2VyLmlkfScgZnJvbSAke29sZEZpbGV9IHdpdGggJHtuZXdGaWxlfS5gKTtcclxuXHJcbiAgICAgIHRoaXMudHJpZ2dlcnNbaWR4XSA9IHRyaWdnZXI7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3JtYWwgY2FzZSBvZiBhIG5ldyB0cmlnZ2VyLCB3aXRoIG5vIG92ZXJyaWRpbmcuXHJcbiAgICBpZiAodHJpZ2dlci5pZCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICB0aGlzLmlkVG9JbmRleFt0cmlnZ2VyLmlkXSA9IHRoaXMudHJpZ2dlcnMubGVuZ3RoO1xyXG4gICAgdGhpcy50cmlnZ2Vycy5wdXNoKHRyaWdnZXIpO1xyXG4gIH1cclxuXHJcbiAgYXNMaXN0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcnM7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBpc09iamVjdCA9ICh4OiB1bmtub3duKTogeCBpcyB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSA9PiB7XHJcbiAgLy8gSmF2YVNjcmlwdCBjb25zaWRlcnMgW10gdG8gYmUgYW4gb2JqZWN0LCBzbyBjaGVjayBmb3IgdGhhdCBleHBsaWNpdGx5LlxyXG4gIHJldHVybiB4IGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHgpO1xyXG59O1xyXG5cclxuLy8gVXNlciB0cmlnZ2VyIG1heSBwYXNzIGFueXRoaW5nIGFzIHBhcmFtZXRlcnNcclxudHlwZSBUcmlnZ2VyUGFyYW1zID0geyBba2V5OiBzdHJpbmddOiB1bmtub3duIH07XHJcblxyXG5jbGFzcyBUcmlnZ2VyT3V0cHV0UHJveHkge1xyXG4gIHB1YmxpYyBvdXRwdXRTdHJpbmdzOiBPdXRwdXRTdHJpbmdzO1xyXG4gIHB1YmxpYyBvdmVycmlkZVN0cmluZ3M6IE91dHB1dFN0cmluZ3MgPSB7fTtcclxuICBwdWJsaWMgcmVzcG9uc2VPdXRwdXRTdHJpbmdzOiB7IFtvdXRwdXROYW1lOiBzdHJpbmddOiB1bmtub3duIH0gPSB7fTtcclxuICBwdWJsaWMgdW5rbm93blZhbHVlID0gJz8/Pyc7XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgdHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlcixcclxuICAgIHB1YmxpYyBkaXNwbGF5TGFuZzogTGFuZyxcclxuICAgIHB1YmxpYyBwZXJUcmlnZ2VyQXV0b0NvbmZpZz86IFBlclRyaWdnZXJBdXRvQ29uZmlnLFxyXG4gICkge1xyXG4gICAgdGhpcy5vdXRwdXRTdHJpbmdzID0gdHJpZ2dlci5vdXRwdXRTdHJpbmdzID8/IHt9O1xyXG5cclxuICAgIGlmICh0cmlnZ2VyLmlkICE9PSB1bmRlZmluZWQgJiYgcGVyVHJpZ2dlckF1dG9Db25maWcpIHtcclxuICAgICAgY29uc3QgY29uZmlnID0gcGVyVHJpZ2dlckF1dG9Db25maWdbdHJpZ2dlci5pZF07XHJcbiAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLk91dHB1dFN0cmluZ3MpXHJcbiAgICAgICAgdGhpcy5vdmVycmlkZVN0cmluZ3MgPSBjb25maWcuT3V0cHV0U3RyaW5ncztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcclxuICAgICAgLy8gUmVzcG9uc2Ugb3V0cHV0IHN0cmluZyBzdWJ0bGV0eTpcclxuICAgICAgLy8gVGFrZSB0aGlzIGV4YW1wbGUgcmVzcG9uc2U6XHJcbiAgICAgIC8vXHJcbiAgICAgIC8vICAgIHJlc3BvbnNlOiAoZGF0YSwgbWF0Y2hlcywgb3V0cHV0KSA9PiB7XHJcbiAgICAgIC8vICAgICAgcmV0dXJuIHtcclxuICAgICAgLy8gICAgICAgIGFsYXJtVGV4dDogb3V0cHV0LnNvbWVBbGFybSgpLFxyXG4gICAgICAvLyAgICAgICAgb3V0cHV0U3RyaW5nczogeyBzb21lQWxhcm06ICdzdHJpbmcnIH0sIC8vIDwtIGltcG9zc2libGVcclxuICAgICAgLy8gICAgICB9O1xyXG4gICAgICAvLyAgICB9LFxyXG4gICAgICAvL1xyXG4gICAgICAvLyBCZWNhdXNlIHRoZSBvYmplY3QgYmVpbmcgcmV0dXJuZWQgaXMgZXZhbHVhdGVkIGFsbCBhdCBvbmNlLCB0aGUgb2JqZWN0XHJcbiAgICAgIC8vIGNhbm5vdCBzaW11bHRhbmVvdXNseSBkZWZpbmUgb3V0cHV0U3RyaW5ncyBhbmQgdXNlIHRob3NlIG91dHB1dFN0cmluZ3MuXHJcbiAgICAgIC8vIFNvLCBpbnN0ZWFkLCByZXNwb25zZXMgbmVlZCB0byBzZXQgYG91dHB1dC5yZXNwb25zZU91dHB1dFN0cmluZ3NgLlxyXG4gICAgICAvLyBIT1dFVkVSLCB0aGlzIGFsc28gaGFzIGl0cyBvd24gaXNzdWVzISAgVGhpcyB2YWx1ZSBpcyBzZXQgZm9yIHRoZSB0cmlnZ2VyXHJcbiAgICAgIC8vICh3aGljaCBtYXkgaGF2ZSBtdWx0aXBsZSBhY3RpdmUgaW4gZmxpZ2h0IGluc3RhbmNlcykuICBUaGlzICpzaG91bGQqIGJlXHJcbiAgICAgIC8vIG9rIGJlY2F1c2Ugd2UgZ3VhcmFudGVlIHRoYXQgcmVzcG9uc2UvYWxhcm1UZXh0L2FsZXJ0VGV4dC9pbmZvVGV4dC90dHNcclxuICAgICAgLy8gYXJlIGV2YWx1YXRlZCBzZXF1ZW50aWFsbHkgZm9yIGEgc2luZ2xlIHRyaWdnZXIgYmVmb3JlIGFueSBvdGhlciB0cmlnZ2VyXHJcbiAgICAgIC8vIGluc3RhbmNlIGV2YWx1YXRlcyB0aGF0IHNldCBvZiB0cmlnZ2Vycy4gIEZpbmFsbHksIGZvciBlYXNlIG9mIGF1dG9tYXRpbmdcclxuICAgICAgLy8gdGhlIGNvbmZpZyB1aSwgdGhlIHJlc3BvbnNlIHNob3VsZCByZXR1cm4gdGhlIGV4YWN0IHNhbWUgc2V0IG9mXHJcbiAgICAgIC8vIG91dHB1dFN0cmluZ3MgZXZlcnkgdGltZS4gIFRoYW5rIHlvdSBmb3IgY29taW5nIHRvIG15IFRFRCB0YWxrLlxyXG4gICAgICBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAocHJvcGVydHkgPT09ICdyZXNwb25zZU91dHB1dFN0cmluZ3MnKSB7XHJcbiAgICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICBgSW52YWxpZCByZXNwb25zZU91dHB1dFN0cmluZ3Mgb24gdHJpZ2dlciAke3RhcmdldC50cmlnZ2VyLmlkID8/ICdVbmtub3duJ31gLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEJlIGtpbmQgdG8gdXNlciB0cmlnZ2VycyB0aGF0IGRvIHdlaXJkIHRoaW5ncywgYW5kIGp1c3QgY29uc29sZSBlcnJvciB0aGlzXHJcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBleGNlcHRpb24uXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBwcm9wZXJ0eSAnJHtTdHJpbmcocHJvcGVydHkpfScgb24gb3V0cHV0LmApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGdldCh0YXJnZXQsIG5hbWUpIHtcclxuICAgICAgICAvLyBUT0RPOiBhZGQgYSB0ZXN0IHRoYXQgdmVyaWZpZXMgbm9ib2R5IGRvZXMgdGhpcy5cclxuICAgICAgICBpZiAobmFtZSA9PT0gJ3RvSlNPTicgfHwgdHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKVxyXG4gICAgICAgICAgcmV0dXJuICd7fSc7XHJcblxyXG4gICAgICAgIC8vIEJlY2F1c2Ugb3V0cHV0LmZ1bmMoKSBtdXN0IGV4aXN0IGF0IHRoZSB0aW1lIG9mIHRyaWdnZXIgZXZhbCxcclxuICAgICAgICAvLyBhbHdheXMgcHJvdmlkZSBhIGZ1bmN0aW9uIGV2ZW4gYmVmb3JlIHdlIGtub3cgd2hpY2gga2V5cyBhcmUgdmFsaWQuXHJcbiAgICAgICAgcmV0dXJuIChwYXJhbXM/OiBUcmlnZ2VyUGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IHRhcmdldC50cmlnZ2VyLmlkID8/ICdVbmtub3duIFRyaWdnZXInO1xyXG5cclxuICAgICAgICAgIC8vIFByaW9yaXR5OiBwZXItdHJpZ2dlciBjb25maWcgZnJvbSB1aSA+IHJlc3BvbnNlID4gYnVpbHQtaW4gdHJpZ2dlclxyXG4gICAgICAgICAgLy8gSWRlYWxseSwgcmVzcG9uc2UgcHJvdmlkZXMgZXZlcnl0aGluZyBhbmQgdHJpZ2dlciBwcm92aWRlcyBub3RoaW5nLFxyXG4gICAgICAgICAgLy8gb3IgdGhlcmUncyBubyByZXNwb25zZSBhbmQgdHJpZ2dlciBwcm92aWRlcyBldmVyeXRoaW5nLiAgSGF2aW5nXHJcbiAgICAgICAgICAvLyB0aGlzIHdlbGwtZGVmaW5lZCBzbW9vdGhzIG91dCB0aGUgY29sbGlzaW9uIGVkZ2UgY2FzZXMuXHJcbiAgICAgICAgICBsZXQgc3RyID0gdGFyZ2V0LmdldFJlcGxhY2VtZW50KHRhcmdldC5vdmVycmlkZVN0cmluZ3NbbmFtZV0sIHBhcmFtcywgbmFtZSwgaWQpO1xyXG4gICAgICAgICAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlU3RyaW5nID0gdGFyZ2V0LnJlc3BvbnNlT3V0cHV0U3RyaW5nc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHJlc3BvbnNlU3RyaW5nKSlcclxuICAgICAgICAgICAgICBzdHIgPSB0YXJnZXQuZ2V0UmVwbGFjZW1lbnQocmVzcG9uc2VTdHJpbmcsIHBhcmFtcywgbmFtZSwgaWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBzdHIgPSB0YXJnZXQuZ2V0UmVwbGFjZW1lbnQodGFyZ2V0Lm91dHB1dFN0cmluZ3NbbmFtZV0sIHBhcmFtcywgbmFtZSwgaWQpO1xyXG4gICAgICAgICAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFRyaWdnZXIgJHt0YXJnZXQudHJpZ2dlci5pZCA/PyAnJ30gaGFzIG1pc3Npbmcgb3V0cHV0U3RyaW5nICR7bmFtZX0uYCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQudW5rbm93blZhbHVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICB9O1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBldmFsdWF0ZU91dHB1dFBhcmFtKFxyXG4gICAgaWQ6IHN0cmluZyxcclxuICAgIGtleTogc3RyaW5nLFxyXG4gICAgdmFsOiB1bmtub3duLFxyXG4gICAgcHJvcD86IHN0cmluZyxcclxuICAgIGlzTmVzdGVkQXJyYXk/OiBib29sZWFuLFxyXG4gICk6IHN0cmluZyB7XHJcbiAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicpXHJcbiAgICAgIHJldHVybiB2YWwudG9TdHJpbmcoKTtcclxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGBUcmlnZ2VyICR7aWR9IGhhcyBub24tc3RyaW5nIHBhcmFtIHZhbHVlICR7a2V5fS5gKTtcclxuICAgICAgcmV0dXJuIHRoaXMudW5rbm93blZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcclxuICAgICAgLy8gRG9uJ3QgYWxsb3cgbmVzdGluZyBhcnJheXMgaGVyZSwgZS5nLiBbcGxheWVyMSwgW3BsYXllcjIsIHBsYXllcjNdXS5cclxuICAgICAgaWYgKGlzTmVzdGVkQXJyYXkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBUcmlnZ2VyICR7aWR9IHBhc3NlZCBuZXN0ZWQgYXJyYXlzIHRvIHBhcmFtIHZhbHVlICR7a2V5fS5gKTtcclxuICAgICAgICByZXR1cm4gdGhpcy51bmtub3duVmFsdWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIGEgdHJpZ2dlciBwYXNzZXMgaW4gW3BsYXllcjEsIHBsYXllcjIsIHBsYXllcjNdIGFzIGEgdmFsdWUsXHJcbiAgICAgIC8vIGFuZCBhIHVzZXIgc3BlY2lmaWVzIGAke3BsYXllcnMuam9ifWAsIHRoZW4gcmV0dXJuOlxyXG4gICAgICAvLyBgJHtwbGF5ZXJzWzBdLmpvYn0sICR7cGxheWVyc1sxXS5qb2J9LCAke3BsYXllcnNbMl0uam9ifWAuXHJcbiAgICAgIC8vIEluIGdlbmVyYWwsIHRoaXMgbWVhbnMgdGhhdCBhbGwgYXJyYXkgZWxlbWVudHMgbXVzdCBlaXRoZXIgYmUgc2ltcGxlXHJcbiAgICAgIC8vIHN0cmluZ3MvbnVtYmVycyBvciBhbGwgc2hhcmUgdGhlIHNhbWUgcHJvcCwgb3IgdGhlcmUgd2lsbCBiZSBlcnJvcnMgYmVsb3dcclxuICAgICAgLy8gYWJvdXQgbm9uLWV4aXN0ZW50IHByb3BlcnRpZXMuIEluIHByYWN0aWNlLCB0aGlzIGxpa2VseSB3aWxsIG5ldmVyIGhhcHBlbi5cclxuICAgICAgLy9cclxuICAgICAgLy8gQWxzbywgdGhpcyBhc3N1bWVzIHRoYXQgYWxsIGxvY2FsZXMgYXJlIG9rIHdpdGggXCIsIFwiIGFzIGEgc2VwYXJhdG9yLlxyXG4gICAgICAvLyBUaGlzIHNlZW1zIHRvIGJlIHRydWUgaW4gcHJhY3RpY2UuXHJcbiAgICAgIHJldHVybiB2YWwubWFwKChwKSA9PiB0aGlzLmV2YWx1YXRlT3V0cHV0UGFyYW0oaWQsIGtleSwgcCwgcHJvcCwgdHJ1ZSkpLmpvaW4oJywgJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXBwZWFzZSBUeXBlU2NyaXB0LCB0aGlzIHNob3VsZG4ndCBoYXBwZW4uXHJcbiAgICBpZiAoIWlzT2JqZWN0KHZhbCkpXHJcbiAgICAgIHJldHVybiB0aGlzLnVua25vd25WYWx1ZTtcclxuXHJcbiAgICBpZiAocHJvcCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbnN0IHJldFZhbCA9IHZhbFtwcm9wXTtcclxuICAgICAgaWYgKHR5cGVvZiByZXRWYWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByZXRWYWwgPT09ICdudW1iZXInKVxyXG4gICAgICAgIHJldHVybiByZXRWYWwudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIGlmIChyZXRWYWwgPT09IHVuZGVmaW5lZCB8fCByZXRWYWwgPT09IG51bGwpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgYFRyaWdnZXIgJHtpZH0gaXMgcmVmZXJlbmNpbmcgbm9uLWV4aXN0ZW50IG9iamVjdCBwcm9wZXJ0eSAke2tleX0uJHtwcm9wfS5gLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgIGBUcmlnZ2VyICR7aWR9IGlzIHJlZmVyZW5jaW5nIG9iamVjdCBwcm9wZXJ0eSAke2tleX0uJHtwcm9wfSB3aXRoIGluY29ycmVjdCB0eXBlICR7dHlwZW9mIHJldFZhbH0uYCxcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQXQgdGhpcyBwb2ludCwgd2UncmUgZ29pbmcgdG8gdHJ5IHRvIHJldHVybiBhIGRlZmF1bHQgdmFsdWUgaWYgd2UgY2FuLFxyXG4gICAgLy8gZWl0aGVyIGZyb20gYW4gZXJyb3Igb3IgYmVjYXVzZSBgcHJvcGAgd2FzIHVuc3BlY2lmaWVkLlxyXG4gICAgY29uc3QgdG9TdHJpbmdGdW5jID0gdmFsWyd0b1N0cmluZyddO1xyXG4gICAgaWYgKHR5cGVvZiB0b1N0cmluZ0Z1bmMgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICBgVHJpZ2dlciAke2lkfSBoYXMgbm9uLWZ1bmMgJHtrZXl9LnRvU3RyaW5nIHByb3BlcnR5LmAsXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiB0aGlzLnVua25vd25WYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0b1N0cmluZ1ZhbDogdW5rbm93biA9IHRvU3RyaW5nRnVuYygpO1xyXG4gICAgaWYgKHR5cGVvZiB0b1N0cmluZ1ZhbCAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHRvU3RyaW5nVmFsICE9PSAnbnVtYmVyJykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgIGBUcmlnZ2VyICR7aWR9IHJldHVybmVkIG5vbi1zdHJpbmcgJHt0eXBlb2YgdG9TdHJpbmdWYWx9IGZyb20gJHtrZXl9LnRvU3RyaW5nKCkuYCxcclxuICAgICAgKTtcclxuICAgICAgcmV0dXJuIHRoaXMudW5rbm93blZhbHVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvU3RyaW5nVmFsLnRvU3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICBnZXRSZXBsYWNlbWVudChcclxuICAgIC8vIENhbid0IHVzZSBvcHRpb25hbCBtb2RpZmllciBmb3IgdGhpcyBhcmcgc2luY2UgdGhlIG90aGVycyBhcmVuJ3Qgb3B0aW9uYWxcclxuICAgIHRlbXBsYXRlOiB7IFtsYW5nOiBzdHJpbmddOiB1bmtub3duIH0gfCBzdHJpbmcgfCB1bmRlZmluZWQsXHJcbiAgICBwYXJhbXM6IFRyaWdnZXJQYXJhbXMgfCB1bmRlZmluZWQsXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBpZDogc3RyaW5nLFxyXG4gICk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAvLyBJZiBhbiBvdXRwdXQgc3RyaW5ncyBlbnRyeSBpcyBlZGl0ZWQgaW4gdGhlIGNvbmZpZyBVSSBhbmQgdGhlbiBibGFua2VkLFxyXG4gICAgLy8gdGhlIGVudHJ5IHdpbGwgc3RpbGwgZXhpc3QgaW4gdGhlIGNvbmZpZyBmaWxlIGFzIGFuIGVtcHR5IHN0cmluZy5cclxuICAgIC8vIFRoZXNlIHNob3VsZCBiZSBpZ25vcmVkIGFzIG5vdCBiZWluZyBhbiBvdmVycmlkZS5cclxuICAgIC8vIFRPRE86IG1heWJlIGJsYW5rZWQvZGVmYXVsdCBlbnRyaWVzIHNob3VsZCBiZSBkZWxldGVkIGZyb20gdGhlIGNvbmZpZz9cclxuICAgIGlmICh0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRlbXBsYXRlID09PSAnJylcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGxldCB2YWx1ZTogdW5rbm93bjtcclxuICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAvLyB1c2VyIGNvbmZpZ1xyXG4gICAgICB2YWx1ZSA9IHRlbXBsYXRlO1xyXG4gICAgZWxzZVxyXG4gICAgICB2YWx1ZSA9IHRlbXBsYXRlW3RoaXMuZGlzcGxheUxhbmddID8/IHRlbXBsYXRlWydlbiddO1xyXG5cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRyaWdnZXIgJHtpZH0gaGFzIGludmFsaWQgb3V0cHV0U3RyaW5nICR7bmFtZX0uYCwgSlNPTi5zdHJpbmdpZnkodGVtcGxhdGUpKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cXCR7XFxzKihbXn1cXHNdKylcXHMqfS9nLCAoX2Z1bGxNYXRjaDogc3RyaW5nLCBrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBsZXQgcHJvcDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBpZiAoIShrZXkgaW4gcGFyYW1zKSAmJiBrZXkuaW5jbHVkZXMoJy4nKSkge1xyXG4gICAgICAgICAgY29uc3QgcGFydHMgPSBrZXkuc3BsaXQoJy4nKTtcclxuICAgICAgICAgIC8vIE9ubHkgYSB3YXJuaW5nIGhlcmUgKGZvciB1c2VyIHRyaWdnZXJzKSwgYnV0IG1vY2hhIHRlc3RzIHdpbGwgZXJyb3Igb3V0IGZvciB0aGlzIGNhc2VcclxuICAgICAgICAgIC8vIElmIHRoZSB1c2VyIHNwZWNpZmllcyBleHRyYSBwYXJ0cywganVzdCBpZ25vcmUgdGhlbVxyXG4gICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDIpXHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVHJpZ2dlciAke2lkfSBoYXMgZXh0cmEgcGF0aCBwYXJ0cyBmb3Igb2JqZWN0IHBhcmFtZXRlciAke2tleX0uYCk7XHJcbiAgICAgICAgICBrZXkgPSBwYXJ0c1swXSA/PyAnJztcclxuICAgICAgICAgIHByb3AgPSBwYXJ0c1sxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChrZXkgaW4gcGFyYW1zKSB7XHJcbiAgICAgICAgICBjb25zdCB2YWwgPSBwYXJhbXNba2V5XTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmV2YWx1YXRlT3V0cHV0UGFyYW0oaWQsIGtleSwgdmFsLCBwcm9wKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYFRyaWdnZXIgJHtpZH0gY2FuJ3QgcmVwbGFjZSAke2tleX0gaW4gJHtKU09OLnN0cmluZ2lmeSh0ZW1wbGF0ZSl9LmApO1xyXG4gICAgICByZXR1cm4gdGhpcy51bmtub3duVmFsdWU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYWtlT3V0cHV0KFxyXG4gICAgdHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlcixcclxuICAgIGRpc3BsYXlMYW5nOiBMYW5nLFxyXG4gICAgcGVyVHJpZ2dlckF1dG9Db25maWc/OiBQZXJUcmlnZ2VyQXV0b0NvbmZpZyxcclxuICApOiBPdXRwdXQge1xyXG4gICAgLy8gYE91dHB1dGAgaXMgdGhlIGNvbW1vbiB0eXBlIHVzZWQgZm9yIHRoZSB0cmlnZ2VyIGRhdGEgaW50ZXJmYWNlIHRvIHN1cHBvcnQgYXJiaXRyYXJ5XHJcbiAgICAvLyBzdHJpbmcga2V5cyBhbmQgYWx3YXlzIHJldHVybnMgYSBzdHJpbmcuIEhvd2V2ZXIsIFR5cGVTY3JpcHQgZG9lc24ndCBoYXZlIGdvb2Qgc3VwcG9ydFxyXG4gICAgLy8gZm9yIHRoZSBQcm94eSByZXByZXNlbnRpbmcgdGhpcyBzdHJ1Y3R1cmUgc28gd2UgbmVlZCB0byBjYXN0IFByb3h5ID0+IHVua25vd24gPT4gT3V0cHV0XHJcbiAgICByZXR1cm4gbmV3IFRyaWdnZXJPdXRwdXRQcm94eSh0cmlnZ2VyLCBkaXNwbGF5TGFuZywgcGVyVHJpZ2dlckF1dG9Db25maWcpIGFzIHVua25vd24gYXMgT3V0cHV0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUmFpZGJvc3NUcmlnZ2VyRmllbGQgPVxyXG4gIHwgVHJpZ2dlckZpZWxkPFJhaWRib3NzRGF0YSwgTWF0Y2hlcywgVHJpZ2dlck91dHB1dDxSYWlkYm9zc0RhdGEsIE1hdGNoZXM+PlxyXG4gIHwgVHJpZ2dlckZpZWxkPFJhaWRib3NzRGF0YSwgTWF0Y2hlcywgUGFydGlhbFRyaWdnZXJPdXRwdXQ8UmFpZGJvc3NEYXRhLCBNYXRjaGVzPj47XHJcbmV4cG9ydCB0eXBlIFJhaWRib3NzVHJpZ2dlck91dHB1dCA9XHJcbiAgfCBUcmlnZ2VyT3V0cHV0PFJhaWRib3NzRGF0YSwgTWF0Y2hlcz5cclxuICB8IFBhcnRpYWxUcmlnZ2VyT3V0cHV0PFJhaWRib3NzRGF0YSwgTWF0Y2hlcz47XHJcblxyXG5jb25zdCBkZWZhdWx0T3V0cHV0ID0gVHJpZ2dlck91dHB1dFByb3h5Lm1ha2VPdXRwdXQoe30sICdlbicpO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcmlnZ2VySGVscGVyIHtcclxuICB2YWx1ZU9yRnVuY3Rpb246IChmOiBSYWlkYm9zc1RyaWdnZXJGaWVsZCkgPT4gUmFpZGJvc3NUcmlnZ2VyT3V0cHV0O1xyXG4gIHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXI7XHJcbiAgbm93OiBudW1iZXI7XHJcbiAgdHJpZ2dlck9wdGlvbnM6IFBlclRyaWdnZXJPcHRpb247XHJcbiAgdHJpZ2dlckF1dG9Db25maWc6IFRyaWdnZXJBdXRvQ29uZmlnO1xyXG4gIC8vIFRoaXMgc2V0dGluZyBvbmx5IHN1cHByZXNzZXMgb3V0cHV0LCB0cmlnZ2VyIHN0aWxsIHJ1bnMgZm9yIGRhdGEvbG9naWMgcHVycG9zZXNcclxuICB1c2VyU3VwcHJlc3NlZE91dHB1dDogYm9vbGVhbjtcclxuICBtYXRjaGVzOiBNYXRjaGVzO1xyXG4gIHJlc3BvbnNlPzogUmVzcG9uc2VPdXRwdXQ8UmFpZGJvc3NEYXRhLCBNYXRjaGVzPjtcclxuICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICBzb3VuZFVybD86IHN0cmluZztcclxuICBzb3VuZFZvbD86IG51bWJlcjtcclxuICB0cmlnZ2VyU291bmRWb2w/OiBudW1iZXI7XHJcbiAgZGVmYXVsdFRUU1RleHQ/OiBzdHJpbmc7XHJcbiAgdGV4dEFsZXJ0c0VuYWJsZWQ6IGJvb2xlYW47XHJcbiAgc291bmRBbGVydHNFbmFibGVkOiBib29sZWFuO1xyXG4gIHNwb2tlbkFsZXJ0c0VuYWJsZWQ6IGJvb2xlYW47XHJcbiAgZ3JvdXBTcG9rZW5BbGVydHNFbmFibGVkOiBib29sZWFuO1xyXG4gIGR1cmF0aW9uPzoge1xyXG4gICAgZnJvbUNvbmZpZz86IG51bWJlcjtcclxuICAgIGZyb21UcmlnZ2VyPzogbnVtYmVyO1xyXG4gICAgYWxhcm1UZXh0OiBudW1iZXI7XHJcbiAgICBhbGVydFRleHQ6IG51bWJlcjtcclxuICAgIGluZm9UZXh0OiBudW1iZXI7XHJcbiAgfTtcclxuICB0dHNUZXh0Pzogc3RyaW5nO1xyXG4gIHJ1bWJsZUR1cmF0aW9uTXM/OiBudW1iZXI7XHJcbiAgcnVtYmxlV2Vhaz86IG51bWJlcjtcclxuICBydW1ibGVTdHJvbmc/OiBudW1iZXI7XHJcbiAgb3V0cHV0OiBPdXRwdXQ7XHJcbn1cclxuXHJcbmNvbnN0IHdpcGVDYWN0Ym90RWNobyA9IGNvbW1vbk5ldFJlZ2V4LmNhY3Rib3RXaXBlRWNobztcclxuY29uc3Qgd2lwZUVuZEVjaG8gPSBjb21tb25OZXRSZWdleC51c2VyV2lwZUVjaG87XHJcbmNvbnN0IHdpcGVGYWRlSW4gPSBjb21tb25OZXRSZWdleC53aXBlO1xyXG5cclxuY29uc3QgaXNXaXBlID0gKGxpbmU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gIGlmIChcclxuICAgIHdpcGVDYWN0Ym90RWNoby50ZXN0KGxpbmUpIHx8XHJcbiAgICB3aXBlRW5kRWNoby50ZXN0KGxpbmUpIHx8XHJcbiAgICB3aXBlRmFkZUluLnRlc3QobGluZSlcclxuICApXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICByZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgUG9wdXBUZXh0IHtcclxuICBwcm90ZWN0ZWQgdHJpZ2dlcnM6IFByb2Nlc3NlZFRyaWdnZXJbXSA9IFtdO1xyXG4gIHByb3RlY3RlZCBuZXRUcmlnZ2VyczogUHJvY2Vzc2VkVHJpZ2dlcltdID0gW107XHJcbiAgLy8gQSBtYXAgb2YgdHJpZ2dlciBpZCB0byBzZXRUaW1lb3V0IGhhbmRsZS5cclxuICBwcm90ZWN0ZWQgdGltZXJzOiB7IFt0cmlnZ2VySWQ6IG51bWJlcl06IG51bWJlciB9ID0ge307XHJcbiAgcHJvdGVjdGVkIHRyaWdnZXJTdXBwcmVzczogeyBbdHJpZ2dlcklkOiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xyXG4gIHByb3RlY3RlZCBjdXJyZW50VHJpZ2dlcklEID0gMDtcclxuICBwcm90ZWN0ZWQgaW5Db21iYXQgPSBmYWxzZTtcclxuICBwcm90ZWN0ZWQgcmVzZXRXaGVuT3V0T2ZDb21iYXQgPSB0cnVlO1xyXG4gIC8vIFRoZXNlIGFyZSBkZWxpYmVyYXRlbHkgYHwgbnVsbGAgZm9yIHJhaWRlbXVsYXRvciBleHRlbmRhYmlsaXR5IHJlYXNvbnNcclxuICBwcm90ZWN0ZWQgaW5mb1RleHQ6IEhUTUxFbGVtZW50IHwgbnVsbDtcclxuICBwcm90ZWN0ZWQgYWxlcnRUZXh0OiBIVE1MRWxlbWVudCB8IG51bGw7XHJcbiAgcHJvdGVjdGVkIGFsYXJtVGV4dDogSFRNTEVsZW1lbnQgfCBudWxsO1xyXG4gIHByb3RlY3RlZCBwYXJzZXJMYW5nOiBMYW5nO1xyXG4gIHByb3RlY3RlZCBkaXNwbGF5TGFuZzogTGFuZztcclxuICBwcm90ZWN0ZWQgdHRzRW5naW5lPzogQnJvd3NlclRUU0VuZ2luZTtcclxuICBwcm90ZWN0ZWQgdHRzU2F5OiAodGV4dDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIHByb3RlY3RlZCBwYXJ0eVRyYWNrZXI6IFBhcnR5VHJhY2tlcjtcclxuICBwcm90ZWN0ZWQgcmVhZG9ubHkga01heFJvd3NPZlRleHQgPSAyO1xyXG4gIHByb3RlY3RlZCBkYXRhOiBSYWlkYm9zc0RhdGE7XHJcbiAgcHJvdGVjdGVkIG1lID0gJyc7XHJcbiAgcHJvdGVjdGVkIGpvYjogSm9iID0gJ05PTkUnO1xyXG4gIHByb3RlY3RlZCByb2xlOiBSb2xlID0gJ25vbmUnO1xyXG4gIHByb3RlY3RlZCB0cmlnZ2VyU2V0czogUHJvY2Vzc2VkVHJpZ2dlclNldFtdID0gW107XHJcbiAgcHJvdGVjdGVkIHRyaWdnZXJTZXRzQnlJZDogeyBbaWQ6IHN0cmluZ106IFByb2Nlc3NlZFRyaWdnZXJTZXQgfSA9IHt9O1xyXG4gIHByb3RlY3RlZCB0cmlnZ2VyU2V0Q29uZmlnOiB7IFtrZXk6IHN0cmluZ106IENvbmZpZ1ZhbHVlIH0gPSB7fTtcclxuICBwcm90ZWN0ZWQgem9uZU5hbWUgPSAnJztcclxuICBwcm90ZWN0ZWQgem9uZUlkID0gLTE7XHJcbiAgcHJvdGVjdGVkIGRhdGFJbml0aWFsaXplcnM6IHtcclxuICAgIGZpbGU6IHN0cmluZztcclxuICAgIGZ1bmM6IERhdGFJbml0aWFsaXplRnVuYzxSYWlkYm9zc0RhdGE+O1xyXG4gIH1bXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByb3RlY3RlZCBvcHRpb25zOiBSYWlkYm9zc09wdGlvbnMsXHJcbiAgICBwcm90ZWN0ZWQgdGltZWxpbmVMb2FkZXI6IFRpbWVsaW5lTG9hZGVyLFxyXG4gICAgcHJvdGVjdGVkIHJhaWRib3NzRGF0YUZpbGVzOiBSYWlkYm9zc0ZpbGVEYXRhLFxyXG4gICkge1xyXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIHRoaXMucGFydHlUcmFja2VyID0gbmV3IFBhcnR5VHJhY2tlcihvcHRpb25zKTtcclxuICAgIHRoaXMudGltZWxpbmVMb2FkZXIgPSB0aW1lbGluZUxvYWRlcjtcclxuICAgIHRoaXMuUHJvY2Vzc0RhdGFGaWxlcyhyYWlkYm9zc0RhdGFGaWxlcyk7XHJcblxyXG4gICAgdGhpcy5pbmZvVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3B1cC10ZXh0LWluZm8nKTtcclxuICAgIHRoaXMuYWxlcnRUZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcHVwLXRleHQtYWxlcnQnKTtcclxuICAgIHRoaXMuYWxhcm1UZXh0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcHVwLXRleHQtYWxhcm0nKTtcclxuXHJcbiAgICB0aGlzLnBhcnNlckxhbmcgPSB0aGlzLm9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2UgPz8gJ2VuJztcclxuICAgIHRoaXMuZGlzcGxheUxhbmcgPSB0aGlzLm9wdGlvbnMuQWxlcnRzTGFuZ3VhZ2UgPz8gdGhpcy5vcHRpb25zLkRpc3BsYXlMYW5ndWFnZSA/P1xyXG4gICAgICB0aGlzLm9wdGlvbnMuUGFyc2VyTGFuZ3VhZ2UgPz8gJ2VuJztcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLklzUmVtb3RlUmFpZGJvc3MpIHtcclxuICAgICAgdGhpcy50dHNFbmdpbmUgPSBuZXcgQnJvd3NlclRUU0VuZ2luZSh0aGlzLmRpc3BsYXlMYW5nKTtcclxuICAgICAgdGhpcy50dHNTYXkgPSAodGV4dCkgPT4ge1xyXG4gICAgICAgIHRoaXMudHRzRW5naW5lPy5wbGF5KHRoaXMub3B0aW9ucy5UcmFuc2Zvcm1UdHModGV4dCkpO1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50dHNTYXkgPSAodGV4dCkgPT4ge1xyXG4gICAgICAgIHZvaWQgY2FsbE92ZXJsYXlIYW5kbGVyKHtcclxuICAgICAgICAgIGNhbGw6ICdjYWN0Ym90U2F5JyxcclxuICAgICAgICAgIHRleHQ6IHRoaXMub3B0aW9ucy5UcmFuc2Zvcm1UdHModGV4dCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5nZXREYXRhT2JqZWN0KCk7XHJcblxyXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlIG5lZWQgdXNlciBpbnRlcmFjdGlvbiB0byBwbGF5IGF1ZGlvXHJcbiAgICAvLyBvbmx5IGlmIGF1ZGlvIGlzIGVuYWJsZWQgaW4gb3B0aW9uc1xyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5BdWRpb0FsbG93ZWQpXHJcbiAgICAgIEF1dG9wbGF5SGVscGVyLkNoZWNrQW5kUHJvbXB0KCk7XHJcblxyXG4gICAgdGhpcy5SZXNldCgpO1xyXG4gICAgdGhpcy5BZGREZWJ1Z0luc3RydWN0aW9ucygpO1xyXG4gICAgdGhpcy5Ib29rT3ZlcmxheXMoKTtcclxuICB9XHJcblxyXG4gIEFkZERlYnVnSW5zdHJ1Y3Rpb25zKCk6IHZvaWQge1xyXG4gICAgcmFpZGJvc3NJbnN0cnVjdGlvbnNbdGhpcy5kaXNwbGF5TGFuZ10uZm9yRWFjaCgobGluZSwgaSkgPT4ge1xyXG4gICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYGluc3RydWN0aW9ucy0ke2l9YCk7XHJcbiAgICAgIGlmICghZWxlbSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIGVsZW0uaW5uZXJIVE1MID0gbGluZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgSG9va092ZXJsYXlzKCk6IHZvaWQge1xyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKCdQYXJ0eUNoYW5nZWQnLCAoZSkgPT4ge1xyXG4gICAgICB0aGlzLnBhcnR5VHJhY2tlci5vblBhcnR5Q2hhbmdlZChlKTtcclxuICAgIH0pO1xyXG4gICAgYWRkUGxheWVyQ2hhbmdlZE92ZXJyaWRlTGlzdGVuZXIoKGU6IFBsYXllckNoYW5nZWREZXRhaWwpID0+IHtcclxuICAgICAgdGhpcy5PblBsYXllckNoYW5nZShlKTtcclxuICAgIH0sIHRoaXMub3B0aW9ucy5QbGF5ZXJOYW1lT3ZlcnJpZGUpO1xyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKCdDaGFuZ2Vab25lJywgKGUpID0+IHtcclxuICAgICAgdGhpcy5PbkNoYW5nZVpvbmUoZSk7XHJcbiAgICB9KTtcclxuICAgIGFkZE92ZXJsYXlMaXN0ZW5lcignb25JbkNvbWJhdENoYW5nZWRFdmVudCcsIChlKSA9PiB7XHJcbiAgICAgIHRoaXMuU2V0SW5Db21iYXQoZS5kZXRhaWwuaW5HYW1lQ29tYmF0KTtcclxuICAgIH0pO1xyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKCdvbkxvZ0V2ZW50JywgKGUpID0+IHtcclxuICAgICAgdGhpcy5PbkxvZyhlKTtcclxuICAgIH0pO1xyXG4gICAgYWRkT3ZlcmxheUxpc3RlbmVyKCdMb2dMaW5lJywgKGUpID0+IHtcclxuICAgICAgdGhpcy5Pbk5ldExvZyhlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgT25QbGF5ZXJDaGFuZ2UoZTogUGxheWVyQ2hhbmdlZERldGFpbCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuam9iICE9PSBlLmRldGFpbC5qb2IgfHwgdGhpcy5tZSAhPT0gZS5kZXRhaWwubmFtZSlcclxuICAgICAgdGhpcy5PbkpvYkNoYW5nZShlKTtcclxuICAgIHRoaXMuZGF0YS5jdXJyZW50SFAgPSBlLmRldGFpbC5jdXJyZW50SFA7XHJcbiAgfVxyXG5cclxuICBQcm9jZXNzRGF0YUZpbGVzKGZpbGVzOiBSYWlkYm9zc0ZpbGVEYXRhKTogdm9pZCB7XHJcbiAgICB0aGlzLnRyaWdnZXJTZXRzID0gW107XHJcbiAgICB0aGlzLnRyaWdnZXJTZXRzQnlJZCA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgW2ZpbGVuYW1lLCBqc29uXSBvZiBPYmplY3QuZW50cmllcyhmaWxlcykpIHtcclxuICAgICAgaWYgKCFmaWxlbmFtZS5lbmRzV2l0aCgnLmpzJykgJiYgIWZpbGVuYW1lLmVuZHNXaXRoKCcudHMnKSlcclxuICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YganNvbiAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgVW5leHBlY3RlZCBKU09OIGZyb20gJHtmaWxlbmFtZX0sIGV4cGVjdGVkIGFuIGFycmF5YCk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFqc29uLnRyaWdnZXJzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFVuZXhwZWN0ZWQgSlNPTiBmcm9tICR7ZmlsZW5hbWV9LCBleHBlY3RlZCBhIHRyaWdnZXJzYCk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHR5cGVvZiBqc29uLnRyaWdnZXJzICE9PSAnb2JqZWN0JyB8fCAhKGpzb24udHJpZ2dlcnMubGVuZ3RoID49IDApKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYFVuZXhwZWN0ZWQgSlNPTiBmcm9tICR7ZmlsZW5hbWV9LCBleHBlY3RlZCB0cmlnZ2VycyB0byBiZSBhbiBhcnJheWApO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHByb2Nlc3NlZFNldCA9IHtcclxuICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUsXHJcbiAgICAgICAgLi4uanNvbixcclxuICAgICAgfTtcclxuICAgICAgdGhpcy50cmlnZ2VyU2V0cy5wdXNoKHByb2Nlc3NlZFNldCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVXNlciB0cmlnZ2VycyBtdXN0IGNvbWUgbGFzdCBzbyB0aGF0IHRoZXkgb3ZlcnJpZGUgYnVpbHQtaW4gZmlsZXMuXHJcbiAgICB0aGlzLnRyaWdnZXJTZXRzLnB1c2goLi4udGhpcy5vcHRpb25zLlRyaWdnZXJzKTtcclxuXHJcbiAgICAvLyBFbGltaW5hdGUgYW55IHRyaWdnZXIgc2V0cyB3aXRoIGR1cGxpY2F0ZSBpZHMgYW5kIHJlY29yZCBhIGxvb2t1cCBieSBpZC5cclxuICAgIHRoaXMudHJpZ2dlclNldHMgPSB0aGlzLnRyaWdnZXJTZXRzLmZpbHRlcigodHJpZ2dlclNldCkgPT4ge1xyXG4gICAgICBpZiAodHJpZ2dlclNldC5pZCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICBpZiAodGhpcy50cmlnZ2VyU2V0c0J5SWRbdHJpZ2dlclNldC5pZF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYCR7XHJcbiAgICAgICAgICAgIHRyaWdnZXJTZXQuZmlsZW5hbWUgPz8gJz8/PydcclxuICAgICAgICAgIH0gaGFzIGR1cGxpY2F0ZSB0cmlnZ2VyU2V0IGlkICR7dHJpZ2dlclNldC5pZH0sIGlnbm9yaW5nIHRyaWdnZXJzYCxcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnRyaWdnZXJTZXRzQnlJZFt0cmlnZ2VyU2V0LmlkXSA9IHRyaWdnZXJTZXQ7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBPbkNoYW5nZVpvbmUoZTogRXZlbnRSZXNwb25zZXNbJ0NoYW5nZVpvbmUnXSk6IHZvaWQge1xyXG4gICAgLy8gTm90ZTogdGhpcyBtdXN0IGNoZWNrIHpvbmUgaWQgYW5kIG5vdCB6b25lIG5hbWUsIGFzIHRoZXJlIGFyZSBzb21lIHpvbmUgbmFtZSBjb2xsaXNpb25zLlxyXG4gICAgaWYgKHRoaXMuem9uZUlkID09PSBlLnpvbmVJRClcclxuICAgICAgcmV0dXJuO1xyXG4gICAgdGhpcy56b25lTmFtZSA9IGUuem9uZU5hbWU7XHJcbiAgICB0aGlzLnpvbmVJZCA9IGUuem9uZUlEO1xyXG4gICAgdGhpcy5SZWxvYWRUaW1lbGluZXMoKTtcclxuICB9XHJcblxyXG4gIFJlbG9hZFRpbWVsaW5lcygpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5tZSB8fCAhdGhpcy56b25lTmFtZSB8fCAhdGhpcy50aW1lbGluZUxvYWRlci5Jc1JlYWR5KCkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICAvLyBEcm9wIHRoZSB0cmlnZ2VycyBhbmQgdGltZWxpbmVzIGZyb20gdGhlIHByZXZpb3VzIHpvbmUsIHNvIHdlIGNhbiBhZGQgbmV3IG9uZXMuXHJcbiAgICB0aGlzLnRyaWdnZXJzID0gW107XHJcbiAgICB0aGlzLm5ldFRyaWdnZXJzID0gW107XHJcbiAgICB0aGlzLmRhdGFJbml0aWFsaXplcnMgPSBbXTtcclxuICAgIHRoaXMudHJpZ2dlclNldENvbmZpZyA9IHt9O1xyXG4gICAgbGV0IHRpbWVsaW5lRmlsZXMgPSBbXTtcclxuICAgIGxldCB0aW1lbGluZXM6IHN0cmluZ1tdID0gW107XHJcbiAgICBjb25zdCByZXBsYWNlbWVudHM6IFRpbWVsaW5lUmVwbGFjZW1lbnRbXSA9IFtdO1xyXG4gICAgY29uc3QgdGltZWxpbmVTdHlsZXMgPSBbXTtcclxuICAgIHRoaXMucmVzZXRXaGVuT3V0T2ZDb21iYXQgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IG9yZGVyZWRUcmlnZ2VycyA9IG5ldyBPcmRlcmVkVHJpZ2dlckxpc3QoKTtcclxuXHJcbiAgICAvLyBTb21lIHVzZXIgdGltZWxpbmVzIG1heSByZWx5IG9uIGhhdmluZyB2YWxpZCBpbml0IGRhdGFcclxuICAgIC8vIERvbid0IHVzZSBgdGhpcy5SZXNldCgpYCBzaW5jZSB0aGF0IGNsZWFycyBvdGhlciB0aGluZ3MgYXMgd2VsbFxyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5nZXREYXRhT2JqZWN0KCk7XHJcblxyXG4gICAgLy8gUmVjdXJzaXZlbHkvaXRlcmF0aXZlbHkgcHJvY2VzcyB0aW1lbGluZSBlbnRyaWVzIGZvciB0cmlnZ2Vycy5cclxuICAgIC8vIEZ1bmN0aW9ucyBnZXQgY2FsbGVkIHdpdGggZGF0YSwgYXJyYXlzIGdldCBpdGVyYXRlZCwgc3RyaW5ncyBnZXQgYXBwZW5kZWQuXHJcbiAgICBjb25zdCBhZGRUaW1lbGluZSA9IGZ1bmN0aW9uKHRoaXM6IFBvcHVwVGV4dCwgb2JqOiBUaW1lbGluZUZpZWxkIHwgVGltZWxpbmVGdW5jIHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IG9ialZhbCBvZiBvYmopXHJcbiAgICAgICAgICBhZGRUaW1lbGluZShvYmpWYWwpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBhZGRUaW1lbGluZShvYmoodGhpcy5kYXRhKSk7XHJcbiAgICAgIH0gZWxzZSBpZiAob2JqICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aW1lbGluZXMucHVzaChvYmopO1xyXG4gICAgICB9XHJcbiAgICB9LmJpbmQodGhpcyk7XHJcblxyXG4gICAgLy8gY29uc3RydWN0IHNvbWV0aGluZyBsaWtlIHJlZ2V4RGUgb3IgcmVnZXhGci5cclxuICAgIGNvbnN0IGxhbmdTdWZmaXggPSB0aGlzLnBhcnNlckxhbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnBhcnNlckxhbmcuc2xpY2UoMSk7XHJcbiAgICBjb25zdCByZWdleFBhcnNlckxhbmcgPSBgcmVnZXgke2xhbmdTdWZmaXh9YDtcclxuICAgIGNvbnN0IG5ldFJlZ2V4UGFyc2VyTGFuZyA9IGBuZXRSZWdleCR7bGFuZ1N1ZmZpeH1gO1xyXG5cclxuICAgIGZvciAoY29uc3Qgc2V0IG9mIHRoaXMudHJpZ2dlclNldHMpIHtcclxuICAgICAgLy8gem9uZVJlZ2V4IGNhbiBiZSB1bmRlZmluZWQsIGEgcmVnZXgsIG9yIHRyYW5zbGF0YWJsZSBvYmplY3Qgb2YgcmVnZXguXHJcbiAgICAgIGNvbnN0IGhhdmVab25lUmVnZXggPSAnem9uZVJlZ2V4JyBpbiBzZXQ7XHJcbiAgICAgIGNvbnN0IGhhdmVab25lSWQgPSAnem9uZUlkJyBpbiBzZXQ7XHJcbiAgICAgIGlmICghaGF2ZVpvbmVSZWdleCAmJiAhaGF2ZVpvbmVJZCB8fCBoYXZlWm9uZVJlZ2V4ICYmIGhhdmVab25lSWQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBUcmlnZ2VyIHNldCBtdXN0IGluY2x1ZGUgZXhhY3RseSBvbmUgb2Ygem9uZVJlZ2V4IG9yIHpvbmVJZCBwcm9wZXJ0eWApO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChoYXZlWm9uZUlkICYmIHNldC56b25lSWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gc2V0LmZpbGVuYW1lICE9PSB1bmRlZmluZWQgPyBgJyR7c2V0LmZpbGVuYW1lfSdgIDogJyh1c2VyIGZpbGUpJztcclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgYFRyaWdnZXIgc2V0IGhhcyB6b25lSWQsIGJ1dCB3aXRoIG5vdGhpbmcgc3BlY2lmaWVkIGluICR7ZmlsZW5hbWV9LiAgYCArXHJcbiAgICAgICAgICAgIGBEaWQgeW91IG1pc3NwZWxsIHRoZSBab25lSWQuWm9uZU5hbWU/YCxcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVwcmVjYXRpb24vZGVwcmVjYXRpb24gKi9cclxuICAgICAgY29uc3Qgb3JpZ1pvbmVSZWdleCA9IHNldC56b25lUmVnZXg7XHJcblxyXG4gICAgICBpZiAoc2V0LnpvbmVJZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgc2V0LnpvbmVJZCAhPT0gWm9uZUlkLk1hdGNoQWxsICYmIHNldC56b25lSWQgIT09IHRoaXMuem9uZUlkICYmXHJcbiAgICAgICAgICAhKHR5cGVvZiBzZXQuem9uZUlkID09PSAnb2JqZWN0JyAmJiBzZXQuem9uZUlkLmluY2x1ZGVzKHRoaXMuem9uZUlkKSlcclxuICAgICAgICApXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgfSBlbHNlIGlmIChvcmlnWm9uZVJlZ2V4KSB7XHJcbiAgICAgICAgbGV0IHpvbmVSZWdleCA9IG9yaWdab25lUmVnZXg7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB6b25lUmVnZXggIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICBgem9uZVJlZ2V4IG11c3QgYmUgdHJhbnNsYXRhYmxlIG9iamVjdCBvciByZWdleHA6ICR7SlNPTi5zdHJpbmdpZnkob3JpZ1pvbmVSZWdleCl9YCxcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKCEoem9uZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKSkge1xyXG4gICAgICAgICAgY29uc3QgcGFyc2VyTGFuZ1JlZ2V4ID0gem9uZVJlZ2V4W3RoaXMucGFyc2VyTGFuZ107XHJcbiAgICAgICAgICBpZiAocGFyc2VyTGFuZ1JlZ2V4KSB7XHJcbiAgICAgICAgICAgIHpvbmVSZWdleCA9IHBhcnNlckxhbmdSZWdleDtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoem9uZVJlZ2V4WydlbiddKSB7XHJcbiAgICAgICAgICAgIHpvbmVSZWdleCA9IHpvbmVSZWdleFsnZW4nXTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYHVua25vd24gem9uZVJlZ2V4IHBhcnNlciBsYW5ndWFnZTogJHtKU09OLnN0cmluZ2lmeShvcmlnWm9uZVJlZ2V4KX1gKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKCEoem9uZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGB6b25lUmVnZXggbXVzdCBiZSByZWdleHA6ICR7SlNPTi5zdHJpbmdpZnkob3JpZ1pvbmVSZWdleCl9YCk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy56b25lTmFtZS5zZWFyY2goUmVnZXhlcy5wYXJzZSh6b25lUmVnZXgpKSA8IDApXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5EZWJ1Zykge1xyXG4gICAgICAgIGlmIChzZXQuaWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBMb2FkaW5nIGlkICR7c2V0LmlkfWApO1xyXG4gICAgICAgIGVsc2UgaWYgKHNldC5maWxlbmFtZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgY29uc29sZS5sb2coYExvYWRpbmcgJHtzZXQuZmlsZW5hbWV9YCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ0xvYWRpbmcgdXNlciB0cmlnZ2VycyBmb3Igem9uZScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB0cmlnZ2VyU2V0QXV0b0NvbmZpZyA9IHNldC5pZCAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyB0aGlzLm9wdGlvbnMuUGVyVHJpZ2dlclNldEF1dG9Db25maWdbc2V0LmlkXVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG5cclxuICAgICAgY29uc3QgbG9hZFRoaXNTZXQgPSBzZXQuaWQgPT09IHVuZGVmaW5lZCA/IFtdIDogW3NldC5pZF07XHJcbiAgICAgIGZvciAoY29uc3QgaWQgb2YgWy4uLmxvYWRUaGlzU2V0LCAuLi5zZXQubG9hZENvbmZpZ3MgPz8gW11dKSB7XHJcbiAgICAgICAgLy8gSW4gY2FzZSBhIHRyaWdnZXIgc2V0IGlkIGNoYW5nZXMgYW5kIHNvbWVib2R5IHdhbnRzIHRvIHJlZmVyIHRvXHJcbiAgICAgICAgLy8gdGhlIG9sZCBpZCBmb3IgYSBiYWNrY29tcGF0IHBhdGggaW4gdHJpZ2dlcnMsIGRvbid0IGVhcmx5IG91dC5cclxuICAgICAgICAvLyBBbHNvIGRvbid0IHByaW50IGVycm9ycyBoZXJlIGZvciBtaXNzaW5nIHNldHMgb3IgY29uZmlncywgYmVjYXVzZSBiYWNrY29tcGF0XHJcbiAgICAgICAgLy8gc2hvdWxkIGJlIGFibGUgdG8gbG9hZCBmcm9tIG91dGRhdGVkIHRyaWdnZXIgKHNldCkgaWRzIHdpdGhvdXQgcHJpbnRpbmcgZXJyb3JzLlxyXG4gICAgICAgIGNvbnN0IGxvYWRTZXQgPSB0aGlzLnRyaWdnZXJTZXRzQnlJZFtpZF07XHJcblxyXG4gICAgICAgIC8vIExvYWQgdGhlIHJhdyBzYXZlZCBvcHRpb25zIGZyb20gVHJpZ2dlclNldENvbmZpZyBhbmQgdXNpbmcgdGhlIHRlbXBsYXRlcyxcclxuICAgICAgICAvLyBzZXQgYXBwcm9wcmlhdGUgZGVmYXVsdHMgYXMgbmVlZGVkLlxyXG4gICAgICAgIGNvbnN0IGxvYWRTZXRDb25maWcgPSBsb2FkU2V0Py5jb25maWc7XHJcbiAgICAgICAgaWYgKGxvYWRTZXQgIT09IHVuZGVmaW5lZCAmJiBsb2FkU2V0Q29uZmlnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIFVzZXJDb25maWcucHJvY2Vzc09wdGlvbnMoXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyxcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyU2V0Q29uZmlnLFxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuVHJpZ2dlclNldENvbmZpZ1tpZF0gPz8ge30sXHJcbiAgICAgICAgICAgIGxvYWRTZXRDb25maWcsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQWxzbyBtYWtlIHN1cmUgdGhhdCBhbnkga2V5cyB0aGF0IGRvbid0IGNvcnJlc3BvbmQgdG8gY29uZmlnIGVudHJpZXMgYXJlIHNldFxyXG4gICAgICAgIC8vIHNvIHRoYXQgdHJpZ2dlcnMgY2FuIHVzZSB0aGlzIGZvciBiYWNrIGNvbXBhdC5cclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLm9wdGlvbnMuVHJpZ2dlclNldENvbmZpZ1tpZF0gPz8ge30pKVxyXG4gICAgICAgICAgdGhpcy50cmlnZ2VyU2V0Q29uZmlnW2tleV0gPz89IHZhbHVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBzZXRGaWxlbmFtZSA9IHNldC5maWxlbmFtZSA/PyAnVW5rbm93bic7XHJcblxyXG4gICAgICBpZiAoc2V0LmluaXREYXRhKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhSW5pdGlhbGl6ZXJzLnB1c2goe1xyXG4gICAgICAgICAgZmlsZTogc2V0RmlsZW5hbWUsXHJcbiAgICAgICAgICBmdW5jOiBzZXQuaW5pdERhdGEsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEFkanVzdCB0cmlnZ2VycyBmb3IgdGhlIHBhcnNlciBsYW5ndWFnZS5cclxuICAgICAgaWYgKHNldC50cmlnZ2VycyAmJiB0aGlzLm9wdGlvbnMuQWxlcnRzRW5hYmxlZCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgW2luZGV4LCB0cl0gb2Ygc2V0LnRyaWdnZXJzLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgY29uc3QgdHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlciA9IHRyO1xyXG4gICAgICAgICAgLy8gQWRkIGFuIGFkZGl0aW9uYWwgcmVzb2x2ZWQgcmVnZXggaGVyZSB0byBzYXZlXHJcbiAgICAgICAgICAvLyB0aW1lIGxhdGVyLiAgVGhpcyB3aWxsIGNsb2JiZXIgZWFjaCB0aW1lIHdlXHJcbiAgICAgICAgICAvLyBsb2FkIHRoaXMsIGJ1dCB0aGF0J3Mgb2suXHJcbiAgICAgICAgICB0cmlnZ2VyLmZpbGVuYW1lID0gc2V0RmlsZW5hbWU7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IHRyaWdnZXIuaWQgPz8gYCR7c2V0RmlsZW5hbWV9IHRyaWdnZXJbJHtpbmRleH1dYDtcclxuXHJcbiAgICAgICAgICAvLyBTdG9yZSB0cmlnZ2VyIHNldCBvcHRpb25zIHdpdGggdGhlIHRyaWdnZXIgaXRzZWxmLFxyXG4gICAgICAgICAgLy8gYXMgaXQgbWF5IGdldCBvdmVycmlkZGVuIGJ5IGEgdHJpZ2dlciB3aXRoIHRoZSBzYW1lXHJcbiAgICAgICAgICAvLyBpZCBmcm9tIGEgZGlmZmVyZW50IHRyaWdnZXIgc2V0LlxyXG4gICAgICAgICAgdHJpZ2dlci50cmlnZ2VyU2V0QXV0b0NvbmZpZyA9IHRyaWdnZXJTZXRBdXRvQ29uZmlnO1xyXG5cclxuICAgICAgICAgIHRoaXMuUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcik7XHJcbiAgICAgICAgICBvcmRlcmVkVHJpZ2dlcnMucHVzaCh0cmlnZ2VyKTtcclxuXHJcbiAgICAgICAgICBjb25zdCB0cmlnZ2VyT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IHVua25vd24gfSA9IHRyaWdnZXI7XHJcblxyXG4gICAgICAgICAgLy8gYHJlZ2V4YCBhbmQgYHJlZ2V4RGVgIChldGMpIGFyZSBkZXByZWNhdGVkLCBob3dldmVyIHRoZXkgbWF5IHN0aWxsIGJlIHVzZWRcclxuICAgICAgICAgIC8vIGJ5IHVzZXIgdHJpZ2dlcnMsIGFuZCBzbyBhcmUgc3RpbGwgY2hlY2tlZCBoZXJlLiAgYHJlZ2V4RGVgIGFuZCBmcmllbmRzXHJcbiAgICAgICAgICAvLyB3aWxsIG5ldmVyIGJlIGF1dG8tdHJhbnNsYXRlZCBhbmQgYXJlIGFzc3VtZWQgdG8gYmUgY29ycmVjdC5cclxuICAgICAgICAgIC8vIFRPRE86IG1heWJlIHdlIGNvdWxkIGNvbnNpZGVyIHJlbW92aW5nIHRoZXNlIG9uY2UgdGltZWxpbmVzIGRvbid0IG5lZWQgcGFyc2VkIGxpbmVzP1xyXG4gICAgICAgICAgaWYgKGlzUmVnZXhUcmlnZ2VyKHRyaWdnZXIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRSZWdleCA9IHRyaWdnZXIucmVnZXg7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsZVJlZ2V4ID0gdHJpZ2dlck9iamVjdFtyZWdleFBhcnNlckxhbmddO1xyXG4gICAgICAgICAgICBpZiAobG9jYWxlUmVnZXggaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgICB0cmlnZ2VyLmxvY2FsUmVnZXggPSBSZWdleGVzLnBhcnNlKGxvY2FsZVJlZ2V4KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjb25zdCB0cmFucyA9IHRyYW5zbGF0ZVJlZ2V4KGRlZmF1bHRSZWdleCwgdGhpcy5wYXJzZXJMYW5nLCBzZXQudGltZWxpbmVSZXBsYWNlKTtcclxuICAgICAgICAgICAgICB0cmlnZ2VyLmxvY2FsUmVnZXggPSBSZWdleGVzLnBhcnNlKHRyYW5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIGBuZXRSZWdleERlYCAoZXRjKSBpcyBhbHNvIGRlcHJlY2F0ZWQsIGJ1dCB0aGV5IGFsc28gbWF5IHN0aWxsIGJlIHVzZWQgYnlcclxuICAgICAgICAgIC8vIHVzZXIgdHJpZ2dlcnMuICBJZiB0aGV5IGV4aXN0LCB0aGV5IHdpbGwgdGFrZSBwcmVjZWRlbmNlIG92ZXIgYG5ldFJlZ2V4YC5cclxuICAgICAgICAgIC8vIGBuZXRSZWdleGAgd2lsbCBiZSBhdXRvLXRyYW5zbGF0ZWQgaW50byB0aGUgcGFyc2VyIGxhbmd1YWdlLiAgYG5ldFJlZ2V4RGVgXHJcbiAgICAgICAgICAvLyBhbmQgZnJpZW5kcyB3aWxsIG5ldmVyIGJlIGF1dG8tdHJhbnNsYXRlZCBhbmQgYXJlIGFzc3VtZWQgdG8gYmUgY29ycmVjdC5cclxuICAgICAgICAgIGlmIChpc05ldFJlZ2V4VHJpZ2dlcih0cmlnZ2VyKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0TmV0UmVnZXggPSB0cmlnZ2VyLm5ldFJlZ2V4O1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhbGVOZXRSZWdleCA9IHRyaWdnZXJPYmplY3RbbmV0UmVnZXhQYXJzZXJMYW5nXTtcclxuICAgICAgICAgICAgaWYgKGxvY2FsZU5ldFJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgICAgLy8gbG9jYWxpemVkIHJlZ2V4IGRvbid0IG5lZWQgdG8gaGFuZGxlIG5ldC1yZWdleCBhdXRvIGJ1aWxkXHJcbiAgICAgICAgICAgICAgdHJpZ2dlci5sb2NhbE5ldFJlZ2V4ID0gUmVnZXhlcy5wYXJzZShsb2NhbGVOZXRSZWdleCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVmYXVsdE5ldFJlZ2V4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAvLyBzaW1wbGUgbmV0UmVnZXggdHJpZ2dlciwgbmVlZCB0byBidWlsZCBuZXRSZWdleCBhbmQgdHJhbnNsYXRlXHJcbiAgICAgICAgICAgICAgaWYgKGRlZmF1bHROZXRSZWdleCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnMgPSB0cmFuc2xhdGVSZWdleChkZWZhdWx0TmV0UmVnZXgsIHRoaXMucGFyc2VyTGFuZywgc2V0LnRpbWVsaW5lUmVwbGFjZSk7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyLmxvY2FsTmV0UmVnZXggPSBSZWdleGVzLnBhcnNlKHRyYW5zKTtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIudHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBUcmlnZ2VyICR7aWR9OiB3aXRob3V0IHR5cGUgcHJvcGVydHkgbmVlZHMgUmVnRXhwIGFzIG5ldFJlZ2V4YCk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlID0gYnVpbGROZXRSZWdleEZvclRyaWdnZXIoXHJcbiAgICAgICAgICAgICAgICAgIHRyaWdnZXIudHlwZSxcclxuICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtKFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHROZXRSZWdleCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlckxhbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0LnRpbWVsaW5lUmVwbGFjZSxcclxuICAgICAgICAgICAgICAgICAgKS5wYXJhbXMsXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlci5sb2NhbE5ldFJlZ2V4ID0gUmVnZXhlcy5wYXJzZShyZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0cmlnZ2VyLmxvY2FsUmVnZXggPT09IHVuZGVmaW5lZCAmJiB0cmlnZ2VyLmxvY2FsTmV0UmVnZXggPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICAhKCdkaXNhYmxlZCcgaW4gdHJpZ2dlcilcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAvLyBBbGwgdHJpZ2dlcnMgYXJlIGFkZGVkIGZvciBjb25zaXN0ZW5jeSByZWFzb25zIGluIG92ZXJyaWRpbmcvZGlzYWJsaW5nLCBob3dldmVyXHJcbiAgICAgICAgICAgIC8vIHNob3cgYW4gZXJyb3IgaWYgZm9yIHNvbWUgcmVhc29uIHdlIGhhdmVuJ3QgYmVlbiBhYmxlIHRvIGJ1aWxkIGEgcmVnZXguXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFRyaWdnZXIgJHtpZH06IG1pc3NpbmcgcmVnZXggYW5kIG5ldFJlZ2V4OyB0cmlnZ2VyIHdpbGwgYmUgaWdub3JlZGApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNldC5vdmVycmlkZVRpbWVsaW5lRmlsZSkge1xyXG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gc2V0LmZpbGVuYW1lICE9PSB1bmRlZmluZWQgPyBgJyR7c2V0LmZpbGVuYW1lfSdgIDogJyh1c2VyIGZpbGUpJztcclxuICAgICAgICBjb25zb2xlLmxvZyhgT3ZlcnJpZGluZyB0aW1lbGluZSBmcm9tICR7ZmlsZW5hbWV9LmApO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGUgdGltZWxpbmUgZmlsZSBvdmVycmlkZSBpcyBzZXQsIGFsbCBwcmV2aW91c2x5IGxvYWRlZCB0aW1lbGluZSBpbmZvIGlzIGRyb3BwZWQuXHJcbiAgICAgICAgLy8gU3R5bGVzLCB0cmlnZ2VycywgYW5kIHRyYW5zbGF0aW9ucyBhcmUga2VwdCwgYXMgdGhleSBtYXkgc3RpbGwgYXBwbHkgdG8gdGhlIG5ldyBvbmUuXHJcbiAgICAgICAgdGltZWxpbmVGaWxlcyA9IFtdO1xyXG4gICAgICAgIHRpbWVsaW5lcyA9IFtdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBbmQgc2V0IHRoZSB0aW1lbGluZSBmaWxlcy90aW1lbGluZXMgZnJvbSBlYWNoIHNldCB0aGF0IG1hdGNoZXMuXHJcbiAgICAgIGlmIChzZXQudGltZWxpbmVGaWxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoc2V0LmZpbGVuYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGNvbnN0IGRpciA9IHNldC5maWxlbmFtZS5zbGljZSgwLCBNYXRoLm1heCgwLCBzZXQuZmlsZW5hbWUubGFzdEluZGV4T2YoJy8nKSkpO1xyXG4gICAgICAgICAgdGltZWxpbmVGaWxlcy5wdXNoKGAke2Rpcn0vJHtzZXQudGltZWxpbmVGaWxlfWApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBOb3RlOiBGb3IgdXNlciBmaWxlcywgdGhpcyBzaG91bGQgZ2V0IGhhbmRsZWQgYnkgcmFpZGJvc3NfY29uZmlnLmpzLFxyXG4gICAgICAgICAgLy8gd2hlcmUgYHRpbWVsaW5lRmlsZWAgc2hvdWxkIGdldCBjb252ZXJ0ZWQgdG8gYHRpbWVsaW5lYC5cclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYENhbid0IHNwZWNpZnkgdGltZWxpbmVGaWxlIGluIG5vbi1tYW5pZmVzdCBmaWxlOiR7c2V0LnRpbWVsaW5lRmlsZX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzZXQudGltZWxpbmUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICBhZGRUaW1lbGluZShzZXQudGltZWxpbmUpO1xyXG4gICAgICBpZiAoc2V0LnRpbWVsaW5lUmVwbGFjZSlcclxuICAgICAgICByZXBsYWNlbWVudHMucHVzaCguLi5zZXQudGltZWxpbmVSZXBsYWNlKTtcclxuICAgICAgaWYgKHNldC50aW1lbGluZVRyaWdnZXJzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHNldC50aW1lbGluZVRyaWdnZXJzKSB7XHJcbiAgICAgICAgICAvLyBUaW1lbGluZSB0cmlnZ2VycyBhcmUgbmV2ZXIgdHJhbnNsYXRlZC5cclxuICAgICAgICAgIHRoaXMuUHJvY2Vzc1RyaWdnZXIodHJpZ2dlcik7XHJcbiAgICAgICAgICB0cmlnZ2VyLmlzVGltZWxpbmVUcmlnZ2VyID0gdHJ1ZTtcclxuICAgICAgICAgIHRyaWdnZXIudHJpZ2dlclNldEF1dG9Db25maWcgPSB0cmlnZ2VyU2V0QXV0b0NvbmZpZztcclxuICAgICAgICAgIG9yZGVyZWRUcmlnZ2Vycy5wdXNoKHRyaWdnZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoc2V0LnRpbWVsaW5lU3R5bGVzKVxyXG4gICAgICAgIHRpbWVsaW5lU3R5bGVzLnB1c2goLi4uc2V0LnRpbWVsaW5lU3R5bGVzKTtcclxuICAgICAgaWYgKHNldC5yZXNldFdoZW5PdXRPZkNvbWJhdCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRoaXMucmVzZXRXaGVuT3V0T2ZDb21iYXQgJiY9IHNldC5yZXNldFdoZW5PdXRPZkNvbWJhdDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTdG9yZSBhbGwgdGhlIGNvbGxlY3RlZCB0cmlnZ2VycyBpbiBvcmRlciwgYW5kIGZpbHRlciBvdXQgZGlzYWJsZWQgdHJpZ2dlcnMuXHJcbiAgICBjb25zdCBmaWx0ZXJFbmFibGVkID0gKHRyaWdnZXI6IExvb3NlVHJpZ2dlcikgPT4gISgnZGlzYWJsZWQnIGluIHRyaWdnZXIgJiYgdHJpZ2dlci5kaXNhYmxlZCk7XHJcbiAgICBjb25zdCBhbGxUcmlnZ2VycyA9IG9yZGVyZWRUcmlnZ2Vycy5hc0xpc3QoKS5maWx0ZXIoZmlsdGVyRW5hYmxlZCk7XHJcblxyXG4gICAgdGhpcy50cmlnZ2VycyA9IGFsbFRyaWdnZXJzLmZpbHRlcigoeCkgPT4geC5sb2NhbFJlZ2V4ICE9PSB1bmRlZmluZWQpO1xyXG4gICAgdGhpcy5uZXRUcmlnZ2VycyA9IGFsbFRyaWdnZXJzLmZpbHRlcigoeCkgPT4geC5sb2NhbE5ldFJlZ2V4ICE9PSB1bmRlZmluZWQpO1xyXG4gICAgY29uc3QgdGltZWxpbmVUcmlnZ2VycyA9IGFsbFRyaWdnZXJzLmZpbHRlcihpc1JhaWRib3NzTG9vc2VUaW1lbGluZVRyaWdnZXIpO1xyXG5cclxuICAgIHRoaXMuUmVzZXQoKTtcclxuXHJcbiAgICB0aGlzLnRpbWVsaW5lTG9hZGVyLlNldFRpbWVsaW5lcyhcclxuICAgICAgdGltZWxpbmVGaWxlcyxcclxuICAgICAgdGltZWxpbmVzLFxyXG4gICAgICByZXBsYWNlbWVudHMsXHJcbiAgICAgIHRpbWVsaW5lVHJpZ2dlcnMsXHJcbiAgICAgIHRpbWVsaW5lU3R5bGVzLFxyXG4gICAgICB0aGlzLnpvbmVJZCxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBQcm9jZXNzVHJpZ2dlcih0cmlnZ2VyOiBQcm9jZXNzZWRUcmlnZ2VyIHwgUHJvY2Vzc2VkVGltZWxpbmVUcmlnZ2VyKTogdm9pZCB7XHJcbiAgICAvLyBUaGVzZSBwcm9wZXJ0aWVzIGFyZSB1c2VkIGludGVybmFsbHkgYnkgUmVsb2FkVGltZWxpbmVzIG9ubHkgYW5kIHNob3VsZFxyXG4gICAgLy8gbm90IGV4aXN0IG9uIHVzZXIgdHJpZ2dlcnMuICBIb3dldmVyLCB0aGUgdHJpZ2dlciBvYmplY3RzIHRoZW1zZWx2ZXMgYXJlXHJcbiAgICAvLyByZXVzZWQgd2hlbiByZWxvYWRpbmcgcGFnZXMsIGFuZCBzbyBpdCBpcyBpbXBvc3NpYmxlIHRvIHZlcmlmeSB0aGF0XHJcbiAgICAvLyB0aGVzZSBwcm9wZXJ0aWVzIGRvbid0IGV4aXN0LiAgVGhlcmVmb3JlLCBqdXN0IGRlbGV0ZSB0aGVtIHNpbGVudGx5LlxyXG4gICAgaWYgKGlzUmFpZGJvc3NMb29zZVRpbWVsaW5lVHJpZ2dlcih0cmlnZ2VyKSlcclxuICAgICAgZGVsZXRlIHRyaWdnZXIuaXNUaW1lbGluZVRyaWdnZXI7XHJcblxyXG4gICAgZGVsZXRlIHRyaWdnZXIubG9jYWxSZWdleDtcclxuICAgIGRlbGV0ZSB0cmlnZ2VyLmxvY2FsTmV0UmVnZXg7XHJcblxyXG4gICAgdHJpZ2dlci5vdXRwdXQgPSBUcmlnZ2VyT3V0cHV0UHJveHkubWFrZU91dHB1dChcclxuICAgICAgdHJpZ2dlcixcclxuICAgICAgdGhpcy5kaXNwbGF5TGFuZyxcclxuICAgICAgdGhpcy5vcHRpb25zLlBlclRyaWdnZXJBdXRvQ29uZmlnLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIE9uSm9iQ2hhbmdlKGU6IFBsYXllckNoYW5nZWREZXRhaWwpOiB2b2lkIHtcclxuICAgIHRoaXMubWUgPSBlLmRldGFpbC5uYW1lO1xyXG4gICAgdGhpcy5qb2IgPSBlLmRldGFpbC5qb2I7XHJcbiAgICB0aGlzLnJvbGUgPSBVdGlsLmpvYlRvUm9sZSh0aGlzLmpvYik7XHJcbiAgICB0aGlzLlJlbG9hZFRpbWVsaW5lcygpO1xyXG4gIH1cclxuXHJcbiAgU2V0SW5Db21iYXQoaW5Db21iYXQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmluQ29tYmF0ID09PSBpbkNvbWJhdClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuaW5Db21iYXQgPSBpbkNvbWJhdDtcclxuICAgIHRoaXMuZGF0YS5pbkNvbWJhdCA9IGluQ29tYmF0O1xyXG5cclxuICAgIGlmICghdGhpcy5yZXNldFdoZW5PdXRPZkNvbWJhdClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIFN0b3AgdGltZXJzIHdoZW4gc3RvcHBpbmcgY29tYmF0IHRvIHN0b3AgYW55IGFjdGl2ZSB0aW1lcnMgdGhhdFxyXG4gICAgLy8gYXJlIGRlbGF5ZWQuICBIb3dldmVyLCBhbHNvIHJlc2V0IHdoZW4gc3RhcnRpbmcgY29tYmF0LlxyXG4gICAgLy8gVGhpcyBwcmV2ZW50cyBsYXRlIGF0dGFja3MgZnJvbSBhZmZlY3RpbmcgfGRhdGF8IHdoaWNoXHJcbiAgICAvLyB0aHJvd3Mgb2ZmIHRoZSBuZXh0IHJ1biwgcG90ZW50aWFsbHkuXHJcbiAgICBpZiAoIXRoaXMuaW5Db21iYXQpIHtcclxuICAgICAgdGhpcy5TdG9wVGltZXJzKCk7XHJcbiAgICAgIHRoaXMudGltZWxpbmVMb2FkZXIuU3RvcENvbWJhdCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaW5Db21iYXQpXHJcbiAgICAgIHRoaXMuUmVzZXQoKTtcclxuICB9XHJcblxyXG4gIFJlc2V0KCk6IHZvaWQge1xyXG4gICAgVXRpbC5jbGVhcldhdGNoQ29tYmF0YW50cygpO1xyXG4gICAgdGhpcy5kYXRhID0gdGhpcy5nZXREYXRhT2JqZWN0KCk7XHJcbiAgICB0aGlzLlN0b3BUaW1lcnMoKTtcclxuICAgIHRoaXMudHJpZ2dlclN1cHByZXNzID0ge307XHJcbiAgfVxyXG5cclxuICBTdG9wVGltZXJzKCk6IHZvaWQge1xyXG4gICAgZm9yIChjb25zdCBoYW5kbGUgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLnRpbWVycykpXHJcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaGFuZGxlKTtcclxuICAgIHRoaXMudGltZXJzID0ge307XHJcbiAgfVxyXG5cclxuICBPbkxvZyhlOiBMb2dFdmVudCk6IHZvaWQge1xyXG4gICAgLy8gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBiZSBkZXRlcm1pbmVkIGJhc2VkIG9uIHRoZSBsaW5lJ3MgY29udGVudHMgYXMgd2VsbCwgYnV0XHJcbiAgICAvLyBub3Qgc3VyZSBpZiB0aGF0J3Mgd29ydGggdGhlIGVmZm9ydFxyXG4gICAgY29uc3QgY3VycmVudFRpbWUgPSArbmV3IERhdGUoKTtcclxuICAgIGZvciAoY29uc3QgbG9nIG9mIGUuZGV0YWlsLmxvZ3MpIHtcclxuICAgICAgZm9yIChjb25zdCB0cmlnZ2VyIG9mIHRoaXMudHJpZ2dlcnMpIHtcclxuICAgICAgICBjb25zdCByID0gdHJpZ2dlci5sb2NhbFJlZ2V4Py5leGVjKGxvZyk7XHJcbiAgICAgICAgaWYgKHIpXHJcbiAgICAgICAgICB0aGlzLk9uVHJpZ2dlcih0cmlnZ2VyLCByLCBjdXJyZW50VGltZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIE9uTmV0TG9nKGU6IEV2ZW50UmVzcG9uc2VzWydMb2dMaW5lJ10pOiB2b2lkIHtcclxuICAgIGNvbnN0IGxvZyA9IGUucmF3TGluZTtcclxuICAgIC8vIFRoaXMgY291bGQgY29uY2VpdmFibHkgYmUgZGV0ZXJtaW5lZCBiYXNlZCBvbiBgbmV3IERhdGUoZS5saW5lWzFdKWAgYXMgd2VsbCwgYnV0XHJcbiAgICAvLyBub3Qgc3VyZSBpZiB0aGF0J3Mgd29ydGggdGhlIGVmZm9ydFxyXG4gICAgY29uc3QgY3VycmVudFRpbWUgPSArbmV3IERhdGUoKTtcclxuXHJcbiAgICBpZiAoaXNXaXBlKGxvZykpIHtcclxuICAgICAgLy8gaXNXaXBlIGNhbiBiZSBjYWxsZWQgd2l0aCBgL2UgZW5kYCB0byBzdG9wIHRoZSB0aW1lbGluZSBkdWUgdG8gZS5nLiBjb3VudGRvd24gYnV0IG5vIHB1bGxcclxuICAgICAgLy8gSG93ZXZlciwgYHRoaXMuaW5Db21iYXRgIHdpbGwgYWxyZWFkeSBiZSBgZmFsc2VgIGluIHRoYXQgY2FzZSBwcmV2ZW50aW5nIHRoZSB0aW1lbGluZSBmcm9tXHJcbiAgICAgIC8vIGdldHRpbmcgc3RvcHBlZC4gSWYgd2UncmUgbm90IGluQ29tYmF0IGFuZCB3ZSd2ZSBoaXQgdGhlIHdpcGUgY29uZGl0aW9ucyBkZWZpbmVkIGJ5XHJcbiAgICAgIC8vIGBpc1dpcGVgLCBqdXN0IHNldCBpdCB0byB0cnVlIGZpcnN0IGFuZCB0aGVuIHRvIGZhbHNlXHJcbiAgICAgIGlmICghdGhpcy5pbkNvbWJhdClcclxuICAgICAgICB0aGlzLlNldEluQ29tYmF0KHRydWUpO1xyXG4gICAgICB0aGlzLlNldEluQ29tYmF0KGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdGhpcy5uZXRUcmlnZ2Vycykge1xyXG4gICAgICBjb25zdCByID0gdHJpZ2dlci5sb2NhbE5ldFJlZ2V4Py5leGVjKGxvZyk7XHJcbiAgICAgIGlmIChyKVxyXG4gICAgICAgIHRoaXMuT25UcmlnZ2VyKHRyaWdnZXIsIHIsIGN1cnJlbnRUaW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIE9uVHJpZ2dlcihcclxuICAgIHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXIsXHJcbiAgICBtYXRjaGVzOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsLFxyXG4gICAgY3VycmVudFRpbWU6IG51bWJlcixcclxuICApOiB2b2lkIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuT25UcmlnZ2VySW50ZXJuYWwodHJpZ2dlciwgbWF0Y2hlcywgY3VycmVudFRpbWUpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBvblRyaWdnZXJFeGNlcHRpb24odHJpZ2dlciwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBPblRyaWdnZXJJbnRlcm5hbChcclxuICAgIHRyaWdnZXI6IFByb2Nlc3NlZFRyaWdnZXIsXHJcbiAgICBtYXRjaGVzOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsLFxyXG4gICAgY3VycmVudFRpbWU6IG51bWJlcixcclxuICApOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9vblRyaWdnZXJJbnRlcm5hbENoZWNrU3VwcHJlc3NlZCh0cmlnZ2VyLCBjdXJyZW50VGltZSkpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBsZXQgZ3JvdXBzOiBNYXRjaGVzID0ge307XHJcbiAgICAvLyBJZiB1c2luZyBuYW1lZCBncm91cHMsIHRyZWF0IG1hdGNoZXMuZ3JvdXBzIGFzIG1hdGNoZXNcclxuICAgIC8vIHNvIHRyaWdnZXJzIGNhbiBkbyB0aGluZ3MgbGlrZSBtYXRjaGVzLnRhcmdldC5cclxuICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMuZ3JvdXBzKSB7XHJcbiAgICAgIGdyb3VwcyA9IG1hdGNoZXMuZ3JvdXBzO1xyXG4gICAgfSBlbHNlIGlmIChtYXRjaGVzKSB7XHJcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBtYXRjaGluZyBncm91cHMsIHJlcHJvZHVjZSB0aGUgb2xkIGpzIGxvZ2ljIHdoZXJlXHJcbiAgICAgIC8vIGdyb3VwcyBlbmRlZCB1cCBhcyB0aGUgb3JpZ2luYWwgUmVnRXhwRXhlY0FycmF5IG9iamVjdFxyXG4gICAgICBtYXRjaGVzLmZvckVhY2goKHZhbHVlLCBpZHgpID0+IHtcclxuICAgICAgICBncm91cHNbaWR4XSA9IHZhbHVlO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZXQgdXAgYSBoZWxwZXIgb2JqZWN0IHNvIHdlIGRvbid0IGhhdmUgdG8gdGhyb3dcclxuICAgIC8vIGEgdG9uIG9mIGluZm8gYmFjayBhbmQgZm9ydGggYmV0d2VlbiBzdWJmdW5jdGlvbnNcclxuICAgIGNvbnN0IHRyaWdnZXJIZWxwZXIgPSB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbEdldEhlbHBlcih0cmlnZ2VyLCBncm91cHMsIGN1cnJlbnRUaW1lKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuX29uVHJpZ2dlckludGVybmFsQ29uZGl0aW9uKHRyaWdnZXJIZWxwZXIpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxQcmVSdW4odHJpZ2dlckhlbHBlcik7XHJcblxyXG4gICAgLy8gRXZhbHVhdGUgZm9yIGRlbGF5IGhlcmUsIGJ1dCBydW4gZGVsYXkgbGF0ZXJcclxuICAgIGNvbnN0IGRlbGF5UHJvbWlzZSA9IHRoaXMuX29uVHJpZ2dlckludGVybmFsRGVsYXlTZWNvbmRzKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxEdXJhdGlvblNlY29uZHModHJpZ2dlckhlbHBlcik7XHJcbiAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbFN1cHByZXNzU2Vjb25kcyh0cmlnZ2VySGVscGVyKTtcclxuXHJcbiAgICBjb25zdCB0cmlnZ2VyUG9zdERlbGF5ID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBwcm9taXNlID0gdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxQcm9taXNlKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgICBjb25zdCB0cmlnZ2VyUG9zdFByb21pc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxTb3VuZCh0cmlnZ2VySGVscGVyKTtcclxuICAgICAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbFNvdW5kVm9sdW1lKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgICAgIHRoaXMuX29uVHJpZ2dlckludGVybmFsUmVzcG9uc2UodHJpZ2dlckhlbHBlcik7XHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxBbGFybVRleHQodHJpZ2dlckhlbHBlcik7XHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxBbGVydFRleHQodHJpZ2dlckhlbHBlcik7XHJcbiAgICAgICAgdGhpcy5fb25UcmlnZ2VySW50ZXJuYWxJbmZvVGV4dCh0cmlnZ2VySGVscGVyKTtcclxuXHJcbiAgICAgICAgLy8gUnVtYmxlIGlzbid0IGEgdHJpZ2dlciBmdW5jdGlvbiwgc28gb25seSBuZWVkcyB0byBiZSBvcmRlcmVkXHJcbiAgICAgICAgLy8gYWZ0ZXIgYWxhcm0vYWxlcnQvaW5mby5cclxuICAgICAgICB0aGlzLl9vblRyaWdnZXJJbnRlcm5hbFJ1bWJsZSh0cmlnZ2VySGVscGVyKTtcclxuXHJcbiAgICAgICAgLy8gUHJpb3JpdHkgYXVkaW8gb3JkZXI6XHJcbiAgICAgICAgLy8gKiB1c2VyIGRpc2FibGVkIChwbGF5IG5vdGhpbmcpXHJcbiAgICAgICAgLy8gKiBpZiB0dHMgb3B0aW9ucyBhcmUgZW5hYmxlZCBnbG9iYWxseSBvciBmb3IgdGhpcyB0cmlnZ2VyOlxyXG4gICAgICAgIC8vICAgKiB1c2VyIFRUUyB0cmlnZ2VycyB0dHMgb3ZlcnJpZGVcclxuICAgICAgICAvLyAgICogdHRzIGVudHJpZXMgaW4gdGhlIHRyaWdnZXJcclxuICAgICAgICAvLyAgICogZGVmYXVsdCBhbGFybSB0dHNcclxuICAgICAgICAvLyAgICogZGVmYXVsdCBhbGVydCB0dHNcclxuICAgICAgICAvLyAgICogZGVmYXVsdCBpbmZvIHR0c1xyXG4gICAgICAgIC8vICogaWYgc291bmQgb3B0aW9ucyBhcmUgZW5hYmxlZCBnbG9iYWxseSBvciBmb3IgdGhpcyB0cmlnZ2VyOlxyXG4gICAgICAgIC8vICAgKiB1c2VyIHRyaWdnZXIgc291bmQgb3ZlcnJpZGVzXHJcbiAgICAgICAgLy8gICAqIHNvdW5kIGVudHJpZXMgaW4gdGhlIHRyaWdnZXJcclxuICAgICAgICAvLyAgICogYWxhcm0gbm9pc2VcclxuICAgICAgICAvLyAgICogYWxlcnQgbm9pc2VcclxuICAgICAgICAvLyAgICogaW5mbyBub2lzZVxyXG4gICAgICAgIC8vICogZWxzZSwgbm90aGluZ1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gSW4gZ2VuZXJhbCwgdHRzIGNvbWVzIGJlZm9yZSBzb3VuZHMgYW5kIHVzZXIgb3ZlcnJpZGVzIGNvbWVcclxuICAgICAgICAvLyBiZWZvcmUgZGVmYXVsdHMuICBJZiBhIHVzZXIgdHJpZ2dlciBvciB0dHMgZW50cnkgaXMgc3BlY2lmaWVkIGFzXHJcbiAgICAgICAgLy8gYmVpbmcgdmFsaWQgYnV0IGVtcHR5LCB0aGlzIHdpbGwgdGFrZSBwcmlvcml0eSBvdmVyIHRoZSBkZWZhdWx0XHJcbiAgICAgICAgLy8gdHRzIHRleHRzIGZyb20gYWxhcm0vYWxlcnQvaW5mbyBhbmQgd2lsbCBwcmV2ZW50IHR0cyBmcm9tIHBsYXlpbmdcclxuICAgICAgICAvLyBhbmQgYWxsb3dpbmcgc291bmRzIHRvIGJlIHBsYXllZCBpbnN0ZWFkLlxyXG4gICAgICAgIHRoaXMuX29uVHJpZ2dlckludGVybmFsVFRTKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgICAgIHRoaXMuX29uVHJpZ2dlckludGVybmFsUGxheUF1ZGlvKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgICAgIHRoaXMuX29uVHJpZ2dlckludGVybmFsUnVuKHRyaWdnZXJIZWxwZXIpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gVGhlIHRyaWdnZXIgYm9keSBtdXN0IHJ1biBzeW5jaHJvbm91c2x5IHdoZW4gdGhlcmUgaXMgbm8gcHJvbWlzZS5cclxuICAgICAgaWYgKHByb21pc2UpXHJcbiAgICAgICAgcHJvbWlzZS50aGVuKHRyaWdnZXJQb3N0UHJvbWlzZSwgKGUpID0+IG9uVHJpZ2dlckV4Y2VwdGlvbih0cmlnZ2VyLCBlKSk7XHJcbiAgICAgIGVsc2VcclxuICAgICAgICB0cmlnZ2VyUG9zdFByb21pc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gVGhlIHRyaWdnZXIgYm9keSBtdXN0IHJ1biBzeW5jaHJvbm91c2x5IHdoZW4gdGhlcmUgaXMgbm8gZGVsYXkuXHJcbiAgICBpZiAoZGVsYXlQcm9taXNlKVxyXG4gICAgICBkZWxheVByb21pc2UudGhlbih0cmlnZ2VyUG9zdERlbGF5LCAoZSkgPT4gb25UcmlnZ2VyRXhjZXB0aW9uKHRyaWdnZXIsIGUpKTtcclxuICAgIGVsc2VcclxuICAgICAgdHJpZ2dlclBvc3REZWxheSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gQnVpbGQgYSBkZWZhdWx0IHRyaWdnZXJIZWxwZXIgb2JqZWN0IGZvciB0aGlzIHRyaWdnZXJcclxuICBfb25UcmlnZ2VySW50ZXJuYWxHZXRIZWxwZXIoXHJcbiAgICB0cmlnZ2VyOiBQcm9jZXNzZWRUcmlnZ2VyLFxyXG4gICAgbWF0Y2hlczogTWF0Y2hlcyxcclxuICAgIG5vdzogbnVtYmVyLFxyXG4gICk6IFRyaWdnZXJIZWxwZXIge1xyXG4gICAgY29uc3QgaWQgPSB0cmlnZ2VyLmlkO1xyXG4gICAgbGV0IG9wdGlvbnM6IFBlclRyaWdnZXJPcHRpb24gPSB7fTtcclxuICAgIGxldCBjb25maWc6IFRyaWdnZXJBdXRvQ29uZmlnID0ge307XHJcbiAgICBsZXQgc3VwcHJlc3NlZCA9IGZhbHNlO1xyXG4gICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5QZXJUcmlnZ2VyT3B0aW9uc1tpZF0gPz8gb3B0aW9ucztcclxuICAgICAgY29uZmlnID0gdGhpcy5vcHRpb25zLlBlclRyaWdnZXJBdXRvQ29uZmlnW2lkXSA/PyBjb25maWc7XHJcbiAgICAgIHN1cHByZXNzZWQgPSB0aGlzLm9wdGlvbnMuRGlzYWJsZWRUcmlnZ2Vyc1tpZF0gPz8gc3VwcHJlc3NlZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyID0ge1xyXG4gICAgICB0cmlnZ2VyOiB0cmlnZ2VyLFxyXG4gICAgICBub3c6IG5vdyxcclxuICAgICAgdHJpZ2dlck9wdGlvbnM6IG9wdGlvbnMsXHJcbiAgICAgIHRyaWdnZXJBdXRvQ29uZmlnOiBjb25maWcsXHJcbiAgICAgIC8vIFRoaXMgc2V0dGluZyBvbmx5IHN1cHByZXNzZXMgb3V0cHV0LCB0cmlnZ2VyIHN0aWxsIHJ1bnMgZm9yIGRhdGEvbG9naWMgcHVycG9zZXNcclxuICAgICAgdXNlclN1cHByZXNzZWRPdXRwdXQ6IHN1cHByZXNzZWQsXHJcbiAgICAgIG1hdGNoZXM6IG1hdGNoZXMsXHJcbiAgICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgICB0ZXh0QWxlcnRzRW5hYmxlZDogdGhpcy5vcHRpb25zLlRleHRBbGVydHNFbmFibGVkLFxyXG4gICAgICBzb3VuZEFsZXJ0c0VuYWJsZWQ6IHRoaXMub3B0aW9ucy5Tb3VuZEFsZXJ0c0VuYWJsZWQsXHJcbiAgICAgIHNwb2tlbkFsZXJ0c0VuYWJsZWQ6IHRoaXMub3B0aW9ucy5TcG9rZW5BbGVydHNFbmFibGVkLFxyXG4gICAgICBncm91cFNwb2tlbkFsZXJ0c0VuYWJsZWQ6IHRoaXMub3B0aW9ucy5Hcm91cFNwb2tlbkFsZXJ0c0VuYWJsZWQsXHJcbiAgICAgIHZhbHVlT3JGdW5jdGlvbjogKGY6IFJhaWRib3NzVHJpZ2dlckZpZWxkKTogUmFpZGJvc3NUcmlnZ2VyT3V0cHV0ID0+IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gZjtcclxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCh0aGlzLmRhdGEsIHRyaWdnZXJIZWxwZXIubWF0Y2hlcywgdHJpZ2dlckhlbHBlci5vdXRwdXQpO1xyXG4gICAgICAgIC8vIEFsbCB0cmlnZ2VycyByZXR1cm4gZWl0aGVyIGEgc3RyaW5nIGRpcmVjdGx5LCBvciBhbiBvYmplY3RcclxuICAgICAgICAvLyB3aG9zZSBrZXlzIGFyZSBkaWZmZXJlbnQgcGFyc2VyIGxhbmd1YWdlIGJhc2VkIG5hbWVzLiAgRm9yIHNpbXBsaWNpdHksXHJcbiAgICAgICAgLy8gdGhpcyBpcyB2YWxpZCB0byBkbyBmb3IgYW55IHRyaWdnZXIgZW50cnkgdGhhdCBjYW4gaGFuZGxlIGEgZnVuY3Rpb24uXHJcbiAgICAgICAgLy8gSW4gY2FzZSBhbnlib2R5IHdhbnRzIHRvIGVuY2Fwc3VsYXRlIGFueSBmYW5jeSBncmFtbWFyLCB0aGUgdmFsdWVzXHJcbiAgICAgICAgLy8gaW4gdGhpcyBvYmplY3QgY2FuIGFsc28gYmUgZnVuY3Rpb25zLlxyXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0JyB8fCByZXN1bHQgPT09IG51bGwpXHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbihyZXN1bHRbdGhpcy5kaXNwbGF5TGFuZ10gPz8gcmVzdWx0WydlbiddKTtcclxuICAgICAgfSxcclxuICAgICAgZ2V0IG91dHB1dCgpOiBPdXRwdXQge1xyXG4gICAgICAgIGlmICh0aGlzLnRyaWdnZXIub3V0cHV0KVxyXG4gICAgICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlci5vdXRwdXQ7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBNaXNzaW5nIHRyaWdnZXIub3V0cHV0IGZvciB0cmlnZ2VyICR7dHJpZ2dlci5pZCA/PyAnVW5rbm93bid9YCk7XHJcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRPdXRwdXQ7XHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX29uVHJpZ2dlckludGVybmFsSGVscGVyRGVmYXVsdHModHJpZ2dlckhlbHBlcik7XHJcblxyXG4gICAgcmV0dXJuIHRyaWdnZXJIZWxwZXI7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxDaGVja1N1cHByZXNzZWQodHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlciwgd2hlbjogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBpZCA9IHRyaWdnZXIuaWQ7XHJcbiAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBzdXBwcmVzcyA9IHRoaXMudHJpZ2dlclN1cHByZXNzW2lkXTtcclxuICAgICAgaWYgKHN1cHByZXNzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoc3VwcHJlc3MgPiB3aGVuKVxyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnRyaWdnZXJTdXBwcmVzc1tpZF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbENvbmRpdGlvbih0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjb25kaXRpb24gPSB0cmlnZ2VySGVscGVyLnRyaWdnZXJPcHRpb25zLkNvbmRpdGlvbiA/PyB0cmlnZ2VySGVscGVyLnRyaWdnZXIuY29uZGl0aW9uO1xyXG4gICAgLy8gSWYgdGhlIGNvbmRpdGlvbiBpcyBtaXNzaW5nIG9yIGhhcmRjb2RlZCBhcyBgdHJ1ZWBcclxuICAgIGlmIChjb25kaXRpb24gPT09IHVuZGVmaW5lZCB8fCBjb25kaXRpb24gPT09IHRydWUpXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgLy8gSWYgdGhlIGNvbmRpdGlvbiBpcyBoYXJkY29kZWQgYXMgYGZhbHNlYFxyXG4gICAgZWxzZSBpZiAoY29uZGl0aW9uID09PSBmYWxzZSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IGNvbmRpdGlvbkZ1bmNSZXR1cm4gPSBjb25kaXRpb24odGhpcy5kYXRhLCB0cmlnZ2VySGVscGVyLm1hdGNoZXMsIHRyaWdnZXJIZWxwZXIub3V0cHV0KTtcclxuICAgIGlmIChjb25kaXRpb25GdW5jUmV0dXJuID09PSB0cnVlKVxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIC8vIFRyZWF0IGFsbCBvdGhlciByZXR1cm4gdmFsdWVzIGFzIGZhbHNlICh1bmRlZmluZWQgfCBmYWxzZSlcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8vIFNldCBkZWZhdWx0cyBmb3IgdHJpZ2dlckhlbHBlciBvYmplY3QgKGFueXRoaW5nIHRoYXQgd29uJ3QgY2hhbmdlIGJhc2VkIG9uXHJcbiAgLy8gb3RoZXIgdHJpZ2dlciBmdW5jdGlvbnMgcnVubmluZylcclxuICBfb25UcmlnZ2VySW50ZXJuYWxIZWxwZXJEZWZhdWx0cyh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICAvLyBPcHRpb25zIHByaW9yaXR5OlxyXG4gICAgLy8gYmFja2NvbXBhdCB0cmlnZ2VyT3B0aW9ucyA+IHRyaWdnZXIgYXV0b2NvbmZpZyA+IHRyaWdnZXIgc2V0IGF1dG9jb25maWcgPiB0b3AgbGV2ZWwgb3B0aW9uXHJcbiAgICB0cmlnZ2VySGVscGVyLnRleHRBbGVydHNFbmFibGVkID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyT3B0aW9ucy5UZXh0QWxlcnQgPz9cclxuICAgICAgdHJpZ2dlckhlbHBlci50cmlnZ2VyQXV0b0NvbmZpZy5UZXh0QWxlcnRzRW5hYmxlZCA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXIudHJpZ2dlclNldEF1dG9Db25maWc/LlRleHRBbGVydHNFbmFibGVkID8/XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudGV4dEFsZXJ0c0VuYWJsZWQ7XHJcbiAgICB0cmlnZ2VySGVscGVyLnNvdW5kQWxlcnRzRW5hYmxlZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnMuU291bmRBbGVydCA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXJBdXRvQ29uZmlnLlNvdW5kQWxlcnRzRW5hYmxlZCA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXIudHJpZ2dlclNldEF1dG9Db25maWc/LlNvdW5kQWxlcnRzRW5hYmxlZCA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnNvdW5kQWxlcnRzRW5hYmxlZDtcclxuICAgIHRyaWdnZXJIZWxwZXIuc3Bva2VuQWxlcnRzRW5hYmxlZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnMuU3BlZWNoQWxlcnQgPz9cclxuICAgICAgdHJpZ2dlckhlbHBlci50cmlnZ2VyQXV0b0NvbmZpZy5TcG9rZW5BbGVydHNFbmFibGVkID8/XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHJpZ2dlci50cmlnZ2VyU2V0QXV0b0NvbmZpZz8uU3Bva2VuQWxlcnRzRW5hYmxlZCA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnNwb2tlbkFsZXJ0c0VuYWJsZWQ7XHJcblxyXG4gICAgLy8gTG9hZCBzZXR0aW5ncyBmcm9tIHRyaWdnZXJPcHRpb25zIGlmIHRoZXkncmUgc2V0XHJcbiAgICB0cmlnZ2VySGVscGVyLmdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnMuR3JvdXBTcGVlY2hBbGVydCA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLmdyb3VwU3Bva2VuQWxlcnRzRW5hYmxlZDtcclxuXHJcbiAgICAvLyBJZiB0aGUgdXNlciBoYXMgc3VwcHJlc3NlZCBhbGwgb3V0cHV0IGZvciB0aGUgdHJpZ2dlciwgcmVmbGVjdCB0aGF0IGhlcmVcclxuICAgIGlmICh0cmlnZ2VySGVscGVyLnVzZXJTdXBwcmVzc2VkT3V0cHV0KSB7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudGV4dEFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgdHJpZ2dlckhlbHBlci5zb3VuZEFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgdHJpZ2dlckhlbHBlci5zcG9rZW5BbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIHRyaWdnZXJIZWxwZXIuZ3JvdXBTcG9rZW5BbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhlIHVzZXIgaGFzIGRpc2FibGVkIGF1ZGlvIG91dHB1dCwgcmVmbGVjdCB0aGF0IGhlcmVcclxuICAgIGlmICghdGhpcy5vcHRpb25zLkF1ZGlvQWxsb3dlZCkge1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnNvdW5kQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnNwb2tlbkFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgdHJpZ2dlckhlbHBlci5ncm91cFNwb2tlbkFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFByZVJ1bih0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXI/LnByZVJ1bj8uKFxyXG4gICAgICB0aGlzLmRhdGEsXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIubWF0Y2hlcyxcclxuICAgICAgdHJpZ2dlckhlbHBlci5vdXRwdXQsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsRGVsYXlTZWNvbmRzKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiBQcm9taXNlPHZvaWQ+IHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IGRlbGF5ID0gJ2RlbGF5U2Vjb25kcycgaW4gdHJpZ2dlckhlbHBlci50cmlnZ2VyXHJcbiAgICAgID8gdHJpZ2dlckhlbHBlci52YWx1ZU9yRnVuY3Rpb24odHJpZ2dlckhlbHBlci50cmlnZ2VyLmRlbGF5U2Vjb25kcylcclxuICAgICAgOiAwO1xyXG4gICAgaWYgKHR5cGVvZiBkZWxheSAhPT0gJ251bWJlcicpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBhZGp1c3QgPSB0cmlnZ2VySGVscGVyLnRyaWdnZXJBdXRvQ29uZmlnLkRlbGF5QWRqdXN0ID8/IDA7XHJcbiAgICBjb25zdCBhZGp1c3RlZERlbGF5ID0gTWF0aC5tYXgoZGVsYXkgPz8gMCArIGFkanVzdCwgMCk7XHJcblxyXG4gICAgaWYgKGFkanVzdGVkRGVsYXkgPD0gMClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHRyaWdnZXJJRCA9IHRoaXMuY3VycmVudFRyaWdnZXJJRCsrO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xyXG4gICAgICB0aGlzLnRpbWVyc1t0cmlnZ2VySURdID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVyc1t0cmlnZ2VySURdKVxyXG4gICAgICAgICAgcmVzKCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgcmVqKG5ldyBFcnJvcignc3RvcHBlZCcpKTtcclxuICAgICAgICBkZWxldGUgdGhpcy50aW1lcnNbdHJpZ2dlcklEXTtcclxuICAgICAgfSwgYWRqdXN0ZWREZWxheSAqIDEwMDApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxEdXJhdGlvblNlY29uZHModHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgbGV0IHZhbHVlRHVyYXRpb24gPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIuZHVyYXRpb25TZWNvbmRzKTtcclxuICAgIGlmICh0eXBlb2YgdmFsdWVEdXJhdGlvbiAhPT0gJ251bWJlcicpXHJcbiAgICAgIHZhbHVlRHVyYXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICB0cmlnZ2VySGVscGVyLmR1cmF0aW9uID0ge1xyXG4gICAgICBmcm9tQ29uZmlnOiB0cmlnZ2VySGVscGVyLnRyaWdnZXJBdXRvQ29uZmlnLkR1cmF0aW9uLFxyXG4gICAgICBmcm9tVHJpZ2dlcjogdmFsdWVEdXJhdGlvbixcclxuICAgICAgYWxhcm1UZXh0OiB0aGlzLm9wdGlvbnMuRGlzcGxheUFsYXJtVGV4dEZvclNlY29uZHMsXHJcbiAgICAgIGFsZXJ0VGV4dDogdGhpcy5vcHRpb25zLkRpc3BsYXlBbGVydFRleHRGb3JTZWNvbmRzLFxyXG4gICAgICBpbmZvVGV4dDogdGhpcy5vcHRpb25zLkRpc3BsYXlJbmZvVGV4dEZvclNlY29uZHMsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsU3VwcHJlc3NTZWNvbmRzKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIGNvbnN0IHN1cHByZXNzID0gJ3N1cHByZXNzU2Vjb25kcycgaW4gdHJpZ2dlckhlbHBlci50cmlnZ2VyXHJcbiAgICAgID8gdHJpZ2dlckhlbHBlci52YWx1ZU9yRnVuY3Rpb24odHJpZ2dlckhlbHBlci50cmlnZ2VyLnN1cHByZXNzU2Vjb25kcylcclxuICAgICAgOiAwO1xyXG4gICAgaWYgKHR5cGVvZiBzdXBwcmVzcyAhPT0gJ251bWJlcicpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGlmICh0cmlnZ2VySGVscGVyLnRyaWdnZXIuaWQgIT09IHVuZGVmaW5lZCAmJiBzdXBwcmVzcyA+IDApXHJcbiAgICAgIHRoaXMudHJpZ2dlclN1cHByZXNzW3RyaWdnZXJIZWxwZXIudHJpZ2dlci5pZF0gPSB0cmlnZ2VySGVscGVyLm5vdyArIHN1cHByZXNzICogMTAwMDtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFByb21pc2UodHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQge1xyXG4gICAgbGV0IHByb21pc2U6IFByb21pc2U8dm9pZD4gfCB1bmRlZmluZWQ7XHJcbiAgICBpZiAoJ3Byb21pc2UnIGluIHRyaWdnZXJIZWxwZXIudHJpZ2dlcikge1xyXG4gICAgICBjb25zdCBpZCA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlci5pZCA/PyAnVW5rbm93bic7XHJcbiAgICAgIGlmICh0eXBlb2YgdHJpZ2dlckhlbHBlci50cmlnZ2VyLnByb21pc2UgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBwcm9taXNlID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyLnByb21pc2UoXHJcbiAgICAgICAgICB0aGlzLmRhdGEsXHJcbiAgICAgICAgICB0cmlnZ2VySGVscGVyLm1hdGNoZXMsXHJcbiAgICAgICAgICB0cmlnZ2VySGVscGVyLm91dHB1dCxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgYWN0dWFsbHkgZ2V0IGEgUHJvbWlzZSBiYWNrIGZyb20gdGhlIGZ1bmN0aW9uXHJcbiAgICAgICAgaWYgKFByb21pc2UucmVzb2x2ZShwcm9taXNlKSAhPT0gcHJvbWlzZSkge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihgVHJpZ2dlciAke2lkfTogcHJvbWlzZSBmdW5jdGlvbiBkaWQgbm90IHJldHVybiBhIHByb21pc2VgKTtcclxuICAgICAgICAgIHByb21pc2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFRyaWdnZXIgJHtpZH06IHByb21pc2UgZGVmaW5lZCBidXQgbm90IGEgZnVuY3Rpb25gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb21pc2U7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxTb3VuZCh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIuc291bmQpO1xyXG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKVxyXG4gICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVXJsID0gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsU291bmRWb2x1bWUodHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdHJpZ2dlckhlbHBlci52YWx1ZU9yRnVuY3Rpb24odHJpZ2dlckhlbHBlci50cmlnZ2VyLnNvdW5kVm9sdW1lKTtcclxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnbnVtYmVyJylcclxuICAgICAgdHJpZ2dlckhlbHBlci50cmlnZ2VyU291bmRWb2wgPSByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxSZXNwb25zZSh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICBsZXQgcmVzcG9uc2U6IFJlc3BvbnNlRmllbGQ8UmFpZGJvc3NEYXRhLCBNYXRjaGVzPiA9IHt9O1xyXG4gICAgY29uc3QgdHJpZ2dlciA9IHRyaWdnZXJIZWxwZXIudHJpZ2dlcjtcclxuICAgIGlmICh0cmlnZ2VyLnJlc3BvbnNlKSB7XHJcbiAgICAgIC8vIENhbid0IHVzZSBWYWx1ZU9yRnVuY3Rpb24gaGVyZSBhcyByIHJldHVybnMgYSBub24tbG9jYWxpemFibGUgb2JqZWN0LlxyXG4gICAgICByZXNwb25zZSA9IHRyaWdnZXIucmVzcG9uc2U7XHJcbiAgICAgIHdoaWxlICh0eXBlb2YgcmVzcG9uc2UgPT09ICdmdW5jdGlvbicpXHJcbiAgICAgICAgcmVzcG9uc2UgPSByZXNwb25zZSh0aGlzLmRhdGEsIHRyaWdnZXJIZWxwZXIubWF0Y2hlcywgdHJpZ2dlckhlbHBlci5vdXRwdXQpO1xyXG5cclxuICAgICAgLy8gVHVybiBmYWxzeSB2YWx1ZXMgaW50byBhIGRlZmF1bHQgbm8tb3AgcmVzcG9uc2UuXHJcbiAgICAgIGlmICghcmVzcG9uc2UpXHJcbiAgICAgICAgcmVzcG9uc2UgPSB7fTtcclxuICAgIH1cclxuICAgIHRyaWdnZXJIZWxwZXIucmVzcG9uc2UgPSByZXNwb25zZTtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbEFsYXJtVGV4dCh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9hZGRUZXh0Rm9yKCdhbGFybScsIHRyaWdnZXJIZWxwZXIpO1xyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsQWxlcnRUZXh0KHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuX2FkZFRleHRGb3IoJ2FsZXJ0JywgdHJpZ2dlckhlbHBlcik7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxJbmZvVGV4dCh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICB0aGlzLl9hZGRUZXh0Rm9yKCdpbmZvJywgdHJpZ2dlckhlbHBlcik7XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxSdW1ibGUodHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuUnVtYmxlRW5hYmxlZClcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIC8vIGdldEdhbWVwYWRzIHJldHVybnMgYSBcIkdhbWVQYWRMaXN0XCIgd2hpY2ggaXNuJ3QgaXRlcmFibGUuXHJcbiAgICBbLi4ubmF2aWdhdG9yLmdldEdhbWVwYWRzKCldLmZvckVhY2goKGdwKSA9PiB7XHJcbiAgICAgIC8vIFRoaXMgbGlzdCBhbHNvIGNvbnRhaW5zIG51bGxzIHNvIHRoYXQgdGhlIGdhbWVwYWQgaW5kZXggaXMgcHJlc2VydmVkLlxyXG4gICAgICBpZiAoIWdwKVxyXG4gICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgIC8vIGB2aWJyYXRpb25BY3R1YXRvcmAgaXMgc3VwcG9ydGVkIGluIENFRiBidXQgaXMgbm90IGluIHRoZSBzcGVjIHlldC5cclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgY29uc3QgZ2FtZXBhZDogYW55ID0gZ3A7XHJcblxyXG4gICAgICAvLyBGdXR1cmUgY2FsbHMgdG8gYHBsYXlFZmZlY3RgIHdpbGwgY3V0IG9mZiB0aGUgcHJldmlvdXMgZWZmZWN0LlxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbFxyXG4gICAgICB2b2lkIGdhbWVwYWQ/LnZpYnJhdGlvbkFjdHVhdG9yPy5wbGF5RWZmZWN0KGdhbWVwYWQudmlicmF0aW9uQWN0dWF0b3IudHlwZSwge1xyXG4gICAgICAgIHN0YXJ0RGVsYXk6IDAsXHJcbiAgICAgICAgZHVyYXRpb246IHRyaWdnZXJIZWxwZXIucnVtYmxlRHVyYXRpb25NcyxcclxuICAgICAgICB3ZWFrTWFnbml0dWRlOiB0cmlnZ2VySGVscGVyLnJ1bWJsZVdlYWssXHJcbiAgICAgICAgc3Ryb25nTWFnbml0dWRlOiB0cmlnZ2VySGVscGVyLnJ1bWJsZVN0cm9uZyxcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9vblRyaWdnZXJJbnRlcm5hbFRUUyh0cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyKTogdm9pZCB7XHJcbiAgICBpZiAoIXRyaWdnZXJIZWxwZXIuZ3JvdXBTcG9rZW5BbGVydHNFbmFibGVkIHx8IHR5cGVvZiB0cmlnZ2VySGVscGVyLnR0c1RleHQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIGxldCByZXN1bHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgIGlmICh0cmlnZ2VySGVscGVyLnRyaWdnZXJPcHRpb25zLlRUU1RleHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHRyaWdnZXJIZWxwZXIudmFsdWVPckZ1bmN0aW9uKHRyaWdnZXJIZWxwZXIudHJpZ2dlck9wdGlvbnMuVFRTVGV4dCk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlckhlbHBlci50cmlnZ2VyLnR0cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgLy8gQWxsb3cgbnVsbC9mYWxzZS9OYU4vMC8nJyBpbiB0aGlzIGJyYW5jaC5cclxuICAgICAgICByZXN1bHQgPSB0cmlnZ2VySGVscGVyLnZhbHVlT3JGdW5jdGlvbih0cmlnZ2VySGVscGVyLnRyaWdnZXIudHRzKTtcclxuICAgICAgfSBlbHNlIGlmICh0cmlnZ2VySGVscGVyLnJlc3BvbnNlKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcDogUmVzcG9uc2VGaWVsZDxSYWlkYm9zc0RhdGEsIE1hdGNoZXM+ID0gdHJpZ2dlckhlbHBlci5yZXNwb25zZTtcclxuICAgICAgICBpZiAocmVzcC50dHMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgIHJlc3VsdCA9IHRyaWdnZXJIZWxwZXIudmFsdWVPckZ1bmN0aW9uKHJlc3AudHRzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQWxsb3cgZmFsc2V5IHZhbHVlcyB0byBkaXNhYmxlIHR0cyBlbnRpcmVseVxyXG4gICAgICAvLyBVbmRlZmluZWQgd2lsbCBmYWxsIGJhY2sgdG8gZGVmYXVsdFRUU1RleHRcclxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zdHJpY3QtYm9vbGVhbi1leHByZXNzaW9uc1xyXG4gICAgICAgIGlmIChyZXN1bHQpXHJcbiAgICAgICAgICB0cmlnZ2VySGVscGVyLnR0c1RleHQgPSByZXN1bHQ/LnRvU3RyaW5nKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci5kZWZhdWx0VFRTVGV4dDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX29uVHJpZ2dlckludGVybmFsUGxheUF1ZGlvKHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIGlmIChcclxuICAgICAgdHJpZ2dlckhlbHBlci50cmlnZ2VyLnNvdW5kICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgdHJpZ2dlckhlbHBlci5zb3VuZFVybCAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgIHNvdW5kU3Rycy5pbmNsdWRlcyh0cmlnZ2VySGVscGVyLnNvdW5kVXJsKVxyXG4gICAgKSB7XHJcbiAgICAgIGNvbnN0IG5hbWVkU291bmQgPSBgJHt0cmlnZ2VySGVscGVyLnNvdW5kVXJsfVNvdW5kYDtcclxuICAgICAgY29uc3QgbmFtZWRTb3VuZFZvbHVtZSA9IGAke3RyaWdnZXJIZWxwZXIuc291bmRVcmx9U291bmRWb2x1bWVgO1xyXG4gICAgICBjb25zdCBzb3VuZCA9IHRoaXMub3B0aW9uc1tuYW1lZFNvdW5kXTtcclxuICAgICAgaWYgKHR5cGVvZiBzb3VuZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVXJsID0gc291bmQ7XHJcbiAgICAgICAgY29uc3Qgc291bmRWb2wgPSB0aGlzLm9wdGlvbnNbbmFtZWRTb3VuZFZvbHVtZV07XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VuZFZvbCA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVm9sID0gc291bmRWb2w7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0cmlnZ2VySGVscGVyLnNvdW5kVXJsID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyT3B0aW9ucy5Tb3VuZE92ZXJyaWRlID8/IHRyaWdnZXJIZWxwZXIuc291bmRVcmw7XHJcbiAgICB0cmlnZ2VySGVscGVyLnNvdW5kVm9sID0gdHJpZ2dlckhlbHBlci50cmlnZ2VyT3B0aW9ucy5Wb2x1bWVPdmVycmlkZSA/P1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnRyaWdnZXJTb3VuZFZvbCA/PyB0cmlnZ2VySGVscGVyLnNvdW5kVm9sO1xyXG5cclxuICAgIC8vIFRleHQgdG8gc3BlZWNoIG92ZXJyaWRlcyBhbGwgb3RoZXIgc291bmRzLiAgVGhpcyBpcyBzb1xyXG4gICAgLy8gdGhhdCBhIHVzZXIgd2hvIHByZWZlcnMgdHRzIGNhbiBzdGlsbCBnZXQgdGhlIGJlbmVmaXRcclxuICAgIC8vIG9mIGluZm9UZXh0IHRyaWdnZXJzIHdpdGhvdXQgdHRzIGVudHJpZXMgYnkgdHVybmluZ1xyXG4gICAgLy8gb24gKHNwZWVjaD10cnVlLCB0ZXh0PXRydWUsIHNvdW5kPXRydWUpIGJ1dCB0aGlzIHdpbGxcclxuICAgIC8vIG5vdCBjYXVzZSB0dHMgdG8gcGxheSBvdmVyIHRvcCBvZiBzb3VuZHMgb3Igbm9pc2VzLlxyXG4gICAgaWYgKHRyaWdnZXJIZWxwZXIudHRzVGV4dCAhPT0gdW5kZWZpbmVkICYmIHRyaWdnZXJIZWxwZXIuc3Bva2VuQWxlcnRzRW5hYmxlZCkge1xyXG4gICAgICAvLyBIZXVyaXN0aWNzIGZvciBhdXRvIHR0cy5cclxuICAgICAgLy8gKiBJbiBjYXNlIHRoaXMgaXMgYW4gaW50ZWdlci5cclxuICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci50dHNUZXh0LnRvU3RyaW5nKCk7XHJcbiAgICAgIC8vICogUmVtb3ZlIGEgYnVuY2ggb2YgY2hhcnMuXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHRzVGV4dCA9IHRyaWdnZXJIZWxwZXIudHRzVGV4dC5yZXBsYWNlKC9bIyFdL2csICcnKTtcclxuICAgICAgLy8gKiBzbGFzaGVzIGJldHdlZW4gbWVjaGFuaWNzXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIudHRzVGV4dCA9IHRyaWdnZXJIZWxwZXIudHRzVGV4dC5yZXBsYWNlKCcvJywgJyAnKTtcclxuICAgICAgLy8gKiB0aWxkZXMgYXQgdGhlIGVuZCBmb3IgZW1waGFzaXNcclxuICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci50dHNUZXh0LnJlcGxhY2UoL34rJC8sICcnKTtcclxuICAgICAgLy8gKiBhcnJvd3MgaGVscGluZyB2aXN1YWxseSBzaW1wbGUgdG8gdW5kZXJzdGFuZCBlLmcuIOKGliBGcm9udCBsZWZ0IC8gQmFjayByaWdodCDihphcclxuICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci50dHNUZXh0LnJlcGxhY2UoL1vihpYt4oaZXS9nLCAnJyk7XHJcbiAgICAgIC8vICogS29yZWFuIFRUUyByZWFkcyB3cm9uZyB3aXRoICcx67KI7Ke4J1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnR0c1RleHQgPSB0cmlnZ2VySGVscGVyLnR0c1RleHQucmVwbGFjZSgnMeuyiOynuCcsICfssqvrsojsp7gnKTtcclxuICAgICAgLy8gKiBhcnJvd3MgYXQgdGhlIGZyb250IG9yIHRoZSBlbmQgYXJlIGRpcmVjdGlvbnMsIGUuZy4gXCJlYXN0ID0+XCJcclxuICAgICAgdHJpZ2dlckhlbHBlci50dHNUZXh0ID0gdHJpZ2dlckhlbHBlci50dHNUZXh0LnJlcGxhY2UoL1stPV0+XFxzKiQvZywgJycpO1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnR0c1RleHQgPSB0cmlnZ2VySGVscGVyLnR0c1RleHQucmVwbGFjZSgvXlxccyo8Wy09XS9nLCAnJyk7XHJcbiAgICAgIC8vICogYXJyb3dzIGluIHRoZSBtaWRkbGUgYXJlIGEgc2VxdWVuY2UsIGUuZy4gXCJpbiA9PiBvdXQgPT4gc3ByZWFkXCJcclxuICAgICAgY29uc3QgYXJyb3dSZXBsYWNlbWVudCA9IHtcclxuICAgICAgICBlbjogJyB0aGVuICcsXHJcbiAgICAgICAgZGU6ICcgZGFubiAnLFxyXG4gICAgICAgIGZyOiAnIHB1aXMgJyxcclxuICAgICAgICBqYTogJ+OChCcsXHJcbiAgICAgICAgY246ICfnhLblkI4nLFxyXG4gICAgICAgIGtvOiAnIOq3uOumrOqzoCAnLFxyXG4gICAgICB9O1xyXG4gICAgICB0cmlnZ2VySGVscGVyLnR0c1RleHQgPSB0cmlnZ2VySGVscGVyLnR0c1RleHQucmVwbGFjZShcclxuICAgICAgICAvXFxzKig8Wy09XXxbPS1dPilcXHMqL2csXHJcbiAgICAgICAgYXJyb3dSZXBsYWNlbWVudFt0aGlzLmRpc3BsYXlMYW5nXSxcclxuICAgICAgKTtcclxuICAgICAgdGhpcy50dHNTYXkodHJpZ2dlckhlbHBlci50dHNUZXh0KTtcclxuICAgIH0gZWxzZSBpZiAodHJpZ2dlckhlbHBlci5zb3VuZFVybCAhPT0gdW5kZWZpbmVkICYmIHRyaWdnZXJIZWxwZXIuc291bmRBbGVydHNFbmFibGVkKSB7XHJcbiAgICAgIHRoaXMuX3BsYXlBdWRpb0ZpbGUodHJpZ2dlckhlbHBlciwgdHJpZ2dlckhlbHBlci5zb3VuZFVybCwgdHJpZ2dlckhlbHBlci5zb3VuZFZvbCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfb25UcmlnZ2VySW50ZXJuYWxSdW4odHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcik6IHZvaWQge1xyXG4gICAgdHJpZ2dlckhlbHBlci50cmlnZ2VyPy5ydW4/LihcclxuICAgICAgdGhpcy5kYXRhLFxyXG4gICAgICB0cmlnZ2VySGVscGVyLm1hdGNoZXMsXHJcbiAgICAgIHRyaWdnZXJIZWxwZXIub3V0cHV0LFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVUZXh0Rm9yKFxyXG4gICAgdHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlcixcclxuICAgIHRleHQ6IHN0cmluZyxcclxuICAgIHRleHRUeXBlOiBUZXh0LFxyXG4gICAgbG93ZXJUZXh0S2V5OiBUZXh0VGV4dCxcclxuICAgIGR1cmF0aW9uOiBudW1iZXIsXHJcbiAgKTogdm9pZCB7XHJcbiAgICAvLyBpbmZvLXRleHRcclxuICAgIGNvbnN0IHRleHRFbGVtZW50Q2xhc3MgPSBgJHt0ZXh0VHlwZX0tdGV4dGA7XHJcbiAgICBpZiAodGV4dFR5cGUgIT09ICdpbmZvJylcclxuICAgICAgdGV4dCA9IHRyaWdnZXJVcHBlckNhc2UodGV4dCk7XHJcblxyXG4gICAgY29uc3QgaG9sZGVyID0gdGhpc1tsb3dlclRleHRLZXldPy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdob2xkZXInKVswXTtcclxuICAgIGNvbnN0IGRpdiA9IHRoaXMuX21ha2VUZXh0RWxlbWVudCh0cmlnZ2VySGVscGVyLCB0ZXh0LCB0ZXh0RWxlbWVudENsYXNzKTtcclxuXHJcbiAgICBpZiAoIWhvbGRlcilcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG5cclxuICAgIGhvbGRlci5hcHBlbmRDaGlsZChkaXYpO1xyXG4gICAgaWYgKGhvbGRlci5jaGlsZHJlbi5sZW5ndGggPiB0aGlzLmtNYXhSb3dzT2ZUZXh0KVxyXG4gICAgICBob2xkZXIuZmlyc3RDaGlsZD8ucmVtb3ZlKCk7XHJcblxyXG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBpZiAoaG9sZGVyLmNvbnRhaW5zKGRpdikpXHJcbiAgICAgICAgaG9sZGVyLnJlbW92ZUNoaWxkKGRpdik7XHJcbiAgICB9LCBkdXJhdGlvbiAqIDEwMDApO1xyXG4gIH1cclxuXHJcbiAgX2FkZFRleHRGb3IodGV4dFR5cGU6IFRleHQsIHRyaWdnZXJIZWxwZXI6IFRyaWdnZXJIZWxwZXIpOiB2b2lkIHtcclxuICAgIC8vIGluZm9UZXh0XHJcbiAgICBjb25zdCBsb3dlclRleHRLZXkgPSB0ZXh0TWFwW3RleHRUeXBlXS50ZXh0O1xyXG4gICAgLy8gSW5mb1RleHRcclxuICAgIGNvbnN0IHVwcGVyVGV4dEtleSA9IHRleHRNYXBbdGV4dFR5cGVdLnVwcGVyVGV4dDtcclxuICAgIC8vIEluZm9Tb3VuZFxyXG4gICAgY29uc3QgdXBwZXJTb3VuZCA9IHRleHRNYXBbdGV4dFR5cGVdLnVwcGVyU291bmQ7XHJcbiAgICAvLyBJbmZvU291bmRWb2x1bWVcclxuICAgIGNvbnN0IHVwcGVyU291bmRWb2x1bWUgPSB0ZXh0TWFwW3RleHRUeXBlXS51cHBlclNvdW5kVm9sdW1lO1xyXG5cclxuICAgIGxldCB0ZXh0T2JqOiBSYWlkYm9zc1RyaWdnZXJPdXRwdXQgPSB0cmlnZ2VySGVscGVyLnRyaWdnZXJPcHRpb25zW3VwcGVyVGV4dEtleV07XHJcbiAgICBpZiAodGV4dE9iaiA9PT0gdW5kZWZpbmVkICYmIHRyaWdnZXJIZWxwZXIudHJpZ2dlcltsb3dlclRleHRLZXldICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHRleHRPYmogPSB0cmlnZ2VySGVscGVyLnRyaWdnZXJbbG93ZXJUZXh0S2V5XTtcclxuICAgIGlmICh0ZXh0T2JqID09PSB1bmRlZmluZWQgJiYgdHJpZ2dlckhlbHBlci5yZXNwb25zZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICB0ZXh0T2JqID0gdHJpZ2dlckhlbHBlci5yZXNwb25zZVtsb3dlclRleHRLZXldO1xyXG4gICAgaWYgKHRleHRPYmogPT09IHVuZGVmaW5lZCB8fCB0ZXh0T2JqID09PSBudWxsKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBsZXQgdGV4dCA9IHRyaWdnZXJIZWxwZXIudmFsdWVPckZ1bmN0aW9uKHRleHRPYmopO1xyXG4gICAgaWYgKHRleHQgPT09IHVuZGVmaW5lZCB8fCB0ZXh0ID09PSBudWxsKVxyXG4gICAgICByZXR1cm47XHJcbiAgICBpZiAodHlwZW9mIHRleHQgPT09ICdudW1iZXInKVxyXG4gICAgICB0ZXh0ID0gdGV4dC50b1N0cmluZygpO1xyXG4gICAgaWYgKHR5cGVvZiB0ZXh0ICE9PSAnc3RyaW5nJylcclxuICAgICAgdGV4dCA9IFN0cmluZyh0ZXh0KTtcclxuICAgIC8vIElnbm9yZSBlbXB0eSBzdHJpbmdzIHNvIHRoYXQgY29uZmlnIHVpIFwiYmxhbmsgc3BhY2VzXCIgYXJlIGlnbm9yZWQuXHJcbiAgICB0ZXh0ID0gdGV4dC50cmltKCk7XHJcbiAgICBpZiAodGV4dCA9PT0gJycpXHJcbiAgICAgIHJldHVybjtcclxuXHJcbiAgICB0cmlnZ2VySGVscGVyLmRlZmF1bHRUVFNUZXh0ID0gdHJpZ2dlckhlbHBlci5kZWZhdWx0VFRTVGV4dCA/PyB0ZXh0O1xyXG4gICAgaWYgKHRleHQgJiYgdHlwZW9mIHRleHQgPT09ICdzdHJpbmcnICYmIHRyaWdnZXJIZWxwZXIudGV4dEFsZXJ0c0VuYWJsZWQpIHtcclxuICAgICAgLy8gcGVyLXRyaWdnZXIgb3B0aW9uID4gdHJpZ2dlciBmaWVsZCA+IG9wdGlvbiBkdXJhdGlvbiBieSB0ZXh0IHR5cGVcclxuICAgICAgbGV0IGR1cmF0aW9uID0gdHJpZ2dlckhlbHBlci5kdXJhdGlvbj8uZnJvbUNvbmZpZyA/PyB0cmlnZ2VySGVscGVyLmR1cmF0aW9uPy5mcm9tVHJpZ2dlcjtcclxuICAgICAgaWYgKGR1cmF0aW9uID09PSB1bmRlZmluZWQgJiYgdHJpZ2dlckhlbHBlci5kdXJhdGlvbilcclxuICAgICAgICBkdXJhdGlvbiA9IHRyaWdnZXJIZWxwZXIuZHVyYXRpb25bbG93ZXJUZXh0S2V5XTtcclxuICAgICAgaWYgKGR1cmF0aW9uID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgZHVyYXRpb24gPSAwO1xyXG5cclxuICAgICAgdGhpcy5fY3JlYXRlVGV4dEZvcih0cmlnZ2VySGVscGVyLCB0ZXh0LCB0ZXh0VHlwZSwgbG93ZXJUZXh0S2V5LCBkdXJhdGlvbik7XHJcbiAgICAgIGlmICh0cmlnZ2VySGVscGVyLnNvdW5kVXJsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnNvdW5kVXJsID0gdGhpcy5vcHRpb25zW3VwcGVyU291bmRdO1xyXG4gICAgICAgIHRyaWdnZXJIZWxwZXIuc291bmRWb2wgPSB0aGlzLm9wdGlvbnNbdXBwZXJTb3VuZFZvbHVtZV07XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRyaWdnZXJIZWxwZXIucnVtYmxlRHVyYXRpb25NcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdHJpZ2dlckhlbHBlci5ydW1ibGVEdXJhdGlvbk1zID0gdGhpcy5vcHRpb25zW3RleHRNYXBbdGV4dFR5cGVdLnJ1bWJsZUR1cmF0aW9uXTtcclxuICAgICAgICB0cmlnZ2VySGVscGVyLnJ1bWJsZVdlYWsgPSB0aGlzLm9wdGlvbnNbdGV4dE1hcFt0ZXh0VHlwZV0ucnVtYmxlV2Vha107XHJcbiAgICAgICAgdHJpZ2dlckhlbHBlci5ydW1ibGVTdHJvbmcgPSB0aGlzLm9wdGlvbnNbdGV4dE1hcFt0ZXh0VHlwZV0ucnVtYmxlU3Ryb25nXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX21ha2VUZXh0RWxlbWVudChfdHJpZ2dlckhlbHBlcjogVHJpZ2dlckhlbHBlciwgdGV4dDogc3RyaW5nLCBjbGFzc05hbWU6IHN0cmluZyk6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdhbmltYXRlLXRleHQnKTtcclxuICAgIGRpdi5pbm5lclRleHQgPSB0ZXh0O1xyXG4gICAgcmV0dXJuIGRpdjtcclxuICB9XHJcblxyXG4gIF9wbGF5QXVkaW9GaWxlKF90cmlnZ2VySGVscGVyOiBUcmlnZ2VySGVscGVyLCB1cmw6IHN0cmluZywgdm9sdW1lPzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBhdWRpbyA9IG5ldyBBdWRpbyh1cmwpO1xyXG4gICAgYXVkaW8udm9sdW1lID0gdm9sdW1lID8/IDE7XHJcbiAgICB2b2lkIGF1ZGlvLnBsYXkoKTtcclxuICB9XHJcblxyXG4gIGdldERhdGFPYmplY3QoKTogUmFpZGJvc3NEYXRhIHtcclxuICAgIGxldCBwcmVzZXJ2ZUhQID0gMDtcclxuICAgIC8vIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIGluIHRoZSBjb25zdHJ1Y3RvciwgYmVmb3JlIGB0aGlzLmRhdGFgIGhhcyBiZWVuIHNldC5cclxuICAgIGlmICh0aGlzLmRhdGE/LmN1cnJlbnRIUClcclxuICAgICAgcHJlc2VydmVIUCA9IHRoaXMuZGF0YS5jdXJyZW50SFA7XHJcblxyXG4gICAgLy8gVE9ETzogbWFrZSBhIGJyZWFraW5nIGNoYW5nZSBhdCBzb21lIHBvaW50IGFuZFxyXG4gICAgLy8gbWFrZSBhbGwgdGhpcyBzdHlsZSBjb25zaXN0ZW50LCBzb3JyeS5cclxuICAgIGNvbnN0IGRhdGE6IFJhaWRib3NzRGF0YSA9IHtcclxuICAgICAgbWU6IHRoaXMubWUsXHJcbiAgICAgIGpvYjogdGhpcy5qb2IsXHJcbiAgICAgIHJvbGU6IHRoaXMucm9sZSxcclxuICAgICAgcGFydHk6IHRoaXMucGFydHlUcmFja2VyLFxyXG4gICAgICBsYW5nOiB0aGlzLnBhcnNlckxhbmcsXHJcbiAgICAgIHBhcnNlckxhbmc6IHRoaXMucGFyc2VyTGFuZyxcclxuICAgICAgZGlzcGxheUxhbmc6IHRoaXMuZGlzcGxheUxhbmcsXHJcbiAgICAgIGN1cnJlbnRIUDogcHJlc2VydmVIUCxcclxuICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxyXG4gICAgICBpbkNvbWJhdDogdGhpcy5pbkNvbWJhdCxcclxuICAgICAgdHJpZ2dlclNldENvbmZpZzogdGhpcy50cmlnZ2VyU2V0Q29uZmlnLFxyXG4gICAgICBTaG9ydE5hbWU6IChuYW1lPzogc3RyaW5nKSA9PiBVdGlsLnNob3J0TmFtZShuYW1lLCB0aGlzLm9wdGlvbnMuUGxheWVyTmlja3MpLFxyXG4gICAgICBTdG9wQ29tYmF0OiAoKSA9PiB0aGlzLlNldEluQ29tYmF0KGZhbHNlKSxcclxuICAgICAgUGFyc2VMb2NhbGVGbG9hdDogcGFyc2VGbG9hdCxcclxuICAgICAgQ2FuU3R1bjogKCkgPT4gVXRpbC5jYW5TdHVuKHRoaXMuam9iKSxcclxuICAgICAgQ2FuU2lsZW5jZTogKCkgPT4gVXRpbC5jYW5TaWxlbmNlKHRoaXMuam9iKSxcclxuICAgICAgQ2FuU2xlZXA6ICgpID0+IFV0aWwuY2FuU2xlZXAodGhpcy5qb2IpLFxyXG4gICAgICBDYW5DbGVhbnNlOiAoKSA9PiBVdGlsLmNhbkNsZWFuc2UodGhpcy5qb2IpLFxyXG4gICAgICBDYW5GZWludDogKCkgPT4gVXRpbC5jYW5GZWludCh0aGlzLmpvYiksXHJcbiAgICAgIENhbkFkZGxlOiAoKSA9PiBVdGlsLmNhbkFkZGxlKHRoaXMuam9iKSxcclxuICAgIH07XHJcblxyXG4gICAgbGV0IHRyaWdnZXJEYXRhID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBpbml0T2JqIG9mIHRoaXMuZGF0YUluaXRpYWxpemVycykge1xyXG4gICAgICBjb25zdCBpbml0ID0gaW5pdE9iai5mdW5jO1xyXG4gICAgICBjb25zdCBpbml0RGF0YSA9IGluaXQoKTtcclxuICAgICAgaWYgKHR5cGVvZiBpbml0RGF0YSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICB0cmlnZ2VyRGF0YSA9IHtcclxuICAgICAgICAgIC4uLnRyaWdnZXJEYXRhLFxyXG4gICAgICAgICAgLi4uaW5pdERhdGEsXHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgaW4gZmlsZTogJHtpbml0T2JqLmZpbGV9OiB0aGVzZSB0cmlnZ2VycyBtYXkgbm90IHdvcms7XHJcbiAgICAgICAgaW5pdERhdGEgZnVuY3Rpb24gcmV0dXJuZWQgaW52YWxpZCBvYmplY3Q6ICR7aW5pdC50b1N0cmluZygpfWApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgLi4udHJpZ2dlckRhdGEsIC4uLmRhdGEgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cFRleHRHZW5lcmF0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcG9wdXBUZXh0OiBQb3B1cFRleHQpIHtcclxuICB9XHJcblxyXG4gIEluZm8odGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnBvcHVwVGV4dC5PblRyaWdnZXIoXHJcbiAgICAgIHtcclxuICAgICAgICBpbmZvVGV4dDogdGV4dCxcclxuICAgICAgICB0dHM6IHRleHQsXHJcbiAgICAgIH0sXHJcbiAgICAgIG51bGwsXHJcbiAgICAgIGN1cnJlbnRUaW1lLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIEFsZXJ0KHRleHQ6IHN0cmluZywgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5wb3B1cFRleHQuT25UcmlnZ2VyKFxyXG4gICAgICB7XHJcbiAgICAgICAgYWxlcnRUZXh0OiB0ZXh0LFxyXG4gICAgICAgIHR0czogdGV4dCxcclxuICAgICAgfSxcclxuICAgICAgbnVsbCxcclxuICAgICAgY3VycmVudFRpbWUsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgQWxhcm0odGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnBvcHVwVGV4dC5PblRyaWdnZXIoXHJcbiAgICAgIHtcclxuICAgICAgICBhbGFybVRleHQ6IHRleHQsXHJcbiAgICAgICAgdHRzOiB0ZXh0LFxyXG4gICAgICB9LFxyXG4gICAgICBudWxsLFxyXG4gICAgICBjdXJyZW50VGltZSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBUVFModGV4dDogc3RyaW5nLCBjdXJyZW50VGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLnBvcHVwVGV4dC5PblRyaWdnZXIoXHJcbiAgICAgIHtcclxuICAgICAgICBpbmZvVGV4dDogdGV4dCxcclxuICAgICAgICB0dHM6IHRleHQsXHJcbiAgICAgIH0sXHJcbiAgICAgIG51bGwsXHJcbiAgICAgIGN1cnJlbnRUaW1lLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIFRyaWdnZXIodHJpZ2dlcjogUHJvY2Vzc2VkVHJpZ2dlciwgbWF0Y2hlczogUmVnRXhwRXhlY0FycmF5IHwgbnVsbCwgY3VycmVudFRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5wb3B1cFRleHQuT25UcmlnZ2VyKHRyaWdnZXIsIG1hdGNoZXMsIGN1cnJlbnRUaW1lKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaXNMYW5nLCBMYW5nIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL2xhbmd1YWdlcyc7XHJcbmltcG9ydCB7IGJ1aWxkTmV0UmVnZXhGb3JUcmlnZ2VyIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL25ldHJlZ2V4ZXMnO1xyXG5pbXBvcnQgeyBVbnJlYWNoYWJsZUNvZGUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvbm90X3JlYWNoZWQnO1xyXG5pbXBvcnQgUGFydHlUcmFja2VyIGZyb20gJy4uLy4uL3Jlc291cmNlcy9wYXJ0eSc7XHJcbmltcG9ydCBSZWdleGVzIGZyb20gJy4uLy4uL3Jlc291cmNlcy9yZWdleGVzJztcclxuaW1wb3J0IHsgdHJpZ2dlck91dHB1dEZ1bmN0aW9ucyB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9yZXNwb25zZXMnO1xyXG5pbXBvcnQgeyB0cmFuc2xhdGVSZWdleCwgdHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3RyYW5zbGF0aW9ucyc7XHJcbmltcG9ydCBVc2VyQ29uZmlnLCB7XHJcbiAgQ29uZmlnRW50cnksXHJcbiAgQ29uZmlnVmFsdWUsXHJcbiAgT3B0aW9uc1RlbXBsYXRlLFxyXG4gIFVzZXJGaWxlQ2FsbGJhY2ssXHJcbn0gZnJvbSAnLi4vLi4vcmVzb3VyY2VzL3VzZXJfY29uZmlnJztcclxuaW1wb3J0IHsgQmFzZU9wdGlvbnMsIFJhaWRib3NzRGF0YSB9IGZyb20gJy4uLy4uL3R5cGVzL2RhdGEnO1xyXG5pbXBvcnQgeyBTYXZlZENvbmZpZ0VudHJ5IH0gZnJvbSAnLi4vLi4vdHlwZXMvZXZlbnQnO1xyXG5pbXBvcnQgeyBKb2IsIFJvbGUgfSBmcm9tICcuLi8uLi90eXBlcy9qb2InO1xyXG5pbXBvcnQgeyBNYXRjaGVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvbmV0X21hdGNoZXMnO1xyXG5pbXBvcnQge1xyXG4gIExvY2FsZVRleHQsXHJcbiAgTG9vc2VUcmlnZ2VyLFxyXG4gIE91dHB1dCxcclxuICBPdXRwdXRTdHJpbmdzLFxyXG4gIFJhaWRib3NzRmlsZURhdGEsXHJcbiAgVGltZWxpbmVGaWVsZCxcclxuICBUcmlnZ2VyQXV0b0NvbmZpZyxcclxuICBUcmlnZ2VyU2V0QXV0b0NvbmZpZyxcclxufSBmcm9tICcuLi8uLi90eXBlcy90cmlnZ2VyJztcclxuaW1wb3J0IHtcclxuICBDYWN0Ym90Q29uZmlndXJhdG9yLFxyXG4gIENvbmZpZ0xvb3NlVHJpZ2dlcixcclxuICBDb25maWdMb29zZVRyaWdnZXJTZXQsXHJcbiAgQ29uZmlnUHJvY2Vzc2VkRmlsZU1hcCxcclxufSBmcm9tICcuLi9jb25maWcvY29uZmlnJztcclxuXHJcbmltcG9ydCByYWlkYm9zc0ZpbGVEYXRhIGZyb20gJy4vZGF0YS9yYWlkYm9zc19tYW5pZmVzdC50eHQnO1xyXG5pbXBvcnQgeyBSYWlkYm9zc1RyaWdnZXJGaWVsZCwgUmFpZGJvc3NUcmlnZ2VyT3V0cHV0IH0gZnJvbSAnLi9wb3B1cC10ZXh0JztcclxuaW1wb3J0IHJhaWRib3NzT3B0aW9ucywgeyBSYWlkYm9zc09wdGlvbnMgfSBmcm9tICcuL3JhaWRib3NzX29wdGlvbnMnO1xyXG5pbXBvcnQgeyBUaW1lbGluZVBhcnNlciB9IGZyb20gJy4vdGltZWxpbmVfcGFyc2VyJztcclxuXHJcbmNvbnN0IGtPcHRpb25LZXlzID0ge1xyXG4gIG91dHB1dDogJ091dHB1dCcsXHJcbiAgZHVyYXRpb246ICdEdXJhdGlvbicsXHJcbiAgYmVmb3JlU2Vjb25kczogJ0JlZm9yZVNlY29uZHMnLFxyXG4gIGRlbGF5QWRqdXN0OiAnRGVsYXlBZGp1c3QnLFxyXG4gIG91dHB1dFN0cmluZ3M6ICdPdXRwdXRTdHJpbmdzJyxcclxuICAvLyBmb2xkZXIgZm9yIGFsbCB0cmlnZ2VyIG9wdGlvbnNcclxuICB0cmlnZ2VyczogJ3RyaWdnZXJzJyxcclxuICAvLyBmb2xkZXIgZm9yIGFsbCB0cmlnZ2VyIHNldCBvcHRpb25zXHJcbiAgdHJpZ2dlclNldHM6ICd0cmlnZ2VyU2V0cycsXHJcbiAgLy8gZm9sZGVyIGZvciBvcHRpb25zIGluIHRyaWdnZXIgc2V0IGNvbmZpZyB1aVxyXG4gIHRyaWdnZXJTZXRDb25maWc6ICdUcmlnZ2VyU2V0Q29uZmlnJyxcclxufSBhcyBjb25zdDtcclxuXHJcbnR5cGUgVHJpZ2dlclNvdW5kT3B0aW9uID0ge1xyXG4gIGxhYmVsOiBMb2NhbGVUZXh0O1xyXG4gIGRlYnVnT25seT86IGJvb2xlYW47XHJcbn07XHJcblxyXG4vLyBObyBzb3VuZCBvbmx5IG9wdGlvbiwgYmVjYXVzZSB0aGF0J3Mgc2lsbHkuXHJcbmNvbnN0IGtUcmlnZ2VyT3B0aW9ucyA9IHtcclxuICBkZWZhdWx0OiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ+KclCBEZWZhdWx0cycsXHJcbiAgICAgIGRlOiAn4pyUIFN0YW5kYXJkcycsXHJcbiAgICAgIGZyOiAn4pyUIETDqWZhdXRzJyxcclxuICAgICAgamE6ICfinJQg5Yid5pyf6Kit5a6aJyxcclxuICAgICAgY246ICfinJQg6buY6K6k6K6+572uJyxcclxuICAgICAga286ICfinJQg6riw67O4JyxcclxuICAgIH0sXHJcbiAgfSxcclxuICB0ZXh0QW5kU291bmQ6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAn8J+GmfCflIogVGV4dCBhbmQgU291bmQnLFxyXG4gICAgICBkZTogJ/Cfhpnwn5SKIFRleHQgdW5kIFRvbicsXHJcbiAgICAgIGZyOiAn8J+GmfCflIogVGV4dGUgZXQgc29uJyxcclxuICAgICAgamE6ICfwn4aZ8J+UiiDjg4bjgq3jgrnjg4jjgajpn7Plo7AnLFxyXG4gICAgICBjbjogJ/Cfhpnwn5SKIOaWh+acrOaYvuekuuS4juaPkOekuumfsycsXHJcbiAgICAgIGtvOiAn8J+GmfCflIog7YWN7Iqk7Yq47JmAIOyGjOumrCcsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgdHRzQW5kVGV4dDoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICfwn4aZ8J+SrCBUZXh0IGFuZCBUVFMnLFxyXG4gICAgICBkZTogJ/Cfhpnwn5KsIFRleHQgdW5kIFRUUycsXHJcbiAgICAgIGZyOiAn8J+GmfCfkqwgVGV4dGUgZXQgVFRTJyxcclxuICAgICAgamE6ICfwn4aZ8J+SrCDjg4bjgq3jgrnjg4jjgahUVFMnLFxyXG4gICAgICBjbjogJ/Cfhpnwn5KsIOaWh+acrOaYvuekuuS4jlRUUycsXHJcbiAgICAgIGtvOiAn8J+GmfCfkqwg7YWN7Iqk7Yq47JmAIFRUUycsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgdHRzT25seToge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICfwn5KsIFRUUyBPbmx5JyxcclxuICAgICAgZGU6ICfwn5KsIE51ciBUVFMnLFxyXG4gICAgICBmcjogJ/CfkqwgVFRTIFNldWxlbWVudCcsXHJcbiAgICAgIGphOiAn8J+SrCBUVFPjga7jgb8nLFxyXG4gICAgICBjbjogJ/Cfkqwg5Y+q5L2/55SoVFRTJyxcclxuICAgICAga286ICfwn5KsIFRUU+unjCcsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgdGV4dE9ubHk6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAn8J+GmSBUZXh0IE9ubHknLFxyXG4gICAgICBkZTogJ/CfhpkgTnVyIFRleHQnLFxyXG4gICAgICBmcjogJ/CfhpkgVGV4dGUgc2V1bGVtZW50JyxcclxuICAgICAgamE6ICfwn4aZIOODhuOCreOCueODiOOBruOBvycsXHJcbiAgICAgIGNuOiAn8J+GmSDlj6rkvb/nlKjmlofmnKzmmL7npLonLFxyXG4gICAgICBrbzogJ/Cfhpkg7YWN7Iqk7Yq466eMJyxcclxuICAgIH0sXHJcbiAgfSxcclxuICBkaXNhYmxlZDoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICfinYwgRGlzYWJsZWQnLFxyXG4gICAgICBkZTogJ+KdjCBEZWFrdGl2aWVydCcsXHJcbiAgICAgIGZyOiAn4p2MIETDqXNhY3RpdsOpJyxcclxuICAgICAgamE6ICfinYwg54Sh5Yq5JyxcclxuICAgICAgY246ICfinYwg56aB55SoJyxcclxuICAgICAga286ICfinYwg67mE7Zmc7ISx7ZmUJyxcclxuICAgIH0sXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbmNvbnN0IHRyaWdnZXJTb3VuZE9wdGlvbnM6IHsgW2tleTogc3RyaW5nXTogVHJpZ2dlclNvdW5kT3B0aW9uIH0gPSBrVHJpZ2dlck9wdGlvbnM7XHJcblxyXG50eXBlIERldGFpbEtleSA9IHtcclxuICBsYWJlbDogTG9jYWxlVGV4dDtcclxuICBjbHM6IHN0cmluZztcclxuICBkZWJ1Z09ubHk/OiBib29sZWFuO1xyXG4gIGdlbmVyYXRlZE1hbnVhbGx5PzogYm9vbGVhbjtcclxufTtcclxuXHJcbmNvbnN0IGtEZXRhaWxLZXlzID0ge1xyXG4gICd0cmlnZ2VyUmVnZXgnOiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ3JlZ2V4JyxcclxuICAgICAgZGU6ICdyZWdleCcsXHJcbiAgICAgIGZyOiAncmVnZXgnLFxyXG4gICAgICBqYTogJ+ato+imj+ihqOePvicsXHJcbiAgICAgIGNuOiAn5q2j5YiZ6KGo6L6+5byPJyxcclxuICAgICAga286ICfsoJXqt5zsi50nLFxyXG4gICAgfSxcclxuICAgIGNsczogJ3JlZ2V4LXRleHQnLFxyXG4gICAgZGVidWdPbmx5OiB0cnVlLFxyXG4gIH0sXHJcbiAgJ3RyaWdnZXJOZXRSZWdleCc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAnbmV0cmVnZXgnLFxyXG4gICAgICBkZTogJ25ldHJlZ2V4JyxcclxuICAgICAgZnI6ICduZXRyZWdleCcsXHJcbiAgICAgIGphOiAn44ON44OD44OI5q2j6KaP6KGo54++JyxcclxuICAgICAgY246ICfnvZHnu5zml6Xlv5fmraPliJnooajovr7lvI8nLFxyXG4gICAgICBrbzogJ+ygleq3nO2RnO2YhOyLnScsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAncmVnZXgtdGV4dCcsXHJcbiAgICBkZWJ1Z09ubHk6IHRydWUsXHJcbiAgfSxcclxuICAndGltZWxpbmVSZWdleCc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAndGltZWxpbmUnLFxyXG4gICAgICBkZTogJ3RpbWVsaW5lJyxcclxuICAgICAgZnI6ICd0aW1lbGluZScsXHJcbiAgICAgIGphOiAn44K/44Kk44Og44Op44Kk44OzJyxcclxuICAgICAgY246ICfml7bpl7TovbQnLFxyXG4gICAgICBrbzogJ+2DgOyehOudvOyduCcsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAncmVnZXgtdGV4dCcsXHJcbiAgICBkZWJ1Z09ubHk6IHRydWUsXHJcbiAgfSxcclxuICAnYmVmb3JlU2Vjb25kcyc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAnYmVmb3JlIChzZWMpJyxcclxuICAgICAgZGU6ICdWb3JoZXIgKFNla3VuZGVuKScsXHJcbiAgICAgIGZyOiAnYXZhbnQgKHNlY29uZGUpJyxcclxuICAgICAgamE6ICfjgZ3jga7liY3jgasgKOenkiknLFxyXG4gICAgICBjbjogJ+aPkOWJjSAo56eSKScsXHJcbiAgICAgIGtvOiAn7JWe64u56rmAICjstIgpJyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdiZWZvcmUtc2Vjb25kcy10ZXh0JyxcclxuICAgIGdlbmVyYXRlZE1hbnVhbGx5OiB0cnVlLFxyXG4gIH0sXHJcbiAgJ2NvbmRpdGlvbic6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAnY29uZGl0aW9uJyxcclxuICAgICAgZGU6ICdjb25kaXRpb24nLFxyXG4gICAgICBmcjogJ2NvbmRpdGlvbicsXHJcbiAgICAgIGphOiAn5p2h5Lu2JyxcclxuICAgICAgY246ICfmnaHku7YnLFxyXG4gICAgICBrbzogJ+yhsOqxtCcsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAnY29uZGl0aW9uLXRleHQnLFxyXG4gICAgZGVidWdPbmx5OiB0cnVlLFxyXG4gIH0sXHJcbiAgJ2RlbGF5QWRqdXN0Jzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgLy8gTm90ZTogZGVsYXkgYWRqdXN0aW5nIGlzIGJvdGggZGFuZ2Vyb3VzIChkZWxheXMgY2FuIGJlIGZ1bmN0aW9uYWwgaW4gdGVybXMgb2ZcclxuICAgICAgLy8gbmVlZGluZyB0byBoYXBwZW4gYWZ0ZXIvYmVmb3JlIGEgcGFydGljdWxhciB0aW1lIHRvIGNvbGxlY3QgdGhlIHN0YXRlIG9mIHRoZSB3b3JsZClcclxuICAgICAgLy8gYXMgd2VsbCBhcyBjb25mdXNpbmcgKHlvdSBjYW4gYWRqdXN0IHNvbWUgYnV0IG5vdCBtYW55IHRoaW5ncyBuZWdhdGl2ZWx5IGFzXHJcbiAgICAgIC8vIGRlbGF5IGNhbid0IGdvIGJlbG93IHplcm8pLiBUaGVyZWZvcmUsIHRoaXMgaXMgYSBkZXZlbG9wZXIvZGVidWcgbW9kZSBvbmx5IGZvclxyXG4gICAgICAvLyBwZW9wbGUgd2hvIGtub3cgd2hhdCB0aGV5J3JlIGRvaW5nLlxyXG4gICAgICBlbjogJ0RFQlVHIGRlbGF5IGFkanVzdCAoc2VjKScsXHJcbiAgICAgIGRlOiAnREVCVUcgVmVyesO2Z2VydW5nc2VpbnN0ZWxsdW5nIChzZWMpJyxcclxuICAgICAgamE6ICdERUJVR+OBruW+heapn+iqv+aVtCAo56eSKScsXHJcbiAgICAgIGNuOiAnREVCVUcg5bu25pe26LCD5pW0ICjnp5IpJyxcclxuICAgICAga286ICdcIuuUlOuyhOq3uFwiIOuUnOugiOydtCDsobDsoIggKOy0iCknLFxyXG4gICAgfSxcclxuICAgIGNsczogJ2RlbGF5LWFkanVzdC10ZXh0JyxcclxuICAgIGdlbmVyYXRlZE1hbnVhbGx5OiB0cnVlLFxyXG4gICAgZGVidWdPbmx5OiB0cnVlLFxyXG4gIH0sXHJcbiAgJ2R1cmF0aW9uJzoge1xyXG4gICAgbGFiZWw6IHtcclxuICAgICAgZW46ICdkdXJhdGlvbiAoc2VjKScsXHJcbiAgICAgIGRlOiAnRGF1ZXIgKFNla3VuZGVuKScsXHJcbiAgICAgIGZyOiAnRHVyw6llIChzZWNvbmRlcyknLFxyXG4gICAgICBqYTogJ+WtmOe2muaZgumWkyAo56eSKScsXHJcbiAgICAgIGNuOiAn5pi+56S65pe26ZW/ICjnp5IpJyxcclxuICAgICAga286ICfsp4Dsho0g7Iuc6rCEICjstIgpJyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdkdXJhdGlvbi10ZXh0JyxcclxuICAgIGdlbmVyYXRlZE1hbnVhbGx5OiB0cnVlLFxyXG4gIH0sXHJcbiAgJ3ByZVJ1bic6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAncHJlUnVuJyxcclxuICAgICAgZGU6ICdwcmVSdW4nLFxyXG4gICAgICBmcjogJ3ByZVJ1bicsXHJcbiAgICAgIGphOiAn44OX44Os5a6f6KGMJyxcclxuICAgICAgY246ICfpooTov5DooYwnLFxyXG4gICAgICBrbzogJ+yCrOyghCDsi6TtloknLFxyXG4gICAgfSxcclxuICAgIGNsczogJ3ByZXJ1bi10ZXh0JyxcclxuICAgIGRlYnVnT25seTogdHJ1ZSxcclxuICB9LFxyXG4gICdhbGFybVRleHQnOiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ2FsYXJtJyxcclxuICAgICAgZGU6ICdhbGFybScsXHJcbiAgICAgIGZyOiAnYWxhcm1lJyxcclxuICAgICAgamE6ICforabloLEnLFxyXG4gICAgICBjbjogJ+iHtOWRvee6pycsXHJcbiAgICAgIGtvOiAn6rK96rOgJyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdhbGFybS10ZXh0JyxcclxuICB9LFxyXG4gICdhbGVydFRleHQnOiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ2FsZXJ0JyxcclxuICAgICAgZGU6ICdhbGVydCcsXHJcbiAgICAgIGZyOiAnYWxlcnRlJyxcclxuICAgICAgamE6ICforablkYonLFxyXG4gICAgICBjbjogJ+S4pemHjee6pycsXHJcbiAgICAgIGtvOiAn7KO87J2YJyxcclxuICAgIH0sXHJcbiAgICBjbHM6ICdhbGVydC10ZXh0JyxcclxuICB9LFxyXG4gICdpbmZvVGV4dCc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAnaW5mbycsXHJcbiAgICAgIGRlOiAnaW5mbycsXHJcbiAgICAgIGZyOiAnaW5mbycsXHJcbiAgICAgIGphOiAn5oOF5aCxJyxcclxuICAgICAgY246ICfkuIDoiKznuqcnLFxyXG4gICAgICBrbzogJ+yViOuCtCcsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAnaW5mby10ZXh0JyxcclxuICB9LFxyXG4gICd0dHMnOiB7XHJcbiAgICBsYWJlbDoge1xyXG4gICAgICBlbjogJ3R0cycsXHJcbiAgICAgIGRlOiAndHRzJyxcclxuICAgICAgZnI6ICd0dHMnLFxyXG4gICAgICBqYTogJ1RUUycsXHJcbiAgICAgIGNuOiAnVFRTJyxcclxuICAgICAga286ICdUVFMnLFxyXG4gICAgfSxcclxuICAgIGNsczogJ3R0cy10ZXh0JyxcclxuICB9LFxyXG4gICdzb3VuZCc6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAnc291bmQnLFxyXG4gICAgICBkZTogJ3NvdW5kJyxcclxuICAgICAgZnI6ICdzb24nLFxyXG4gICAgICBqYTogJ+mfs+WjsCcsXHJcbiAgICAgIGNuOiAn5o+Q56S66Z+zJyxcclxuICAgICAga286ICfshozrpqwnLFxyXG4gICAgfSxcclxuICAgIGNsczogJ3NvdW5kLXRleHQnLFxyXG4gIH0sXHJcbiAgJ3J1bic6IHtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgIGVuOiAncnVuJyxcclxuICAgICAgZGU6ICdydW4nLFxyXG4gICAgICBmcjogJ3J1bicsXHJcbiAgICAgIGphOiAn5a6f6KGMJyxcclxuICAgICAgY246ICfov5DooYwnLFxyXG4gICAgICBrbzogJ+yLpO2WiScsXHJcbiAgICB9LFxyXG4gICAgY2xzOiAncnVuLXRleHQnLFxyXG4gICAgZGVidWdPbmx5OiB0cnVlLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vLyBPcmRlcmVkIHNldCBvZiBoZWFkZXJzIGluIHRoZSB0aW1lbGluZSBlZGl0IHRhYmxlLlxyXG5jb25zdCBrVGltZWxpbmVUYWJsZUhlYWRlcnMgPSB7XHJcbiAgc2hvdWxkRGlzcGxheVRleHQ6IHtcclxuICAgIGVuOiAnU2hvdycsXHJcbiAgICBkZTogJ0FuemVpZ2VuJyxcclxuICAgIGZyOiAnQWZmaWNoZXInLFxyXG4gICAgamE6ICfooajnpLonLFxyXG4gICAgY246ICfmmL7npLonLFxyXG4gICAga286ICftkZzsi5wnLFxyXG4gIH0sXHJcbiAgdGV4dDoge1xyXG4gICAgZW46ICdUaW1lbGluZSBUZXh0JyxcclxuICAgIGRlOiAnVGltZWxpbmUgVGV4dCcsXHJcbiAgICBmcjogJ1RleHRlIGRlIGxhIHRpbWVsaW5lJyxcclxuICAgIGphOiAn44K/44Kk44Og44Op44Kk44Oz44OG44Kt44K544OIJyxcclxuICAgIGNuOiAn5pe26Ze06L205paH5pysJyxcclxuICAgIGtvOiAn7YOA7J6E65287J24IO2FjeyKpO2KuCcsXHJcbiAgfSxcclxuICBvdmVycmlkZVRleHQ6IHtcclxuICAgIGVuOiAnUmVuYW1lJyxcclxuICAgIGRlOiAnVW1iZW5lbm5lbicsXHJcbiAgICBmcjogJ1Jlbm9tbWVyJyxcclxuICAgIGphOiAn44OG44Kt44K544OI5aSJ5pu0JyxcclxuICAgIGNuOiAn5L+u5pS55paH5pysJyxcclxuICAgIGtvOiAn7YWN7Iqk7Yq4IOuzgOqyvScsXHJcbiAgfSxcclxufSBhcyBjb25zdDtcclxuXHJcbmNvbnN0IGRldGFpbEtleXM6IHsgW2tleSBpbiBrZXlvZiBMb29zZVRyaWdnZXJdOiBEZXRhaWxLZXkgfSA9IGtEZXRhaWxLZXlzO1xyXG5cclxuY29uc3Qga01pc2NUcmFuc2xhdGlvbnMgPSB7XHJcbiAgLy8gU2hvd3MgdXAgZm9yIHVuLXNldCB2YWx1ZXMuXHJcbiAgdmFsdWVEZWZhdWx0OiB7XHJcbiAgICBlbjogJyhkZWZhdWx0KScsXHJcbiAgICBkZTogJyhTdGFuZGFyZCknLFxyXG4gICAgZnI6ICcoRMOpZmF1dCknLFxyXG4gICAgamE6ICco5Yid5pyf5YCkKScsXHJcbiAgICBjbjogJyjpu5jorqTlgLwpJyxcclxuICAgIGtvOiAnKOq4sOuzuOqwkiknLFxyXG4gIH0sXHJcbiAgLy8gU2hvd24gd2hlbiB0aGUgVUkgY2FuJ3QgZGVjaXBoZXIgdGhlIG91dHB1dCBvZiBhIGZ1bmN0aW9uLlxyXG4gIHZhbHVlSXNGdW5jdGlvbjoge1xyXG4gICAgZW46ICcoZnVuY3Rpb24pJyxcclxuICAgIGRlOiAnKEZ1bmt0aW9uKScsXHJcbiAgICBmcjogJyhGb25jdGlvbiknLFxyXG4gICAgamE6ICco6Zai5pWwKScsXHJcbiAgICBjbjogJyjlh73mlbApJyxcclxuICAgIGtvOiAnKO2VqOyImCknLFxyXG4gIH0sXHJcbiAgLy8gV2FybmluZyBsYWJlbCBmb3IgdHJpZ2dlcnMgd2l0aG91dCBpZHMgb3Igb3ZlcnJpZGRlbiB0cmlnZ2Vycy5cclxuICB3YXJuaW5nOiB7XHJcbiAgICBlbjogJ+KaoO+4jyB3YXJuaW5nJyxcclxuICAgIGRlOiAn4pqg77iPIFdhcm51bmcnLFxyXG4gICAgZnI6ICfimqDvuI8gQXR0ZW50aW9uJyxcclxuICAgIGphOiAn4pqg77iPIOitpuWRiicsXHJcbiAgICBjbjogJ+KaoO+4jyDorablkYonLFxyXG4gICAga286ICfimqDvuI8g7KO87J2YJyxcclxuICB9LFxyXG4gIC8vIFNob3dzIHVwIGZvciB0cmlnZ2VycyB3aXRob3V0IGlkcy5cclxuICBtaXNzaW5nSWQ6IHtcclxuICAgIGVuOiAnbWlzc2luZyBpZCBmaWVsZCcsXHJcbiAgICBkZTogJ0ZlaGxlbmRlcyBJRCBGZWxkJyxcclxuICAgIGZyOiAnQ2hhbXAgSUQgbWFucXVhbnQnLFxyXG4gICAgamE6ICdpZOOBjOOBguOCiuOBvuOBm+OCkycsXHJcbiAgICBjbjogJ+e8uuWwkWlk5bGe5oCnJyxcclxuICAgIGtvOiAnSUQg7ZWE65Oc6rCSIOyXhuydjCcsXHJcbiAgfSxcclxuICAvLyBTaG93cyB1cCBmb3IgdHJpZ2dlcnMgdGhhdCBhcmUgb3ZlcnJpZGRlbiBieSBvdGhlciB0cmlnZ2Vycy5cclxuICBvdmVycmlkZGVuQnlGaWxlOiB7XHJcbiAgICBlbjogJ292ZXJyaWRkZW4gYnkgXCIke2ZpbGV9XCInLFxyXG4gICAgZGU6ICfDnGJlcnNjaHJpZWJlbiBkdXJjaCBcIiR7ZmlsZX1cIicsXHJcbiAgICBmcjogJ8OJY3Jhc8OpKGUpIHBhciBcIiR7ZmlsZX1cIicsXHJcbiAgICBqYTogJ1wiJHtmaWxlfVwi44Gr5LiK5pu444GN44G+44GX44GfJyxcclxuICAgIGNuOiAn6KKrXCIke2ZpbGV9XCLmlofku7bopobnm5YnLFxyXG4gICAga286ICdcIiR7ZmlsZX1cIiDtjIzsnbzsl5DshJwg642u7Ja07JSM7JuAJyxcclxuICB9LFxyXG4gIC8vIE9wZW5zIHRyaWdnZXIgZmlsZSBvbiBHaXRodWIuXHJcbiAgdmlld1RyaWdnZXJTb3VyY2U6IHtcclxuICAgIGVuOiAnVmlldyBUcmlnZ2VyIFNvdXJjZScsXHJcbiAgICBkZTogJ1plaWdlIFRyaWdnZXIgUXVlbGxlJyxcclxuICAgIGZyOiAnQWZmaWNoZXIgbGEgc291cmNlIGR1IFRyaWdnZXInLFxyXG4gICAgamE6ICfjg4jjg6rjgqzjg7zjga7jgrPjg7zjg4njgpLooajnpLonLFxyXG4gICAgY246ICfmmL7npLrop6blj5HlmajmupDnoIEnLFxyXG4gICAga286ICftirjrpqzqsbAg7IaM7Iqk7L2U65OcIOuztOq4sCcsXHJcbiAgfSxcclxuICAvLyBUaGUgaGVhZGVyIGZvciB0aGUgZWRpdGluZyB0aW1lbGluZSBzZWN0aW9uIGluc2lkZSBhIHRyaWdnZXIgZmlsZS5cclxuICBlZGl0VGltZWxpbmU6IHtcclxuICAgIGVuOiAnRWRpdCBUaW1lbGluZScsXHJcbiAgICBkZTogJ1RpbWVsaW5lIGJlYXJiZWl0ZW4nLFxyXG4gICAgZnI6ICfDiWRpdGVyIGxhIHRpbWVsaW5lJyxcclxuICAgIGphOiAn44K/44Kk44Og44Op44Kk44Oz44KS57eo6ZuGJyxcclxuICAgIGNuOiAn57yW6L6R5pe26Ze06L20JyxcclxuICAgIGtvOiAn7YOA7J6E65287J24IO2OuOynkScsXHJcbiAgfSxcclxuICAvLyBUaGUgaGVhZGVyIGluc2lkZSB0aGUgRWRpdCBUaW1lbGluZSBzZWN0aW9uIG9uIHRvcCBvZiB0aGUgcmVmZXJlbmNlIHRpbWVsaW5lIHRleHQuXHJcbiAgdGltZWxpbmVMaXN0aW5nOiB7XHJcbiAgICBlbjogJ1JlZmVyZW5jZSBUZXh0ICh1bmVkaXRhYmxlKScsXHJcbiAgICBkZTogJ1JlZmVyZW56dGV4dCAobmljaHQgZWRpdGllcmJhciknLFxyXG4gICAgZnI6ICdUZXh0ZSBkZSByw6lmw6lyZW5jZSAobm9uIMOpZGl0YWJsZSknLFxyXG4gICAgamE6ICflj4LogIPjgr/jgqTjg6Djg6njgqTjg7MgKOe3qOmbhuS4jeWPryknLFxyXG4gICAgY246ICflj4LogIPmlofmnKwgKOS4jeWPr+e8lui+kSknLFxyXG4gICAga286ICfsm5Drs7gg7YOA7J6E65287J24ICjsiJjsoJUg67aI6rCA64qlKScsXHJcbiAgfSxcclxuICAvLyBUaGUgaGVhZGVyIGluc2lkZSB0aGUgRWRpdCBUaW1lbGluZSBzZWN0aW9uIG9uIHRvcCBvZiB0aGUgYWRkIGVudHJpZXMgc2VjdGlvbi5cclxuICBhZGRDdXN0b21UaW1lbGluZUVudHJpZXM6IHtcclxuICAgIGVuOiAnQWRkIEN1c3RvbSBUaW1lbGluZSBFbnRyaWVzJyxcclxuICAgIGRlOiAnRWlnZW5lIFRpbWVsaW5lIEVpbnRyw6RnZSBoaW56dWbDvGdlbicsXHJcbiAgICBmcjogJ0Fqb3V0ZXIgdW5lIGVudHLDqWUgZGUgdGltZWxpbmUgcGVyc29ubmFsaXPDqWUnLFxyXG4gICAgamE6ICfjgqvjgrnjgr/jg57jgqTjgrrjgr/jgqTjg6Djg6njgqTjg7Pov73liqAnLFxyXG4gICAgY246ICfmt7vliqDoh6rlrprkuYnml7bpl7TovbTmnaHnm64nLFxyXG4gICAga286ICfsgqzsmqnsnpAg7KeA7KCVIO2DgOyehOudvOyduCDtla3rqqkg7LaU6rCAJyxcclxuICB9LFxyXG4gIC8vIFRoZSBidXR0b24gdGV4dCBmb3IgdGhlIEVkaXQgVGltZWxpbmUgYWRkIGVudHJpZXMgc2VjdGlvbi5cclxuICBhZGRNb3JlUm93czoge1xyXG4gICAgZW46ICdBZGQgbW9yZSByb3dzJyxcclxuICAgIGRlOiAnTWVociBSZWloZW4gaGluenVmw7xnZW4nLFxyXG4gICAgZnI6ICdBam91dGVyIHVuZSBsaWduZScsXHJcbiAgICBqYTogJ+ihjOi/veWKoCcsXHJcbiAgICBjbjogJ+a3u+WKoOabtOWkmuihjCcsXHJcbiAgICBrbzogJ+2WiSDstpTqsIAnLFxyXG4gIH0sXHJcbiAgY3VzdG9tRW50cnlUaW1lOiB7XHJcbiAgICBlbjogJ1RpbWUnLFxyXG4gICAgZGU6ICdaZWl0JyxcclxuICAgIGZyOiAnVGVtcHMnLFxyXG4gICAgamE6ICfmmYLplpMnLFxyXG4gICAgY246ICfml7bpl7QnLFxyXG4gICAga286ICfsi5zqsIQnLFxyXG4gIH0sXHJcbiAgY3VzdG9tRW50cnlUZXh0OiB7XHJcbiAgICBlbjogJ1RleHQnLFxyXG4gICAgZGU6ICdUZXh0JyxcclxuICAgIGZyOiAnVGV4dGUnLFxyXG4gICAgamE6ICfjg4bjgq3jgrnjg4gnLFxyXG4gICAgY246ICfmlofmnKwnLFxyXG4gICAga286ICfthY3siqTtirgnLFxyXG4gIH0sXHJcbiAgY3VzdG9tRW50cnlEdXJhdGlvbjoge1xyXG4gICAgZW46ICdEdXJhdGlvbiAoc2Vjb25kcyknLFxyXG4gICAgZGU6ICdEYXVlciAoU2VrdW5kZW4pJyxcclxuICAgIGZyOiAnRHVyw6llIChzKScsXHJcbiAgICBqYTogJ+aMgee2muaZgumWkyAo56eSKScsXHJcbiAgICBjbjogJ+aYvuekuuaXtumVvyAo56eSKScsXHJcbiAgICBrbzogJ+yngOyGjeyLnOqwhCAo7LSIKScsXHJcbiAgfSxcclxuICBjdXN0b21FbnRyeVJlbW92ZToge1xyXG4gICAgZW46ICdSZW1vdmUnLFxyXG4gICAgZGU6ICdFbnRmZXJuZW4nLFxyXG4gICAgZnI6ICdTdXBwcmltZXInLFxyXG4gICAgamE6ICfliYrpmaQnLFxyXG4gICAgY246ICfnp7vpmaQnLFxyXG4gICAga286ICfsgq3soJwnLFxyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCB2YWxpZER1cmF0aW9uT3JVbmRlZmluZWQgPSAodmFsRW50cnk/OiBTYXZlZENvbmZpZ0VudHJ5KSA9PiB7XHJcbiAgaWYgKHR5cGVvZiB2YWxFbnRyeSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbEVudHJ5ICE9PSAnbnVtYmVyJylcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgY29uc3QgdmFsID0gcGFyc2VGbG9hdCh2YWxFbnRyeS50b1N0cmluZygpKTtcclxuICBpZiAoIWlzTmFOKHZhbCkgJiYgdmFsID49IDApXHJcbiAgICByZXR1cm4gdmFsO1xyXG4gIHJldHVybiB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5jb25zdCB2YWxpZERlbGF5QWRqdXN0T3JVbmRlZmluZWQgPSAodmFsRW50cnk/OiBTYXZlZENvbmZpZ0VudHJ5KSA9PiB7XHJcbiAgaWYgKHR5cGVvZiB2YWxFbnRyeSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbEVudHJ5ICE9PSAnbnVtYmVyJylcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgY29uc3QgdmFsID0gcGFyc2VGbG9hdCh2YWxFbnRyeS50b1N0cmluZygpKTtcclxuICBpZiAoIWlzTmFOKHZhbCkpXHJcbiAgICByZXR1cm4gdmFsO1xyXG4gIHJldHVybiB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5jb25zdCBjYW5CZUNvbmZpZ3VyZWQgPSAodHJpZzogQ29uZmlnTG9vc2VUcmlnZ2VyKSA9PlxyXG4gICF0cmlnLmlzTWlzc2luZ0lkICYmIHRyaWcub3ZlcnJpZGRlbkJ5RmlsZSA9PT0gdW5kZWZpbmVkO1xyXG5cclxuY29uc3QgYWRkVHJpZ2dlckRldGFpbCA9IChcclxuICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxyXG4gIGxhYmVsVGV4dDogc3RyaW5nLFxyXG4gIGRldGFpbFRleHQ6IHN0cmluZyxcclxuICBkZXRhaWxDbHM/OiBzdHJpbmdbXSxcclxuKTogdm9pZCA9PiB7XHJcbiAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBsYWJlbC5pbm5lclRleHQgPSBsYWJlbFRleHQ7XHJcbiAgbGFiZWwuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1sYWJlbCcpO1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gIGNvbnN0IGRldGFpbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGRldGFpbC5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWRldGFpbCcpO1xyXG4gIGRldGFpbC5pbm5lclRleHQgPSBkZXRhaWxUZXh0O1xyXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkZXRhaWwpO1xyXG5cclxuICBpZiAoZGV0YWlsQ2xzKVxyXG4gICAgZGV0YWlsLmNsYXNzTGlzdC5hZGQoLi4uZGV0YWlsQ2xzKTtcclxufTtcclxuXHJcbi8vIFRoaXMgaXMgdXNlZCBib3RoIGZvciB0b3AgbGV2ZWwgT3B0aW9ucyBhbmQgZm9yIFBlclRyaWdnZXJBdXRvQ29uZmlnIHNldHRpbmdzLlxyXG4vLyBVbmZvcnR1bmF0ZWx5IGR1ZSB0byBwb29yIGRlY2lzaW9ucyBpbiB0aGUgcGFzdCwgUGVyVHJpZ2dlck9wdGlvbnMgaGFzIGRpZmZlcmVudFxyXG4vLyBmaWVsZHMgaGVyZS4gIFRoaXMgc2hvdWxkIGJlIGZpeGVkLlxyXG5jb25zdCBzZXRPcHRpb25zRnJvbU91dHB1dFZhbHVlID0gKFxyXG4gIHZhbHVlOiBTYXZlZENvbmZpZ0VudHJ5LFxyXG4gIG9wdGlvbnM6IEJhc2VPcHRpb25zIHwgVHJpZ2dlckF1dG9Db25maWcgfCBUcmlnZ2VyU2V0QXV0b0NvbmZpZyxcclxuKSA9PiB7XHJcbiAgaWYgKHZhbHVlID09PSAnZGVmYXVsdCcpIHtcclxuICAgIC8vIE5vdGhpbmcuXHJcbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3RleHRBbmRTb3VuZCcpIHtcclxuICAgIG9wdGlvbnMuVGV4dEFsZXJ0c0VuYWJsZWQgPSB0cnVlO1xyXG4gICAgb3B0aW9ucy5Tb3VuZEFsZXJ0c0VuYWJsZWQgPSB0cnVlO1xyXG4gICAgb3B0aW9ucy5TcG9rZW5BbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3R0c0FuZFRleHQnKSB7XHJcbiAgICBvcHRpb25zLlRleHRBbGVydHNFbmFibGVkID0gdHJ1ZTtcclxuICAgIG9wdGlvbnMuU291bmRBbGVydHNFbmFibGVkID0gdHJ1ZTtcclxuICAgIG9wdGlvbnMuU3Bva2VuQWxlcnRzRW5hYmxlZCA9IHRydWU7XHJcbiAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3R0c09ubHknKSB7XHJcbiAgICBvcHRpb25zLlRleHRBbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICBvcHRpb25zLlNvdW5kQWxlcnRzRW5hYmxlZCA9IHRydWU7XHJcbiAgICBvcHRpb25zLlNwb2tlbkFsZXJ0c0VuYWJsZWQgPSB0cnVlO1xyXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICd0ZXh0T25seScpIHtcclxuICAgIG9wdGlvbnMuVGV4dEFsZXJ0c0VuYWJsZWQgPSB0cnVlO1xyXG4gICAgb3B0aW9ucy5Tb3VuZEFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICAgIG9wdGlvbnMuU3Bva2VuQWxlcnRzRW5hYmxlZCA9IGZhbHNlO1xyXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICdkaXNhYmxlZCcpIHtcclxuICAgIG9wdGlvbnMuVGV4dEFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICAgIG9wdGlvbnMuU291bmRBbGVydHNFbmFibGVkID0gZmFsc2U7XHJcbiAgICBvcHRpb25zLlNwb2tlbkFsZXJ0c0VuYWJsZWQgPSBmYWxzZTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5lcnJvcihgdW5rbm93biBvdXRwdXQgdHlwZTogJHt2YWx1ZS50b1N0cmluZygpfWApO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEhlbHBlciBmb3IgZG9pbmcgbm90aGluZyBkdXJpbmcgdHJpZ2dlciBldmFsLCBidXQgc3RpbGwgcmVjb3JkaW5nIGFueVxyXG4vLyBjYWxscyB0byBgb3V0cHV0LnJlc3BvbnNlT3V0cHV0U3RyaW5ncyA9IHg7YCB2aWEgY2FsbGJhY2suXHJcbmNsYXNzIERvTm90aGluZ0Z1bmNQcm94eSB7XHJcbiAgY29uc3RydWN0b3Iob3V0cHV0U3RyaW5nc0NhbGxiYWNrOiAob3V0cHV0U3RyaW5nczogT3V0cHV0U3RyaW5ncykgPT4gdm9pZCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm94eSh0aGlzLCB7XHJcbiAgICAgIHNldChfdGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAocHJvcGVydHkgPT09ICdyZXNwb25zZU91dHB1dFN0cmluZ3MnKSB7XHJcbiAgICAgICAgICAvLyBUT0RPOiBuZWVkIHNvbWUgd2F5IG9mIHZlcmlmeWluZyB0aGF0IGEgdmFsdWUgaXMgYW4gT3V0cHV0U3RyaW5ncy5cclxuICAgICAgICAgIG91dHB1dFN0cmluZ3NDYWxsYmFjayh2YWx1ZSBhcyBPdXRwdXRTdHJpbmdzKTtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWdub3JlIG90aGVyIHByb3BlcnR5IHNldHRpbmcgaGVyZS5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBnZXQoX3RhcmdldCwgX25hbWUpIHtcclxuICAgICAgICByZXR1cm4gKCkgPT4gey8qIG5vb3AgKi99O1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBtYWtlTGluayA9IChocmVmOiBzdHJpbmcpID0+IHtcclxuICByZXR1cm4gYDxhIGhyZWY9XCIke2hyZWZ9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtocmVmfTwvYT5gO1xyXG59O1xyXG5cclxuY29uc3QgbGFuZ09yRW4gPSAobGFuZzogQ29uZmlnVmFsdWUpOiBMYW5nID0+IHtcclxuICByZXR1cm4gdHlwZW9mIGxhbmcgPT09ICdzdHJpbmcnICYmIGlzTGFuZyhsYW5nKSA/IGxhbmcgOiAnZW4nO1xyXG59O1xyXG5cclxuY2xhc3MgUmFpZGJvc3NDb25maWd1cmF0b3Ige1xyXG4gIHByaXZhdGUgYmFzZTogQ2FjdGJvdENvbmZpZ3VyYXRvcjtcclxuICBwcml2YXRlIGFsZXJ0c0xhbmc6IExhbmc7XHJcbiAgcHJpdmF0ZSB0aW1lbGluZUxhbmc6IExhbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhY3Rib3RDb25maWd1cmF0b3I6IENhY3Rib3RDb25maWd1cmF0b3IpIHtcclxuICAgIHRoaXMuYmFzZSA9IGNhY3Rib3RDb25maWd1cmF0b3I7XHJcblxyXG4gICAgLy8gVE9ETzogaXMgaXQgd29ydGggYWRkaW5nIHRoZSBjb21wbGV4aXR5IHRvIHJlZmxlY3QgdGhpcyBjaGFuZ2UgaW4gdHJpZ2dlcnMgdGhhdCB1c2UgaXQ/XHJcbiAgICAvLyBUaGlzIGlzIHByb2JhYmx5IHdoZXJlIHVzaW5nIHNvbWV0aGluZyBsaWtlIHZ1ZSBvciByZWFjdCB3b3VsZCBiZSBlYXNpZXIuXHJcbiAgICAvLyBGb3IgdGhlIG1vbWVudCwgZm9sa3MgY2FuIGp1c3QgcmVsb2FkLCBmb3IgcmVhbC5cclxuICAgIHRoaXMuYWxlcnRzTGFuZyA9IGxhbmdPckVuKHRoaXMuYmFzZS5nZXRPcHRpb24oJ3JhaWRib3NzJywgJ0FsZXJ0c0xhbmd1YWdlJywgdGhpcy5iYXNlLmxhbmcpKTtcclxuICAgIHRoaXMudGltZWxpbmVMYW5nID0gbGFuZ09yRW4oXHJcbiAgICAgIHRoaXMuYmFzZS5nZXRPcHRpb24oJ3JhaWRib3NzJywgJ1RpbWVsaW5lTGFuZ3VhZ2UnLCB0aGlzLmJhc2UubGFuZyksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRVSShjb250YWluZXI6IEhUTUxFbGVtZW50LCByYWlkYm9zc0ZpbGVzOiBSYWlkYm9zc0ZpbGVEYXRhLCB1c2VyT3B0aW9uczogUmFpZGJvc3NPcHRpb25zKSB7XHJcbiAgICBjb25zdCBmaWxlTWFwID0gdGhpcy5wcm9jZXNzUmFpZGJvc3NGaWxlcyhyYWlkYm9zc0ZpbGVzLCB1c2VyT3B0aW9ucyk7XHJcblxyXG4gICAgY29uc3QgZXhwYW5zaW9uRGl2czogeyBbZXhwYW5zaW9uOiBzdHJpbmddOiBIVE1MRWxlbWVudCB9ID0ge307XHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCBpbmZvXSBvZiBPYmplY3QuZW50cmllcyhmaWxlTWFwKSkge1xyXG4gICAgICAvLyBcImV4cGFuc2lvblwiIGhlcmUgaXMgdGVjaG5pY2FsbHkgc2VjdGlvbiwgd2hpY2ggaW5jbHVkZXMgXCJnZW5lcmFsIHRyaWdnZXJzXCJcclxuICAgICAgLy8gYW5kIG9uZSBzZWN0aW9uIHBlciB1c2VyIGZpbGUuXHJcbiAgICAgIGNvbnN0IGV4cGFuc2lvbiA9IGluZm8uc2VjdGlvbjtcclxuXHJcbiAgICAgIC8vIFRoaXMgaXNuJ3QgcGVyZmVjdCwgYnV0IHNraXAgdHJpZ2dlciBzZXRzIHRoYXQgYXJlIG5vLW9wcy5cclxuICAgICAgY29uc3QgaGFzVHJpZ2dlcnMgPSBPYmplY3Qua2V5cyhpbmZvLnRyaWdnZXJzID8/IFtdKS5sZW5ndGggIT09IDA7XHJcbiAgICAgIGNvbnN0IGhhc1RpbWVsaW5lID0gaW5mby50cmlnZ2VyU2V0LnRpbWVsaW5lICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgIGNvbnN0IGhhc1RyaWdnZXJTZXRDb25maWcgPSAoaW5mby50cmlnZ2VyU2V0LmNvbmZpZyA/PyBbXSkubGVuZ3RoID4gMDtcclxuICAgICAgaWYgKCFoYXNUcmlnZ2VycyAmJiAhaGFzVGltZWxpbmUgJiYgIWhhc1RyaWdnZXJTZXRDb25maWcpXHJcbiAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICBsZXQgZXhwYW5zaW9uRGl2ID0gZXhwYW5zaW9uRGl2c1tleHBhbnNpb25dO1xyXG4gICAgICBpZiAoIWV4cGFuc2lvbkRpdikge1xyXG4gICAgICAgIGNvbnN0IGV4cGFuc2lvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGV4cGFuc2lvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWV4cGFuc2lvbi1jb250YWluZXInLCAnY29sbGFwc2VkJyk7XHJcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGV4cGFuc2lvbkNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgIGNvbnN0IGV4cGFuc2lvbkhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGV4cGFuc2lvbkhlYWRlci5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWV4cGFuc2lvbi1oZWFkZXInKTtcclxuICAgICAgICBleHBhbnNpb25IZWFkZXIub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICAgIGV4cGFuc2lvbkNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdjb2xsYXBzZWQnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGV4cGFuc2lvbkhlYWRlci5pbm5lclRleHQgPSBleHBhbnNpb247XHJcbiAgICAgICAgZXhwYW5zaW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGV4cGFuc2lvbkhlYWRlcik7XHJcblxyXG4gICAgICAgIGV4cGFuc2lvbkRpdiA9IGV4cGFuc2lvbkRpdnNbZXhwYW5zaW9uXSA9IGV4cGFuc2lvbkNvbnRhaW5lcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgdHJpZ2dlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB0cmlnZ2VyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItZmlsZS1jb250YWluZXInLCAnY29sbGFwc2VkJyk7XHJcbiAgICAgIGV4cGFuc2lvbkRpdi5hcHBlbmRDaGlsZCh0cmlnZ2VyQ29udGFpbmVyKTtcclxuXHJcbiAgICAgIGNvbnN0IGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBoZWFkZXJEaXYuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1maWxlLWhlYWRlcicpO1xyXG4gICAgICBoZWFkZXJEaXYub25jbGljayA9ICgpID0+IHtcclxuICAgICAgICB0cmlnZ2VyQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ2NvbGxhcHNlZCcpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcGFydHMgPSBbaW5mby50aXRsZSwgaW5mby50eXBlLCBpbmZvLnByZWZpeF07XHJcbiAgICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xyXG4gICAgICAgIGlmIChwYXJ0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBjb25zdCBwYXJ0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcGFydERpdi5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWZpbGUtaGVhZGVyLXBhcnQnKTtcclxuICAgICAgICAvLyBVc2UgaW5uZXJIVE1MIGhlcmUgYmVjYXVzZSBvZiA8RW1waGFzaXM+V2hvcmxlYXRlcjwvRW1waGFzaXM+LlxyXG4gICAgICAgIHBhcnREaXYuaW5uZXJIVE1MID0gcGFydDtcclxuICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQocGFydERpdik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRyaWdnZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyRGl2KTtcclxuXHJcbiAgICAgIC8vIFRPRE86IHByaW50IGEgd2FybmluZyBpZiBjb25maWcgZXhpc3RzIHdpdGhvdXQgdHJpZ2dlcnNldCBpZD8/XHJcbiAgICAgIGlmIChpbmZvLnRyaWdnZXJTZXQuaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnN0IHRyaWdnZXJTZXRDb25maWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0cmlnZ2VyU2V0Q29uZmlnLmNsYXNzTGlzdC5hZGQoJ292ZXJsYXktb3B0aW9ucycpO1xyXG4gICAgICAgIHRyaWdnZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodHJpZ2dlclNldENvbmZpZyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRyaWdnZXJTZXRBbGVydE91dHB1dCA9IHtcclxuICAgICAgICAgIC4uLmRlZmF1bHRUcmlnZ2VyU2V0QWxlcnRPdXRwdXQsXHJcbiAgICAgICAgICBpZDoga09wdGlvbktleXMub3V0cHV0LFxyXG4gICAgICAgICAgZGVmYXVsdDogdGhpcy5iYXNlLmdldFN0cmluZ09wdGlvbihcclxuICAgICAgICAgICAgJ3JhaWRib3NzJyxcclxuICAgICAgICAgICAgZGVmYXVsdEFsZXJ0T3V0cHV0LmlkLFxyXG4gICAgICAgICAgICBkZWZhdWx0QWxlcnRPdXRwdXQuZGVmYXVsdC50b1N0cmluZygpLFxyXG4gICAgICAgICAgKSxcclxuICAgICAgICB9IGFzIGNvbnN0O1xyXG4gICAgICAgIHRoaXMuYmFzZS5idWlsZENvbmZpZ0VudHJ5KFxyXG4gICAgICAgICAgdXNlck9wdGlvbnMsXHJcbiAgICAgICAgICB0cmlnZ2VyU2V0Q29uZmlnLFxyXG4gICAgICAgICAgdHJpZ2dlclNldEFsZXJ0T3V0cHV0LFxyXG4gICAgICAgICAgJ3JhaWRib3NzJyxcclxuICAgICAgICAgIFtcclxuICAgICAgICAgICAga09wdGlvbktleXMudHJpZ2dlclNldHMsXHJcbiAgICAgICAgICAgIGluZm8udHJpZ2dlclNldC5pZCxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBvcHQgb2YgaW5mby50cmlnZ2VyU2V0LmNvbmZpZyA/PyBbXSkge1xyXG4gICAgICAgICAgaWYgKCF0aGlzLmJhc2UuZGV2ZWxvcGVyT3B0aW9ucyAmJiBvcHQuZGVidWdPbmx5KVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIHRoaXMuYmFzZS5idWlsZENvbmZpZ0VudHJ5KHVzZXJPcHRpb25zLCB0cmlnZ2VyU2V0Q29uZmlnLCBvcHQsICdyYWlkYm9zcycsIFtcclxuICAgICAgICAgICAga09wdGlvbktleXMudHJpZ2dlclNldENvbmZpZyxcclxuICAgICAgICAgICAgaW5mby50cmlnZ2VyU2V0LmlkLFxyXG4gICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUaW1lbGluZSBlZGl0aW5nIGlzIHRpZWQgdG8gYSBzaW5nbGUsIHNwZWNpZmljIHpvbmVJZCBwZXIgZmlsZSBmb3Igbm93LlxyXG4gICAgICAvLyBXZSBjb3VsZCBhZGQgbW9yZSBpbmRpcmVjdGlvbiAodmlhIGZpbGVLZXk/KSBhbmQgbG9vayB1cCB6b25lSWQgLT4gZmlsZUtleVtdXHJcbiAgICAgIC8vIGFuZCBmaWxlS2V5IC0+IHRpbWVsaW5lIGVkaXRzIGlmIG5lZWRlZC5cclxuICAgICAgaWYgKGluZm8udHJpZ2dlclNldC50aW1lbGluZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBpbmZvLnpvbmVJZCA9PT0gJ251bWJlcicpXHJcbiAgICAgICAgdGhpcy5idWlsZFRpbWVsaW5lVUlDb250YWluZXIoaW5mby56b25lSWQsIGluZm8udHJpZ2dlclNldCwgdHJpZ2dlckNvbnRhaW5lciwgdXNlck9wdGlvbnMpO1xyXG5cclxuICAgICAgY29uc3QgdHJpZ2dlck9wdGlvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdHJpZ2dlck9wdGlvbnMuY2xhc3NMaXN0LmFkZCgndHJpZ2dlci1maWxlLW9wdGlvbnMnKTtcclxuICAgICAgdHJpZ2dlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0cmlnZ2VyT3B0aW9ucyk7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IFt0cmlnSWQsIHRyaWddIG9mIE9iamVjdC5lbnRyaWVzKGluZm8udHJpZ2dlcnMgPz8ge30pKSB7XHJcbiAgICAgICAgLy8gRG9uJ3QgY29uc3RydWN0IHRyaWdnZXJzIHRoYXQgd29uJ3Qgc2hvdyBhbnl0aGluZy5cclxuICAgICAgICBsZXQgaGFzT3V0cHV0RnVuYyA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAoY29uc3QgZnVuYyBvZiB0cmlnZ2VyT3V0cHV0RnVuY3Rpb25zKSB7XHJcbiAgICAgICAgICBpZiAoZnVuYyBpbiB0cmlnKSB7XHJcbiAgICAgICAgICAgIGhhc091dHB1dEZ1bmMgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFoYXNPdXRwdXRGdW5jICYmICF0aGlzLmJhc2UuZGV2ZWxvcGVyT3B0aW9ucylcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBjb25zdCB0cmlnZ2VyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdHJpZ2dlckRpdi5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyJyk7XHJcblxyXG4gICAgICAgIC8vIEJ1aWxkIHRoZSB0cmlnZ2VyIGxhYmVsLlxyXG4gICAgICAgIGNvbnN0IHRyaWdnZXJJZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRyaWdnZXJJZC5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWlkJyk7XHJcbiAgICAgICAgdHJpZ2dlcklkLmlubmVySFRNTCA9IHRyaWcuaXNNaXNzaW5nSWQgPyAnKD8/PyknIDogdHJpZ0lkO1xyXG4gICAgICAgIHRyaWdnZXJJZC5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWlkJyk7XHJcbiAgICAgICAgdHJpZ2dlckRpdi5hcHBlbmRDaGlsZCh0cmlnZ2VySWQpO1xyXG5cclxuICAgICAgICAvLyBCdWlsZCB0aGUgdHJpZ2dlciBjb21tZW50XHJcbiAgICAgICAgaWYgKHRyaWcuY29tbWVudCkge1xyXG4gICAgICAgICAgY29uc3QgdHJpZ0NvbW1lbnQgPSB0cmlnLmNvbW1lbnRbdGhpcy5iYXNlLmxhbmddID8/IHRyaWcuY29tbWVudD8uZW4gPz8gJyc7XHJcbiAgICAgICAgICBjb25zdCB0cmlnZ2VyQ29tbWVudERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgdHJpZ2dlckNvbW1lbnREaXYuaW5uZXJIVE1MID0gdHJpZ0NvbW1lbnQ7XHJcbiAgICAgICAgICB0cmlnZ2VyQ29tbWVudERpdi5jbGFzc0xpc3QuYWRkKCdjb21tZW50Jyk7XHJcbiAgICAgICAgICB0cmlnZ2VyRGl2LmFwcGVuZENoaWxkKHRyaWdnZXJDb21tZW50RGl2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRyaWdnZXJPcHRpb25zLmFwcGVuZENoaWxkKHRyaWdnZXJEaXYpO1xyXG5cclxuICAgICAgICAvLyBDb250YWluZXIgZm9yIHRoZSByaWdodCBzaWRlIHVpIChzZWxlY3QgYm94ZXMsIGFsbCBvZiB0aGUgaW5mbykuXHJcbiAgICAgICAgY29uc3QgdHJpZ2dlckRldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0cmlnZ2VyRGV0YWlscy5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWRldGFpbHMnKTtcclxuICAgICAgICB0cmlnZ2VyT3B0aW9ucy5hcHBlbmRDaGlsZCh0cmlnZ2VyRGV0YWlscyk7XHJcblxyXG4gICAgICAgIGlmIChjYW5CZUNvbmZpZ3VyZWQodHJpZykpXHJcbiAgICAgICAgICB0cmlnZ2VyRGV0YWlscy5hcHBlbmRDaGlsZCh0aGlzLmJ1aWxkVHJpZ2dlck9wdGlvbnModHJpZywgdHJpZ2dlckRpdikpO1xyXG5cclxuICAgICAgICBpZiAodHJpZy5pc01pc3NpbmdJZCkge1xyXG4gICAgICAgICAgYWRkVHJpZ2dlckRldGFpbChcclxuICAgICAgICAgICAgdHJpZ2dlckRldGFpbHMsXHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMud2FybmluZyksXHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMubWlzc2luZ0lkKSxcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0cmlnLm92ZXJyaWRkZW5CeUZpbGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgY29uc3QgYmFzZVRleHQgPSB0aGlzLmJhc2UudHJhbnNsYXRlKGtNaXNjVHJhbnNsYXRpb25zLm92ZXJyaWRkZW5CeUZpbGUpO1xyXG4gICAgICAgICAgY29uc3QgZGV0YWlsVGV4dCA9IGJhc2VUZXh0LnJlcGxhY2UoJyR7ZmlsZX0nLCB0cmlnLm92ZXJyaWRkZW5CeUZpbGUpO1xyXG4gICAgICAgICAgYWRkVHJpZ2dlckRldGFpbChcclxuICAgICAgICAgICAgdHJpZ2dlckRldGFpbHMsXHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMud2FybmluZyksXHJcbiAgICAgICAgICAgIGRldGFpbFRleHQsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQXBwZW5kIHNvbWUgZGV0YWlscyBhYm91dCB0aGUgdHJpZ2dlciBzbyBpdCdzIG1vcmUgb2J2aW91cyB3aGF0IGl0IGlzLlxyXG4gICAgICAgIGZvciAoY29uc3QgW2RldGFpbFN0cmluZ0tleSwgb3B0XSBvZiBPYmplY3QuZW50cmllcyhkZXRhaWxLZXlzKSkge1xyXG4gICAgICAgICAgLy8gT2JqZWN0LmVudHJpZXMgY29lcmNlcyB0byBhIHN0cmluZywgYnV0IHRoZSBkZXRhaWxLZXlzIGRlZmluaXRpb24gbWFrZXMgdGhpcyB0cnVlLlxyXG4gICAgICAgICAgY29uc3QgZGV0YWlsS2V5ID0gZGV0YWlsU3RyaW5nS2V5IGFzIGtleW9mIExvb3NlVHJpZ2dlcjtcclxuXHJcbiAgICAgICAgICBpZiAob3B0LmdlbmVyYXRlZE1hbnVhbGx5KVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIGlmICghdGhpcy5iYXNlLmRldmVsb3Blck9wdGlvbnMgJiYgb3B0LmRlYnVnT25seSlcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICBjb25zdCB0cmlnT3V0cHV0ID0gdHJpZy5jb25maWdPdXRwdXQ/LltkZXRhaWxLZXldO1xyXG4gICAgICAgICAgY29uc3QgdHJpZ0Z1bmMgPSB0cmlnW2RldGFpbEtleV07XHJcbiAgICAgICAgICBpZiAodHJpZ0Z1bmMgPT09IHVuZGVmaW5lZCB8fCB0cmlnRnVuYyA9PT0gbnVsbClcclxuICAgICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgICAgY29uc3QgZGV0YWlsQ2xzID0gW29wdC5jbHNdO1xyXG4gICAgICAgICAgbGV0IGRldGFpbFRleHQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAgIGlmICh0cmlnT3V0cHV0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZGV0YWlsVGV4dCA9IHRyaWdPdXRwdXQ7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0cmlnRnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBkZXRhaWxUZXh0ID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShrTWlzY1RyYW5zbGF0aW9ucy52YWx1ZUlzRnVuY3Rpb24pO1xyXG4gICAgICAgICAgICBkZXRhaWxDbHMucHVzaCgnZnVuY3Rpb24tdGV4dCcpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGV0YWlsVGV4dCA9IHRyaWdGdW5jLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYWRkVHJpZ2dlckRldGFpbChcclxuICAgICAgICAgICAgdHJpZ2dlckRldGFpbHMsXHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS50cmFuc2xhdGUob3B0LmxhYmVsKSxcclxuICAgICAgICAgICAgZGV0YWlsVGV4dCxcclxuICAgICAgICAgICAgZGV0YWlsQ2xzLFxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghY2FuQmVDb25maWd1cmVkKHRyaWcpKVxyXG4gICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgIC8vIEFkZCBiZWZvcmVTZWNvbmRzIG1hbnVhbGx5IGZvciB0aW1lbGluZSB0cmlnZ2Vycy5cclxuICAgICAgICBpZiAodHJpZy5pc1RpbWVsaW5lVHJpZ2dlcikge1xyXG4gICAgICAgICAgY29uc3QgZGV0YWlsS2V5ID0gJ2JlZm9yZVNlY29uZHMnO1xyXG4gICAgICAgICAgY29uc3Qgb3B0aW9uS2V5ID0ga09wdGlvbktleXMuYmVmb3JlU2Vjb25kcztcclxuXHJcbiAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShrRGV0YWlsS2V5c1tkZXRhaWxLZXldLmxhYmVsKTtcclxuICAgICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItbGFiZWwnKTtcclxuICAgICAgICAgIHRyaWdnZXJEZXRhaWxzLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdvcHRpb24taW5wdXQtY29udGFpbmVyJywgJ3RyaWdnZXItYmVmb3JlLXNlY29uZHMnKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG4gICAgICAgICAgaW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgICAgIGlucHV0LnN0ZXAgPSAnYW55JztcclxuXHJcbiAgICAgICAgICAvLyBTYXkgXCIoZGVmYXVsdClcIiBmb3IgbW9yZSBjb21wbGljYXRlZCB0aGluZ3MgbGlrZSBmdW5jdGlvbnMuXHJcbiAgICAgICAgICBsZXQgZGVmYXVsdFZhbHVlID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShrTWlzY1RyYW5zbGF0aW9ucy52YWx1ZURlZmF1bHQpO1xyXG4gICAgICAgICAgaWYgKHRyaWcuYmVmb3JlU2Vjb25kcyA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSAnMCc7XHJcbiAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdHJpZy5iZWZvcmVTZWNvbmRzID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gdHJpZy5iZWZvcmVTZWNvbmRzLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICBpbnB1dC52YWx1ZSA9IHRoaXMuYmFzZS5nZXRTdHJpbmdPcHRpb24oJ3JhaWRib3NzJywgW1xyXG4gICAgICAgICAgICBrT3B0aW9uS2V5cy50cmlnZ2VycyxcclxuICAgICAgICAgICAgdHJpZ0lkLFxyXG4gICAgICAgICAgICBvcHRpb25LZXksXHJcbiAgICAgICAgICBdLCAnJyk7XHJcbiAgICAgICAgICBjb25zdCBzZXRGdW5jID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB2YWxpZER1cmF0aW9uT3JVbmRlZmluZWQoaW5wdXQudmFsdWUpIHx8ICcnO1xyXG4gICAgICAgICAgICB0aGlzLmJhc2Uuc2V0T3B0aW9uKCdyYWlkYm9zcycsIFtrT3B0aW9uS2V5cy50cmlnZ2VycywgdHJpZ0lkLCBvcHRpb25LZXldLCB2YWwpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGlucHV0Lm9uY2hhbmdlID0gc2V0RnVuYztcclxuICAgICAgICAgIGlucHV0Lm9uaW5wdXQgPSBzZXRGdW5jO1xyXG5cclxuICAgICAgICAgIHRyaWdnZXJEZXRhaWxzLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgZGVsYXkgYWRqdXN0IG1hbnVhbGx5LCBhcyB0aGlzIGlzbid0IGEgdHJpZ2dlciBmaWVsZC5cclxuICAgICAgICBpZiAodGhpcy5iYXNlLmRldmVsb3Blck9wdGlvbnMpIHtcclxuICAgICAgICAgIGNvbnN0IGRldGFpbEtleSA9ICdkZWxheUFkanVzdCc7XHJcbiAgICAgICAgICBjb25zdCBvcHRpb25LZXkgPSBrT3B0aW9uS2V5cy5kZWxheUFkanVzdDtcclxuXHJcbiAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShrRGV0YWlsS2V5c1tkZXRhaWxLZXldLmxhYmVsKTtcclxuICAgICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItbGFiZWwnKTtcclxuICAgICAgICAgIHRyaWdnZXJEZXRhaWxzLmFwcGVuZENoaWxkKGxhYmVsKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKCdvcHRpb24taW5wdXQtY29udGFpbmVyJywgJ3RyaWdnZXItZGVsYXktYWRqdXN0Jyk7XHJcblxyXG4gICAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgICAgICAgIGlucHV0LnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICBpbnB1dC5zdGVwID0gJ2FueSc7XHJcbiAgICAgICAgICBpbnB1dC5wbGFjZWhvbGRlciA9IGAwYDtcclxuICAgICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5iYXNlLmdldFN0cmluZ09wdGlvbigncmFpZGJvc3MnLCBbXHJcbiAgICAgICAgICAgIGtPcHRpb25LZXlzLnRyaWdnZXJzLFxyXG4gICAgICAgICAgICB0cmlnSWQsXHJcbiAgICAgICAgICAgIG9wdGlvbktleSxcclxuICAgICAgICAgIF0sICcnKTtcclxuICAgICAgICAgIGNvbnN0IHNldEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHZhbGlkRGVsYXlBZGp1c3RPclVuZGVmaW5lZChpbnB1dC52YWx1ZSkgfHwgJyc7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS5zZXRPcHRpb24oJ3JhaWRib3NzJywgW2tPcHRpb25LZXlzLnRyaWdnZXJzLCB0cmlnSWQsIG9wdGlvbktleV0sIHZhbCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBzZXRGdW5jO1xyXG4gICAgICAgICAgaW5wdXQub25pbnB1dCA9IHNldEZ1bmM7XHJcblxyXG4gICAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCBkdXJhdGlvbiBtYW51YWxseSB3aXRoIGFuIGlucHV0IHRvIG92ZXJyaWRlLlxyXG4gICAgICAgIGlmIChoYXNPdXRwdXRGdW5jKSB7XHJcbiAgICAgICAgICBjb25zdCBkZXRhaWxLZXkgPSAnZHVyYXRpb24nO1xyXG4gICAgICAgICAgY29uc3Qgb3B0aW9uS2V5ID0ga09wdGlvbktleXMuZHVyYXRpb247XHJcblxyXG4gICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgIGxhYmVsLmlubmVyVGV4dCA9IHRoaXMuYmFzZS50cmFuc2xhdGUoa0RldGFpbEtleXNbZGV0YWlsS2V5XS5sYWJlbCk7XHJcbiAgICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCd0cmlnZ2VyLWxhYmVsJyk7XHJcbiAgICAgICAgICB0cmlnZ2VyRGV0YWlscy5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZCgnb3B0aW9uLWlucHV0LWNvbnRhaW5lcicsICd0cmlnZ2VyLWR1cmF0aW9uJyk7XHJcblxyXG4gICAgICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgICAgZGl2LmFwcGVuZENoaWxkKGlucHV0KTtcclxuICAgICAgICAgIGlucHV0LnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICBpbnB1dC5zdGVwID0gJ2FueSc7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIHRyaWcuZHVyYXRpb25TZWNvbmRzID09PSAnbnVtYmVyJylcclxuICAgICAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSBgJHt0cmlnLmR1cmF0aW9uU2Vjb25kc31gO1xyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBpbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMudmFsdWVEZWZhdWx0KTtcclxuICAgICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5iYXNlLmdldFN0cmluZ09wdGlvbigncmFpZGJvc3MnLCBbXHJcbiAgICAgICAgICAgIGtPcHRpb25LZXlzLnRyaWdnZXJzLFxyXG4gICAgICAgICAgICB0cmlnSWQsXHJcbiAgICAgICAgICAgIG9wdGlvbktleSxcclxuICAgICAgICAgIF0sICcnKTtcclxuICAgICAgICAgIGNvbnN0IHNldEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHZhbGlkRHVyYXRpb25PclVuZGVmaW5lZChpbnB1dC52YWx1ZSkgfHwgJyc7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS5zZXRPcHRpb24oJ3JhaWRib3NzJywgW2tPcHRpb25LZXlzLnRyaWdnZXJzLCB0cmlnSWQsIG9wdGlvbktleV0sIHZhbCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBzZXRGdW5jO1xyXG4gICAgICAgICAgaW5wdXQub25pbnB1dCA9IHNldEZ1bmM7XHJcblxyXG4gICAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCBvdXRwdXQgc3RyaW5ncyBtYW51YWxseVxyXG4gICAgICAgIGNvbnN0IG91dHB1dFN0cmluZ3MgPSB0cmlnLm91dHB1dFN0cmluZ3MgfHwge307XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgb3V0cHV0U3RyaW5nXSBvZiBPYmplY3QuZW50cmllcyhvdXRwdXRTdHJpbmdzKSkge1xyXG4gICAgICAgICAgY29uc3Qgb3B0aW9uS2V5ID0ga09wdGlvbktleXMub3V0cHV0U3RyaW5ncztcclxuICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gdHlwZW9mIG91dHB1dFN0cmluZyA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBvdXRwdXRTdHJpbmdcclxuICAgICAgICAgICAgOiB0aGlzLmJhc2UudHJhbnNsYXRlKG91dHB1dFN0cmluZyk7XHJcblxyXG4gICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgIGxhYmVsLmlubmVyVGV4dCA9IGtleTtcclxuICAgICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItb3V0cHV0c3RyaW5nLWxhYmVsJyk7XHJcbiAgICAgICAgICB0cmlnZ2VyRGV0YWlscy5hcHBlbmRDaGlsZChsYWJlbCk7XHJcblxyXG4gICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICBkaXYuY2xhc3NMaXN0LmFkZCgnb3B0aW9uLWlucHV0LWNvbnRhaW5lcicsICd0cmlnZ2VyLW91dHB1dHN0cmluZycpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChpbnB1dCk7XHJcbiAgICAgICAgICBpbnB1dC50eXBlID0gJ3RleHQnO1xyXG4gICAgICAgICAgaW5wdXQucGxhY2Vob2xkZXIgPSB0ZW1wbGF0ZTtcclxuICAgICAgICAgIGlucHV0LnZhbHVlID0gdGhpcy5iYXNlLmdldFN0cmluZ09wdGlvbihcclxuICAgICAgICAgICAgJ3JhaWRib3NzJyxcclxuICAgICAgICAgICAgW2tPcHRpb25LZXlzLnRyaWdnZXJzLCB0cmlnSWQsIG9wdGlvbktleSwga2V5XSxcclxuICAgICAgICAgICAgJycsXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgY29uc3Qgc2V0RnVuYyA9ICgpID0+XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZS5zZXRPcHRpb24oXHJcbiAgICAgICAgICAgICAgJ3JhaWRib3NzJyxcclxuICAgICAgICAgICAgICBba09wdGlvbktleXMudHJpZ2dlcnMsIHRyaWdJZCwgb3B0aW9uS2V5LCBrZXldLFxyXG4gICAgICAgICAgICAgIGlucHV0LnZhbHVlLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgaW5wdXQub25jaGFuZ2UgPSBzZXRGdW5jO1xyXG4gICAgICAgICAgaW5wdXQub25pbnB1dCA9IHNldEZ1bmM7XHJcblxyXG4gICAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQobGFiZWwpO1xyXG5cclxuICAgICAgICBjb25zdCBwYXRoID0ga2V5LnNwbGl0KCctJyk7XHJcbiAgICAgICAgY29uc3QgW3AwLCBwMSwgcDJdID0gcGF0aDtcclxuICAgICAgICBpZiAocDAgIT09IHVuZGVmaW5lZCAmJiBwMSAhPT0gdW5kZWZpbmVkICYmIHAyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoJ29wdGlvbi1pbnB1dC1jb250YWluZXInLCAndHJpZ2dlci1zb3VyY2UnKTtcclxuICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSAnaHR0cHM6Ly9naXRodWIuY29tL3F1aXNxdW91cy9jYWN0Ym90L2Jsb2IvdHJpZ2dlcnMnO1xyXG4gICAgICAgICAgbGV0IHVybEZpbGVwYXRoO1xyXG4gICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAzKSB7XHJcbiAgICAgICAgICAgIC8vIDAwLW1pc2MvZ2VuZXJhbC5qc1xyXG4gICAgICAgICAgICB1cmxGaWxlcGF0aCA9IGAke3AwfS0ke3AxfS8ke1suLi5wYXRoXS5zbGljZSgyKS5qb2luKCctJyl9YDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIDAyLWFyci9yYWlkcy90MS5qc1xyXG4gICAgICAgICAgICB1cmxGaWxlcGF0aCA9IGAke3AwfS0ke3AxfS8ke3AyfS8ke1suLi5wYXRoXS5zbGljZSgzKS5qb2luKCctJyl9YDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnN0IGVzY2FwZWRUcmlnZ2VySWQgPSB0cmlnSWQucmVwbGFjZSgvJy9nLCAnXFxcXFxcJycpO1xyXG4gICAgICAgICAgY29uc3QgdXJpQ29tcG9uZW50ID0gZW5jb2RlVVJJQ29tcG9uZW50KGBpZDogJyR7ZXNjYXBlZFRyaWdnZXJJZH0nYCkucmVwbGFjZSgvJy9nLCAnJTI3Jyk7XHJcbiAgICAgICAgICBjb25zdCB1cmxTdHJpbmcgPSBgJHtiYXNlVXJsfS8ke3VybEZpbGVwYXRofS5qcyM6fjp0ZXh0PSR7dXJpQ29tcG9uZW50fWA7XHJcbiAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gYDxhIGhyZWY9XCIke3VybFN0cmluZ31cIiB0YXJnZXQ9XCJfYmxhbmtcIj4oJHtcclxuICAgICAgICAgICAgdGhpcy5iYXNlLnRyYW5zbGF0ZShrTWlzY1RyYW5zbGF0aW9ucy52aWV3VHJpZ2dlclNvdXJjZSlcclxuICAgICAgICAgIH0pPC9hPmA7XHJcblxyXG4gICAgICAgICAgdHJpZ2dlckRldGFpbHMuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEJ1aWxkIHRoZSB0b3AgbGV2ZWwgdGltZWxpbmUgZWRpdGluZyBleHBhbmRhYmxlIGNvbnRhaW5lci5cclxuICBidWlsZFRpbWVsaW5lVUlDb250YWluZXIoXHJcbiAgICB6b25lSWQ6IG51bWJlcixcclxuICAgIHNldDogQ29uZmlnTG9vc2VUcmlnZ2VyU2V0LFxyXG4gICAgcGFyZW50OiBIVE1MRWxlbWVudCxcclxuICAgIG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucyxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3RpbWVsaW5lLWVkaXQtY29udGFpbmVyJywgJ2NvbGxhcHNlZCcpO1xyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcblxyXG4gICAgbGV0IGhhc0V2ZXJCZWVuRXhwYW5kZWQgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdCBoZWFkZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGhlYWRlckRpdi5jbGFzc0xpc3QuYWRkKCd0aW1lbGluZS1lZGl0LWhlYWRlcicpO1xyXG4gICAgaGVhZGVyRGl2Lm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdjb2xsYXBzZWQnKTtcclxuICAgICAgLy8gQnVpbGQgdGhlIHJlc3Qgb2YgdGhpcyBVSSBvbiBkZW1hbmQgbGF6aWx5LlxyXG4gICAgICBpZiAoIWhhc0V2ZXJCZWVuRXhwYW5kZWQpIHtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy50aW1lbGluZVRleHRGcm9tU2V0KHNldCk7XHJcbiAgICAgICAgY29uc3QgdGltZWxpbmUgPSBuZXcgVGltZWxpbmVQYXJzZXIodGV4dCwgc2V0LnRpbWVsaW5lUmVwbGFjZSA/PyBbXSwgW10sIFtdLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLmJ1aWxkVGltZWxpbmVMaXN0aW5nVUkodGltZWxpbmUsIHRleHQsIGNvbnRhaW5lcik7XHJcbiAgICAgICAgdGhpcy5idWlsZFRpbWVsaW5lQWRkVUkoem9uZUlkLCBjb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuYnVpbGRUaW1lbGluZVRleHRVSSh6b25lSWQsIHRpbWVsaW5lLCBjb250YWluZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIGhhc0V2ZXJCZWVuRXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgfTtcclxuICAgIGhlYWRlckRpdi5pbm5lclRleHQgPSB0aGlzLmJhc2UudHJhbnNsYXRlKGtNaXNjVHJhbnNsYXRpb25zLmVkaXRUaW1lbGluZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyRGl2KTtcclxuICB9XHJcblxyXG4gIHRpbWVsaW5lVGV4dEZyb21TZXQoc2V0OiBDb25maWdMb29zZVRyaWdnZXJTZXQpOiBzdHJpbmcge1xyXG4gICAgbGV0IHRleHQgPSAnJztcclxuXHJcbiAgICAvLyBSZWN1cnNpdmVseSB0dXJuIHRoZSB0aW1lbGluZSBhcnJheSBpbnRvIGEgc3RyaW5nLlxyXG4gICAgY29uc3QgYWRkVGltZWxpbmUgPSAob2JqPzogVGltZWxpbmVGaWVsZCkgPT4ge1xyXG4gICAgICBpZiAob2JqID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBvYmpWYWwgb2Ygb2JqKVxyXG4gICAgICAgICAgYWRkVGltZWxpbmUob2JqVmFsKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLy8gSGFjaywgcGFzcyBibGFuayBkYXRhIGluLCBhcyB3ZSBkb24ndCBoYXZlIGEgcmVhbCBkYXRhIGhlcmUuXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9jb25zaXN0ZW50LXR5cGUtYXNzZXJ0aW9uc1xyXG4gICAgICAgIGNvbnN0IGJsYW5rRGF0YTogUmFpZGJvc3NEYXRhID0ge30gYXMgUmFpZGJvc3NEYXRhO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBhZGRUaW1lbGluZShvYmooYmxhbmtEYXRhKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgLy8gRG8gbm90aGluZyBpZiB0aGlzIGZhaWxzLlxyXG4gICAgICAgICAgLy8gRnVuY3Rpb25zIGFyZSBwcmV0dHkgdW5jb21tb24gaW4gYnVpbHQtaW4gdGltZWxpbmVzLlxyXG4gICAgICAgICAgLy8gSWYgdXNlciBmdW5jdGlvbnMgZG8gZnVua3kgdGhpbmdzLCB0aG9zZSBleHRyYSBsaW5lcyB3aWxsIGJlIHNraXBwZWQuXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGV4dCA9IGAke3RleHR9XFxuJHtvYmp9YDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGFkZFRpbWVsaW5lKHNldC50aW1lbGluZSk7XHJcbiAgICByZXR1cm4gdGV4dDtcclxuICB9XHJcblxyXG4gIGJ1aWxkVGltZWxpbmVMaXN0aW5nVUkoXHJcbiAgICB0aW1lbGluZTogVGltZWxpbmVQYXJzZXIsXHJcbiAgICB0aW1lbGluZVRleHQ6IHN0cmluZyxcclxuICAgIHBhcmVudDogSFRNTEVsZW1lbnQsXHJcbiAgKTogdm9pZCB7XHJcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGhlYWRlci5jbGFzc0xpc3QuYWRkKCd0aW1lbGluZS1saXN0aW5nLWhlYWRlcicpO1xyXG4gICAgaGVhZGVyLmlubmVyVGV4dCA9IHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMudGltZWxpbmVMaXN0aW5nKTtcclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChoZWFkZXIpO1xyXG5cclxuICAgIC8vIEFkZCB0aW1lbGluZSB0ZXh0IGl0c2VsZlxyXG4gICAgY29uc3Qgc2Nyb2xsZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHNjcm9sbGVyLmNsYXNzTGlzdC5hZGQoJ3RpbWVsaW5lLXNjcm9sbGVyJyk7XHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoc2Nyb2xsZXIpO1xyXG5cclxuICAgIGNvbnN0IHRpbWVsaW5lQ29udGVudHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcmUnKTtcclxuICAgIHNjcm9sbGVyLmNsYXNzTGlzdC5hZGQoJ3RpbWVsaW5lLXNjcm9sbGVyLWNvbnRlbnRzJyk7XHJcbiAgICBzY3JvbGxlci5hcHBlbmRDaGlsZCh0aW1lbGluZUNvbnRlbnRzKTtcclxuXHJcbiAgICBjb25zdCB0cmFuc2xhdGVkID0gVGltZWxpbmVQYXJzZXIuVHJhbnNsYXRlKHRpbWVsaW5lLCB0aW1lbGluZVRleHQpO1xyXG4gICAgdGltZWxpbmVDb250ZW50cy5pbm5lclRleHQgPSB0cmFuc2xhdGVkLmpvaW4oJ1xcbicpO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRUaW1lbGluZUFkZFVJKFxyXG4gICAgem9uZUlkOiBudW1iZXIsXHJcbiAgICBwYXJlbnQ6IEhUTUxFbGVtZW50LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgYWRkSWQgPSBbJ3RpbWVsaW5lJywgem9uZUlkLnRvU3RyaW5nKCksICdhZGQnXTtcclxuXHJcbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGhlYWRlci5jbGFzc0xpc3QuYWRkKCd0aW1lbGluZS1hZGQtaGVhZGVyJyk7XHJcbiAgICBoZWFkZXIuaW5uZXJUZXh0ID0gdGhpcy5iYXNlLnRyYW5zbGF0ZShrTWlzY1RyYW5zbGF0aW9ucy5hZGRDdXN0b21UaW1lbGluZUVudHJpZXMpO1xyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGhlYWRlcik7XHJcblxyXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgndGltZWxpbmUtYWRkLWNvbnRhaW5lcicpO1xyXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcblxyXG4gICAgY29uc3QgaGVhZGVyVGltZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgaGVhZGVyVGltZS5pbm5lclRleHQgPSB0aGlzLmJhc2UudHJhbnNsYXRlKGtNaXNjVHJhbnNsYXRpb25zLmN1c3RvbUVudHJ5VGltZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyVGltZSk7XHJcblxyXG4gICAgY29uc3QgaGVhZGVyVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgaGVhZGVyVGV4dC5pbm5lclRleHQgPSB0aGlzLmJhc2UudHJhbnNsYXRlKGtNaXNjVHJhbnNsYXRpb25zLmN1c3RvbUVudHJ5VGV4dCk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyVGV4dCk7XHJcblxyXG4gICAgY29uc3QgaGVhZGVyRHVyYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGhlYWRlckR1cmF0aW9uLmlubmVyVGV4dCA9IHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMuY3VzdG9tRW50cnlEdXJhdGlvbik7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyRHVyYXRpb24pO1xyXG5cclxuICAgIC8vIFNwYWNlciBkaXYgaW4gdGhlIGdyaWQgZm9yIFJlbW92ZSwgd2hpY2ggbmVlZHMgbm8gaGVhZGVyLlxyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKTtcclxuXHJcbiAgICAvLyBHZXQgdGhlIGN1cnJlbnQgU2F2ZWRDb25maWdFbnRyeSBmb3IgdGhlc2Ugc2F2ZWQgZW50cmllcy5cclxuICAgIC8vIFdlIHdpbGwgbW9kaWZ5IGByb3dzYCBpbiBwbGFjZSBhbmQgdGhlbiBzdG9yZSBpdCBiYWNrIGFzIG5lZWRlZC5cclxuICAgIGNvbnN0IGRlZmF1bHRSb3cgPSB7IHRpbWU6ICcnLCB0ZXh0OiAnJyB9O1xyXG4gICAgY29uc3QgZGVmYXVsdFZhbHVlOiBTYXZlZENvbmZpZ0VudHJ5ID0gW2RlZmF1bHRSb3ddO1xyXG4gICAgY29uc3Qgcm93c09yT2JqID0gdGhpcy5iYXNlLmdldEpzb25PcHRpb24oJ3JhaWRib3NzJywgYWRkSWQsIGRlZmF1bHRWYWx1ZSk7XHJcbiAgICBjb25zdCByb3dzID0gQXJyYXkuaXNBcnJheShyb3dzT3JPYmopID8gcm93c09yT2JqIDogZGVmYXVsdFZhbHVlO1xyXG5cclxuICAgIGNvbnN0IHN0b3JlUm93cyA9ICgpID0+IHRoaXMuYmFzZS5zZXRKc29uT3B0aW9uKCdyYWlkYm9zcycsIGFkZElkLCByb3dzKTtcclxuXHJcbiAgICBjb25zdCBhZGRSb3cgPSAob2JqOiB7IFtuYW1lOiBzdHJpbmddOiBTYXZlZENvbmZpZ0VudHJ5IH0pOiB2b2lkID0+IHtcclxuICAgICAgY29uc3Qgc2V0RnVuYyA9ICgpID0+IHtcclxuICAgICAgICBvYmoudGltZSA9IHRpbWVJbnB1dC52YWx1ZTtcclxuICAgICAgICBvYmoudGV4dCA9IHRleHRJbnB1dC52YWx1ZTtcclxuICAgICAgICBvYmouZHVyYXRpb24gPSBkdXJhdGlvbklucHV0LnZhbHVlO1xyXG4gICAgICAgIHN0b3JlUm93cygpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgdGltZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgdGltZUlucHV0LnR5cGUgPSAndGV4dCc7XHJcbiAgICAgIGlmICh0eXBlb2Ygb2JqLnRpbWUgPT09ICdzdHJpbmcnKVxyXG4gICAgICAgIHRpbWVJbnB1dC52YWx1ZSA9IG9iai50aW1lO1xyXG4gICAgICB0aW1lSW5wdXQuY2xhc3NMaXN0LmFkZCgndGltZWxpbmUtYWRkLXJvdy10aW1lJyk7XHJcbiAgICAgIHRpbWVJbnB1dC5vbmNoYW5nZSA9IHNldEZ1bmM7XHJcbiAgICAgIHRpbWVJbnB1dC5vbmlucHV0ID0gc2V0RnVuYztcclxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpbWVJbnB1dCk7XHJcblxyXG4gICAgICBjb25zdCB0ZXh0SW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICB0ZXh0SW5wdXQudHlwZSA9ICd0ZXh0JztcclxuICAgICAgaWYgKHR5cGVvZiBvYmoudGV4dCA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgdGV4dElucHV0LnZhbHVlID0gb2JqLnRleHQ7XHJcbiAgICAgIHRleHRJbnB1dC5jbGFzc0xpc3QuYWRkKCd0aW1lbGluZS1hZGQtcm93LXRleHQnKTtcclxuICAgICAgdGV4dElucHV0Lm9uY2hhbmdlID0gc2V0RnVuYztcclxuICAgICAgdGV4dElucHV0Lm9uaW5wdXQgPSBzZXRGdW5jO1xyXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGV4dElucHV0KTtcclxuXHJcbiAgICAgIGNvbnN0IGR1cmF0aW9uSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICBkdXJhdGlvbklucHV0LnR5cGUgPSAndGV4dCc7XHJcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmR1cmF0aW9uID09PSAnc3RyaW5nJylcclxuICAgICAgICBkdXJhdGlvbklucHV0LnZhbHVlID0gb2JqLmR1cmF0aW9uO1xyXG4gICAgICBkdXJhdGlvbklucHV0LmNsYXNzTGlzdC5hZGQoJ3RpbWVsaW5lLWFkZC1yb3ctZHVyYXRpb24nKTtcclxuICAgICAgZHVyYXRpb25JbnB1dC5vbmNoYW5nZSA9IHNldEZ1bmM7XHJcbiAgICAgIGR1cmF0aW9uSW5wdXQub25pbnB1dCA9IHNldEZ1bmM7XHJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkdXJhdGlvbklucHV0KTtcclxuXHJcbiAgICAgIGNvbnN0IHJlbW92ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICByZW1vdmUuY2xhc3NMaXN0LmFkZCgndGltZWxpbmUtYWRkLXJvdy1yZW1vdmUnKTtcclxuICAgICAgcmVtb3ZlLmlubmVyVGV4dCA9IHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMuY3VzdG9tRW50cnlSZW1vdmUpO1xyXG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocmVtb3ZlKTtcclxuXHJcbiAgICAgIHJlbW92ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQodGltZUlucHV0KTtcclxuICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQodGV4dElucHV0KTtcclxuICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoZHVyYXRpb25JbnB1dCk7XHJcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHJlbW92ZSk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSByb3dzIGluIHBsYWNlLCBhcyBpdCBoYXMgYmVlbiBjYXB0dXJlZCBieSBhIGNsb3N1cmUgYWJvdmUuXHJcbiAgICAgICAgY29uc3QgaWR4ID0gcm93cy5pbmRleE9mKG9iaik7XHJcbiAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byByZW1vdmUgcm93YCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJvd3Muc3BsaWNlKGlkeCwgMSk7XHJcblxyXG4gICAgICAgIHN0b3JlUm93cygpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgYWRkTW9yZVJvd3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgIGFkZE1vcmVSb3dzLmNsYXNzTGlzdC5hZGQoJ3RpbWVsaW5lLWFkZC1idXR0b24nKTtcclxuICAgIGFkZE1vcmVSb3dzLmlubmVyVGV4dCA9IHRoaXMuYmFzZS50cmFuc2xhdGUoa01pc2NUcmFuc2xhdGlvbnMuYWRkTW9yZVJvd3MpO1xyXG4gICAgYWRkTW9yZVJvd3MuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIC8vIE5vIG5lZWQgdG8gY2FsbCBzdG9yZVJvd3MgaGVyZS4gIEJsYW5rIHJvd3Mgd2lsbCBvbmx5IGdldCBzYXZlZFxyXG4gICAgICAvLyBpZiBzb21lYm9keSBtYWtlcyBvdGhlciBjaGFuZ2VzLlxyXG4gICAgICBjb25zdCBvYmogPSB7IC4uLmRlZmF1bHRSb3cgfTtcclxuICAgICAgcm93cy5wdXNoKG9iaik7XHJcbiAgICAgIGFkZFJvdyhvYmopO1xyXG4gICAgfSk7XHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoYWRkTW9yZVJvd3MpO1xyXG5cclxuICAgIGZvciAoY29uc3Qgcm93IG9mIHJvd3MpIHtcclxuICAgICAgaWYgKHR5cGVvZiByb3cgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkocm93KSlcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgYWRkUm93KHJvdyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBidWlsZFRpbWVsaW5lVGV4dFVJKFxyXG4gICAgem9uZUlkOiBudW1iZXIsXHJcbiAgICB0aW1lbGluZTogVGltZWxpbmVQYXJzZXIsXHJcbiAgICBwYXJlbnQ6IEhUTUxFbGVtZW50LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgndGltZWxpbmUtdGV4dC1jb250YWluZXInKTtcclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG5cclxuICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIE9iamVjdC52YWx1ZXMoa1RpbWVsaW5lVGFibGVIZWFkZXJzKSkge1xyXG4gICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgZGl2LmlubmVyVGV4dCA9IHRoaXMuYmFzZS50cmFuc2xhdGUoaGVhZGVyKTtcclxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpdik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdW5pcUV2ZW50czogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG5cclxuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgdGltZWxpbmUuZXZlbnRzKSB7XHJcbiAgICAgIGlmIChldmVudC5uYW1lIGluIHVuaXFFdmVudHMpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIGlmIChldmVudC5uYW1lIGluIHRpbWVsaW5lLmlnbm9yZXMpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIC8vIG5hbWUgPSBvcmlnaW5hbCB0aW1lbGluZSB0ZXh0XHJcbiAgICAgIC8vIHRleHQgPSByZXBsYWNlZCB0ZXh0IGluIGN1cnJlbnQgbGFuZ3VhZ2VcclxuICAgICAgdW5pcUV2ZW50c1tldmVudC5uYW1lXSA9IGV2ZW50LnRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHVuaXFFdmVudHMpLnNvcnQoKTtcclxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgICAgY29uc3QgZXZlbnQgPSB1bmlxRXZlbnRzW2tleV07XHJcbiAgICAgIGlmIChldmVudCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgY29uc3QgY2hlY2tJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgIGNoZWNrSW5wdXQuY2xhc3NMaXN0LmFkZCgndGltZWxpbmUtdGV4dC1lbmFibGUnKTtcclxuICAgICAgY2hlY2tJbnB1dC50eXBlID0gJ2NoZWNrYm94JztcclxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNoZWNrSW5wdXQpO1xyXG5cclxuICAgICAgLy8gRW5hYmxlL2Rpc2FibGUgaGVyZSBiZWhhdmVzIGlkZW50aWNhbGx5IHRvIGBoaWRlYWxsIFwia2V5XCJgLCB3aGVyZSB0aGlzIHRleHQgd2lsbFxyXG4gICAgICAvLyBub3QgYmUgc2hvd24sIGJ1dCB0aW1lbGluZSB0cmlnZ2VycyByZWxhdGVkIHRvIGl0IHdpbGwgc3RpbGwgZmlyZS5cclxuICAgICAgY29uc3QgZW5hYmxlSWQgPSBbJ3RpbWVsaW5lJywgem9uZUlkLnRvU3RyaW5nKCksICdlbmFibGUnLCBrZXldO1xyXG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0cnVlO1xyXG4gICAgICBjaGVja0lucHV0LmNoZWNrZWQgPSB0aGlzLmJhc2UuZ2V0Qm9vbGVhbk9wdGlvbigncmFpZGJvc3MnLCBlbmFibGVJZCwgZGVmYXVsdFZhbHVlKTtcclxuICAgICAgY2hlY2tJbnB1dC5vbmNoYW5nZSA9ICgpID0+IHRoaXMuYmFzZS5zZXRPcHRpb24oJ3JhaWRib3NzJywgZW5hYmxlSWQsIGNoZWNrSW5wdXQuY2hlY2tlZCk7XHJcblxyXG4gICAgICBjb25zdCB0aW1lbGluZVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgdGltZWxpbmVUZXh0LmNsYXNzTGlzdC5hZGQoJ3RpbWVsaW5lLXRleHQtdGV4dCcpO1xyXG4gICAgICB0aW1lbGluZVRleHQuaW5uZXJIVE1MID0gZXZlbnQ7XHJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aW1lbGluZVRleHQpO1xyXG5cclxuICAgICAgY29uc3QgdGV4dElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgdGV4dElucHV0LnR5cGUgPSAndGV4dCc7XHJcbiAgICAgIHRleHRJbnB1dC5jbGFzc0xpc3QuYWRkKCd0aW1lbGluZS10ZXh0LWVkaXQnKTtcclxuICAgICAgdGV4dElucHV0LnBsYWNlaG9sZGVyID0gZXZlbnQ7XHJcblxyXG4gICAgICAvLyBBbnkgY2hhbmdlcyBhcmUgdGllZCB0byB0aGUgb3JpZ2luYWwgdGltZWxpbmUgdGV4dCAoa2V5KSwgYnV0IHRoZSBjb25maWcgdWkgd2lsbFxyXG4gICAgICAvLyBkaXNwbGF5IHRoZSBjdXJyZW50IGxhbmd1YWdlJ3MgdGV4dCB3aXRoIHJlcGxhY2VtZW50cyAoZXZlbnQpIGFzIHRoZSBwbGFjZWhvbGRlciBhYm92ZS5cclxuICAgICAgY29uc3QgdGV4dElkID0gWyd0aW1lbGluZScsIHpvbmVJZC50b1N0cmluZygpLCAnZ2xvYmFsUmVwbGFjZScsIGtleV07XHJcbiAgICAgIHRleHRJbnB1dC52YWx1ZSA9IHRoaXMuYmFzZS5nZXRTdHJpbmdPcHRpb24oJ3JhaWRib3NzJywgdGV4dElkLCAnJyk7XHJcbiAgICAgIGNvbnN0IHNldEZ1bmMgPSAoKSA9PiB0aGlzLmJhc2Uuc2V0T3B0aW9uKCdyYWlkYm9zcycsIHRleHRJZCwgdGV4dElucHV0LnZhbHVlKTtcclxuICAgICAgdGV4dElucHV0Lm9uY2hhbmdlID0gc2V0RnVuYztcclxuICAgICAgdGV4dElucHV0Lm9uaW5wdXQgPSBzZXRGdW5jO1xyXG5cclxuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRleHRJbnB1dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBUaGlzIGR1cGxpY2F0ZXMgdGhlIHJhaWRib3NzIGZ1bmN0aW9uIG9mIHRoZSBzYW1lIG5hbWUuXHJcbiAgdmFsdWVPckZ1bmN0aW9uKFxyXG4gICAgZjogUmFpZGJvc3NUcmlnZ2VyRmllbGQsXHJcbiAgICBkYXRhOiBSYWlkYm9zc0RhdGEsXHJcbiAgICBtYXRjaGVzOiBNYXRjaGVzLFxyXG4gICAgb3V0cHV0OiBPdXRwdXQsXHJcbiAgKTogUmFpZGJvc3NUcmlnZ2VyT3V0cHV0IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHR5cGVvZiBmID09PSAnZnVuY3Rpb24nID8gZihkYXRhLCBtYXRjaGVzLCBvdXRwdXQpIDogZjtcclxuICAgIGlmIChyZXN1bHQgIT09IE9iamVjdChyZXN1bHQpKVxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnIHx8IHJlc3VsdCA9PT0gbnVsbClcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIGlmIChyZXN1bHRbdGhpcy5hbGVydHNMYW5nXSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZU9yRnVuY3Rpb24ocmVzdWx0W3RoaXMuYWxlcnRzTGFuZ10sIGRhdGEsIG1hdGNoZXMsIG91dHB1dCk7XHJcbiAgICBpZiAocmVzdWx0W3RoaXMudGltZWxpbmVMYW5nXSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZU9yRnVuY3Rpb24ocmVzdWx0W3RoaXMudGltZWxpbmVMYW5nXSwgZGF0YSwgbWF0Y2hlcywgb3V0cHV0KTtcclxuICAgIC8vIEZvciBwYXJ0aWFsbHkgbG9jYWxpemVkIHJlc3VsdHMgd2hlcmUgdGhpcyBsb2NhbGl6YXRpb24gZG9lc24ndFxyXG4gICAgLy8gZXhpc3QsIHByZWZlciBFbmdsaXNoIG92ZXIgbm90aGluZy5cclxuICAgIHJldHVybiB0aGlzLnZhbHVlT3JGdW5jdGlvbihyZXN1bHRbJ2VuJ10sIGRhdGEsIG1hdGNoZXMsIG91dHB1dCk7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzVHJpZ2dlcih0cmlnOiBDb25maWdMb29zZVRyaWdnZXIsIHNldDogQ29uZmlnTG9vc2VUcmlnZ2VyU2V0KTogQ29uZmlnTG9vc2VUcmlnZ2VyIHtcclxuICAgIC8vIFRPRE86IHdpdGggc29tZSBoYWNraW5lc3MgKGUuZy4gcmVnZXhlcz8pIHdlIGNvdWxkIGZpZ3VyZSBvdXQgd2hpY2hcclxuICAgIC8vIG91dHB1dCBzdHJpbmcgY2FtZSBmcm9tIHdoaWNoIGFsZXJ0IHR5cGUgKGFsYXJtLCBhbGVydCwgaW5mbywgdHRzKS5cclxuICAgIC8vIFNlZSBgbWFrZU91dHB1dGAgY29tbWVudHMgZm9yIHdoeSB0aGlzIG5lZWRzIGEgdHlwZSBhc3NlcnRpb24gdG8gYmUgYW4gT3V0cHV0LlxyXG4gICAgY29uc3QgZmFrZU91dHB1dFByb3h5ID0gbmV3IERvTm90aGluZ0Z1bmNQcm94eSgob3V0cHV0U3RyaW5nczogT3V0cHV0U3RyaW5ncykgPT4ge1xyXG4gICAgICB0cmlnLm91dHB1dFN0cmluZ3MgPSB0cmlnLm91dHB1dFN0cmluZ3MgfHwge307XHJcbiAgICAgIE9iamVjdC5hc3NpZ24odHJpZy5vdXRwdXRTdHJpbmdzLCBvdXRwdXRTdHJpbmdzKTtcclxuICAgIH0pIGFzIE91dHB1dDtcclxuXHJcbiAgICBjb25zdCBiYXNlRmFrZURhdGE6IFJhaWRib3NzRGF0YSA9IHtcclxuICAgICAgbWU6ICcnLFxyXG4gICAgICBqb2I6ICdOT05FJyxcclxuICAgICAgcm9sZTogJ25vbmUnLFxyXG4gICAgICBwYXJ0eTogbmV3IFBhcnR5VHJhY2tlcihyYWlkYm9zc09wdGlvbnMpLFxyXG4gICAgICBsYW5nOiB0aGlzLmJhc2UubGFuZyxcclxuICAgICAgY3VycmVudEhQOiAxMDAwLFxyXG4gICAgICBvcHRpb25zOiB0aGlzLmJhc2UuY29uZmlnT3B0aW9ucyxcclxuICAgICAgaW5Db21iYXQ6IHRydWUsXHJcbiAgICAgIHRyaWdnZXJTZXRDb25maWc6IHt9LFxyXG4gICAgICBTaG9ydE5hbWU6ICh4Pzogc3RyaW5nKSA9PiB4ID8/ICc/Pz8nLFxyXG4gICAgICBTdG9wQ29tYmF0OiAoKSA9PiB7Lyogbm9vcCAqL30sXHJcbiAgICAgIFBhcnNlTG9jYWxlRmxvYXQ6IHBhcnNlRmxvYXQsXHJcbiAgICAgIENhblN0dW46ICgpID0+IGZhbHNlLFxyXG4gICAgICBDYW5TaWxlbmNlOiAoKSA9PiBmYWxzZSxcclxuICAgICAgQ2FuU2xlZXA6ICgpID0+IGZhbHNlLFxyXG4gICAgICBDYW5DbGVhbnNlOiAoKSA9PiBmYWxzZSxcclxuICAgICAgQ2FuRmVpbnQ6ICgpID0+IGZhbHNlLFxyXG4gICAgICBDYW5BZGRsZTogKCkgPT4gZmFsc2UsXHJcbiAgICAgIHBhcnNlckxhbmc6IHRoaXMuYmFzZS5sYW5nLFxyXG4gICAgICBkaXNwbGF5TGFuZzogdGhpcy5iYXNlLmxhbmcsXHJcbiAgICB9O1xyXG5cclxuICAgIHR5cGUgUGFydGlhbEZha2VEYXRhRW50cnkgPSB7IG1lOiBzdHJpbmc7IGpvYjogSm9iOyByb2xlOiBSb2xlIH07XHJcbiAgICBjb25zdCBwYXJ0aWFsRmFrZURhdGFFbnRyaWVzOiBQYXJ0aWFsRmFrZURhdGFFbnRyeVtdID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgbWU6ICdUaW5pIFBvdXRpbmknLFxyXG4gICAgICAgIGpvYjogJ0dOQicsXHJcbiAgICAgICAgcm9sZTogJ3RhbmsnLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbWU6ICdQb3RhdG8gQ2hpcHB5JyxcclxuICAgICAgICBqb2I6ICdXSE0nLFxyXG4gICAgICAgIHJvbGU6ICdoZWFsZXInLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbWU6ICdUYXRlciBUb3QnLFxyXG4gICAgICAgIGpvYjogJ0JMTScsXHJcbiAgICAgICAgcm9sZTogJ2RwcycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBtZTogJ0hhc2ggQnJvd24nLFxyXG4gICAgICAgIGpvYjogJ0RSRycsXHJcbiAgICAgICAgcm9sZTogJ2RwcycsXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICBtZTogJ0Fsb28gR29iaScsXHJcbiAgICAgICAgam9iOiAnQkxVJyxcclxuICAgICAgICByb2xlOiAnZHBzJyxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgICBjb25zdCBmYWtlRGF0YUVudHJpZXM6IFJhaWRib3NzRGF0YVtdID0gcGFydGlhbEZha2VEYXRhRW50cmllcy5tYXAoKHgpID0+IHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHgsIGJhc2VGYWtlRGF0YSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGZpcnN0RGF0YSA9IGZha2VEYXRhRW50cmllc1swXTtcclxuICAgIGlmICghZmlyc3REYXRhKVxyXG4gICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDb2RlKCk7XHJcblxyXG4gICAgY29uc3Qga0Zha2VNYXRjaGVzID0ge1xyXG4gICAgICAvLyBUT0RPOiByZWFsbHkgc2hvdWxkIGNvbnZlcnQgYWxsIHRyaWdnZXJzIHRvIHVzZSByZWdleGVzLmpzLlxyXG4gICAgICAvLyBNb29vb29zdCB0cmlnZ2VycyB1c2UgbWF0Y2hlc1sxXSB0byBiZSBhIG5hbWUuXHJcbiAgICAgIDE6IGZpcnN0RGF0YS5tZSxcclxuXHJcbiAgICAgIHNvdXJjZUlkOiAnNDEyMzQ1NjcnLFxyXG4gICAgICBzb3VyY2U6ICdFbmVteScsXHJcbiAgICAgIGlkOiAnMTIzNCcsXHJcbiAgICAgIGFiaWxpdHk6ICdBYmlsaXR5JyxcclxuICAgICAgdGFyZ2V0SWQ6ICcxMjM0NTY3JyxcclxuICAgICAgdGFyZ2V0OiBmaXJzdERhdGEubWUsXHJcbiAgICAgIGZsYWdzOiAnJyxcclxuICAgICAgeDogJzEwMCcsXHJcbiAgICAgIHk6ICcxMDAnLFxyXG4gICAgICB6OiAnMCcsXHJcbiAgICAgIGhlYWRpbmc6ICcwJyxcclxuICAgICAgbnBjSWQ6ICcnLFxyXG4gICAgICBlZmZlY3Q6ICdFZmZlY3QnLFxyXG4gICAgICBkdXJhdGlvbjogJzMwJyxcclxuICAgICAgY29kZTogJzAwJyxcclxuICAgICAgbGluZTogJycsXHJcbiAgICAgIG5hbWU6ICdOYW1lJyxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb3V0cHV0OiB7IFtrZXkgaW4ga2V5b2YgTG9vc2VUcmlnZ2VyXTogc3RyaW5nIH0gPSB7fTtcclxuXHJcbiAgICBjb25zdCBvdXRwdXRLZXlzID0gWydhbGFybVRleHQnLCAnYWxlcnRUZXh0JywgJ2luZm9UZXh0JywgJ3R0cycsICdzb3VuZCddIGFzIGNvbnN0O1xyXG4gICAgdHlwZSBPdXRwdXRLZXkgPSB0eXBlb2Ygb3V0cHV0S2V5c1tudW1iZXJdO1xyXG5cclxuICAgIC8vIFRyeSB0byBkZXRlcm1pbmUgc29tZSBzYW1wbGUgb3V0cHV0P1xyXG4gICAgLy8gVGhpcyBjb3VsZCBnZXQgbXVjaCBtb3JlIGNvbXBsaWNhdGVkIGlmIHdlIHdhbnRlZCBpdCB0by5cclxuICAgIGNvbnN0IGV2YWxUcmlnZ2VyID0gKHRyaWc6IExvb3NlVHJpZ2dlciwga2V5OiBPdXRwdXRLZXksIGRhdGE6IFJhaWRib3NzRGF0YSkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMudmFsdWVPckZ1bmN0aW9uKHRyaWdba2V5XSwgZGF0YSwga0Zha2VNYXRjaGVzLCBmYWtlT3V0cHV0UHJveHkpO1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgcmVzdWx0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIFN1cGVyIGhhY2s6XHJcbiAgICAgICAgY29uc3QgcmVzdWx0U3RyID0gcmVzdWx0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdFN0ci5pbmNsdWRlcygndW5kZWZpbmVkJykgfHwgcmVzdWx0U3RyLmluY2x1ZGVzKCdOYU4nKSlcclxuICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgb3V0cHV0W2tleV0gPSByZXN1bHRTdHI7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBUaGlzIGlzIGFsbCB0b3RhbGx5IGJvZ3VzLiAgTWFueSB0cmlnZ2VycyBhc3N1bWUgZmllbGRzIG9uIGRhdGFcclxuICAgICAgICAvLyBhcmUgcHJvcGVybHkgZGVmaW5lZCB3aGVuIHRoZXNlIGNhbGxzIGhhcHBlbiwgc28gd2lsbCB0aHJvdyBlcnJvcnMuXHJcbiAgICAgICAgLy8gU28ganVzdCBzaWxlbnRseSBpZ25vcmUuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEhhbmRsZSAncmVzcG9uc2UnIGZpcnN0LlxyXG4gICAgaWYgKHRyaWcucmVzcG9uc2UpIHtcclxuICAgICAgY29uc3QgciA9IHRyaWcucmVzcG9uc2U7XHJcbiAgICAgIGZvciAoY29uc3QgZGF0YSBvZiBmYWtlRGF0YUVudHJpZXMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgLy8gQ2FuJ3QgdXNlIFZhbHVlT3JGdW5jdGlvbiBoZXJlIGFzIHIgcmV0dXJucyBhIG5vbi1sb2NhbGl6YWJsZSBvYmplY3QuXHJcbiAgICAgICAgICAvLyBGSVhNRTogdGhpcyBoYWNraWx5IHJlcGxpY2F0ZXMgc29tZSByYWlkYm9zcyBsb2dpYyB0b28uXHJcbiAgICAgICAgICBsZXQgcmVzcG9uc2U6IHR5cGVvZiB0cmlnLnJlc3BvbnNlIHwgdW5kZWZpbmVkID0gcjtcclxuICAgICAgICAgIHdoaWxlICh0eXBlb2YgcmVzcG9uc2UgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgdGhpcyBoYXMgYnVpbHRJblJlc3BvbnNlU3RyIGZpcnN0LlxyXG4gICAgICAgICAgICByZXNwb25zZSA9IHJlc3BvbnNlKGRhdGEsIGtGYWtlTWF0Y2hlcywgZmFrZU91dHB1dFByb3h5KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICghcmVzcG9uc2UpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgIGlmICghdHJpZy5vdXRwdXRTdHJpbmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIG91dHB1dEtleXMpXHJcbiAgICAgICAgICAgICAgZXZhbFRyaWdnZXIocmVzcG9uc2UsIGtleSwgZGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBPbmx5IGV2YWx1YXRlIGZpZWxkcyBpZiB0aGVyZSBhcmUgbm90IG91dHB1dFN0cmluZ3MuXHJcbiAgICAvLyBvdXRwdXRTdHJpbmdzIHdpbGwgaW5kaWNhdGUgbW9yZSBjbGVhcmx5IHdoYXQgdGhlIHRyaWdnZXIgc2F5cy5cclxuICAgIGlmICghdHJpZy5vdXRwdXRTdHJpbmdzKSB7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIG91dHB1dEtleXMpIHtcclxuICAgICAgICBpZiAoIShrZXkgaW4gdHJpZykpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgZmFrZURhdGFFbnRyaWVzKSB7XHJcbiAgICAgICAgICBpZiAoZXZhbFRyaWdnZXIodHJpZywga2V5LCBkYXRhKSlcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJpZy5jb25maWdPdXRwdXQgPSBvdXRwdXQ7XHJcblxyXG4gICAgLy8gVE9ETzogdGhpcyBzaG93cyB0aGUgcmVnZXhlcyBpbiB0aGUgZGlzcGxheSBsYW5ndWFnZS5cclxuICAgIC8vIFNob3VsZCB3ZSBzaG93IHRoZW0gaW4gdGhlIHBhcnNlciBsYW5ndWFnZSBpbnN0ZWFkP1xyXG4gICAgY29uc3QgbGFuZyA9IHRoaXMuYmFzZS5sYW5nO1xyXG5cclxuICAgIGNvbnN0IGdldFJlZ2V4ID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCByZWdleCA9IHRyaWcucmVnZXg7XHJcbiAgICAgIGlmIChyZWdleCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2UodHJhbnNsYXRlUmVnZXgocmVnZXgsIGxhbmcsIHNldC50aW1lbGluZVJlcGxhY2UpKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZ2V0TmV0UmVnZXggPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlZ2V4ID0gdHJpZy5uZXRSZWdleDtcclxuICAgICAgaWYgKHJlZ2V4ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgaWYgKHJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwKVxyXG4gICAgICAgIHJldHVybiBSZWdleGVzLnBhcnNlKHRyYW5zbGF0ZVJlZ2V4KHJlZ2V4LCBsYW5nLCBzZXQudGltZWxpbmVSZXBsYWNlKSk7XHJcblxyXG4gICAgICBpZiAodHJpZy50eXBlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgcmV0dXJuIFJlZ2V4ZXMucGFyc2UoXHJcbiAgICAgICAgYnVpbGROZXRSZWdleEZvclRyaWdnZXIoXHJcbiAgICAgICAgICB0cmlnLnR5cGUsXHJcbiAgICAgICAgICB0cmFuc2xhdGVSZWdleEJ1aWxkUGFyYW0ocmVnZXgsIGxhbmcsIHNldC50aW1lbGluZVJlcGxhY2UpLnBhcmFtcyxcclxuICAgICAgICApLFxyXG4gICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAodHJpZy5pc1RpbWVsaW5lVHJpZ2dlcikge1xyXG4gICAgICB0cmlnLnRpbWVsaW5lUmVnZXggPSBnZXRSZWdleCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdHJpZy50cmlnZ2VyUmVnZXggPSBnZXRSZWdleCgpO1xyXG4gICAgICB0cmlnLnRyaWdnZXJOZXRSZWdleCA9IGdldE5ldFJlZ2V4KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRyaWc7XHJcbiAgfVxyXG5cclxuICBwcm9jZXNzUmFpZGJvc3NGaWxlcyhcclxuICAgIGZpbGVzOiBSYWlkYm9zc0ZpbGVEYXRhLFxyXG4gICAgdXNlck9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucyxcclxuICApOiBDb25maWdQcm9jZXNzZWRGaWxlTWFwPENvbmZpZ0xvb3NlVHJpZ2dlclNldD4ge1xyXG4gICAgLy8gYGZpbGVzYCBpcyBtYXAgb2YgZmlsZW5hbWUgPT4gdHJpZ2dlclNldCAoZm9yIHRyaWdnZXIgZmlsZXMpXHJcbiAgICAvLyBgbWFwYCBpcyBhIHNvcnRlZCBtYXAgb2Ygc2hvcnRlbmVkIHpvbmUga2V5ID0+IHsgdmFyaW91cyBmaWVsZHMsIHRyaWdnZXJTZXQgfVxyXG4gICAgY29uc3QgdHJpZ2dlckZpbGVzOiB7IFtmaWxlbmFtZTogc3RyaW5nXTogQ29uZmlnTG9vc2VUcmlnZ2VyU2V0IH0gPSB7fTtcclxuICAgIGNvbnN0IHRpbWVsaW5lRmlsZXM6IHsgW2ZpbGVuYW1lOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBbZmlsZW5hbWUsIHRyaWdnZXJTZXRPclN0cmluZ10gb2YgT2JqZWN0LmVudHJpZXMoZmlsZXMpKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgdHJpZ2dlclNldE9yU3RyaW5nID09PSAnc3RyaW5nJylcclxuICAgICAgICB0aW1lbGluZUZpbGVzW2ZpbGVuYW1lXSA9IHRyaWdnZXJTZXRPclN0cmluZztcclxuICAgICAgZWxzZVxyXG4gICAgICAgIHRyaWdnZXJGaWxlc1tmaWxlbmFtZV0gPSB0cmlnZ2VyU2V0T3JTdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbWFwID0gdGhpcy5iYXNlLnByb2Nlc3NGaWxlczxDb25maWdMb29zZVRyaWdnZXJTZXQ+KHRyaWdnZXJGaWxlcywgdXNlck9wdGlvbnMuVHJpZ2dlcnMpO1xyXG4gICAgbGV0IHRyaWdnZXJJZHggPSAwO1xyXG5cclxuICAgIC8vIFdoaWxlIHdhbGtpbmcgdGhyb3VnaCB0cmlnZ2VycywgcmVjb3JkIGFueSBwcmV2aW91cyB0cmlnZ2VycyB3aXRoIHRoZSBzYW1lXHJcbiAgICAvLyBpZCBzbyB0aGF0IHRoZSB1aSBjYW4gZGlzYWJsZSBvdmVycmlkaW5nIGluZm9ybWF0aW9uLlxyXG4gICAgY29uc3QgcHJldmlvdXNUcmlnZ2VyV2l0aElkOiB7IFtpZDogc3RyaW5nXTogQ29uZmlnTG9vc2VUcmlnZ2VyIH0gPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgT2JqZWN0LnZhbHVlcyhtYXApKSB7XHJcbiAgICAgIC8vIFRPRE86IG1heWJlIGVhY2ggdHJpZ2dlciBzZXQgbmVlZHMgYSB6b25lIG5hbWUsIGFuZCB3ZSBzaG91bGRcclxuICAgICAgLy8gdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgZmlsZW5hbWU/Pz9cclxuICAgICAgY29uc3QgcmF3VHJpZ2dlcnM6IHsgdHJpZ2dlcjogTG9vc2VUcmlnZ2VyW107IHRpbWVsaW5lOiBMb29zZVRyaWdnZXJbXSB9ID0ge1xyXG4gICAgICAgIHRyaWdnZXI6IFtdLFxyXG4gICAgICAgIHRpbWVsaW5lOiBbXSxcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgdHJpZ2dlclNldCA9IGl0ZW0udHJpZ2dlclNldDtcclxuICAgICAgaWYgKHRyaWdnZXJTZXQudHJpZ2dlcnMpXHJcbiAgICAgICAgcmF3VHJpZ2dlcnMudHJpZ2dlci5wdXNoKC4uLnRyaWdnZXJTZXQudHJpZ2dlcnMpO1xyXG4gICAgICBpZiAodHJpZ2dlclNldC50aW1lbGluZVRyaWdnZXJzKVxyXG4gICAgICAgIHJhd1RyaWdnZXJzLnRpbWVsaW5lLnB1c2goLi4udHJpZ2dlclNldC50aW1lbGluZVRyaWdnZXJzKTtcclxuXHJcbiAgICAgIGlmICghdHJpZ2dlclNldC5pc1VzZXJUcmlnZ2VyU2V0ICYmIHRyaWdnZXJTZXQuZmlsZW5hbWUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICBmbGF0dGVuVGltZWxpbmUodHJpZ2dlclNldCwgdHJpZ2dlclNldC5maWxlbmFtZSwgdGltZWxpbmVGaWxlcyk7XHJcblxyXG4gICAgICBpdGVtLnRyaWdnZXJzID0ge307XHJcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdHJpZ2dlckFycl0gb2YgT2JqZWN0LmVudHJpZXMocmF3VHJpZ2dlcnMpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBiYXNlVHJpZyBvZiB0cmlnZ2VyQXJyKSB7XHJcbiAgICAgICAgICBjb25zdCB0cmlnOiBDb25maWdMb29zZVRyaWdnZXIgPSBiYXNlVHJpZztcclxuICAgICAgICAgIHRyaWdnZXJJZHgrKztcclxuICAgICAgICAgIGlmICh0cmlnLmlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gR2l2ZSB0cmlnZ2VycyB3aXRoIG5vIGlkIHNvbWUgXCJ1bmlxdWVcIiBzdHJpbmcgc28gdGhhdCB0aGV5IGNhblxyXG4gICAgICAgICAgICAvLyBzdGlsbCBiZSBhZGRlZCB0byB0aGUgc2V0IGFuZCBzaG93IHVwIGluIHRoZSB1aS5cclxuICAgICAgICAgICAgdHJpZy5pZCA9IGAhIU5vSWRUcmlnZ2VyJHt0cmlnZ2VySWR4fWA7XHJcbiAgICAgICAgICAgIHRyaWcuaXNNaXNzaW5nSWQgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFRyYWNrIGlmIHRoaXMgdHJpZ2dlciBvdmVycmlkZXMgYW55IHByZXZpb3VzIHRyaWdnZXIuXHJcbiAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHByZXZpb3VzVHJpZ2dlcldpdGhJZFt0cmlnLmlkXTtcclxuICAgICAgICAgIGlmIChwcmV2aW91cylcclxuICAgICAgICAgICAgcHJldmlvdXMub3ZlcnJpZGRlbkJ5RmlsZSA9IHRyaWdnZXJTZXQuZmlsZW5hbWU7XHJcbiAgICAgICAgICBwcmV2aW91c1RyaWdnZXJXaXRoSWRbdHJpZy5pZF0gPSB0cmlnO1xyXG5cclxuICAgICAgICAgIHRyaWcuaXNUaW1lbGluZVRyaWdnZXIgPSBrZXkgPT09ICd0aW1lbGluZSc7XHJcbiAgICAgICAgICAvLyBBbHNvLCBpZiBhIHVzZXIgaGFzIHR3byBvZiB0aGUgc2FtZSBpZCBpbiB0aGUgc2FtZSB0cmlnZ2VyU2V0ICg/ISlcclxuICAgICAgICAgIC8vIHRoZW4gb25seSB0aGUgc2Vjb25kIHRyaWdnZXIgd2lsbCBzaG93IHVwLlxyXG4gICAgICAgICAgaXRlbS50cmlnZ2Vyc1t0cmlnLmlkXSA9IHRoaXMucHJvY2Vzc1RyaWdnZXIodHJpZywgdHJpZ2dlclNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRUcmlnZ2VyT3B0aW9ucyh0cmlnOiBMb29zZVRyaWdnZXIsIGxhYmVsRGl2OiBIVE1MRWxlbWVudCkge1xyXG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuLCBhcyBhbGwgdHJpZ2dlcnMgc2hvdWxkIGJlIHByb2Nlc3NlZCB3aXRoIGEgdW5pcXVlIGlkLlxyXG4gICAgY29uc3QgdHJpZ0lkID0gdHJpZy5pZDtcclxuICAgIGlmICh0cmlnSWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ29kZSgpO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbktleSA9IGtPcHRpb25LZXlzLm91dHB1dDtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ3RyaWdnZXItb3B0aW9ucycpO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZUxhYmVsID0gKGlucHV0OiBIVE1MT3B0aW9uRWxlbWVudCB8IEhUTUxTZWxlY3RFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlmIChpbnB1dC52YWx1ZSA9PT0gJ2hpZGRlbicgfHwgaW5wdXQudmFsdWUgPT09ICdkaXNhYmxlZCcpXHJcbiAgICAgICAgbGFiZWxEaXYuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcclxuICAgICAgZWxzZVxyXG4gICAgICAgIGxhYmVsRGl2LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbiAgICBkaXYuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG5cclxuICAgIGNvbnN0IHNlbGVjdFZhbHVlID0gdGhpcy5iYXNlLmdldE9wdGlvbihcclxuICAgICAgJ3JhaWRib3NzJyxcclxuICAgICAgW2tPcHRpb25LZXlzLnRyaWdnZXJzLCB0cmlnSWQsIG9wdGlvbktleV0sXHJcbiAgICAgICdkZWZhdWx0JyxcclxuICAgICk7XHJcblxyXG4gICAgZm9yIChjb25zdCBba2V5LCBvcHRdIG9mIE9iamVjdC5lbnRyaWVzKHRyaWdnZXJTb3VuZE9wdGlvbnMpKSB7XHJcbiAgICAgIC8vIEhpZGUgZGVidWcgb25seSBvcHRpb25zIHVubGVzcyB0aGV5IGFyZSBzZWxlY3RlZC5cclxuICAgICAgLy8gT3RoZXJ3aXNlLCBpdCB3aWxsIGxvb2sgd2VpcmQgdG8gcGljayBzb21ldGhpbmcgbGlrZSAnRGlzYWJsZWQnLFxyXG4gICAgICAvLyBidXQgdGhlbiBub3Qgc2hvdyBpdCB3aGVuIGRldmVsb3BlciBvcHRpb25zIGFyZSB0dXJuZWQgb2ZmLlxyXG4gICAgICBpZiAoIXRoaXMuYmFzZS5kZXZlbG9wZXJPcHRpb25zICYmIG9wdC5kZWJ1Z09ubHkgJiYga2V5ICE9PSBzZWxlY3RWYWx1ZSlcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICBlbGVtLmlubmVySFRNTCA9IHRoaXMuYmFzZS50cmFuc2xhdGUob3B0LmxhYmVsKTtcclxuICAgICAgZWxlbS52YWx1ZSA9IGtleTtcclxuICAgICAgZWxlbS5zZWxlY3RlZCA9IGtleSA9PT0gc2VsZWN0VmFsdWU7XHJcbiAgICAgIGlucHV0LmFwcGVuZENoaWxkKGVsZW0pO1xyXG5cclxuICAgICAgdXBkYXRlTGFiZWwoaW5wdXQpO1xyXG5cclxuICAgICAgaW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdXBkYXRlTGFiZWwoaW5wdXQpO1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZS5pbmNsdWRlcygnZGVmYXVsdCcpKVxyXG4gICAgICAgICAgdmFsdWUgPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgdGhpcy5iYXNlLnNldE9wdGlvbigncmFpZGJvc3MnLCBba09wdGlvbktleXMudHJpZ2dlcnMsIHRyaWdJZCwgb3B0aW9uS2V5XSwgaW5wdXQudmFsdWUpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkaXY7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBmbGF0dGVuVGltZWxpbmUgPSAoXHJcbiAgc2V0OiBDb25maWdMb29zZVRyaWdnZXJTZXQsXHJcbiAgZmlsZW5hbWU6IHN0cmluZyxcclxuICBmaWxlczogeyBbZmlsZW5hbWU6IHN0cmluZ106IHN0cmluZyB9LFxyXG4pID0+IHtcclxuICAvLyBDb252ZXJ0IHNldC50aW1lbGluZUZpbGUgdG8gc2V0LnRpbWVsaW5lLlxyXG4gIGlmIChzZXQudGltZWxpbmVGaWxlID09PSB1bmRlZmluZWQpXHJcbiAgICByZXR1cm47XHJcbiAgY29uc3QgbGFzdEluZGV4ID0gTWF0aC5tYXgoZmlsZW5hbWUubGFzdEluZGV4T2YoJy8nKSwgZmlsZW5hbWUubGFzdEluZGV4T2YoJ1xcXFwnKSk7XHJcbiAgLy8gSWYgbGFzdEluZGV4ID09PSAtMSwgdHJ1bmNhdGUgbmFtZSB0byB0aGUgZW1wdHkgc3RyaW5nLlxyXG4gIC8vIGlmIGxhc3RJbmRleCA+IC0xLCB0cnVuY2F0ZSBuYW1lIGFmdGVyIHRoZSBmaW5hbCBzbGFzaC5cclxuICBjb25zdCBkaXIgPSBmaWxlbmFtZS5zbGljZSgwLCBNYXRoLm1heCgwLCBsYXN0SW5kZXggKyAxKSk7XHJcblxyXG4gIGNvbnN0IHRpbWVsaW5lRmlsZSA9IGAke2Rpcn0ke3NldC50aW1lbGluZUZpbGV9YDtcclxuICBkZWxldGUgc2V0LnRpbWVsaW5lRmlsZTtcclxuXHJcbiAgaWYgKCEodGltZWxpbmVGaWxlIGluIGZpbGVzKSkge1xyXG4gICAgY29uc29sZS5sb2coYEVSUk9SOiAnJHtmaWxlbmFtZX0nIHNwZWNpZmllcyBub24tZXhpc3RlbnQgdGltZWxpbmUgZmlsZSAnJHt0aW1lbGluZUZpbGV9Jy5gKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIHNldC50aW1lbGluZSBpcyBwcm9jZXNzZWQgcmVjdXJzaXZlbHkuXHJcbiAgc2V0LnRpbWVsaW5lID0gW3NldC50aW1lbGluZSwgZmlsZXNbdGltZWxpbmVGaWxlXV07XHJcbn07XHJcblxyXG4vLyBSYWlkYm9zcyBuZWVkcyB0byBkbyBzb21lIGV4dHJhIHByb2Nlc3Npbmcgb2YgdXNlciBmaWxlcy5cclxuY29uc3QgdXNlckZpbGVIYW5kbGVyOiBVc2VyRmlsZUNhbGxiYWNrID0gKFxyXG4gIG5hbWU6IHN0cmluZyxcclxuICBmaWxlczogeyBbZmlsZW5hbWU6IHN0cmluZ106IHN0cmluZyB9LFxyXG4gIGJhc2VPcHRpb25zOiBCYXNlT3B0aW9ucyAmIFBhcnRpYWw8UmFpZGJvc3NPcHRpb25zPixcclxuICBiYXNlUGF0aDogc3RyaW5nLFxyXG4pID0+IHtcclxuICAvLyBUT0RPOiBSZXdyaXRlIHVzZXJfY29uZmlnIHRvIGJlIHRlbXBsYXRlZCBvbiBvcHRpb24gdHlwZSBzbyB0aGF0IHRoaXMgZnVuY3Rpb24ga25vd3NcclxuICAvLyB3aGF0IHR5cGUgb2Ygb3B0aW9ucyBpdCBpcyB1c2luZy5cclxuICBpZiAoIWJhc2VPcHRpb25zLlRyaWdnZXJzKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBmb3IgKGNvbnN0IGJhc2VUcmlnZ2VyU2V0IG9mIGJhc2VPcHRpb25zLlRyaWdnZXJzKSB7XHJcbiAgICBjb25zdCBzZXQ6IENvbmZpZ0xvb3NlVHJpZ2dlclNldCA9IGJhc2VUcmlnZ2VyU2V0O1xyXG5cclxuICAgIC8vIEFubm90YXRlIHRyaWdnZXJzIHdpdGggd2hlcmUgdGhleSBjYW1lIGZyb20uICBOb3RlLCBvcHRpb25zIGlzIHBhc3NlZCBpbiByZXBlYXRlZGx5XHJcbiAgICAvLyBhcyBtdWx0aXBsZSBzZXRzIG9mIHVzZXIgZmlsZXMgYWRkIHRyaWdnZXJzLCBzbyBvbmx5IHByb2Nlc3MgZWFjaCBmaWxlIG9uY2UuXHJcbiAgICBpZiAoc2V0LmlzVXNlclRyaWdnZXJTZXQpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgIC8vIGBmaWxlbmFtZWAgaGVyZSBpcyBqdXN0IGNvc21ldGljIGZvciBiZXR0ZXIgZGVidWcgcHJpbnRpbmcgdG8gbWFrZSBpdCBtb3JlIGNsZWFyXHJcbiAgICAvLyB3aGVyZSBhIHRyaWdnZXIgb3IgYW4gb3ZlcnJpZGUgaXMgY29taW5nIGZyb20uXHJcbiAgICBzZXQuZmlsZW5hbWUgPSBgJHtiYXNlUGF0aH0ke25hbWV9YDtcclxuICAgIHNldC5pc1VzZXJUcmlnZ2VyU2V0ID0gdHJ1ZTtcclxuXHJcbiAgICBmbGF0dGVuVGltZWxpbmUoc2V0LCBuYW1lLCBmaWxlcyk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcHJvY2Vzc1BlclRyaWdnZXJBdXRvQ29uZmlnID0gKG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucywgc2F2ZWRDb25maWc6IFNhdmVkQ29uZmlnRW50cnkpID0+IHtcclxuICAvLyByYWlkYm9zcyB3aWxsIGxvb2sgdXAgdGhpcy5vcHRpb25zLlBlclRyaWdnZXJBdXRvQ29uZmlnIHRvIGZpbmQgdGhlc2UgdmFsdWVzLlxyXG4gIGNvbnN0IG9wdGlvbk5hbWUgPSAnUGVyVHJpZ2dlckF1dG9Db25maWcnO1xyXG5cclxuICBjb25zdCBwZXJUcmlnZ2VyQXV0b0NvbmZpZyA9IG9wdGlvbnNbb3B0aW9uTmFtZV0gPz89IHt9O1xyXG4gIGlmICh0eXBlb2Ygc2F2ZWRDb25maWcgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoc2F2ZWRDb25maWcpKVxyXG4gICAgcmV0dXJuO1xyXG4gIGNvbnN0IHRyaWdnZXJzID0gc2F2ZWRDb25maWdba09wdGlvbktleXMudHJpZ2dlcnNdO1xyXG4gIGlmICh0eXBlb2YgdHJpZ2dlcnMgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodHJpZ2dlcnMpKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBjb25zdCBvdXRwdXRPYmpzOiB7IFtrZXk6IHN0cmluZ106IFRyaWdnZXJBdXRvQ29uZmlnIH0gPSB7fTtcclxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoa1RyaWdnZXJPcHRpb25zKTtcclxuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICBjb25zdCBvYmogPSBvdXRwdXRPYmpzW2tleV0gPSB7fTtcclxuICAgIHNldE9wdGlvbnNGcm9tT3V0cHV0VmFsdWUoa2V5LCBvYmopO1xyXG4gIH1cclxuXHJcbiAgZm9yIChjb25zdCBbaWQsIGVudHJ5XSBvZiBPYmplY3QuZW50cmllcyh0cmlnZ2VycykpIHtcclxuICAgIGlmICh0eXBlb2YgZW50cnkgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKVxyXG4gICAgICByZXR1cm47XHJcblxyXG4gICAgY29uc3QgYXV0b0NvbmZpZzogVHJpZ2dlckF1dG9Db25maWcgPSB7fTtcclxuXHJcbiAgICBjb25zdCBvdXRwdXQgPSBlbnRyeVtrT3B0aW9uS2V5cy5vdXRwdXRdO1xyXG4gICAgaWYgKHR5cGVvZiBvdXRwdXQgPT09ICdzdHJpbmcnKVxyXG4gICAgICBPYmplY3QuYXNzaWduKGF1dG9Db25maWcsIG91dHB1dE9ianNbb3V0cHV0XSk7XHJcblxyXG4gICAgY29uc3QgZHVyYXRpb24gPSB2YWxpZER1cmF0aW9uT3JVbmRlZmluZWQoZW50cnlba09wdGlvbktleXMuZHVyYXRpb25dKTtcclxuICAgIGlmIChkdXJhdGlvbilcclxuICAgICAgYXV0b0NvbmZpZ1trT3B0aW9uS2V5cy5kdXJhdGlvbl0gPSBkdXJhdGlvbjtcclxuXHJcbiAgICBjb25zdCBiZWZvcmVTZWNvbmRzID0gdmFsaWREdXJhdGlvbk9yVW5kZWZpbmVkKGVudHJ5W2tPcHRpb25LZXlzLmJlZm9yZVNlY29uZHNdKTtcclxuICAgIGlmIChiZWZvcmVTZWNvbmRzKVxyXG4gICAgICBhdXRvQ29uZmlnW2tPcHRpb25LZXlzLmJlZm9yZVNlY29uZHNdID0gYmVmb3JlU2Vjb25kcztcclxuXHJcbiAgICBjb25zdCBkZWxheUFkanVzdFNlY29uZHMgPSB2YWxpZERlbGF5QWRqdXN0T3JVbmRlZmluZWQoZW50cnlba09wdGlvbktleXMuZGVsYXlBZGp1c3RdKTtcclxuICAgIGlmIChkZWxheUFkanVzdFNlY29uZHMpXHJcbiAgICAgIGF1dG9Db25maWdba09wdGlvbktleXMuZGVsYXlBZGp1c3RdID0gZGVsYXlBZGp1c3RTZWNvbmRzO1xyXG5cclxuICAgIGNvbnN0IG91dHB1dFN0cmluZ3MgPSBlbnRyeVtrT3B0aW9uS2V5cy5vdXRwdXRTdHJpbmdzXTtcclxuICAgIC8vIFZhbGlkYXRlIHRoYXQgdGhlIFNhdmVkQ29uZmlnRW50cnkgaXMgYW4gYW4gb2JqZWN0IHdpdGggc3RyaW5nIHZhbHVlcyxcclxuICAgIC8vIHdoaWNoIGlzIGEgc3Vic2V0IG9mIHRoZSBPdXRwdXRTdHJpbmdzIHR5cGUuXHJcbiAgICBpZiAoXHJcbiAgICAgICgoZW50cnk/OiBTYXZlZENvbmZpZ0VudHJ5KTogZW50cnkgaXMgeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShlbnRyeSkpXHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBPYmplY3QudmFsdWVzKGVudHJ5KSkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pKG91dHB1dFN0cmluZ3MpXHJcbiAgICApXHJcbiAgICAgIGF1dG9Db25maWdba09wdGlvbktleXMub3V0cHV0U3RyaW5nc10gPSBvdXRwdXRTdHJpbmdzO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygb3V0cHV0ID09PSAnc3RyaW5nJyB8fCBkdXJhdGlvbiB8fCBvdXRwdXRTdHJpbmdzICE9PSB1bmRlZmluZWQpXHJcbiAgICAgIHBlclRyaWdnZXJBdXRvQ29uZmlnW2lkXSA9IGF1dG9Db25maWc7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcHJvY2Vzc1BlclRyaWdnZXJTZXRBdXRvQ29uZmlnID0gKFxyXG4gIG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucyxcclxuICBzYXZlZENvbmZpZzogU2F2ZWRDb25maWdFbnRyeSxcclxuKSA9PiB7XHJcbiAgLy8gcmFpZGJvc3Mgd2lsbCBsb29rIHVwIHRoaXMub3B0aW9ucy5QZXJUcmlnZ2VyU2V0QXV0b0NvbmZpZyB0byBmaW5kIHRoZXNlIHZhbHVlcy5cclxuICBjb25zdCBvcHRpb25OYW1lID0gJ1BlclRyaWdnZXJTZXRBdXRvQ29uZmlnJztcclxuXHJcbiAgY29uc3QgcGVyVHJpZ2dlclNldEF1dG9Db25maWcgPSBvcHRpb25zW29wdGlvbk5hbWVdID8/PSB7fTtcclxuICBpZiAodHlwZW9mIHNhdmVkQ29uZmlnICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHNhdmVkQ29uZmlnKSlcclxuICAgIHJldHVybjtcclxuICBjb25zdCB0cmlnZ2VyU2V0cyA9IHNhdmVkQ29uZmlnW2tPcHRpb25LZXlzLnRyaWdnZXJTZXRzXTtcclxuICBpZiAodHlwZW9mIHRyaWdnZXJTZXRzICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRyaWdnZXJTZXRzKSlcclxuICAgIHJldHVybjtcclxuXHJcbiAgY29uc3Qgb3V0cHV0T2JqczogeyBba2V5OiBzdHJpbmddOiBUcmlnZ2VyU2V0QXV0b0NvbmZpZyB9ID0ge307XHJcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGtUcmlnZ2VyT3B0aW9ucyk7XHJcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgY29uc3Qgb2JqID0gb3V0cHV0T2Jqc1trZXldID0ge307XHJcbiAgICBzZXRPcHRpb25zRnJvbU91dHB1dFZhbHVlKGtleSwgb2JqKTtcclxuICB9XHJcblxyXG4gIGZvciAoY29uc3QgW2lkLCBlbnRyeV0gb2YgT2JqZWN0LmVudHJpZXModHJpZ2dlclNldHMpKSB7XHJcbiAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGVudHJ5KSlcclxuICAgICAgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IG91dHB1dCA9IGVudHJ5W2tPcHRpb25LZXlzLm91dHB1dF07XHJcbiAgICBpZiAodHlwZW9mIG91dHB1dCA9PT0gJ3N0cmluZycpXHJcbiAgICAgIHBlclRyaWdnZXJTZXRBdXRvQ29uZmlnW2lkXSA9IHsgLi4ub3V0cHV0T2Jqc1tvdXRwdXRdIH07XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcHJvY2Vzc1BlclpvbmVUaW1lbGluZUNvbmZpZyA9IChvcHRpb25zOiBSYWlkYm9zc09wdGlvbnMsIHNhdmVkQ29uZmlnOiBTYXZlZENvbmZpZ0VudHJ5KSA9PiB7XHJcbiAgY29uc3Qgb3B0aW9uTmFtZSA9ICdQZXJab25lVGltZWxpbmVDb25maWcnO1xyXG4gIC8vIFNhdmVkQ29uZmlnIHVzZXMgdGhpcyBrZXkgc3RydWN0dXJlOlxyXG4gIC8vICogJ3RpbWVsaW5lJywgem9uZUlkIChhcyBzdHJpbmcpLCAnZW5hYmxlJywgdGV4dCwgYm9vbGVhblxyXG4gIC8vICogJ3RpbWVsaW5lJywgem9uZUlkIChhcyBzdHJpbmcpLCAnZ2xvYmFsUmVwbGFjZScsIHRleHQsIHN0cmluZ1xyXG4gIC8vIC4uLmFuZCB0aGlzIGZ1bmN0aW9uIHRyYW5zZm9ybXMgaXQgaW50byBhIGBQZXJab25lVGltZWxpbmVDb25maWdgLlxyXG5cclxuICBjb25zdCBwZXJab25lVGltZWxpbmVDb25maWcgPSBvcHRpb25zW29wdGlvbk5hbWVdID8/PSB7fTtcclxuICBpZiAodHlwZW9mIHNhdmVkQ29uZmlnICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHNhdmVkQ29uZmlnKSlcclxuICAgIHJldHVybjtcclxuICBjb25zdCB0aW1lbGluZSA9IHNhdmVkQ29uZmlnWyd0aW1lbGluZSddO1xyXG4gIGlmICh0eXBlb2YgdGltZWxpbmUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodGltZWxpbmUpKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBmb3IgKGNvbnN0IFt6b25lS2V5LCB6b25lRW50cnldIG9mIE9iamVjdC5lbnRyaWVzKHRpbWVsaW5lKSkge1xyXG4gICAgY29uc3Qgem9uZUlkID0gcGFyc2VJbnQoem9uZUtleSk7XHJcbiAgICBpZiAoIXpvbmVJZClcclxuICAgICAgY29udGludWU7XHJcbiAgICBjb25zdCB0aW1lbGluZUNvbmZpZyA9IHBlclpvbmVUaW1lbGluZUNvbmZpZ1t6b25lSWRdID8/PSB7fTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHpvbmVFbnRyeSAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh6b25lRW50cnkpKVxyXG4gICAgICBjb250aW51ZTtcclxuXHJcbiAgICBjb25zdCBlbmFibGVFbnRyeSA9IHpvbmVFbnRyeVsnZW5hYmxlJ107XHJcbiAgICBjb25zdCByZXBsYWNlRW50cnkgPSB6b25lRW50cnlbJ2dsb2JhbFJlcGxhY2UnXTtcclxuICAgIGNvbnN0IGFkZEVudHJ5ID0gem9uZUVudHJ5WydhZGQnXTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGVuYWJsZUVudHJ5ID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShlbmFibGVFbnRyeSkpIHtcclxuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZW5hYmxlRW50cnkpKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nICYmICF2YWx1ZSlcclxuICAgICAgICAgICh0aW1lbGluZUNvbmZpZy5JZ25vcmUgPz89IFtdKS5wdXNoKGtleSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VFbnRyeSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVwbGFjZUVudHJ5KSkge1xyXG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZXBsYWNlRW50cnkpKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgICAodGltZWxpbmVDb25maWcuUmVuYW1lID8/PSB7fSlba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFkZEVudHJ5ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGFkZEVudHJ5ID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KGFkZEVudHJ5KSkge1xyXG4gICAgICBmb3IgKGNvbnN0IHJvdyBvZiBhZGRFbnRyeSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygcm93ICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHJvdykpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICBjb25zdCB0aW1lID0gdHlwZW9mIHJvdy50aW1lID09PSAnc3RyaW5nJyA/IHBhcnNlRmxvYXQocm93LnRpbWUpIDogTmFOO1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSB0eXBlb2Ygcm93LnRleHQgPT09ICdzdHJpbmcnID8gcm93LnRleHQgOiAnJztcclxuICAgICAgICBjb25zdCBkdXJhdGlvbk9yTmFOID0gdHlwZW9mIHJvdy5kdXJhdGlvbiA9PT0gJ3N0cmluZycgPyBwYXJzZUZsb2F0KHJvdy5kdXJhdGlvbikgOiBOYU47XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBpc05hTihkdXJhdGlvbk9yTmFOKSA/IHVuZGVmaW5lZCA6IGR1cmF0aW9uT3JOYU47XHJcblxyXG4gICAgICAgIGlmICh0ZXh0LnRyaW0oKSA9PT0gJycgfHwgaXNOYU4odGltZSkpXHJcbiAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgKHRpbWVsaW5lQ29uZmlnLkFkZCA/Pz0gW10pLnB1c2goeyB0aW1lLCB0ZXh0LCBkdXJhdGlvbiB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHByb2Nlc3NUcmlnZ2VyU2V0Q29uZmlnID0gKG9wdGlvbnM6IFJhaWRib3NzT3B0aW9ucywgc2F2ZWRDb25maWc6IFNhdmVkQ29uZmlnRW50cnkpID0+IHtcclxuICAvLyBOb3RlOiB0aGlzIGZ1bmN0aW9uIGlzIGp1c3QgZm9yIHByb3ZpZGluZyB0aGUgcmF3IHZhbHVlcyBmb3IgVHJpZ2dlclNldENvbmZpZy5cclxuICAvLyBwb3B1cHRleHQgaGFuZGxlcyB0aGUgbG9hZGluZyBvZiB0cmlnZ2Vyc2V0cyBhdCBydW50aW1lIChtYXliZSB0aGlzIHNob3VsZCBiZSBtZXJnZWQ/KVxyXG4gIC8vIGFuZCBzbyBpdCBoYXMgdG8gZG8gdGhlIHdvcmsgb2YgdXNpbmcgdGhpcyBpbmZvIHRvIHNldCBkZWZhdWx0cywgYXBwbHkgb3ZlcnJpZGVzLCBhbmRcclxuICAvLyBydW4gc2V0dGVyIGZ1bmN0aW9ucyB2aWEgYHByb2Nlc3NPcHRpb25zYC5cclxuICBjb25zdCBvcHRpb25OYW1lID0gJ1RyaWdnZXJTZXRDb25maWcnO1xyXG4gIGNvbnN0IG91dHB1dFRyaWdnZXJTZXRDb25maWcgPSBvcHRpb25zW29wdGlvbk5hbWVdID8/PSB7fTtcclxuICBpZiAodHlwZW9mIHNhdmVkQ29uZmlnICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHNhdmVkQ29uZmlnKSlcclxuICAgIHJldHVybjtcclxuXHJcbiAgLy8gcmFpZGJvc3MgPiBUcmlnZ2VyU2V0Q29uZmlnID4gW3RyaWdnZXJTZXRJZF0gPiBba2V5XSA+IFtsZWFmIENvbmZpZ1ZhbHVlXVxyXG4gIGNvbnN0IHRyaWdnZXJTZXRDb25maWcgPSBzYXZlZENvbmZpZ1trT3B0aW9uS2V5cy50cmlnZ2VyU2V0Q29uZmlnXTtcclxuICBpZiAoXHJcbiAgICB0cmlnZ2VyU2V0Q29uZmlnID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHRyaWdnZXJTZXRDb25maWcgIT09ICdvYmplY3QnIHx8XHJcbiAgICBBcnJheS5pc0FycmF5KHRyaWdnZXJTZXRDb25maWcpXHJcbiAgKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBmb3IgKGNvbnN0IFt0cmlnZ2VyU2V0SWQsIGNvbmZpZ0RpY3RdIG9mIE9iamVjdC5lbnRyaWVzKHRyaWdnZXJTZXRDb25maWcpKSB7XHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZ0RpY3QgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkoY29uZmlnRGljdCkpXHJcbiAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbmZpZ0RpY3QpKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpXHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIChvdXRwdXRUcmlnZ2VyU2V0Q29uZmlnW3RyaWdnZXJTZXRJZF0gPz89IHt9KVtrZXldID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gUmV1c2VkIGZvciBib3RoIHRvcCBsZXZlbCBVSSBhbmQgdHJpZ2dlciBzZXQgY29uZmlnIFVJLlxyXG5jb25zdCBkZWZhdWx0QWxlcnRPdXRwdXQ6IENvbmZpZ0VudHJ5ID0ge1xyXG4gIGlkOiAnRGVmYXVsdEFsZXJ0T3V0cHV0JyxcclxuICBuYW1lOiB7XHJcbiAgICBlbjogJ0RlZmF1bHQgYWxlcnQgb3V0cHV0JyxcclxuICAgIGRlOiAnU3RhbmRhcmQgQWxlcnQgQXVzZ2FiZScsXHJcbiAgICBmcjogJ0FsZXJ0ZSBwYXIgZMOpZmF1dCcsXHJcbiAgICBqYTogJ+itpuWRiuaDheWgseWHuuWKm+aXouWumuWApCcsXHJcbiAgICBjbjogJ+m7mOiupOinpuWPkeWZqOaPkOekuui+k+WHuuaooeW8jycsXHJcbiAgICBrbzogJ+q4sOuzuCDslYzrnowg7Lac66ClIOuwqeyLnScsXHJcbiAgfSxcclxuICB0eXBlOiAnc2VsZWN0JyxcclxuICBvcHRpb25zOiB7XHJcbiAgICBlbjoge1xyXG4gICAgICAn8J+GmfCflIogVGV4dCBhbmQgU291bmQnOiAndGV4dEFuZFNvdW5kJyxcclxuICAgICAgJ/Cfhpnwn5KsIFRleHQgYW5kIFRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgJ/CfkqwgVFRTIE9ubHknOiAndHRzT25seScsXHJcbiAgICAgICfwn4aZIFRleHQgT25seSc6ICd0ZXh0T25seScsXHJcbiAgICAgICfinYwgRGlzYWJsZWQnOiAnZGlzYWJsZWQnLFxyXG4gICAgfSxcclxuICAgIGRlOiB7XHJcbiAgICAgICfwn4aZ8J+UiiBUZXh0IHVuZCBUb24nOiAndGV4dEFuZFNvdW5kJyxcclxuICAgICAgJ/Cfhpnwn5KsIFRleHQgdW5kIFRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgJ/CfkqwgTnVyIFRUUyc6ICd0dHNPbmx5JyxcclxuICAgICAgJ/CfhpkgTnVyIFRleHQnOiAndGV4dE9ubHknLFxyXG4gICAgICAn4p2MIERlYWt0aXZpZXJ0JzogJ2Rpc2FibGVkJyxcclxuICAgIH0sXHJcbiAgICBmcjoge1xyXG4gICAgICAn8J+GmfCflIogVGV4dGUgZXQgc29uJzogJ3RleHRBbmRTb3VuZCcsXHJcbiAgICAgICfwn4aZ8J+SrCBUZXh0ZSBldCBUVFMnOiAndHRzQW5kVGV4dCcsXHJcbiAgICAgICfwn5KsIFRUUyBzZXVsZW1lbnQnOiAndHRzT25seScsXHJcbiAgICAgICfwn4aZIFRleHRlIHNldWxlbWVudCc6ICd0ZXh0T25seScsXHJcbiAgICAgICfinYwgRMOpc2FjdGl2w6knOiAnZGlzYWJsZWQnLFxyXG4gICAgfSxcclxuICAgIGphOiB7XHJcbiAgICAgICfwn4aZ8J+UiiDjg4bjgq3jgrnjg4jjgajpn7Plo7AnOiAndGV4dEFuZFNvdW5kJyxcclxuICAgICAgJ/Cfhpnwn5KsIOODhuOCreOCueODiOOBqFRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgJ/CfkqwgVFRT44Gu44G/JzogJ3R0c09ubHknLFxyXG4gICAgICAn8J+GmSDjg4bjgq3jgrnjg4jjga7jgb8nOiAndGV4dE9ubHknLFxyXG4gICAgICAn4p2MIOeEoeWKuSc6ICdkaXNhYmxlZCcsXHJcbiAgICB9LFxyXG4gICAgY246IHtcclxuICAgICAgJ/Cfhpnwn5SKIOaWh+acrOaYvuekuuS4juaPkOekuumfsyc6ICd0ZXh0QW5kU291bmQnLFxyXG4gICAgICAn8J+GmfCfkqwg5paH5pys5pi+56S65LiOVFRTJzogJ3R0c0FuZFRleHQnLFxyXG4gICAgICAn8J+SrCDlj6rkvb/nlKhUVFMnOiAndHRzT25seScsXHJcbiAgICAgICfwn4aZIOWPquS9v+eUqOaWh+acrOaYvuekuic6ICd0ZXh0T25seScsXHJcbiAgICAgICfinYwg56aB55SoJzogJ2Rpc2FibGVkJyxcclxuICAgIH0sXHJcbiAgICBrbzoge1xyXG4gICAgICAn8J+GmfCflIog7YWN7Iqk7Yq47JmAIOyGjOumrCc6ICd0ZXh0QW5kU291bmQnLFxyXG4gICAgICAn8J+GmfCfkqwg7YWN7Iqk7Yq47JmAIFRUUyc6ICd0dHNBbmRUZXh0JyxcclxuICAgICAgJ/CfkqwgVFRT66eMJzogJ3R0c09ubHknLFxyXG4gICAgICAn8J+GmSDthY3siqTtirjrp4wnOiAndGV4dE9ubHknLFxyXG4gICAgICAn4p2MIOu5hO2ZnOyEse2ZlCc6ICdkaXNhYmxlZCcsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgZGVmYXVsdDogJ3RleHRBbmRTb3VuZCcsXHJcbiAgc2V0dGVyRnVuYzogc2V0T3B0aW9uc0Zyb21PdXRwdXRWYWx1ZSxcclxufSBhcyBjb25zdDtcclxuXHJcbmNvbnN0IGRlZmF1bHRUcmlnZ2VyU2V0QWxlcnRPdXRwdXQgPSB7XHJcbiAgLi4uZGVmYXVsdEFsZXJ0T3V0cHV0LFxyXG4gIG5hbWU6IHtcclxuICAgIGVuOiAnRGVmYXVsdCB0cmlnZ2VyIHNldCBhbGVydCBvdXRwdXQnLFxyXG4gICAgZGU6ICdTdGFuZGFyZCB0cmlnZ2VyLVNldCBBbGVydCBBdXNnYWJlJyxcclxuICAgIGphOiAn5Z+65pys44OI44Oq44Ks44O844K744OD44OI44Gu6YCa55+l5pa55rOVJyxcclxuICAgIGNuOiAn6buY6K6k6Kem5Y+R5Zmo6ZuG5ZCI5o+Q56S66L6T5Ye65qih5byPJyxcclxuICAgIGtvOiAn4YSA4YW14YSH4YWp4YarIOGEkOGFs+GEheGFteGEgOGFpSDhhInhhabhhJDhhbMg7JWM656MIOy2nOugpSDrsKnsi50nLFxyXG4gIH0sXHJcbn0gYXMgY29uc3Q7XHJcblxyXG5jb25zdCB0ZW1wbGF0ZU9wdGlvbnM6IE9wdGlvbnNUZW1wbGF0ZSA9IHtcclxuICBidWlsZEV4dHJhVUk6IChiYXNlLCBjb250YWluZXIpID0+IHtcclxuICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgUmFpZGJvc3NDb25maWd1cmF0b3IoYmFzZSk7XHJcbiAgICBjb25zdCB1c2VyT3B0aW9ucyA9IHsgLi4ucmFpZGJvc3NPcHRpb25zIH07XHJcbiAgICBVc2VyQ29uZmlnLmxvYWRVc2VyRmlsZXMoJ3JhaWRib3NzJywgdXNlck9wdGlvbnMsICgpID0+IHtcclxuICAgICAgYnVpbGRlci5idWlsZFVJKGNvbnRhaW5lciwgcmFpZGJvc3NGaWxlRGF0YSwgdXNlck9wdGlvbnMpO1xyXG4gICAgfSwgZmFsc2UpO1xyXG4gIH0sXHJcbiAgcHJvY2Vzc0V4dHJhT3B0aW9uczogKGJhc2VPcHRpb25zLCBzYXZlZENvbmZpZykgPT4ge1xyXG4gICAgLy8gVE9ETzogUmV3cml0ZSB1c2VyX2NvbmZpZyB0byBiZSB0ZW1wbGF0ZWQgb24gb3B0aW9uIHR5cGUgc28gdGhhdCB0aGlzIGZ1bmN0aW9uIGtub3dzXHJcbiAgICAvLyB3aGF0IHR5cGUgb2Ygb3B0aW9ucyBpdCBpcyB1c2luZy4gIFdpdGhvdXQgdGhpcywgcGVyVHJpZ2dlckF1dG9Db25maWcgaXMgdW5rbm93bi5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBiYXNlT3B0aW9ucyBhcyBSYWlkYm9zc09wdGlvbnM7XHJcblxyXG4gICAgcHJvY2Vzc1BlclRyaWdnZXJBdXRvQ29uZmlnKG9wdGlvbnMsIHNhdmVkQ29uZmlnKTtcclxuICAgIHByb2Nlc3NQZXJUcmlnZ2VyU2V0QXV0b0NvbmZpZyhvcHRpb25zLCBzYXZlZENvbmZpZyk7XHJcbiAgICBwcm9jZXNzUGVyWm9uZVRpbWVsaW5lQ29uZmlnKG9wdGlvbnMsIHNhdmVkQ29uZmlnKTtcclxuICAgIHByb2Nlc3NUcmlnZ2VyU2V0Q29uZmlnKG9wdGlvbnMsIHNhdmVkQ29uZmlnKTtcclxuICB9LFxyXG4gIG9wdGlvbnM6IFtcclxuICAgIHtcclxuICAgICAgaWQ6ICdDb3ZlcmFnZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ1N1cHBvcnRlZCBjb250ZW50IChsYXRlc3QgdmVyc2lvbiknLFxyXG4gICAgICAgIGRlOiAnVW50ZXJzdMO8dHp0ZSBJbmhhbHRlIChha3R1ZWxsc3RlIFZlcnNpb24pJyxcclxuICAgICAgICBmcjogJ0NvbnRlbnUgc3VwcG9ydMOpIChkZXJuacOocmUgdmVyc2lvbiknLFxyXG4gICAgICAgIGphOiAn5a++5b+c44Kz44Oz44OG44Oz44OE5LiA6KanICjmnIDmlrDjg5Djg7zjgrjjg6fjg7MpJyxcclxuICAgICAgICBjbjogJ+aUr+aMgeWJr+acrOS4gOiniCAo5ZCr5pyq5Y+R5biD5pu05pawKScsXHJcbiAgICAgICAga286ICfsp4Dsm5DtlZjripQg7Luo7YWQ7LigICjrprTrpqzspojrsoTsoITrs7Tri6Qg7LWc7IugKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdodG1sJyxcclxuICAgICAgaHRtbDoge1xyXG4gICAgICAgIC8vIFRPRE86IGl0J2QgYmUgbmljZSBpZiBPdmVybGF5UGx1Z2luIGNvdWxkIG9wZW4gbGlua3Mgb24gdGhlIHN5c3RlbSBvdXRzaWRlIG9mIEFDVC5cclxuICAgICAgICBlbjogbWFrZUxpbmsoJ2h0dHBzOi8vcXVpc3F1b3VzLmdpdGh1Yi5pby9jYWN0Ym90L3V0aWwvY292ZXJhZ2UvY292ZXJhZ2UuaHRtbD9sYW5nPWVuJyksXHJcbiAgICAgICAgZGU6IG1ha2VMaW5rKCdodHRwczovL3F1aXNxdW91cy5naXRodWIuaW8vY2FjdGJvdC91dGlsL2NvdmVyYWdlL2NvdmVyYWdlLmh0bWw/bGFuZz1kZScpLFxyXG4gICAgICAgIGZyOiBtYWtlTGluaygnaHR0cHM6Ly9xdWlzcXVvdXMuZ2l0aHViLmlvL2NhY3Rib3QvdXRpbC9jb3ZlcmFnZS9jb3ZlcmFnZS5odG1sP2xhbmc9ZnInKSxcclxuICAgICAgICBqYTogbWFrZUxpbmsoJ2h0dHBzOi8vcXVpc3F1b3VzLmdpdGh1Yi5pby9jYWN0Ym90L3V0aWwvY292ZXJhZ2UvY292ZXJhZ2UuaHRtbD9sYW5nPWphJyksXHJcbiAgICAgICAgY246IG1ha2VMaW5rKCdodHRwczovL3F1aXNxdW91cy5naXRodWIuaW8vY2FjdGJvdC91dGlsL2NvdmVyYWdlL2NvdmVyYWdlLmh0bWw/bGFuZz1jbicpLFxyXG4gICAgICAgIGtvOiBtYWtlTGluaygnaHR0cHM6Ly9xdWlzcXVvdXMuZ2l0aHViLmlvL2NhY3Rib3QvdXRpbC9jb3ZlcmFnZS9jb3ZlcmFnZS5odG1sP2xhbmc9a28nKSxcclxuICAgICAgfSxcclxuICAgICAgZGVmYXVsdDogbWFrZUxpbmsoJ2h0dHBzOi8vcXVpc3F1b3VzLmdpdGh1Yi5pby9jYWN0Ym90L3V0aWwvY292ZXJhZ2UvY292ZXJhZ2UuaHRtbD9sYW5nPWVuJyksXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0RlYnVnJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnRW5hYmxlIGRlYnVnIG1vZGUnLFxyXG4gICAgICAgIGRlOiAnQWt0aXZpZXJlIERlYnVnbW9kdXMnLFxyXG4gICAgICAgIGZyOiAnQWN0aXZlciBsZSBtb2RlIGRlYnVnJyxcclxuICAgICAgICBqYTogJ+ODh+ODkOODg+OCsOODouODvOODieOCkuacieWKueOBq+OBmeOCiycsXHJcbiAgICAgICAgY246ICflkK/nlKjosIPor5XmqKHlvI8nLFxyXG4gICAgICAgIGtvOiAn65SU67KE6re4IOuqqOuTnCDtmZzshLHtmZQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBkZWJ1Z09ubHk6IHRydWUsXHJcbiAgICAgIGRlZmF1bHQ6IGZhbHNlLFxyXG4gICAgfSxcclxuICAgIGRlZmF1bHRBbGVydE91dHB1dCxcclxuICAgIHtcclxuICAgICAgaWQ6ICdBbGVydHNMYW5ndWFnZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0FsZXJ0cyBsYW5ndWFnZScsXHJcbiAgICAgICAgZGU6ICdBbGVydCBTcHJhY2hlJyxcclxuICAgICAgICBmcjogJ0xhbmd1ZSBkZXMgYWxlcnRlcycsXHJcbiAgICAgICAgamE6ICforablkYrmg4XloLHjga7oqIDoqp4nLFxyXG4gICAgICAgIGNuOiAn6Kem5Y+R5Zmo5o+Q56S66K+t6KiAJyxcclxuICAgICAgICBrbzogJ+yVjOuejCDslrjslrQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgIGVuOiB7XHJcbiAgICAgICAgICAnVXNlIERpc3BsYXkgTGFuZ3VhZ2UnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnRW5nbGlzaCAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICdDaGluZXNlIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ0dlcm1hbiAoZGUpJzogJ2RlJyxcclxuICAgICAgICAgICdGcmVuY2ggKGZyKSc6ICdmcicsXHJcbiAgICAgICAgICAnSmFwYW5lc2UgKGphKSc6ICdqYScsXHJcbiAgICAgICAgICAnS29yZWFuIChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnI6IHtcclxuICAgICAgICAgICdVdGlsaXNlciBsYSBsYW5ndWUgZFxcJ2FmZmljaGFnZSc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICdBbmdsYWlzIChlbiknOiAnZW4nLFxyXG4gICAgICAgICAgJ0NoaW5vaXMgKGNuKSc6ICdjbicsXHJcbiAgICAgICAgICAnQWxsZW1hbmQgKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAnRnJhbsOnYWlzIChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ0phcG9uYWlzIChqYSknOiAnamEnLFxyXG4gICAgICAgICAgJ0NvcsOpZW4gKGtvKSc6ICdrbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBqYToge1xyXG4gICAgICAgICAgJ+ihqOekuuiogOiqnuaXouWumuWApCc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICfoi7Hoqp4gKGVuKSc6ICdlbicsXHJcbiAgICAgICAgICAn5Lit5Zu96KqeIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ+ODieOCpOODhOiqniAoZGUpJzogJ2RlJyxcclxuICAgICAgICAgICfjg5Xjg6njg7Pjgrnoqp4gKGZyKSc6ICdmcicsXHJcbiAgICAgICAgICAn5pel5pys6KqeIChqYSknOiAnamEnLFxyXG4gICAgICAgICAgJ+mfk+WbveiqniAoa28pJzogJ2tvJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNuOiB7XHJcbiAgICAgICAgICAn5L2/55So5pi+56S66K+t6KiAJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ+iLseaWhyAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICfkuK3mlocgKGNuKSc6ICdjbicsXHJcbiAgICAgICAgICAn5b635paHIChkZSknOiAnZGUnLFxyXG4gICAgICAgICAgJ+azleaWhyAoZnIpJzogJ2ZyJyxcclxuICAgICAgICAgICfml6XmlocgKGphKSc6ICdqYScsXHJcbiAgICAgICAgICAn6Z+p5paHIChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAga286IHtcclxuICAgICAgICAgICfso7wg7IKs7JqpIOyWuOyWtCDsgqzsmqknOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAn7JiB7Ja0IChlbiknOiAnZW4nLFxyXG4gICAgICAgICAgJ+ykkeq1reyWtCAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICfrj4XsnbzslrQgKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAn7ZSE656R7Iqk7Ja0IChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ+ydvOuzuOyWtCAoamEpJzogJ2phJyxcclxuICAgICAgICAgICftlZzqta3slrQgKGtvKSc6ICdrbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxyXG4gICAgICBkZWJ1ZzogdHJ1ZSxcclxuICAgICAgc2V0dGVyRnVuYzogKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSAnZGVmYXVsdCcpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdUaW1lbGluZUxhbmd1YWdlJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnVGltZWxpbmUgbGFuZ3VhZ2UnLFxyXG4gICAgICAgIGRlOiAnVGltZWxpbmUgU3ByYWNoZScsXHJcbiAgICAgICAgZnI6ICdMYW5ndWUgZGUgbGEgdGltZWxpbmUnLFxyXG4gICAgICAgIGphOiAn44K/44Kk44Og44Op44Kk44Oz44Gu6KiA6KqeJyxcclxuICAgICAgICBjbjogJ+aXtumXtOi9tOaWh+acrOeahOivreiogCcsXHJcbiAgICAgICAga286ICftg4DsnoTrnbzsnbgg7Ja47Ja0JyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBlbjoge1xyXG4gICAgICAgICAgJ1VzZSBGRlhJViBQbHVnaW4gTGFuZ3VhZ2UnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnRW5nbGlzaCAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICdDaGluZXNlIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ0dlcm1hbiAoZGUpJzogJ2RlJyxcclxuICAgICAgICAgICdGcmVuY2ggKGZyKSc6ICdmcicsXHJcbiAgICAgICAgICAnSmFwYW5lc2UgKGphKSc6ICdqYScsXHJcbiAgICAgICAgICAnS29yZWFuIChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGU6IHtcclxuICAgICAgICAgICdCZW51dHplIEZGWElWIFBsdWdpbiBTcHJhY2hlJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ0VuZ2xpc2NoIChlbiknOiAnZW4nLFxyXG4gICAgICAgICAgJ0NoaW5lc2lzY2ggKGNuKSc6ICdjbicsXHJcbiAgICAgICAgICAnRGV1dHNjaCAoZGUpJzogJ2RlJyxcclxuICAgICAgICAgICdGcmFuesO2c2lzY2ggKGZyKSc6ICdmcicsXHJcbiAgICAgICAgICAnSmFwYW5pc2NoIChqYSknOiAnamEnLFxyXG4gICAgICAgICAgJ0tvcmVhbmlzY2ggKGtvKSc6ICdrbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcjoge1xyXG4gICAgICAgICAgJ1V0aWxpc2VyIGxhIGxhbmd1ZSBkdSBQbHVnaW4gRkZYSVYnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnQW5nbGFpcyAoZW4pJzogJ2VuJyxcclxuICAgICAgICAgICdDaGlub2lzIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ0FsbGVtYW5kIChkZSknOiAnZGUnLFxyXG4gICAgICAgICAgJ0ZyYW7Dp2FpcyAoZnIpJzogJ2ZyJyxcclxuICAgICAgICAgICdKYXBvbmFpcyAoamEpJzogJ2phJyxcclxuICAgICAgICAgICdDb3LDqWVuIChrbyknOiAna28nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgamE6IHtcclxuICAgICAgICAgICdGRlhJViBQbHVnaW7jga7oqIDoqp7oqK3lrponOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAn6Iux6KqeIChlbiknOiAnZW4nLFxyXG4gICAgICAgICAgJ+S4reWbveiqniAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICfjg4njgqTjg4Toqp4gKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAn44OV44Op44Oz44K56KqeIChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ+aXpeacrOiqniAoamEpJzogJ2phJyxcclxuICAgICAgICAgICfpn5Plm73oqp4gKGtvKSc6ICdrbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbjoge1xyXG4gICAgICAgICAgJ+S9v+eUqOacgOe7iOW5u+aDs1hJVuino+aekOaPkuS7tuiuvue9rueahOivreiogCc6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICfoi7HmlocgKGVuKSc6ICdlbicsXHJcbiAgICAgICAgICAn5Lit5paHIChjbiknOiAnY24nLFxyXG4gICAgICAgICAgJ+W+t+aWhyAoZGUpJzogJ2RlJyxcclxuICAgICAgICAgICfms5XmlocgKGZyKSc6ICdmcicsXHJcbiAgICAgICAgICAn5pel5paHIChqYSknOiAnamEnLFxyXG4gICAgICAgICAgJ+mfqeaWhyAoa28pJzogJ2tvJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGtvOiB7XHJcbiAgICAgICAgICAnRkZYSVYgUGx1Z2luIOyWuOyWtCDsgqzsmqknOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAn7JiB7Ja0IChlbiknOiAnZW4nLFxyXG4gICAgICAgICAgJ+ykkeq1reyWtCAoY24pJzogJ2NuJyxcclxuICAgICAgICAgICfrj4XsnbzslrQgKGRlKSc6ICdkZScsXHJcbiAgICAgICAgICAn7ZSE656R7Iqk7Ja0IChmciknOiAnZnInLFxyXG4gICAgICAgICAgJ+ydvOuzuOyWtCAoamEpJzogJ2phJyxcclxuICAgICAgICAgICftlZzqta3slrQgKGtvKSc6ICdrbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxyXG4gICAgICBkZWJ1ZzogdHJ1ZSxcclxuICAgICAgc2V0dGVyRnVuYzogKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSAnZGVmYXVsdCcpXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdTa2luJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnUmFpZGJvc3MgU2tpbicsXHJcbiAgICAgICAgZGU6ICdSYWlkYm9zcyBTa2luJyxcclxuICAgICAgICBmcjogJ1JhaWRib3NzIFNraW4nLFxyXG4gICAgICAgIGphOiAnUmFpZGJvc3Pjga7jgrnjgq3jg7MnLFxyXG4gICAgICAgIGNuOiAnUmFpZGJvc3Pnmq7ogqQnLFxyXG4gICAgICAgIGtvOiAnUmFpZGJvc3Mg7Iqk7YKoJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICBlbjoge1xyXG4gICAgICAgICAgJ0RlZmF1bHQnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnbGlwcGUnOiAnbGlwcGUnLFxyXG4gICAgICAgICAgJ2p3aWRlYSc6ICdqd2lkZWEnLFxyXG4gICAgICAgICAgJ2RvcmdyaW4nOiAnZG9yZ3JpbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZToge1xyXG4gICAgICAgICAgJ0RlZmF1bHQnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnbGlwcGUnOiAnbGlwcGUnLFxyXG4gICAgICAgICAgJ2p3aWRlYSc6ICdqd2lkZWEnLFxyXG4gICAgICAgICAgJ2RvcmdyaW4nOiAnZG9yZ3JpbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcjoge1xyXG4gICAgICAgICAgJ0TDqWZhdXQnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnbGlwcGUnOiAnbGlwcGUnLFxyXG4gICAgICAgICAgJ2p3aWRlYSc6ICdqd2lkZWEnLFxyXG4gICAgICAgICAgJ2RvcmdyaW4nOiAnZG9yZ3JpbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBqYToge1xyXG4gICAgICAgICAgJ+WIneacn+ioreWumic6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICdsaXBwZSc6ICdsaXBwZScsXHJcbiAgICAgICAgICAnandpZGVhJzogJ2p3aWRlYScsXHJcbiAgICAgICAgICAnZG9yZ3Jpbic6ICdkb3JncmluJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNuOiB7XHJcbiAgICAgICAgICAn6buY6K6kJzogJ2RlZmF1bHQnLFxyXG4gICAgICAgICAgJ2xpcHBlJzogJ2xpcHBlJyxcclxuICAgICAgICAgICdqd2lkZWEnOiAnandpZGVhJyxcclxuICAgICAgICAgICdkb3JncmluJzogJ2RvcmdyaW4nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAga286IHtcclxuICAgICAgICAgICfquLDrs7gnOiAnZGVmYXVsdCcsXHJcbiAgICAgICAgICAnbGlwcGUnOiAnbGlwcGUnLFxyXG4gICAgICAgICAgJ2p3aWRlYSc6ICdqd2lkZWEnLFxyXG4gICAgICAgICAgJ2RvcmdyaW4nOiAnZG9yZ3JpbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdUaW1lbGluZUVuYWJsZWQnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdUaW1lbGluZSBlbmFibGVkJyxcclxuICAgICAgICBkZTogJ1RpbWVsaW5lIGFrdGl2aWVydCcsXHJcbiAgICAgICAgZnI6ICdUaW1lbGluZSBhY3RpdsOpZScsXHJcbiAgICAgICAgamE6ICfjgr/jgqTjg6Djg6njgqTjg7PjgpLmnInlirnjgavjgZnjgosnLFxyXG4gICAgICAgIGNuOiAn5ZCv55So5pe26Ze06L20JyxcclxuICAgICAgICBrbzogJ+2DgOyehOudvOyduCDtmZzshLHtmZQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdBbGVydHNFbmFibGVkJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnQWxlcnRzIGVuYWJsZWQnLFxyXG4gICAgICAgIGRlOiAnQWxlcnRzIGFrdGl2aWVydCcsXHJcbiAgICAgICAgZnI6ICdBbGVydGVzIGFjdGl2w6llcycsXHJcbiAgICAgICAgamE6ICforablkYrmg4XloLHjgpLmnInlirnjgavjgZnjgosnLFxyXG4gICAgICAgIGNuOiAn5ZCv55So6Kem5Y+R5Zmo5o+Q56S6JyxcclxuICAgICAgICBrbzogJ+yVjOuejCDtmZzshLHtmZQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBkZWZhdWx0OiB0cnVlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdSZXZlcnNlVGltZWxpbmUnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdSZXZlcnNlIHRpbWVsaW5lIG9yZGVyIChib3R0b20tdG8tdG9wKScsXHJcbiAgICAgICAgZGU6ICdVbWdla2VocnRlIFRpbWVsaW5lIFJlaWhlbmZvbGdlICh1bnRlbi1uYWNoLW9iZW4pJyxcclxuICAgICAgICBmcjogJ1RpbWVsaW5lIGludmVyc8OpZSAoZGUgYmFzIGVuIGhhdXQpJyxcclxuICAgICAgICBqYTogJ+OCv+OCpOODoOODqeOCpOODs+OCkuS4i+OBi+OCieihqOekuicsXHJcbiAgICAgICAgY246ICflj43ovazml7bpl7TovbTpobrluo8gKOS7juS4i+WIsOS4iiknLFxyXG4gICAgICAgIGtvOiAn7YOA7J6E65287J24IOyInOyEnCDrsJjsoIQgKOyVhOuemOyXkOyEnCDsnIQpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0RlZmF1bHRQbGF5ZXJMYWJlbCcsXHJcbiAgICAgIGNvbW1lbnQ6IHtcclxuICAgICAgICBlbjogYFRoZSBkZWZhdWx0IHdheSB0byBzcGVjaWZ5IHBsYXllcnMgaW4gdHJpZ2dlciBvdXRwdXQuIEJ5IGRlZmF1bHQsIGl0IHdpbGwgdXNlXHJcbiAgICAgICAgICAgICBuaWNrbmFtZXMvZmlyc3QgbmFtZXMuIFRoaXMgY2FuIGJlIHVzZWQgdG8gcHJpbnQgb3V0IHBsYXllciBqb2JzIGluc3RlYWQuXHJcbiAgICAgICAgICAgICBJZiB5b3UgYXJlIG5vdCBpbiBhIHBhcnR5IG9yIHBsYXllcnMgYXJlIG91dCBvZiBhIHBhcnR5IChvciB0aGVyZSBhcmUgYnVncyksXHJcbiAgICAgICAgICAgICBpdCB3aWxsIGRlZmF1bHQgdG8gdGhlIHBsYXllcidzIG5pY2tuYW1lIGlmIHRoZXJlJ3Mgbm8gb3RoZXIgaW5mb3JtYXRpb24uYCxcclxuICAgICAgICBkZTogYERpZSBTdGFuZGFyZG1ldGhvZGUgenVyIEFuZ2FiZSB2b24gU3BpZWxlcm4gaW4gZGVyIFRyaWdnZXJhdXNnYWJlLiBTdGFuZGFyZG3DpMOfaWcgd2VyZGVuXHJcbiAgICAgICAgICAgICBTcGl0em5hbWVuL1Zvcm5hbWVuIHZlcndlbmRldC4gRGllcyBrYW5uIHZlcndlbmRldCB3ZXJkZW4sIHVtIHN0YXR0ZGVzc2VuIFNwaWVsZXItSm9icyBkYXJ6dXN0ZWxsZW4uXHJcbiAgICAgICAgICAgICBXZW5uIFNpZSBuaWNodCBpbiBlaW5lciBHcnVwcGUgc2luZCBvZGVyIFNwaWVsZXIgbmljaHQgaW4gZWluZXIgR3J1cHBlIHNpbmQgKG9kZXIgZXMgRmVobGVyIGdpYnQpLFxyXG4gICAgICAgICAgICAgd2lyZCBzdGFuZGFyZG3DpMOfaWcgZGVyIFNwaXR6bmFtZSBkZXMgU3BpZWxlcnMgdmVyd2VuZGV0LCB3ZW5uIGVzIGtlaW5lIGFuZGVyZW4gSW5mb3JtYXRpb25lbiBnaWJ0LmAsXHJcbiAgICAgICAgamE6IGDjg4jjg6rjgqzjg7zjgafjg5fjg6zjgqTjg6Tjg7zjga7lkI3liY3jgpLooajnpLrjgZnjgovmlrnms5XjgafjgZnjgILln7rmnKzjgafjgYLjgaDlkI3jg7vjg5XjgqHjgrnjg4jjg43jg7zjg6DjgpLjgaTjgYvjgYTjgb7jgZnjgIJcclxuICAgICAgICAgICAgIOOBguOBquOBn+OBjOODkeODhuOCo+OBq+WFpeOBo+OBpuOBquOBhOWgtOWQiOOBqOODkeODhuOCo+S7peWkluOBruODl+ODrOOCpOODpOODvOOBr+OBguOBoOWQjeOBqOODleOCoeOCueODiOODjeODvOODoOOBjOihqOekuuOBleOCjOOBvuOBmeOAgmAsXHJcbiAgICAgICAgY246IGDlnKjop6blj5HlmajovpPlh7rkuK3mjIflrprnjqnlrrbnmoTpu5jorqTmlrnlvI/jgILpu5jorqTpgInpobnkuLrovpPlh7rmmLXnp7Av5ZCN5a2X44CCXHJcbiAgICAgICAgICAgICDkvb/nlKjmraTpgInpobnlj6/lsIbovpPlh7rmlrnlvI/mm7TmlLnkuLrnjqnlrrbnmoTogYzog73lkI3miJbogYzkuJrlkI3jgIJcclxuICAgICAgICAgICAgIOiLpeS9oOS4jeWcqOWwj+mYn+S4reaIlueOqeWutuemu+W8gOWwj+mYnyAo5oiW5Ye6546w6ZSZ6K+v5pe2KSwg5bCG6buY6K6k6L6T5Ye6546p5a625pi156ew44CCXHJcbiAgICAgICAgICAgICAo5rOo77ya5Zu95pyN5a+55LqO5pi156ew5ZKM5YWo5ZCN5LiN5YGa5Yy65YiGKWAsXHJcbiAgICAgICAga286IGDtirjrpqzqsbAg7Lac66Cl7JeQ7IScIO2UjOugiOydtOyWtOulvCDslrjquIntlZjripQg67Cp67KV7J6F64uI64ukLiDquLDrs7jqsJLsnLzroZwg64uJ64Sk7J6EL+ydtOumhOydhCDsgqzsmqntlanri4jri6QuXHJcbiAgICAgICAgICAgICDsnbQg7Ji17IWY7J2AIOydtOumhCDrjIDsi6Ag7ZSM66CI7J207Ja07J2YIOyngeyXheydtOuCmCDsl63tlaDsnYQg7Lac66Cl7ZWY6rOgIOyLtuydhCDrlYwg7IKs7Jqp7ZWgIOyImCDsnojsirXri4jri6QuXHJcbiAgICAgICAgICAgICDri7nsi6DsnbQg7YyM7Yuw7JeQIOyeiOyngCDslYrqsbDrgpgg7YyM7YuwIOuwluyXkCDsnojripQg7ZSM66CI7J207Ja07JeQIOuMgO2VtOyEnOuKlFxyXG4gICAgICAgICAgICAg6riw67O46rCS7J24IO2UjOugiOydtOyWtOydmCDri4nrhKTsnoTsnbQg7IKs7Jqp65Cp64uI64ukLlxyXG4gICAgICAgICAgICAgKO2VnOq1rSDshJzrsoTsl5DshJwgJ+ydtOumhCDsoITssrQnIOyYteyFmOydgCAn64uJ64Sk7J6EJ+qzvCDqsJnsirXri4jri6QuKWAsXHJcbiAgICAgIH0sXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0RlZmF1bHQgUGxheWVyIExhYmVsJyxcclxuICAgICAgICBkZTogJ1N0YW5kYXJkIFNwaWVsZXIgTGFiZWwnLFxyXG4gICAgICAgIGphOiAn5Z+65pys44OX44Os44Kk44Ok44O844Op44OZ44OrJyxcclxuICAgICAgICBjbjogJ+m7mOiupOeOqeWutuS7o+ensCcsXHJcbiAgICAgICAga286ICftlIzroIjsnbTslrTrpbwg7Ja46riJ7ZWY64qUIOq4sOuzuCDrsKnrspUnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnc2VsZWN0JyxcclxuICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgIGVuOiB7XHJcbiAgICAgICAgICAnTmlja25hbWUgKFRpbmkpJzogJ25pY2snLFxyXG4gICAgICAgICAgJ1JvbGUgKFRhbmspJzogJ3JvbGUnLFxyXG4gICAgICAgICAgJ0pvYiAoV0FSKSc6ICdqb2InLFxyXG4gICAgICAgICAgJ0Z1bGwgSm9iIChXYXJyaW9yKSc6ICdqb2JGdWxsJyxcclxuICAgICAgICAgICdGdWxsIE5hbWUgKFRpbmkgUG91dGluaSknOiAnbmFtZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZToge1xyXG4gICAgICAgICAgJ1NwaXR6bmFtZSAoVGluaSknOiAnbmljaycsXHJcbiAgICAgICAgICAnUm9sbGUgKFRhbmspJzogJ3JvbGUnLFxyXG4gICAgICAgICAgJ0pvYiAoV0FSKSc6ICdqb2InLFxyXG4gICAgICAgICAgJ0pvYiBhdXNnZXNjaHJpZWJlbiAoV2FycmlvciknOiAnam9iRnVsbCcsXHJcbiAgICAgICAgICAnS29tcGxldHRlciBOYW1lIChUaW5pIFBvdXRpbmkpJzogJ25hbWUnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgamE6IHtcclxuICAgICAgICAgICfjgYLjgaDlkI0gKFRpbmkpJzogJ25pY2snLFxyXG4gICAgICAgICAgJ+ODreODvOODqyAo44OS44O844Op44O8KSc6ICdyb2xlJyxcclxuICAgICAgICAgICfnsKHnlaXjgrjjg6fjg5YgKOeZvemtlCknOiAnam9iJyxcclxuICAgICAgICAgICfjgrjjg6fjg5YgKOeZvemtlOWwjuWjqyknOiAnam9iRnVsbCcsXHJcbiAgICAgICAgICAn5ZCN5YmNIChUaW5pIFBvdXRpbmkpJzogJ25hbWUnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY246IHtcclxuICAgICAgICAgICfmmLXnp7AgKOW8l+mbtyknOiAnbmljaycsXHJcbiAgICAgICAgICAn6IGM6IO9ICjlnablhYspJzogJ3JvbGUnLFxyXG4gICAgICAgICAgJ+iBjOS4mueugOensCAo5pqX6aqRKSc6ICdqb2InLFxyXG4gICAgICAgICAgJ+iBjOS4muWFqOensCAo5pqX6buR6aqR5aOrKSc6ICdqb2JGdWxsJyxcclxuICAgICAgICAgICflhajlkI0gKOW8l+mbtyknOiAnbmFtZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBrbzoge1xyXG4gICAgICAgICAgJ+uLieuEpOyehCAoVGluaSknOiAnbmljaycsXHJcbiAgICAgICAgICAn7Jet7ZWgICjtg7Hsu6QpJzogJ3JvbGUnLFxyXG4gICAgICAgICAgJ+yngeyXhSAo7JWU6riwKSc6ICdqb2InLFxyXG4gICAgICAgICAgJ+yngeyXhSDsoITssrQgKOyVlO2dkeq4sOyCrCknOiAnam9iRnVsbCcsXHJcbiAgICAgICAgICAn7J2066aEIOyghOyytCAoVGluaSBQb3V0aW5pKSc6ICduYW1lJyxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICBkZWZhdWx0OiAnbmljaycsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ1Nob3dUaW1lckJhcnNBdFNlY29uZHMnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdUaW1lciBiYXIgc2hvdyB3aW5kb3cgKHNlY29uZHMpJyxcclxuICAgICAgICBkZTogJ1RpbWVyLUJhciBBbnplaWdlZGF1ZXIgKGluIFNla3VuZGVuKScsXHJcbiAgICAgICAgZnI6ICdGZW7DqnRyZSBkXFwnYWZmaWNoYWdlIGRlIGxhIGJhcnJlIGRlIHRlbXBzIChzZWNvbmRlcyknLFxyXG4gICAgICAgIGphOiAn44K/44Kk44Og44OQ44O844Gr5pmC6ZaT6KGo56S6ICjnp5IpJyxcclxuICAgICAgICBjbjogJ+iuoeaXtuadoeaYvuekuuaXtumVvyAo56eSKScsXHJcbiAgICAgICAga286ICftg4DsnoTrnbzsnbjsnYQg7ZGc7Iuc7ZWgIOq4sOykgCDsi5zqsIQgKOy0iCDsnbTtlZgpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMzAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0tlZXBFeHBpcmVkVGltZXJCYXJzRm9yU2Vjb25kcycsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0tlZXAgZXhwaXJlZCB0aW1lciBiYXIgKHNlY29uZHMpJyxcclxuICAgICAgICBkZTogJ0JlaGFsdGUgYWJnZWxhdWZlbmUgVGltZXItQmFyIChpbiBTZWt1bmRlbiknLFxyXG4gICAgICAgIGZyOiAnR2FyZGVyIGxhIGJhcnJlIGRlIHRlbXBzIGV4cGlyw6llIChzZWNvbmRlcyknLFxyXG4gICAgICAgIGphOiAn57WC5LqG44GX44Gf44K/44Kk44Og44OQ44O844GM5raI44GI44KL44G+44Gn44Gu5b6F44Gh5pmC6ZaTICjnp5IpJyxcclxuICAgICAgICBjbjogJ+W9kumbtuiuoeaXtuadoea7nueVmeaXtumVvyAo56eSKScsXHJcbiAgICAgICAga286ICfrp4zro4zrkJwg7YOA7J6E65287J247J20IOyCrOudvOyngOq4sOq5jOyngOydmCDsi5zqsIQgKOy0iCknLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnZmxvYXQnLFxyXG4gICAgICBkZWZhdWx0OiAwLjcsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0JhckV4cGlyZXNTb29uU2Vjb25kcycsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ1RpbWUgdG8gcmVjb2xvciB0aW1lciBhcyBleHBpcmluZyBzb29uIChzZWNvbmRzKScsXHJcbiAgICAgICAgZGU6ICdaZWl0IGJpcyBlaW4gYmFsZCBhdXNsYXVmZW5kZXIgVGltZXIgdW1nZWbDpHJidCB3aXJkIChpbiBTZWt1bmRlbiknLFxyXG4gICAgICAgIGZyOiAnUmVjb2xvcmlzYXRpb24gZGUgbGEgYmFycmUgZGUgdGVtcHMgYXZhbnQgZXhwaXJhdGlvbiAoc2Vjb25kZXMpJyxcclxuICAgICAgICBqYTogJ+OCv+OCpOODoOODkOODvOOBjOe1guS6huWJjeOBq+WGjeW6puiJsuS7mOOBkeOBruaui+OCiuaZgumWkyAo56eSKScsXHJcbiAgICAgICAgY246ICflgJLorqHml7blsI/kuo7or6XlgLzml7blvZPliY3orqHml7bmnaHlj5joibIgKOenkiknLFxyXG4gICAgICAgIGtvOiAn7YOA7J6E65287J247J2YIOyDieyDgeydhCDrsJTqv4Ag6riw7KSAIOyLnOqwhCAo7LSIIOydtO2VmCknLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnaW50ZWdlcicsXHJcbiAgICAgIGRlZmF1bHQ6IDYsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ01heE51bWJlck9mVGltZXJCYXJzJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnTWF4IG51bWJlciBvZiB0aW1lciBiYXJzJyxcclxuICAgICAgICBkZTogJ01heCBBbnphaGwgYW4gVGltZXItQmFycycsXHJcbiAgICAgICAgZnI6ICdOb21icmUgbWF4IGRlIGJhcnJlcyBkZSB0ZW1wcycsXHJcbiAgICAgICAgamE6ICfjgr/jgqTjg6Djg5Djg7zjga7mnIDlpKfmlbAnLFxyXG4gICAgICAgIGNuOiAn6K6h5pe25p2h5pyA5aSn5pWw6YePJyxcclxuICAgICAgICBrbzogJ+2RnOyLnO2VoCDtg4DsnoTrnbzsnbjsnZgg7LWc64yAIOqwnOyImCcsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcclxuICAgICAgZGVmYXVsdDogNixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnRGlzcGxheUFsYXJtVGV4dEZvclNlY29uZHMnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdBbGFybSB0ZXh0IGRpc3BsYXkgZHVyYXRpb24gKHNlY29uZHMpJyxcclxuICAgICAgICBkZTogJ0FsYXJtLVRleHQgQW56ZWlnZWRhdWVyIChpbiBTZWt1bmRlbiknLFxyXG4gICAgICAgIGZyOiAnRHVyw6llIGRcXCdhZmZpY2hhZ2UgZHUgdGV4dGUgZFxcJ2FsYXJtZSAoc2Vjb25kZXMpJyxcclxuICAgICAgICBqYTogJ+itpuWgseODhuOCreOCueODiOihqOekuuaZgumWk+OBrumVt+OBlSAo56eSKScsXHJcbiAgICAgICAgY246ICfoh7Tlkb3nuqfmj5DnpLrmlofmnKzmmL7npLrml7bplb8gKOenkiknLFxyXG4gICAgICAgIGtvOiAn6rK96rOgIO2FjeyKpO2KuOulvCDtkZzsi5ztlaAg7Iuc6rCEICjstIgpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnRGlzcGxheUFsZXJ0VGV4dEZvclNlY29uZHMnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdBbGVydCB0ZXh0IGRpc3BsYXkgZHVyYXRpb24gKHNlY29uZHMpJyxcclxuICAgICAgICBkZTogJ0FsZXJ0LVRleHQgQW56ZWlnZWRhdWVyIChpbiBTZWt1bmRlbiknLFxyXG4gICAgICAgIGZyOiAnRHVyw6llIGRcXCdhZmZpY2hhZ2UgZHUgdGV4dGUgZFxcJ2FsZXJ0ZSAoc2Vjb25kZXMpJyxcclxuICAgICAgICBqYTogJ+itpuWRiuODhuOCreOCueODiOihqOekuuaZgumWk+OBrumVt+OBlSAo56eSKScsXHJcbiAgICAgICAgY246ICfkuKXph43nuqfmj5DnpLrmlofmnKzmmL7npLrml7bplb8gKOenkiknLFxyXG4gICAgICAgIGtvOiAn7KO87J2YIO2FjeyKpO2KuOulvCDtkZzsi5ztlaAg7Iuc6rCEICjstIgpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnRGlzcGxheUluZm9UZXh0Rm9yU2Vjb25kcycsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ0luZm8gdGV4dCBkaXNwbGF5IGR1cmF0aW9uIChzZWNvbmRzKScsXHJcbiAgICAgICAgZGU6ICdJbmZvLVRleHQgQW56ZWlnZWRhdWVyIChpbiBTZWt1bmRlbiknLFxyXG4gICAgICAgIGZyOiAnRHVyw6llIGRcXCdhZmZpY2hhZ2UgZHUgdGV4dGUgZFxcJ2luZm9ybWF0aW9uIChzZWNvbmRlcyknLFxyXG4gICAgICAgIGphOiAn5oOF5aCx44OG44Kt44K544OI6KGo56S65pmC6ZaT44Gu6ZW344GVICjnp5IpJyxcclxuICAgICAgICBjbjogJ+S4gOiIrOe6p+aPkOekuuaWh+acrOaYvuekuuaXtumVvyAo56eSKScsXHJcbiAgICAgICAga286ICfslYjrgrQg7YWN7Iqk7Yq466W8IO2RnOyLnO2VoCDsi5zqsIQgKOy0iCknLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnZmxvYXQnLFxyXG4gICAgICBkZWZhdWx0OiAzLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdBbGFybVNvdW5kVm9sdW1lJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnQWxhcm0gc291bmQgdm9sdW1lICgwLTEpJyxcclxuICAgICAgICBkZTogJ0FsYXJtIExhdXRzdMOkcmtlICgwLTEpJyxcclxuICAgICAgICBmcjogJ1ZvbHVtZSBkZSBsXFwnYWxhcm1lICgwLTEpJyxcclxuICAgICAgICBqYTogJ+itpuWgsemfs+WjsOOBrumfs+mHjyAoMC0xKScsXHJcbiAgICAgICAgY246ICfoh7Tlkb3nuqfmj5DnpLrpn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGtvOiAn6rK96rOgIOyGjOumrCDtgazquLAgKDAtMSknLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnZmxvYXQnLFxyXG4gICAgICBkZWZhdWx0OiAxLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdBbGVydFNvdW5kVm9sdW1lJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnQWxlcnQgc291bmQgdm9sdW1lICgwLTEpJyxcclxuICAgICAgICBkZTogJ0FsZXJ0IExhdXRzdMOkcmtlICgwLTEpJyxcclxuICAgICAgICBmcjogJ1ZvbHVtZSBkZSBsXFwnYWxlcnRlICgwLTEpJyxcclxuICAgICAgICBqYTogJ+itpuWRiumfs+WjsOOBrumfs+mHjyAoMC0xKScsXHJcbiAgICAgICAgY246ICfkuKXph43nuqfmj5DnpLrpn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGtvOiAn7KO87J2YIOyGjOumrCDtgazquLAgKDAtMSknLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnZmxvYXQnLFxyXG4gICAgICBkZWZhdWx0OiAxLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdJbmZvU291bmRWb2x1bWUnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdJbmZvIHNvdW5kIHZvbHVtZSAoMC0xKScsXHJcbiAgICAgICAgZGU6ICdJbmZvIExhdXRzdMOkcmtlICgwLTEpJyxcclxuICAgICAgICBmcjogJ1ZvbHVtZSBkZSBsXFwnaW5mbyAoMC0xKScsXHJcbiAgICAgICAgamE6ICfmg4XloLHpn7Plo7Djga7pn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGNuOiAn5LiA6Iis57qn5o+Q56S66Z+z6YePICgwLTEpJyxcclxuICAgICAgICBrbzogJ+yViOuCtCDshozrpqwg7YGs6riwICgwLTEpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnTG9uZ1NvdW5kVm9sdW1lJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnTG9uZyBzb3VuZCB2b2x1bWUgKDAtMSknLFxyXG4gICAgICAgIGRlOiAnTGFuZ2VyIFRvbiBMYXV0c3TDpHJrZSAoMC0xKScsXHJcbiAgICAgICAgZnI6ICdWb2x1bWUgZHUgc29uIGxvbmcgKDAtMSknLFxyXG4gICAgICAgIGphOiAn6ZW344GE6Z+z5aOw44Gu6Z+z6YePICgwLTEpJyxcclxuICAgICAgICBjbjogJ+mVv+aPkOekuumfs+mHjyAoMC0xKScsXHJcbiAgICAgICAga286ICfquLQg7IaM66asIO2BrOq4sCAoMC0xKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDEsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ1B1bGxTb3VuZFZvbHVtZScsXHJcbiAgICAgIG5hbWU6IHtcclxuICAgICAgICBlbjogJ1B1bGwgc291bmQgdm9sdW1lICgwLTEpJyxcclxuICAgICAgICBkZTogJ1B1bGwgTGF1dHN0w6Rya2UgKDAtMSknLFxyXG4gICAgICAgIGZyOiAnVm9sdW1lIGR1IHNvbiBkZSBwdWxsICgwLTEpJyxcclxuICAgICAgICBqYTogJ+OCv+OCsuWPluOCi+WKueaenOmfs+OBrumfs+mHjyAoMC0xKScsXHJcbiAgICAgICAgY246ICflvIDmgKrmj5DnpLrpn7Pph48gKDAtMSknLFxyXG4gICAgICAgIGtvOiAn7ZKA66eBIOyGjOumrCDtgazquLAgKDAtMSknLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnZmxvYXQnLFxyXG4gICAgICBkZWZhdWx0OiAxLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdSdW1ibGVFbmFibGVkJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnRW5hYmxlIGdhbWVwYWQgcnVtYmxlIGZvciB0cmlnZ2VycycsXHJcbiAgICAgICAgZGU6ICdHYW1lcGFkLVZpYnJhdGlvbiBmw7xyIFRyaWdnZXIgYWt0aXZpZXJlbicsXHJcbiAgICAgICAgZnI6ICdBY3RpdmVyIGxhIHZpYnJhdGlvbiBkZSBsYSBtYW5ldHRlIGRlIGpldSBwb3VyIGxlcyB0cmlnZ2VycycsXHJcbiAgICAgICAgamE6ICfjg4jjg6rjgqzjg7zjgavjgojjgovjgrLjg7zjg6Djg5Hjg4Pjg4nmjK/li5XjgpLmnInlirnjgavjgZnjgosnLFxyXG4gICAgICAgIGNuOiAn6Kem5Y+R5Zmo5rS75Yqo5pe25L2/5omL5p+E5oyv5YqoJyxcclxuICAgICAgICBrbzogJ+2KuOumrOqxsOyXkCDrjIDtlbQg6rKM7J6E7Yyo65OcIOynhOuPmSDtmZzshLHtmZQnLFxyXG4gICAgICB9LFxyXG4gICAgICB0eXBlOiAnY2hlY2tib3gnLFxyXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnSW5mb1J1bWJsZUR1cmF0aW9uJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnRHVyYXRpb24gKG1pbGxpc2Vjb25kcykgb2YgcnVtYmxlIGZvciBpbmZvIHRyaWdnZXJzJyxcclxuICAgICAgICBkZTogJ1plaXQgKGluIE1pbGxpc2VrdW5kZW4pIGRlciBWaWJyYXRpb24gYmVpIGluZm8gdHJpZ2dlcicsXHJcbiAgICAgICAgZnI6ICdEdXLDqWUgKG1pbGxpc2Vjb25kZXMpIGRlIGxhIHZpYnJhdGlvbiBwb3VyIGxlcyB0cmlnZ2VycyBkXFwnaW5mb3JtYXRpb25zJyxcclxuICAgICAgICBqYTogJ+aDheWgseODiOODquOCrOODvOOBq+OCiOOCi+aMr+WLleOBrumVt+OBlSAo44Of44Oq56eSKScsXHJcbiAgICAgICAgY246ICfkuIDoiKznuqfop6blj5HlmajmjK/liqjml7bplb8gKOavq+enkiknLFxyXG4gICAgICAgIGtvOiAn7JWI64K0IO2KuOumrOqxsOydmCDsp4Trj5kg7KeA7IaNIOyLnOqwhCAo67CA66as7LSIKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDQwMCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnSW5mb1J1bWJsZVdlYWsnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdNYWduaXR1ZGUgKDAtMSkgb2Ygd2VhayBydW1ibGUgZm9yIGluZm8gdHJpZ2dlcnMnLFxyXG4gICAgICAgIGRlOiAnU3TDpHJrZSAoMC0xKSBkZXIgbGVpY2h0ZW4gVmlicmF0aW9uIGJlaSBpbmZvIHRyaWdnZXInLFxyXG4gICAgICAgIGZyOiAnSW50ZW5zaXTDqSBkZSBsYSB2aWJyYXRpb24gZmFpYmxlIHBvdXIgbGVzIHRyaWdnZXJzIGRcXCdpbmZvcm1hdGlvbnMgKDAtMSknLFxyXG4gICAgICAgIGphOiAn5oOF5aCx44OI44Oq44Ks44O844Gr44KI44KL5oyv5YuV44Gr44Oi44O844K/44O844Gu5byx44GE5pa544Gu5by344GVICgwLTEpJyxcclxuICAgICAgICBjbjogJ+S4gOiIrOe6p+inpuWPkeWZqOW8seeUteacuuaMr+WKqOW8uuW6piAoMC0xKScsXHJcbiAgICAgICAga286ICfslYjrgrQg7Yq466as6rGw7J2YIOyVve2VnCDsp4Trj5kg7IS46riwICgwLTEpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMC41LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdJbmZvUnVtYmxlU3Ryb25nJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnTWFnbml0dWRlICgwLTEpIG9mIHN0cm9uZyBydW1ibGUgZm9yIGluZm8gdHJpZ2dlcnMnLFxyXG4gICAgICAgIGRlOiAnU3TDpHJrZSAoMC0xKSBkZXIgc3RhcmtlbiBWaWJyYXRpb24gYmVpIGluZm8gdHJpZ2dlcicsXHJcbiAgICAgICAgZnI6ICdJbnRlbnNpdMOpIGRlIGxhIHZpYnJhdGlvbiBmb3J0ZSBwb3VyIGxlcyB0cmlnZ2VycyBkXFwnaW5mb3JtYXRpb25zICgwLTEpJyxcclxuICAgICAgICBqYTogJ+aDheWgseODiOODquOCrOODvOOBq+OCiOOCi+aMr+WLleOBq+ODouODvOOCv+ODvOOBruW8t+OBhOaWueOBruW8t+OBlSAoMC0xKScsXHJcbiAgICAgICAgY246ICfkuIDoiKznuqfop6blj5HlmajlvLrnlLXmnLrmjK/liqjlvLrluqYgKDAtMSknLFxyXG4gICAgICAgIGtvOiAn7JWI64K0IO2KuOumrOqxsOydmCDqsJXtlZwg7KeE64+ZIOyEuOq4sCAoMC0xKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDAsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0FsZXJ0UnVtYmxlRHVyYXRpb24nLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdEdXJhdGlvbiAobWlsbGlzZWNvbmRzKSBvZiBydW1ibGUgZm9yIGFsZXJ0IHRyaWdnZXJzJyxcclxuICAgICAgICBkZTogJ1plaXQgKGluIE1pbGxpc2VrdW5kZW4pIGRlciBWaWJyYXRpb24gYmVpIGFsZXJ0IHRyaWdnZXInLFxyXG4gICAgICAgIGZyOiAnRHVyw6llIChtaWxsaXNlY29uZGVzKSBkZSBsYSB2aWJyYXRpb24gcG91ciBsZXMgdHJpZ2dlcnMgZFxcJ2FsZXJ0ZXMnLFxyXG4gICAgICAgIGphOiAn6K2m5ZGK44OI44Oq44Ks44O844Gr44KI44KL5oyv5YuV44Gu6ZW344GVICjjg5/jg6rnp5IpJyxcclxuICAgICAgICBjbjogJ+S4pemHjee6p+inpuWPkeWZqOaMr+WKqOaXtumVvyAo5q+r56eSKScsXHJcbiAgICAgICAga286ICfso7zsnZgg7Yq466as6rGw7J2YIOynhOuPmSDsp4Dsho0g7Iuc6rCEICjrsIDrpqzstIgpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogNTAwLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdBbGVydFJ1bWJsZVdlYWsnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdNYWduaXR1ZGUgKDAtMSkgb2Ygd2VhayBydW1ibGUgZm9yIGFsZXJ0IHRyaWdnZXJzJyxcclxuICAgICAgICBkZTogJ1N0w6Rya2UgKDAtMSkgZGVyIGxlaWNodGVuIFZpYnJhdGlvbiBiZWkgYWxlcnQgdHJpZ2dlcicsXHJcbiAgICAgICAgZnI6ICdJbnRlbnNpdMOpIGRlIGxhIHZpYnJhdGlvbiBmYWlibGUgcG91ciBsZXMgdHJpZ2dlcnMgZFxcJ2FsZXJ0ZXMgKDAtMSknLFxyXG4gICAgICAgIGphOiAn6K2m5ZGK44OI44Oq44Ks44O844Gr44KI44KL5oyv5YuV44Gr44Oi44O844K/44O844Gu5byx44GE5pa544Gu5by344GVICgwLTEpJyxcclxuICAgICAgICBjbjogJ+S4pemHjee6p+inpuWPkeWZqOW8seeUteacuuaMr+WKqOW8uuW6piAoMC0xKScsXHJcbiAgICAgICAga286ICfso7zsnZgg7Yq466as6rGw7J2YIOyVve2VnCDsp4Trj5kg7IS46riwICgwLTEpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnQWxlcnRSdW1ibGVTdHJvbmcnLFxyXG4gICAgICBuYW1lOiB7XHJcbiAgICAgICAgZW46ICdNYWduaXR1ZGUgKDAtMSkgb2Ygc3Ryb25nIHJ1bWJsZSBmb3IgYWxlcnQgdHJpZ2dlcnMnLFxyXG4gICAgICAgIGRlOiAnU3TDpHJrZSAoMC0xKSBkZXIgc3RhcmtlbiBWaWJyYXRpb24gYmVpIGFsZXJ0IHRyaWdnZXInLFxyXG4gICAgICAgIGZyOiAnSW50ZW5zaXTDqSBkZSBsYSB2aWJyYXRpb24gZm9ydGUgcG91ciBsZXMgdHJpZ2dlcnMgZFxcJ2FsZXJ0ZXMgKDAtMSknLFxyXG4gICAgICAgIGphOiAn6K2m5ZGK44OI44Oq44Ks44O844Gr44KI44KL5oyv5YuV44Gr44Oi44O844K/44O844Gu5by344GE5pa544Gu5by344GVICgwLTEpJyxcclxuICAgICAgICBjbjogJ+S4pemHjee6p+inpuWPkeWZqOW8uueUteacuuaMr+WKqOW8uuW6piAoMC0xKScsXHJcbiAgICAgICAga286ICfso7zsnZgg7Yq466as6rGw7J2YIOqwle2VnCDsp4Trj5kg7IS46riwICgwLTEpJyxcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogJ2Zsb2F0JyxcclxuICAgICAgZGVmYXVsdDogMC41LFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICdBbGFybVJ1bWJsZUR1cmF0aW9uJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnRHVyYXRpb24gKG1pbGxpc2Vjb25kcykgb2YgcnVtYmxlIGZvciBhbGFybSB0cmlnZ2VycycsXHJcbiAgICAgICAgZGU6ICdaZWl0IChpbiBNaWxsaXNla3VuZGVuKSBkZXIgVmlicmF0aW9uIGJlaSBhbGFybSB0cmlnZ2VyJyxcclxuICAgICAgICBmcjogJ0R1csOpZSAobWlsbGlzZWNvbmRlcykgZGUgbGEgdmlicmF0aW9uIHBvdXIgbGVzIHRyaWdnZXJzIGRcXCdhbGFybWVzJyxcclxuICAgICAgICBqYTogJ+itpuWgseODiOODquOCrOODvOOBq+OCiOOCi+aMr+WLleOBrumVt+OBlSAo44Of44Oq56eSKScsXHJcbiAgICAgICAgY246ICfoh7Tlkb3nuqfop6blj5HlmajmjK/liqjml7bplb8gKOavq+enkiknLFxyXG4gICAgICAgIGtvOiAn6rK96rOgIO2KuOumrOqxsOydmCDsp4Trj5kg7KeA7IaNIOyLnOqwhCAo67CA66as7LSIKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDc1MCxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnQWxhcm1SdW1ibGVXZWFrJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnTWFnbml0dWRlICgwLTEpIG9mIHdlYWsgcnVtYmxlIGZvciBhbGFybSB0cmlnZ2VycycsXHJcbiAgICAgICAgZGU6ICdTdMOkcmtlICgwLTEpIGRlciBsZWljaHRlbiBWaWJyYXRpb24gYmVpIGFsYXJtIHRyaWdnZXInLFxyXG4gICAgICAgIGZyOiAnSW50ZW5zaXTDqSBkZSBsYSB2aWJyYXRpb24gZmFpYmxlIHBvdXIgbGVzIHRyaWdnZXJzIGRcXCdhbGFybWVzICgwLTEpJyxcclxuICAgICAgICBqYTogJ+itpuWgseODiOODquOCrOODvOOBq+OCiOOCi+aMr+WLleOBq+ODouODvOOCv+ODvOOBruW8seOBhOaWueOBruW8t+OBlSAoMC0xKScsXHJcbiAgICAgICAgY246ICfoh7Tlkb3nuqfop6blj5HlmajlvLHnlLXmnLrmjK/liqjlvLrluqYgKDAtMSknLFxyXG4gICAgICAgIGtvOiAn6rK96rOgIO2KuOumrOqxsOydmCDslb3tlZwg7KeE64+ZIOyEuOq4sCAoMC0xKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDAuNzUsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJ0FsYXJtUnVtYmxlU3Ryb25nJyxcclxuICAgICAgbmFtZToge1xyXG4gICAgICAgIGVuOiAnTWFnbml0dWRlICgwLTEpIG9mIHN0cm9uZyBydW1ibGUgZm9yIGFsYXJtIHRyaWdnZXJzJyxcclxuICAgICAgICBkZTogJ1N0w6Rya2UgKDAtMSkgZGVyIHN0YXJrZW4gVmlicmF0aW9uIGJlaSBhbGFybSB0cmlnZ2VyJyxcclxuICAgICAgICBmcjogJ0ludGVuc2l0w6kgZGUgbGEgdmlicmF0aW9uIGZvcnRlIHBvdXIgbGVzIHRyaWdnZXJzIGRcXCdhbGFybWVzICgwLTEpJyxcclxuICAgICAgICBqYTogJ+itpuWgseODiOODquOCrOODvOOBq+OCiOOCi+aMr+WLleOBq+ODouODvOOCv+ODvOOBruW8t+OBhOaWueOBruW8t+OBlSAoMC0xKScsXHJcbiAgICAgICAgY246ICfoh7Tlkb3nuqfop6blj5HlmajlvLrnlLXmnLrmjK/liqjlvLrluqYgKDAtMSknLFxyXG4gICAgICAgIGtvOiAn6rK96rOgIO2KuOumrOqxsOydmCDqsJXtlZwg7KeE64+ZIOyEuOq4sCAoMC0xKScsXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGU6ICdmbG9hdCcsXHJcbiAgICAgIGRlZmF1bHQ6IDAuNzUsXHJcbiAgICB9LFxyXG4gIF0sXHJcbn07XHJcblxyXG5Vc2VyQ29uZmlnLnJlZ2lzdGVyT3B0aW9ucygncmFpZGJvc3MnLCB0ZW1wbGF0ZU9wdGlvbnMsIHVzZXJGaWxlSGFuZGxlcik7XHJcbiIsImltcG9ydCB7IGFkZE92ZXJsYXlMaXN0ZW5lciB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9vdmVybGF5X3BsdWdpbl9hcGknO1xyXG5pbXBvcnQgeyBhZGRSZW1vdGVQbGF5ZXJTZWxlY3RVSSB9IGZyb20gJy4uLy4uL3Jlc291cmNlcy9wbGF5ZXJfb3ZlcnJpZGUnO1xyXG5pbXBvcnQgVXNlckNvbmZpZyBmcm9tICcuLi8uLi9yZXNvdXJjZXMvdXNlcl9jb25maWcnO1xyXG5cclxuaW1wb3J0IHJhaWRib3NzRmlsZURhdGEgZnJvbSAnLi9kYXRhL3JhaWRib3NzX21hbmlmZXN0LnR4dCc7XHJcbmltcG9ydCB7IEhUTUxUaW1lbGluZVVJIH0gZnJvbSAnLi9odG1sX3RpbWVsaW5lX3VpJztcclxuaW1wb3J0IHsgUG9wdXBUZXh0LCBQb3B1cFRleHRHZW5lcmF0b3IgfSBmcm9tICcuL3BvcHVwLXRleHQnO1xyXG5pbXBvcnQgZGVmYXVsdE9wdGlvbnMgZnJvbSAnLi9yYWlkYm9zc19vcHRpb25zJztcclxuaW1wb3J0IHsgVGltZWxpbmVDb250cm9sbGVyLCBUaW1lbGluZUxvYWRlciB9IGZyb20gJy4vdGltZWxpbmUnO1xyXG5cclxuaW1wb3J0ICcuLi8uLi9yZXNvdXJjZXMvdGltZXJiYXInO1xyXG5pbXBvcnQgJy4vcmFpZGJvc3NfY29uZmlnJztcclxuXHJcbmltcG9ydCAnLi4vLi4vcmVzb3VyY2VzL2RlZmF1bHRzLmNzcyc7XHJcbmltcG9ydCAnLi9yYWlkYm9zcy5jc3MnO1xyXG5cclxuVXNlckNvbmZpZy5nZXRVc2VyQ29uZmlnTG9jYXRpb24oJ3JhaWRib3NzJywgZGVmYXVsdE9wdGlvbnMsICgpID0+IHtcclxuICBjb25zdCBvcHRpb25zID0geyAuLi5kZWZhdWx0T3B0aW9ucyB9O1xyXG5cclxuICAvLyBRdWVyeSBwYXJhbXMgb3ZlcnJpZGUgZGVmYXVsdCBhbmQgdXNlciBvcHRpb25zLlxyXG4gIC8vIFRoaXMgYWxsb3dzIGZvciBodG1sIGZpbGVzIHRoYXQgc2F5IFwidGltZWxpbmUgb25seVwiIG9yIFwiYWxlcnRzIG9ubHlcIi5cclxuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG5cclxuICBvcHRpb25zLklzUmVtb3RlUmFpZGJvc3MgPSBmYWxzZTtcclxuICBjb25zdCBvdmVybGF5V3NQYXJhbSA9IHBhcmFtcy5nZXQoJ09WRVJMQVlfV1MnKTtcclxuICBpZiAob3ZlcmxheVdzUGFyYW0gIT09IG51bGwpIHtcclxuICAgIGNvbnN0IHdzUGFyYW0gPSBkZWNvZGVVUklDb21wb25lbnQob3ZlcmxheVdzUGFyYW0pO1xyXG4gICAgLy8gVE9ETzogaXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXM/PyBUaGlzIHNlZW1zIGJldHRlciB0aGFuIGxvb2tpbmcgZm9yIG5ncm9rLlxyXG4gICAgY29uc3QgaXNMb2NhbCA9IHdzUGFyYW0uaW5jbHVkZXMoJ2xvY2FsaG9zdCcpIHx8IHdzUGFyYW0uaW5jbHVkZXMoJzEyNy4wLjAuMScpO1xyXG4gICAgb3B0aW9ucy5Jc1JlbW90ZVJhaWRib3NzID0gIWlzTG9jYWw7XHJcbiAgfVxyXG5cclxuICBjb25zdCBwbGF5ZXJOYW1lUGFyYW0gPSBwYXJhbXMuZ2V0KCdwbGF5ZXInKTtcclxuICBpZiAocGxheWVyTmFtZVBhcmFtICE9PSBudWxsKSB7XHJcbiAgICBvcHRpb25zLlBsYXllck5hbWVPdmVycmlkZSA9IHBsYXllck5hbWVQYXJhbTtcclxuICAgIGNvbnNvbGUubG9nKGBFbmFibGluZyBwbGF5ZXIgbmFtZSBvdmVycmlkZSB2aWEgcXVlcnkgcGFyYW1ldGVyLCBuYW1lOiAke3BsYXllck5hbWVQYXJhbX1gKTtcclxuICB9XHJcblxyXG4gIGlmIChvcHRpb25zLklzUmVtb3RlUmFpZGJvc3MgJiYgcGxheWVyTmFtZVBhcmFtID09PSBudWxsKSB7XHJcbiAgICBjb25zdCBsYW5nID0gb3B0aW9ucy5EaXNwbGF5TGFuZ3VhZ2UgfHwgb3B0aW9ucy5QYXJzZXJMYW5ndWFnZSB8fCAnZW4nO1xyXG4gICAgYWRkUmVtb3RlUGxheWVyU2VsZWN0VUkobGFuZyk7XHJcblxyXG4gICAgLy8gUGFnZSB3aWxsIHJlbG9hZCBvbmNlIHBsYXllciBzZWxlY3RlZC5cclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IHR0c1BhcmFtID0gcGFyYW1zLmdldCgnZm9yY2VUVFMnKTtcclxuICBpZiAodHRzUGFyYW0gIT09IG51bGwpIHtcclxuICAgIGNvbnN0IGZvcmNlRW5hYmxlID0gISFwYXJzZUludCh0dHNQYXJhbSk7XHJcbiAgICBpZiAoZm9yY2VFbmFibGUpIHtcclxuICAgICAgb3B0aW9ucy5TcG9rZW5BbGVydHNFbmFibGVkID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS5sb2coJ0ZvcmNlIGVuYWJsaW5nIFRUUyB2aWEgcXVlcnkgcGFyYW1ldGVyJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBhbGVydHNQYXJhbSA9IHBhcmFtcy5nZXQoJ2FsZXJ0cycpO1xyXG4gIGlmIChhbGVydHNQYXJhbSAhPT0gbnVsbCkge1xyXG4gICAgY29uc3QgcHJldmlvdXMgPSBvcHRpb25zLkFsZXJ0c0VuYWJsZWQ7XHJcbiAgICBvcHRpb25zLkFsZXJ0c0VuYWJsZWQgPSAhIXBhcnNlSW50KGFsZXJ0c1BhcmFtKTtcclxuICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5BbGVydHNFbmFibGVkKVxyXG4gICAgICBjb25zb2xlLmxvZygnRW5hYmxpbmcgYWxlcnRzIHZpYSBxdWVyeSBwYXJhbWV0ZXInKTtcclxuICB9XHJcbiAgY29uc3QgdGltZWxpbmVQYXJhbSA9IHBhcmFtcy5nZXQoJ3RpbWVsaW5lJyk7XHJcbiAgaWYgKHRpbWVsaW5lUGFyYW0gIT09IG51bGwpIHtcclxuICAgIGNvbnN0IHByZXZpb3VzID0gb3B0aW9ucy5UaW1lbGluZUVuYWJsZWQ7XHJcbiAgICBvcHRpb25zLlRpbWVsaW5lRW5hYmxlZCA9ICEhcGFyc2VJbnQodGltZWxpbmVQYXJhbSk7XHJcbiAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMuVGltZWxpbmVFbmFibGVkKVxyXG4gICAgICBjb25zb2xlLmxvZygnRW5hYmxpbmcgdGltZWxpbmUgdmlhIHF1ZXJ5IHBhcmFtZXRlcicpO1xyXG4gIH1cclxuICBjb25zdCBhdWRpb1BhcmFtID0gcGFyYW1zLmdldCgnYXVkaW8nKTtcclxuICBpZiAoYXVkaW9QYXJhbSAhPT0gbnVsbCkge1xyXG4gICAgY29uc3QgcHJldmlvdXMgPSBvcHRpb25zLkF1ZGlvQWxsb3dlZDtcclxuICAgIG9wdGlvbnMuQXVkaW9BbGxvd2VkID0gISFwYXJzZUludChhdWRpb1BhcmFtKTtcclxuICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5BdWRpb0FsbG93ZWQpXHJcbiAgICAgIGNvbnNvbGUubG9nKCdFbmFibGluZyBhdWRpbyB2aWEgcXVlcnkgcGFyYW1ldGVyJyk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJyk7XHJcbiAgaWYgKCFjb250YWluZXIpXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIGNvbnRhaW5lciBlbGVtZW50Jyk7XHJcbiAgaWYgKCFvcHRpb25zLkFsZXJ0c0VuYWJsZWQpXHJcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGlkZS1hbGVydHMnKTtcclxuICBpZiAoIW9wdGlvbnMuVGltZWxpbmVFbmFibGVkKVxyXG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hpZGUtdGltZWxpbmUnKTtcclxuXHJcbiAgY29uc3QgdGltZWxpbmVVSSA9IG5ldyBIVE1MVGltZWxpbmVVSShvcHRpb25zKTtcclxuICBjb25zdCB0aW1lbGluZUNvbnRyb2xsZXIgPSBuZXcgVGltZWxpbmVDb250cm9sbGVyKG9wdGlvbnMsIHRpbWVsaW5lVUksIHJhaWRib3NzRmlsZURhdGEpO1xyXG4gIGNvbnN0IHRpbWVsaW5lTG9hZGVyID0gbmV3IFRpbWVsaW5lTG9hZGVyKHRpbWVsaW5lQ29udHJvbGxlcik7XHJcbiAgY29uc3QgcG9wdXBUZXh0ID0gbmV3IFBvcHVwVGV4dChvcHRpb25zLCB0aW1lbGluZUxvYWRlciwgcmFpZGJvc3NGaWxlRGF0YSk7XHJcblxyXG4gIC8vIENvbm5lY3QgdGhlIHRpbWVsaW5lcyB0byB0aGUgcG9wdXAgdGV4dCwgaWYgYWxlcnRzIGFyZSBkZXNpcmVkLlxyXG4gIGlmIChvcHRpb25zLkFsZXJ0c0VuYWJsZWQpXHJcbiAgICB0aW1lbGluZUNvbnRyb2xsZXIuU2V0UG9wdXBUZXh0SW50ZXJmYWNlKG5ldyBQb3B1cFRleHRHZW5lcmF0b3IocG9wdXBUZXh0KSk7XHJcblxyXG4gIGFkZE92ZXJsYXlMaXN0ZW5lcignb25Mb2dFdmVudCcsIChlKSA9PiB7XHJcbiAgICB0aW1lbGluZUNvbnRyb2xsZXIuT25Mb2dFdmVudChlKTtcclxuICB9KTtcclxuXHJcbiAgYWRkT3ZlcmxheUxpc3RlbmVyKCdMb2dMaW5lJywgKGUpID0+IHtcclxuICAgIHRpbWVsaW5lQ29udHJvbGxlci5Pbk5ldExvZyhlKTtcclxuICB9KTtcclxufSk7XHJcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5KU09ONSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuXHRmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdFx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xuXHR9XG5cblx0dmFyIF9nbG9iYWwgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5cdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuXHQgID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG5cdCAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG5cdCAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRpZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgeyBfX2cgPSBnbG9iYWw7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXHR9KTtcblxuXHR2YXIgX2NvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdHZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNScgfTtcblx0aWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIHsgX19lID0gY29yZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cdH0pO1xuXHR2YXIgX2NvcmVfMSA9IF9jb3JlLnZlcnNpb247XG5cblx0dmFyIF9pc09iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG5cdH07XG5cblx0dmFyIF9hbk9iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmICghX2lzT2JqZWN0KGl0KSkgeyB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7IH1cblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cblx0dmFyIF9mYWlscyA9IGZ1bmN0aW9uIChleGVjKSB7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdH07XG5cblx0Ly8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxuXHR2YXIgX2Rlc2NyaXB0b3JzID0gIV9mYWlscyhmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG5cdH0pO1xuXG5cdHZhciBkb2N1bWVudCA9IF9nbG9iYWwuZG9jdW1lbnQ7XG5cdC8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxuXHR2YXIgaXMgPSBfaXNPYmplY3QoZG9jdW1lbnQpICYmIF9pc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblx0dmFyIF9kb21DcmVhdGUgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xuXHR9O1xuXG5cdHZhciBfaWU4RG9tRGVmaW5lID0gIV9kZXNjcmlwdG9ycyAmJiAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9kb21DcmVhdGUoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcblx0fSk7XG5cblx0Ly8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG5cblx0Ly8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcblx0Ly8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcblx0dmFyIF90b1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIChpdCwgUykge1xuXHQgIGlmICghX2lzT2JqZWN0KGl0KSkgeyByZXR1cm4gaXQ7IH1cblx0ICB2YXIgZm4sIHZhbDtcblx0ICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIV9pc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHsgcmV0dXJuIHZhbDsgfVxuXHQgIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgeyByZXR1cm4gdmFsOyB9XG5cdCAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgeyByZXR1cm4gdmFsOyB9XG5cdCAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuXHR9O1xuXG5cdHZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuXHR2YXIgZiA9IF9kZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcblx0ICBfYW5PYmplY3QoTyk7XG5cdCAgUCA9IF90b1ByaW1pdGl2ZShQLCB0cnVlKTtcblx0ICBfYW5PYmplY3QoQXR0cmlidXRlcyk7XG5cdCAgaWYgKF9pZThEb21EZWZpbmUpIHsgdHJ5IHtcblx0ICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcblx0ICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH0gfVxuXHQgIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHsgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTsgfVxuXHQgIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIHsgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7IH1cblx0ICByZXR1cm4gTztcblx0fTtcblxuXHR2YXIgX29iamVjdERwID0ge1xuXHRcdGY6IGZcblx0fTtcblxuXHR2YXIgX3Byb3BlcnR5RGVzYyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG5cdCAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG5cdCAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcblx0ICAgIHZhbHVlOiB2YWx1ZVxuXHQgIH07XG5cdH07XG5cblx0dmFyIF9oaWRlID0gX2Rlc2NyaXB0b3JzID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuXHQgIHJldHVybiBfb2JqZWN0RHAuZihvYmplY3QsIGtleSwgX3Byb3BlcnR5RGVzYygxLCB2YWx1ZSkpO1xuXHR9IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuXHR2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIF9oYXMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuXHQgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xuXHR9O1xuXG5cdHZhciBpZCA9IDA7XG5cdHZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5cdHZhciBfdWlkID0gZnVuY3Rpb24gKGtleSkge1xuXHQgIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG5cdH07XG5cblx0dmFyIF9saWJyYXJ5ID0gZmFsc2U7XG5cblx0dmFyIF9zaGFyZWQgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdHZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcblx0dmFyIHN0b3JlID0gX2dsb2JhbFtTSEFSRURdIHx8IChfZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cblx0KG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0ICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcblx0fSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuXHQgIHZlcnNpb246IF9jb3JlLnZlcnNpb24sXG5cdCAgbW9kZTogX2xpYnJhcnkgPyAncHVyZScgOiAnZ2xvYmFsJyxcblx0ICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xuXHR9KTtcblx0fSk7XG5cblx0dmFyIF9mdW5jdGlvblRvU3RyaW5nID0gX3NoYXJlZCgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuXHR2YXIgX3JlZGVmaW5lID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuXHR2YXIgU1JDID0gX3VpZCgnc3JjJyk7XG5cblx0dmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG5cdHZhciBUUEwgPSAoJycgKyBfZnVuY3Rpb25Ub1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxuXHRfY29yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgcmV0dXJuIF9mdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuXHR9O1xuXG5cdChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuXHQgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuXHQgIGlmIChpc0Z1bmN0aW9uKSB7IF9oYXModmFsLCAnbmFtZScpIHx8IF9oaWRlKHZhbCwgJ25hbWUnLCBrZXkpOyB9XG5cdCAgaWYgKE9ba2V5XSA9PT0gdmFsKSB7IHJldHVybjsgfVxuXHQgIGlmIChpc0Z1bmN0aW9uKSB7IF9oYXModmFsLCBTUkMpIHx8IF9oaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7IH1cblx0ICBpZiAoTyA9PT0gX2dsb2JhbCkge1xuXHQgICAgT1trZXldID0gdmFsO1xuXHQgIH0gZWxzZSBpZiAoIXNhZmUpIHtcblx0ICAgIGRlbGV0ZSBPW2tleV07XG5cdCAgICBfaGlkZShPLCBrZXksIHZhbCk7XG5cdCAgfSBlbHNlIGlmIChPW2tleV0pIHtcblx0ICAgIE9ba2V5XSA9IHZhbDtcblx0ICB9IGVsc2Uge1xuXHQgICAgX2hpZGUoTywga2V5LCB2YWwpO1xuXHQgIH1cblx0Ly8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG5cdH0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0ICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgX2Z1bmN0aW9uVG9TdHJpbmcuY2FsbCh0aGlzKTtcblx0fSk7XG5cdH0pO1xuXG5cdHZhciBfYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7IHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7IH1cblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cblx0Ly8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5cblx0dmFyIF9jdHggPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuXHQgIF9hRnVuY3Rpb24oZm4pO1xuXHQgIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIGZuOyB9XG5cdCAgc3dpdGNoIChsZW5ndGgpIHtcblx0ICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG5cdCAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcblx0ICB9O1xuXHR9O1xuXG5cdHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuXHR2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcblx0ICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcblx0ICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcblx0ICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcblx0ICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuXHQgIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcblx0ICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gX2dsb2JhbCA6IElTX1NUQVRJQyA/IF9nbG9iYWxbbmFtZV0gfHwgKF9nbG9iYWxbbmFtZV0gPSB7fSkgOiAoX2dsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcblx0ICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IF9jb3JlIDogX2NvcmVbbmFtZV0gfHwgKF9jb3JlW25hbWVdID0ge30pO1xuXHQgIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuXHQgIHZhciBrZXksIG93biwgb3V0LCBleHA7XG5cdCAgaWYgKElTX0dMT0JBTCkgeyBzb3VyY2UgPSBuYW1lOyB9XG5cdCAgZm9yIChrZXkgaW4gc291cmNlKSB7XG5cdCAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcblx0ICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG5cdCAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuXHQgICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcblx0ICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG5cdCAgICBleHAgPSBJU19CSU5EICYmIG93biA/IF9jdHgob3V0LCBfZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IF9jdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcblx0ICAgIC8vIGV4dGVuZCBnbG9iYWxcblx0ICAgIGlmICh0YXJnZXQpIHsgX3JlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpOyB9XG5cdCAgICAvLyBleHBvcnRcblx0ICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSB7IF9oaWRlKGV4cG9ydHMsIGtleSwgZXhwKTsgfVxuXHQgICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSB7IGV4cFByb3RvW2tleV0gPSBvdXQ7IH1cblx0ICB9XG5cdH07XG5cdF9nbG9iYWwuY29yZSA9IF9jb3JlO1xuXHQvLyB0eXBlIGJpdG1hcFxuXHQkZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuXHQkZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuXHQkZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuXHQkZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG5cdCRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuXHQkZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcblx0JGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG5cdCRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxuXHR2YXIgX2V4cG9ydCA9ICRleHBvcnQ7XG5cblx0Ly8gNy4xLjQgVG9JbnRlZ2VyXG5cdHZhciBjZWlsID0gTWF0aC5jZWlsO1xuXHR2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXHR2YXIgX3RvSW50ZWdlciA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xuXHR9O1xuXG5cdC8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5cdHZhciBfZGVmaW5lZCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmIChpdCA9PSB1bmRlZmluZWQpIHsgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpOyB9XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG5cdC8vIHRydWUgIC0+IFN0cmluZyNhdFxuXHQvLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcblx0dmFyIF9zdHJpbmdBdCA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuXHQgICAgdmFyIHMgPSBTdHJpbmcoX2RlZmluZWQodGhhdCkpO1xuXHQgICAgdmFyIGkgPSBfdG9JbnRlZ2VyKHBvcyk7XG5cdCAgICB2YXIgbCA9IHMubGVuZ3RoO1xuXHQgICAgdmFyIGEsIGI7XG5cdCAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSB7IHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDsgfVxuXHQgICAgYSA9IHMuY2hhckNvZGVBdChpKTtcblx0ICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG5cdCAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG5cdCAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuXHQgIH07XG5cdH07XG5cblx0dmFyICRhdCA9IF9zdHJpbmdBdChmYWxzZSk7XG5cdF9leHBvcnQoX2V4cG9ydC5QLCAnU3RyaW5nJywge1xuXHQgIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuXHQgIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcblx0ICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcblx0ICB9XG5cdH0pO1xuXG5cdHZhciBjb2RlUG9pbnRBdCA9IF9jb3JlLlN0cmluZy5jb2RlUG9pbnRBdDtcblxuXHR2YXIgbWF4ID0gTWF0aC5tYXg7XG5cdHZhciBtaW4gPSBNYXRoLm1pbjtcblx0dmFyIF90b0Fic29sdXRlSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuXHQgIGluZGV4ID0gX3RvSW50ZWdlcihpbmRleCk7XG5cdCAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG5cdH07XG5cblx0dmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cdHZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG5cdC8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cblx0X2V4cG9ydChfZXhwb3J0LlMgKyBfZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG5cdCAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcblx0ICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHtcblx0ICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblx0IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ICAgIHZhciByZXMgPSBbXTtcblx0ICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgIHZhciBpID0gMDtcblx0ICAgIHZhciBjb2RlO1xuXHQgICAgd2hpbGUgKGFMZW4gPiBpKSB7XG5cdCAgICAgIGNvZGUgPSArYXJndW1lbnRzJDFbaSsrXTtcblx0ICAgICAgaWYgKF90b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB7IHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpOyB9XG5cdCAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG5cdCAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcblx0ICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG5cdCAgICAgICk7XG5cdCAgICB9IHJldHVybiByZXMuam9pbignJyk7XG5cdCAgfVxuXHR9KTtcblxuXHR2YXIgZnJvbUNvZGVQb2ludCA9IF9jb3JlLlN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG5cdC8vIFRoaXMgaXMgYSBnZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQuXG5cdHZhciBTcGFjZV9TZXBhcmF0b3IgPSAvW1xcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBdLztcblx0dmFyIElEX1N0YXJ0ID0gL1tcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4NjAtXFx1MDg2QVxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MDlGQ1xcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENTQtXFx1MEQ1NlxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVFLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkVcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRUFcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFRlxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRVxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMkQtXFx1REY0QVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4My1cXHVEREIyXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMkJcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERURFXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0RcXHVERjUwXFx1REY1RC1cXHVERjYxXXxcXHVEODA1W1xcdURDMDAtXFx1REMzNFxcdURDNDctXFx1REM0QVxcdURDODAtXFx1RENBRlxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERBRVxcdURERDgtXFx1REREQlxcdURFMDAtXFx1REUyRlxcdURFNDRcXHVERTgwLVxcdURFQUFcXHVERjAwLVxcdURGMTldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0RGXFx1RENGRlxcdURFMDBcXHVERTBCLVxcdURFMzJcXHVERTNBXFx1REU1MFxcdURFNUMtXFx1REU4M1xcdURFODYtXFx1REU4OVxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMkVcXHVEQzQwXFx1REM3Mi1cXHVEQzhGXFx1REQwMC1cXHVERDA2XFx1REQwOFxcdUREMDlcXHVERDBCLVxcdUREMzBcXHVERDQ2XXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REYwMC1cXHVERjQ0XFx1REY1MFxcdURGOTMtXFx1REY5RlxcdURGRTBcXHVERkUxXXxcXHVEODIxW1xcdURDMDAtXFx1REZFQ118XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMC1cXHVERDFFXFx1REQ3MC1cXHVERUZCXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OV18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdUREMDAtXFx1REQ0M118XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMVxcdURFQjAtXFx1REZGRl18XFx1RDg3QVtcXHVEQzAwLVxcdURGRTBdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXS87XG5cdHZhciBJRF9Db250aW51ZSA9IC9bXFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzMDAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4My1cXHUwNDg3XFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1OTEtXFx1MDVCRFxcdTA1QkZcXHUwNUMxXFx1MDVDMlxcdTA1QzRcXHUwNUM1XFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MTAtXFx1MDYxQVxcdTA2MjAtXFx1MDY2OVxcdTA2NkUtXFx1MDZEM1xcdTA2RDUtXFx1MDZEQ1xcdTA2REYtXFx1MDZFOFxcdTA2RUEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwLVxcdTA3NEFcXHUwNzRELVxcdTA3QjFcXHUwN0MwLVxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODJEXFx1MDg0MC1cXHUwODVCXFx1MDg2MC1cXHUwODZBXFx1MDhBMC1cXHUwOEI0XFx1MDhCNi1cXHUwOEJEXFx1MDhENC1cXHUwOEUxXFx1MDhFMy1cXHUwOTYzXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MS1cXHUwOTgzXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCQy1cXHUwOUM0XFx1MDlDN1xcdTA5QzhcXHUwOUNCLVxcdTA5Q0VcXHUwOUQ3XFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTNcXHUwOUU2LVxcdTA5RjFcXHUwOUZDXFx1MEEwMS1cXHUwQTAzXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTNDXFx1MEEzRS1cXHUwQTQyXFx1MEE0N1xcdTBBNDhcXHUwQTRCLVxcdTBBNERcXHUwQTUxXFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNjYtXFx1MEE3NVxcdTBBODEtXFx1MEE4M1xcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCQy1cXHUwQUM1XFx1MEFDNy1cXHUwQUM5XFx1MEFDQi1cXHUwQUNEXFx1MEFEMFxcdTBBRTAtXFx1MEFFM1xcdTBBRTYtXFx1MEFFRlxcdTBBRjktXFx1MEFGRlxcdTBCMDEtXFx1MEIwM1xcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNDLVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEItXFx1MEI0RFxcdTBCNTZcXHUwQjU3XFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjNcXHUwQjY2LVxcdTBCNkZcXHUwQjcxXFx1MEI4MlxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJCRS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNEXFx1MEJEMFxcdTBCRDdcXHUwQkU2LVxcdTBCRUZcXHUwQzAwLVxcdTBDMDNcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNELVxcdTBDNDRcXHUwQzQ2LVxcdTBDNDhcXHUwQzRBLVxcdTBDNERcXHUwQzU1XFx1MEM1NlxcdTBDNTgtXFx1MEM1QVxcdTBDNjAtXFx1MEM2M1xcdTBDNjYtXFx1MEM2RlxcdTBDODAtXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkMtXFx1MENDNFxcdTBDQzYtXFx1MENDOFxcdTBDQ0EtXFx1MENDRFxcdTBDRDVcXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFM1xcdTBDRTYtXFx1MENFRlxcdTBDRjFcXHUwQ0YyXFx1MEQwMC1cXHUwRDAzXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDQ0XFx1MEQ0Ni1cXHUwRDQ4XFx1MEQ0QS1cXHUwRDRFXFx1MEQ1NC1cXHUwRDU3XFx1MEQ1Ri1cXHUwRDYzXFx1MEQ2Ni1cXHUwRDZGXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4MlxcdTBEODNcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREU2LVxcdTBERUZcXHUwREYyXFx1MERGM1xcdTBFMDEtXFx1MEUzQVxcdTBFNDAtXFx1MEU0RVxcdTBFNTAtXFx1MEU1OVxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUI5XFx1MEVCQi1cXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFQzgtXFx1MEVDRFxcdTBFRDAtXFx1MEVEOVxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjE4XFx1MEYxOVxcdTBGMjAtXFx1MEYyOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGM0UtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGNzEtXFx1MEY4NFxcdTBGODYtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQzZcXHUxMDAwLVxcdTEwNDlcXHUxMDUwLVxcdTEwOURcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM1RC1cXHUxMzVGXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzE0XFx1MTcyMC1cXHUxNzM0XFx1MTc0MC1cXHUxNzUzXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc3MlxcdTE3NzNcXHUxNzgwLVxcdTE3RDNcXHUxN0Q3XFx1MTdEQ1xcdTE3RERcXHUxN0UwLVxcdTE3RTlcXHUxODBCLVxcdTE4MERcXHUxODEwLVxcdTE4MTlcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTIwLVxcdTE5MkJcXHUxOTMwLVxcdTE5M0JcXHUxOTQ2LVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxOUQwLVxcdTE5RDlcXHUxQTAwLVxcdTFBMUJcXHUxQTIwLVxcdTFBNUVcXHUxQTYwLVxcdTFBN0NcXHUxQTdGLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUE3XFx1MUFCMC1cXHUxQUJEXFx1MUIwMC1cXHUxQjRCXFx1MUI1MC1cXHUxQjU5XFx1MUI2Qi1cXHUxQjczXFx1MUI4MC1cXHUxQkYzXFx1MUMwMC1cXHUxQzM3XFx1MUM0MC1cXHUxQzQ5XFx1MUM0RC1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUNEMC1cXHUxQ0QyXFx1MUNENC1cXHUxQ0Y5XFx1MUQwMC1cXHUxREY5XFx1MURGQi1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwM0ZcXHUyMDQwXFx1MjA1NFxcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjBEMC1cXHUyMERDXFx1MjBFMVxcdTIwRTUtXFx1MjBGMFxcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDdGLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyREUwLVxcdTJERkZcXHUyRTJGXFx1MzAwNS1cXHUzMDA3XFx1MzAyMS1cXHUzMDJGXFx1MzAzMS1cXHUzMDM1XFx1MzAzOC1cXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5OVxcdTMwOUFcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkVcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRUFcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MkJcXHVBNjQwLVxcdUE2NkZcXHVBNjc0LVxcdUE2N0RcXHVBNjdGLVxcdUE2RjFcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QUVcXHVBN0IwLVxcdUE3QjdcXHVBN0Y3LVxcdUE4MjdcXHVBODQwLVxcdUE4NzNcXHVBODgwLVxcdUE4QzVcXHVBOEQwLVxcdUE4RDlcXHVBOEUwLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MDAtXFx1QTkyRFxcdUE5MzAtXFx1QTk1M1xcdUE5NjAtXFx1QTk3Q1xcdUE5ODAtXFx1QTlDMFxcdUE5Q0YtXFx1QTlEOVxcdUE5RTAtXFx1QTlGRVxcdUFBMDAtXFx1QUEzNlxcdUFBNDAtXFx1QUE0RFxcdUFBNTAtXFx1QUE1OVxcdUFBNjAtXFx1QUE3NlxcdUFBN0EtXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFRlxcdUFBRjItXFx1QUFGNlxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFQVxcdUFCRUNcXHVBQkVEXFx1QUJGMC1cXHVBQkY5XFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRC1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTAwLVxcdUZFMEZcXHVGRTIwLVxcdUZFMkZcXHVGRTMzXFx1RkUzNFxcdUZFNEQtXFx1RkU0RlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMTAtXFx1RkYxOVxcdUZGMjEtXFx1RkYzQVxcdUZGM0ZcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERDQwLVxcdURENzRcXHVEREZEXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REVFMFxcdURGMDAtXFx1REYxRlxcdURGMkQtXFx1REY0QVxcdURGNTAtXFx1REY3QVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0EwLVxcdURDQTlcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwLVxcdURFMDNcXHVERTA1XFx1REUwNlxcdURFMEMtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFMzgtXFx1REUzQVxcdURFM0ZcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTZcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXXxcXHVEODA0W1xcdURDMDAtXFx1REM0NlxcdURDNjYtXFx1REM2RlxcdURDN0YtXFx1RENCQVxcdURDRDAtXFx1RENFOFxcdURDRjAtXFx1RENGOVxcdUREMDAtXFx1REQzNFxcdUREMzYtXFx1REQzRlxcdURENTAtXFx1REQ3M1xcdURENzZcXHVERDgwLVxcdUREQzRcXHVERENBLVxcdUREQ0NcXHVEREQwLVxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTM3XFx1REUzRVxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFRUFcXHVERUYwLVxcdURFRjlcXHVERjAwLVxcdURGMDNcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzQy1cXHVERjQ0XFx1REY0N1xcdURGNDhcXHVERjRCLVxcdURGNERcXHVERjUwXFx1REY1N1xcdURGNUQtXFx1REY2M1xcdURGNjYtXFx1REY2Q1xcdURGNzAtXFx1REY3NF18XFx1RDgwNVtcXHVEQzAwLVxcdURDNEFcXHVEQzUwLVxcdURDNTlcXHVEQzgwLVxcdURDQzVcXHVEQ0M3XFx1RENEMC1cXHVEQ0Q5XFx1REQ4MC1cXHVEREI1XFx1RERCOC1cXHVEREMwXFx1REREOC1cXHVEREREXFx1REUwMC1cXHVERTQwXFx1REU0NFxcdURFNTAtXFx1REU1OVxcdURFODAtXFx1REVCN1xcdURFQzAtXFx1REVDOVxcdURGMDAtXFx1REYxOVxcdURGMUQtXFx1REYyQlxcdURGMzAtXFx1REYzOV18XFx1RDgwNltcXHVEQ0EwLVxcdURDRTlcXHVEQ0ZGXFx1REUwMC1cXHVERTNFXFx1REU0N1xcdURFNTAtXFx1REU4M1xcdURFODYtXFx1REU5OVxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMzZcXHVEQzM4LVxcdURDNDBcXHVEQzUwLVxcdURDNTlcXHVEQzcyLVxcdURDOEZcXHVEQzkyLVxcdURDQTdcXHVEQ0E5LVxcdURDQjZcXHVERDAwLVxcdUREMDZcXHVERDA4XFx1REQwOVxcdUREMEItXFx1REQzNlxcdUREM0FcXHVERDNDXFx1REQzRFxcdUREM0YtXFx1REQ0N1xcdURENTAtXFx1REQ1OV18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3MlxcdUQ4NzQtXFx1RDg3OV1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REU2MC1cXHVERTY5XFx1REVEMC1cXHVERUVEXFx1REVGMC1cXHVERUY0XFx1REYwMC1cXHVERjM2XFx1REY0MC1cXHVERjQzXFx1REY1MC1cXHVERjU5XFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTAtXFx1REY3RVxcdURGOEYtXFx1REY5RlxcdURGRTBcXHVERkUxXXxcXHVEODIxW1xcdURDMDAtXFx1REZFQ118XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMC1cXHVERDFFXFx1REQ3MC1cXHVERUZCXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OVxcdURDOURcXHVEQzlFXXxcXHVEODM0W1xcdURENjUtXFx1REQ2OVxcdURENkQtXFx1REQ3MlxcdUREN0ItXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRFxcdURFNDItXFx1REU0NF18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXFx1REZDRS1cXHVERkZGXXxcXHVEODM2W1xcdURFMDAtXFx1REUzNlxcdURFM0ItXFx1REU2Q1xcdURFNzVcXHVERTg0XFx1REU5Qi1cXHVERTlGXFx1REVBMS1cXHVERUFGXXxcXHVEODM4W1xcdURDMDAtXFx1REMwNlxcdURDMDgtXFx1REMxOFxcdURDMUItXFx1REMyMVxcdURDMjNcXHVEQzI0XFx1REMyNi1cXHVEQzJBXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdURDRDAtXFx1RENENlxcdUREMDAtXFx1REQ0QVxcdURENTAtXFx1REQ1OV18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMVxcdURFQjAtXFx1REZGRl18XFx1RDg3QVtcXHVEQzAwLVxcdURGRTBdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXXxcXHVEQjQwW1xcdUREMDAtXFx1RERFRl0vO1xuXG5cdHZhciB1bmljb2RlID0ge1xuXHRcdFNwYWNlX1NlcGFyYXRvcjogU3BhY2VfU2VwYXJhdG9yLFxuXHRcdElEX1N0YXJ0OiBJRF9TdGFydCxcblx0XHRJRF9Db250aW51ZTogSURfQ29udGludWVcblx0fTtcblxuXHR2YXIgdXRpbCA9IHtcblx0ICAgIGlzU3BhY2VTZXBhcmF0b3I6IGZ1bmN0aW9uIGlzU3BhY2VTZXBhcmF0b3IgKGMpIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnICYmIHVuaWNvZGUuU3BhY2VfU2VwYXJhdG9yLnRlc3QoYylcblx0ICAgIH0sXG5cblx0ICAgIGlzSWRTdGFydENoYXI6IGZ1bmN0aW9uIGlzSWRTdGFydENoYXIgKGMpIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnICYmIChcblx0ICAgICAgICAgICAgKGMgPj0gJ2EnICYmIGMgPD0gJ3onKSB8fFxuXHQgICAgICAgIChjID49ICdBJyAmJiBjIDw9ICdaJykgfHxcblx0ICAgICAgICAoYyA9PT0gJyQnKSB8fCAoYyA9PT0gJ18nKSB8fFxuXHQgICAgICAgIHVuaWNvZGUuSURfU3RhcnQudGVzdChjKVxuXHQgICAgICAgIClcblx0ICAgIH0sXG5cblx0ICAgIGlzSWRDb250aW51ZUNoYXI6IGZ1bmN0aW9uIGlzSWRDb250aW51ZUNoYXIgKGMpIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnICYmIChcblx0ICAgICAgICAgICAgKGMgPj0gJ2EnICYmIGMgPD0gJ3onKSB8fFxuXHQgICAgICAgIChjID49ICdBJyAmJiBjIDw9ICdaJykgfHxcblx0ICAgICAgICAoYyA+PSAnMCcgJiYgYyA8PSAnOScpIHx8XG5cdCAgICAgICAgKGMgPT09ICckJykgfHwgKGMgPT09ICdfJykgfHxcblx0ICAgICAgICAoYyA9PT0gJ1xcdTIwMEMnKSB8fCAoYyA9PT0gJ1xcdTIwMEQnKSB8fFxuXHQgICAgICAgIHVuaWNvZGUuSURfQ29udGludWUudGVzdChjKVxuXHQgICAgICAgIClcblx0ICAgIH0sXG5cblx0ICAgIGlzRGlnaXQ6IGZ1bmN0aW9uIGlzRGlnaXQgKGMpIHtcblx0ICAgICAgICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnICYmIC9bMC05XS8udGVzdChjKVxuXHQgICAgfSxcblxuXHQgICAgaXNIZXhEaWdpdDogZnVuY3Rpb24gaXNIZXhEaWdpdCAoYykge1xuXHQgICAgICAgIHJldHVybiB0eXBlb2YgYyA9PT0gJ3N0cmluZycgJiYgL1swLTlBLUZhLWZdLy50ZXN0KGMpXG5cdCAgICB9LFxuXHR9O1xuXG5cdHZhciBzb3VyY2U7XG5cdHZhciBwYXJzZVN0YXRlO1xuXHR2YXIgc3RhY2s7XG5cdHZhciBwb3M7XG5cdHZhciBsaW5lO1xuXHR2YXIgY29sdW1uO1xuXHR2YXIgdG9rZW47XG5cdHZhciBrZXk7XG5cdHZhciByb290O1xuXG5cdHZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlICh0ZXh0LCByZXZpdmVyKSB7XG5cdCAgICBzb3VyY2UgPSBTdHJpbmcodGV4dCk7XG5cdCAgICBwYXJzZVN0YXRlID0gJ3N0YXJ0Jztcblx0ICAgIHN0YWNrID0gW107XG5cdCAgICBwb3MgPSAwO1xuXHQgICAgbGluZSA9IDE7XG5cdCAgICBjb2x1bW4gPSAwO1xuXHQgICAgdG9rZW4gPSB1bmRlZmluZWQ7XG5cdCAgICBrZXkgPSB1bmRlZmluZWQ7XG5cdCAgICByb290ID0gdW5kZWZpbmVkO1xuXG5cdCAgICBkbyB7XG5cdCAgICAgICAgdG9rZW4gPSBsZXgoKTtcblxuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZS5cblx0ICAgICAgICAvLyBpZiAoIXBhcnNlU3RhdGVzW3BhcnNlU3RhdGVdKSB7XG5cdCAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRQYXJzZVN0YXRlKClcblx0ICAgICAgICAvLyB9XG5cblx0ICAgICAgICBwYXJzZVN0YXRlc1twYXJzZVN0YXRlXSgpO1xuXHQgICAgfSB3aGlsZSAodG9rZW4udHlwZSAhPT0gJ2VvZicpXG5cblx0ICAgIGlmICh0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHJldHVybiBpbnRlcm5hbGl6ZSh7Jyc6IHJvb3R9LCAnJywgcmV2aXZlcilcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJvb3Rcblx0fTtcblxuXHRmdW5jdGlvbiBpbnRlcm5hbGl6ZSAoaG9sZGVyLCBuYW1lLCByZXZpdmVyKSB7XG5cdCAgICB2YXIgdmFsdWUgPSBob2xkZXJbbmFtZV07XG5cdCAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG5cdCAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBrZXkgPSBTdHJpbmcoaSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBpbnRlcm5hbGl6ZSh2YWx1ZSwga2V5LCByZXZpdmVyKTtcblx0ICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbHVlW2tleV07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWx1ZSwga2V5LCB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXBsYWNlbWVudCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGtleSQxIGluIHZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQkMSA9IGludGVybmFsaXplKHZhbHVlLCBrZXkkMSwgcmV2aXZlcik7XG5cdCAgICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQkMSA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbHVlW2tleSQxXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCBrZXkkMSwge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVwbGFjZW1lbnQkMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJldml2ZXIuY2FsbChob2xkZXIsIG5hbWUsIHZhbHVlKVxuXHR9XG5cblx0dmFyIGxleFN0YXRlO1xuXHR2YXIgYnVmZmVyO1xuXHR2YXIgZG91YmxlUXVvdGU7XG5cdHZhciBzaWduO1xuXHR2YXIgYztcblxuXHRmdW5jdGlvbiBsZXggKCkge1xuXHQgICAgbGV4U3RhdGUgPSAnZGVmYXVsdCc7XG5cdCAgICBidWZmZXIgPSAnJztcblx0ICAgIGRvdWJsZVF1b3RlID0gZmFsc2U7XG5cdCAgICBzaWduID0gMTtcblxuXHQgICAgZm9yICg7Oykge1xuXHQgICAgICAgIGMgPSBwZWVrKCk7XG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUuXG5cdCAgICAgICAgLy8gaWYgKCFsZXhTdGF0ZXNbbGV4U3RhdGVdKSB7XG5cdCAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRMZXhTdGF0ZShsZXhTdGF0ZSlcblx0ICAgICAgICAvLyB9XG5cblx0ICAgICAgICB2YXIgdG9rZW4gPSBsZXhTdGF0ZXNbbGV4U3RhdGVdKCk7XG5cdCAgICAgICAgaWYgKHRva2VuKSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0b2tlblxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIHBlZWsgKCkge1xuXHQgICAgaWYgKHNvdXJjZVtwb3NdKSB7XG5cdCAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHNvdXJjZS5jb2RlUG9pbnRBdChwb3MpKVxuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gcmVhZCAoKSB7XG5cdCAgICB2YXIgYyA9IHBlZWsoKTtcblxuXHQgICAgaWYgKGMgPT09ICdcXG4nKSB7XG5cdCAgICAgICAgbGluZSsrO1xuXHQgICAgICAgIGNvbHVtbiA9IDA7XG5cdCAgICB9IGVsc2UgaWYgKGMpIHtcblx0ICAgICAgICBjb2x1bW4gKz0gYy5sZW5ndGg7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIGNvbHVtbisrO1xuXHQgICAgfVxuXG5cdCAgICBpZiAoYykge1xuXHQgICAgICAgIHBvcyArPSBjLmxlbmd0aDtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGNcblx0fVxuXG5cdHZhciBsZXhTdGF0ZXMgPSB7XG5cdCAgICBkZWZhdWx0OiBmdW5jdGlvbiBkZWZhdWx0JDEgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJ1xcdCc6XG5cdCAgICAgICAgY2FzZSAnXFx2Jzpcblx0ICAgICAgICBjYXNlICdcXGYnOlxuXHQgICAgICAgIGNhc2UgJyAnOlxuXHQgICAgICAgIGNhc2UgJ1xcdTAwQTAnOlxuXHQgICAgICAgIGNhc2UgJ1xcdUZFRkYnOlxuXHQgICAgICAgIGNhc2UgJ1xcbic6XG5cdCAgICAgICAgY2FzZSAnXFxyJzpcblx0ICAgICAgICBjYXNlICdcXHUyMDI4Jzpcblx0ICAgICAgICBjYXNlICdcXHUyMDI5Jzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJy8nOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2NvbW1lbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignZW9mJylcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodXRpbC5pc1NwYWNlU2VwYXJhdG9yKGMpKSB7XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQgICAgICAgIC8vIGlmICghbGV4U3RhdGVzW3BhcnNlU3RhdGVdKSB7XG5cdCAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRMZXhTdGF0ZShwYXJzZVN0YXRlKVxuXHQgICAgICAgIC8vIH1cblxuXHQgICAgICAgIHJldHVybiBsZXhTdGF0ZXNbcGFyc2VTdGF0ZV0oKVxuXHQgICAgfSxcblxuXHQgICAgY29tbWVudDogZnVuY3Rpb24gY29tbWVudCAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnKic6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnbXVsdGlMaW5lQ29tbWVudCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnLyc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnc2luZ2xlTGluZUNvbW1lbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBtdWx0aUxpbmVDb21tZW50OiBmdW5jdGlvbiBtdWx0aUxpbmVDb21tZW50ICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcqJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdtdWx0aUxpbmVDb21tZW50QXN0ZXJpc2snO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgfSxcblxuXHQgICAgbXVsdGlMaW5lQ29tbWVudEFzdGVyaXNrOiBmdW5jdGlvbiBtdWx0aUxpbmVDb21tZW50QXN0ZXJpc2sgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJyonOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnLyc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVmYXVsdCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgbGV4U3RhdGUgPSAnbXVsdGlMaW5lQ29tbWVudCc7XG5cdCAgICB9LFxuXG5cdCAgICBzaW5nbGVMaW5lQ29tbWVudDogZnVuY3Rpb24gc2luZ2xlTGluZUNvbW1lbnQgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJ1xcbic6XG5cdCAgICAgICAgY2FzZSAnXFxyJzpcblx0ICAgICAgICBjYXNlICdcXHUyMDI4Jzpcblx0ICAgICAgICBjYXNlICdcXHUyMDI5Jzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWZhdWx0Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ2VvZicpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgfSxcblxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICd7Jzpcblx0ICAgICAgICBjYXNlICdbJzpcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdwdW5jdHVhdG9yJywgcmVhZCgpKVxuXG5cdCAgICAgICAgY2FzZSAnbic6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbCgndWxsJyk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVsbCcsIG51bGwpXG5cblx0ICAgICAgICBjYXNlICd0Jzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsaXRlcmFsKCdydWUnKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdib29sZWFuJywgdHJ1ZSlcblxuXHQgICAgICAgIGNhc2UgJ2YnOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxpdGVyYWwoJ2Fsc2UnKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdib29sZWFuJywgZmFsc2UpXG5cblx0ICAgICAgICBjYXNlICctJzpcblx0ICAgICAgICBjYXNlICcrJzpcblx0ICAgICAgICAgICAgaWYgKHJlYWQoKSA9PT0gJy0nKSB7XG5cdCAgICAgICAgICAgICAgICBzaWduID0gLTE7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdzaWduJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcuJzpcblx0ICAgICAgICAgICAgYnVmZmVyID0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsUG9pbnRMZWFkaW5nJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcwJzpcblx0ICAgICAgICAgICAgYnVmZmVyID0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICd6ZXJvJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcxJzpcblx0ICAgICAgICBjYXNlICcyJzpcblx0ICAgICAgICBjYXNlICczJzpcblx0ICAgICAgICBjYXNlICc0Jzpcblx0ICAgICAgICBjYXNlICc1Jzpcblx0ICAgICAgICBjYXNlICc2Jzpcblx0ICAgICAgICBjYXNlICc3Jzpcblx0ICAgICAgICBjYXNlICc4Jzpcblx0ICAgICAgICBjYXNlICc5Jzpcblx0ICAgICAgICAgICAgYnVmZmVyID0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsSW50ZWdlcic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnSSc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbCgnbmZpbml0eScpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBJbmZpbml0eSlcblxuXHQgICAgICAgIGNhc2UgJ04nOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxpdGVyYWwoJ2FOJyk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIE5hTilcblxuXHQgICAgICAgIGNhc2UgJ1wiJzpcblx0ICAgICAgICBjYXNlIFwiJ1wiOlxuXHQgICAgICAgICAgICBkb3VibGVRdW90ZSA9IChyZWFkKCkgPT09ICdcIicpO1xuXHQgICAgICAgICAgICBidWZmZXIgPSAnJztcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnc3RyaW5nJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgaWRlbnRpZmllck5hbWVTdGFydEVzY2FwZTogZnVuY3Rpb24gaWRlbnRpZmllck5hbWVTdGFydEVzY2FwZSAoKSB7XG5cdCAgICAgICAgaWYgKGMgIT09ICd1Jykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHZhciB1ID0gdW5pY29kZUVzY2FwZSgpO1xuXHQgICAgICAgIHN3aXRjaCAodSkge1xuXHQgICAgICAgIGNhc2UgJyQnOlxuXHQgICAgICAgIGNhc2UgJ18nOlxuXHQgICAgICAgICAgICBicmVha1xuXG5cdCAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgaWYgKCF1dGlsLmlzSWRTdGFydENoYXIodSkpIHtcblx0ICAgICAgICAgICAgICAgIHRocm93IGludmFsaWRJZGVudGlmaWVyKClcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGJyZWFrXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgYnVmZmVyICs9IHU7XG5cdCAgICAgICAgbGV4U3RhdGUgPSAnaWRlbnRpZmllck5hbWUnO1xuXHQgICAgfSxcblxuXHQgICAgaWRlbnRpZmllck5hbWU6IGZ1bmN0aW9uIGlkZW50aWZpZXJOYW1lICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICckJzpcblx0ICAgICAgICBjYXNlICdfJzpcblx0ICAgICAgICBjYXNlICdcXHUyMDBDJzpcblx0ICAgICAgICBjYXNlICdcXHUyMDBEJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdcXFxcJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdpZGVudGlmaWVyTmFtZUVzY2FwZSc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh1dGlsLmlzSWRDb250aW51ZUNoYXIoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdpZGVudGlmaWVyJywgYnVmZmVyKVxuXHQgICAgfSxcblxuXHQgICAgaWRlbnRpZmllck5hbWVFc2NhcGU6IGZ1bmN0aW9uIGlkZW50aWZpZXJOYW1lRXNjYXBlICgpIHtcblx0ICAgICAgICBpZiAoYyAhPT0gJ3UnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgdmFyIHUgPSB1bmljb2RlRXNjYXBlKCk7XG5cdCAgICAgICAgc3dpdGNoICh1KSB7XG5cdCAgICAgICAgY2FzZSAnJCc6XG5cdCAgICAgICAgY2FzZSAnXyc6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAwQyc6XG5cdCAgICAgICAgY2FzZSAnXFx1MjAwRCc6XG5cdCAgICAgICAgICAgIGJyZWFrXG5cblx0ICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICBpZiAoIXV0aWwuaXNJZENvbnRpbnVlQ2hhcih1KSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgaW52YWxpZElkZW50aWZpZXIoKVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgYnJlYWtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBidWZmZXIgKz0gdTtcblx0ICAgICAgICBsZXhTdGF0ZSA9ICdpZGVudGlmaWVyTmFtZSc7XG5cdCAgICB9LFxuXG5cdCAgICBzaWduOiBmdW5jdGlvbiBzaWduJDEgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJy4nOlxuXHQgICAgICAgICAgICBidWZmZXIgPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxQb2ludExlYWRpbmcnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJzAnOlxuXHQgICAgICAgICAgICBidWZmZXIgPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ3plcm8nO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJzEnOlxuXHQgICAgICAgIGNhc2UgJzInOlxuXHQgICAgICAgIGNhc2UgJzMnOlxuXHQgICAgICAgIGNhc2UgJzQnOlxuXHQgICAgICAgIGNhc2UgJzUnOlxuXHQgICAgICAgIGNhc2UgJzYnOlxuXHQgICAgICAgIGNhc2UgJzcnOlxuXHQgICAgICAgIGNhc2UgJzgnOlxuXHQgICAgICAgIGNhc2UgJzknOlxuXHQgICAgICAgICAgICBidWZmZXIgPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxJbnRlZ2VyJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdJJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsaXRlcmFsKCduZmluaXR5Jyk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIHNpZ24gKiBJbmZpbml0eSlcblxuXHQgICAgICAgIGNhc2UgJ04nOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxpdGVyYWwoJ2FOJyk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIE5hTilcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICB6ZXJvOiBmdW5jdGlvbiB6ZXJvICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcuJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbFBvaW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdlJzpcblx0ICAgICAgICBjYXNlICdFJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEV4cG9uZW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICd4Jzpcblx0ICAgICAgICBjYXNlICdYJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnaGV4YWRlY2ltYWwnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBzaWduICogMClcblx0ICAgIH0sXG5cblx0ICAgIGRlY2ltYWxJbnRlZ2VyOiBmdW5jdGlvbiBkZWNpbWFsSW50ZWdlciAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnLic6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxQb2ludCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnZSc6XG5cdCAgICAgICAgY2FzZSAnRSc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxFeHBvbmVudCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgc2lnbiAqIE51bWJlcihidWZmZXIpKVxuXHQgICAgfSxcblxuXHQgICAgZGVjaW1hbFBvaW50TGVhZGluZzogZnVuY3Rpb24gZGVjaW1hbFBvaW50TGVhZGluZyAoKSB7XG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRnJhY3Rpb24nO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBkZWNpbWFsUG9pbnQ6IGZ1bmN0aW9uIGRlY2ltYWxQb2ludCAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnZSc6XG5cdCAgICAgICAgY2FzZSAnRSc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxFeHBvbmVudCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEZyYWN0aW9uJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgc2lnbiAqIE51bWJlcihidWZmZXIpKVxuXHQgICAgfSxcblxuXHQgICAgZGVjaW1hbEZyYWN0aW9uOiBmdW5jdGlvbiBkZWNpbWFsRnJhY3Rpb24gKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJ2UnOlxuXHQgICAgICAgIGNhc2UgJ0UnOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRXhwb25lbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIHNpZ24gKiBOdW1iZXIoYnVmZmVyKSlcblx0ICAgIH0sXG5cblx0ICAgIGRlY2ltYWxFeHBvbmVudDogZnVuY3Rpb24gZGVjaW1hbEV4cG9uZW50ICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcrJzpcblx0ICAgICAgICBjYXNlICctJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEV4cG9uZW50U2lnbic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEV4cG9uZW50SW50ZWdlcic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGRlY2ltYWxFeHBvbmVudFNpZ246IGZ1bmN0aW9uIGRlY2ltYWxFeHBvbmVudFNpZ24gKCkge1xuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEV4cG9uZW50SW50ZWdlcic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGRlY2ltYWxFeHBvbmVudEludGVnZXI6IGZ1bmN0aW9uIGRlY2ltYWxFeHBvbmVudEludGVnZXIgKCkge1xuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgc2lnbiAqIE51bWJlcihidWZmZXIpKVxuXHQgICAgfSxcblxuXHQgICAgaGV4YWRlY2ltYWw6IGZ1bmN0aW9uIGhleGFkZWNpbWFsICgpIHtcblx0ICAgICAgICBpZiAodXRpbC5pc0hleERpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2hleGFkZWNpbWFsSW50ZWdlcic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGhleGFkZWNpbWFsSW50ZWdlcjogZnVuY3Rpb24gaGV4YWRlY2ltYWxJbnRlZ2VyICgpIHtcblx0ICAgICAgICBpZiAodXRpbC5pc0hleERpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIHNpZ24gKiBOdW1iZXIoYnVmZmVyKSlcblx0ICAgIH0sXG5cblx0ICAgIHN0cmluZzogZnVuY3Rpb24gc3RyaW5nICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICdcXFxcJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gZXNjYXBlKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnXCInOlxuXHQgICAgICAgICAgICBpZiAoZG91YmxlUXVvdGUpIHtcblx0ICAgICAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignc3RyaW5nJywgYnVmZmVyKVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlIFwiJ1wiOlxuXHQgICAgICAgICAgICBpZiAoIWRvdWJsZVF1b3RlKSB7XG5cdCAgICAgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3N0cmluZycsIGJ1ZmZlcilcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnXFxuJzpcblx0ICAgICAgICBjYXNlICdcXHInOlxuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cblx0ICAgICAgICBjYXNlICdcXHUyMDI4Jzpcblx0ICAgICAgICBjYXNlICdcXHUyMDI5Jzpcblx0ICAgICAgICAgICAgc2VwYXJhdG9yQ2hhcihjKTtcblx0ICAgICAgICAgICAgYnJlYWtcblxuXHQgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgIH0sXG5cblx0ICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAneyc6XG5cdCAgICAgICAgY2FzZSAnWyc6XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbigncHVuY3R1YXRvcicsIHJlYWQoKSlcblxuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSB0aGUgZGVmYXVsdCBsZXhTdGF0ZSBoYW5kbGVzIGVvZi5cblx0ICAgICAgICAvLyBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICAvLyAgICAgcmV0dXJuIG5ld1Rva2VuKCdlb2YnKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGxleFN0YXRlID0gJ3ZhbHVlJztcblx0ICAgIH0sXG5cblx0ICAgIGJlZm9yZVByb3BlcnR5TmFtZTogZnVuY3Rpb24gYmVmb3JlUHJvcGVydHlOYW1lICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICckJzpcblx0ICAgICAgICBjYXNlICdfJzpcblx0ICAgICAgICAgICAgYnVmZmVyID0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdpZGVudGlmaWVyTmFtZSc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnXFxcXCc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnaWRlbnRpZmllck5hbWVTdGFydEVzY2FwZSc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnfSc6XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbigncHVuY3R1YXRvcicsIHJlYWQoKSlcblxuXHQgICAgICAgIGNhc2UgJ1wiJzpcblx0ICAgICAgICBjYXNlIFwiJ1wiOlxuXHQgICAgICAgICAgICBkb3VibGVRdW90ZSA9IChyZWFkKCkgPT09ICdcIicpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdzdHJpbmcnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodXRpbC5pc0lkU3RhcnRDaGFyKGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2lkZW50aWZpZXJOYW1lJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgYWZ0ZXJQcm9wZXJ0eU5hbWU6IGZ1bmN0aW9uIGFmdGVyUHJvcGVydHlOYW1lICgpIHtcblx0ICAgICAgICBpZiAoYyA9PT0gJzonKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbigncHVuY3R1YXRvcicsIHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBiZWZvcmVQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiBiZWZvcmVQcm9wZXJ0eVZhbHVlICgpIHtcblx0ICAgICAgICBsZXhTdGF0ZSA9ICd2YWx1ZSc7XG5cdCAgICB9LFxuXG5cdCAgICBhZnRlclByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGFmdGVyUHJvcGVydHlWYWx1ZSAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnLCc6XG5cdCAgICAgICAgY2FzZSAnfSc6XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbigncHVuY3R1YXRvcicsIHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBiZWZvcmVBcnJheVZhbHVlOiBmdW5jdGlvbiBiZWZvcmVBcnJheVZhbHVlICgpIHtcblx0ICAgICAgICBpZiAoYyA9PT0gJ10nKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbigncHVuY3R1YXRvcicsIHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBsZXhTdGF0ZSA9ICd2YWx1ZSc7XG5cdCAgICB9LFxuXG5cdCAgICBhZnRlckFycmF5VmFsdWU6IGZ1bmN0aW9uIGFmdGVyQXJyYXlWYWx1ZSAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnLCc6XG5cdCAgICAgICAgY2FzZSAnXSc6XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbigncHVuY3R1YXRvcicsIHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAoKSB7XG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgZGVmYXVsdCBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyBpZiAoYyA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgLy8gICAgIHJlYWQoKVxuXHQgICAgICAgIC8vICAgICByZXR1cm4gbmV3VG9rZW4oJ2VvZicpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblx0fTtcblxuXHRmdW5jdGlvbiBuZXdUb2tlbiAodHlwZSwgdmFsdWUpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgdHlwZTogdHlwZSxcblx0ICAgICAgICB2YWx1ZTogdmFsdWUsXG5cdCAgICAgICAgbGluZTogbGluZSxcblx0ICAgICAgICBjb2x1bW46IGNvbHVtbixcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGxpdGVyYWwgKHMpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcblx0ICAgICAgICB2YXIgYyA9IGxpc3RbaV07XG5cblx0ICAgICAgICB2YXIgcCA9IHBlZWsoKTtcblxuXHQgICAgICAgIGlmIChwICE9PSBjKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZWFkKCk7XG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiBlc2NhcGUgKCkge1xuXHQgICAgdmFyIGMgPSBwZWVrKCk7XG5cdCAgICBzd2l0Y2ggKGMpIHtcblx0ICAgIGNhc2UgJ2InOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gJ1xcYidcblxuXHQgICAgY2FzZSAnZic6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiAnXFxmJ1xuXG5cdCAgICBjYXNlICduJzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuICdcXG4nXG5cblx0ICAgIGNhc2UgJ3InOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gJ1xccidcblxuXHQgICAgY2FzZSAndCc6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiAnXFx0J1xuXG5cdCAgICBjYXNlICd2Jzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuICdcXHYnXG5cblx0ICAgIGNhc2UgJzAnOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KHBlZWsoKSkpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiAnXFwwJ1xuXG5cdCAgICBjYXNlICd4Jzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuIGhleEVzY2FwZSgpXG5cblx0ICAgIGNhc2UgJ3UnOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gdW5pY29kZUVzY2FwZSgpXG5cblx0ICAgIGNhc2UgJ1xcbic6XG5cdCAgICBjYXNlICdcXHUyMDI4Jzpcblx0ICAgIGNhc2UgJ1xcdTIwMjknOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gJydcblxuXHQgICAgY2FzZSAnXFxyJzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgaWYgKHBlZWsoKSA9PT0gJ1xcbicpIHtcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiAnJ1xuXG5cdCAgICBjYXNlICcxJzpcblx0ICAgIGNhc2UgJzInOlxuXHQgICAgY2FzZSAnMyc6XG5cdCAgICBjYXNlICc0Jzpcblx0ICAgIGNhc2UgJzUnOlxuXHQgICAgY2FzZSAnNic6XG5cdCAgICBjYXNlICc3Jzpcblx0ICAgIGNhc2UgJzgnOlxuXHQgICAgY2FzZSAnOSc6XG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXG5cdCAgICBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9XG5cblx0ICAgIHJldHVybiByZWFkKClcblx0fVxuXG5cdGZ1bmN0aW9uIGhleEVzY2FwZSAoKSB7XG5cdCAgICB2YXIgYnVmZmVyID0gJyc7XG5cdCAgICB2YXIgYyA9IHBlZWsoKTtcblxuXHQgICAgaWYgKCF1dGlsLmlzSGV4RGlnaXQoYykpIHtcblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9XG5cblx0ICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cblx0ICAgIGMgPSBwZWVrKCk7XG5cdCAgICBpZiAoIXV0aWwuaXNIZXhEaWdpdChjKSkge1xuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH1cblxuXHQgICAgYnVmZmVyICs9IHJlYWQoKTtcblxuXHQgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KGJ1ZmZlciwgMTYpKVxuXHR9XG5cblx0ZnVuY3Rpb24gdW5pY29kZUVzY2FwZSAoKSB7XG5cdCAgICB2YXIgYnVmZmVyID0gJyc7XG5cdCAgICB2YXIgY291bnQgPSA0O1xuXG5cdCAgICB3aGlsZSAoY291bnQtLSA+IDApIHtcblx0ICAgICAgICB2YXIgYyA9IHBlZWsoKTtcblx0ICAgICAgICBpZiAoIXV0aWwuaXNIZXhEaWdpdChjKSkge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KGJ1ZmZlciwgMTYpKVxuXHR9XG5cblx0dmFyIHBhcnNlU3RhdGVzID0ge1xuXHQgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICgpIHtcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2VvZicpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZEVPRigpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcHVzaCgpO1xuXHQgICAgfSxcblxuXHQgICAgYmVmb3JlUHJvcGVydHlOYW1lOiBmdW5jdGlvbiBiZWZvcmVQcm9wZXJ0eU5hbWUgKCkge1xuXHQgICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuXHQgICAgICAgIGNhc2UgJ2lkZW50aWZpZXInOlxuXHQgICAgICAgIGNhc2UgJ3N0cmluZyc6XG5cdCAgICAgICAgICAgIGtleSA9IHRva2VuLnZhbHVlO1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2FmdGVyUHJvcGVydHlOYW1lJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdwdW5jdHVhdG9yJzpcblx0ICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgICAgIC8vIGlmICh0b2tlbi52YWx1ZSAhPT0gJ30nKSB7XG5cdCAgICAgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgICAgICAgICAvLyB9XG5cblx0ICAgICAgICAgICAgcG9wKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnZW9mJzpcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZEVPRigpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgIH0sXG5cblx0ICAgIGFmdGVyUHJvcGVydHlOYW1lOiBmdW5jdGlvbiBhZnRlclByb3BlcnR5TmFtZSAoKSB7XG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gaWYgKHRva2VuLnR5cGUgIT09ICdwdW5jdHVhdG9yJyB8fCB0b2tlbi52YWx1ZSAhPT0gJzonKSB7XG5cdCAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRFT0YoKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHBhcnNlU3RhdGUgPSAnYmVmb3JlUHJvcGVydHlWYWx1ZSc7XG5cdCAgICB9LFxuXG5cdCAgICBiZWZvcmVQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiBiZWZvcmVQcm9wZXJ0eVZhbHVlICgpIHtcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2VvZicpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZEVPRigpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcHVzaCgpO1xuXHQgICAgfSxcblxuXHQgICAgYmVmb3JlQXJyYXlWYWx1ZTogZnVuY3Rpb24gYmVmb3JlQXJyYXlWYWx1ZSAoKSB7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRFT0YoKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAncHVuY3R1YXRvcicgJiYgdG9rZW4udmFsdWUgPT09ICddJykge1xuXHQgICAgICAgICAgICBwb3AoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcHVzaCgpO1xuXHQgICAgfSxcblxuXHQgICAgYWZ0ZXJQcm9wZXJ0eVZhbHVlOiBmdW5jdGlvbiBhZnRlclByb3BlcnR5VmFsdWUgKCkge1xuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgIC8vIGlmICh0b2tlbi50eXBlICE9PSAncHVuY3R1YXRvcicpIHtcblx0ICAgICAgICAvLyAgICAgdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgICAgICAvLyB9XG5cblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2VvZicpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZEVPRigpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgc3dpdGNoICh0b2tlbi52YWx1ZSkge1xuXHQgICAgICAgIGNhc2UgJywnOlxuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2JlZm9yZVByb3BlcnR5TmFtZSc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnfSc6XG5cdCAgICAgICAgICAgIHBvcCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgIC8vIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICB9LFxuXG5cdCAgICBhZnRlckFycmF5VmFsdWU6IGZ1bmN0aW9uIGFmdGVyQXJyYXlWYWx1ZSAoKSB7XG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gaWYgKHRva2VuLnR5cGUgIT09ICdwdW5jdHVhdG9yJykge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgICAgIC8vIH1cblxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZW9mJykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRU9GKClcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzd2l0Y2ggKHRva2VuLnZhbHVlKSB7XG5cdCAgICAgICAgY2FzZSAnLCc6XG5cdCAgICAgICAgICAgIHBhcnNlU3RhdGUgPSAnYmVmb3JlQXJyYXlWYWx1ZSc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnXSc6XG5cdCAgICAgICAgICAgIHBvcCgpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZSBzaW5jZSBpdCdzIGhhbmRsZWQgYnkgdGhlIGxleFN0YXRlLlxuXHQgICAgICAgIC8vIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICB9LFxuXG5cdCAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAoKSB7XG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gaWYgKHRva2VuLnR5cGUgIT09ICdlb2YnKSB7XG5cdCAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICAgICAgLy8gfVxuXHQgICAgfSxcblx0fTtcblxuXHRmdW5jdGlvbiBwdXNoICgpIHtcblx0ICAgIHZhciB2YWx1ZTtcblxuXHQgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG5cdCAgICBjYXNlICdwdW5jdHVhdG9yJzpcblx0ICAgICAgICBzd2l0Y2ggKHRva2VuLnZhbHVlKSB7XG5cdCAgICAgICAgY2FzZSAneyc6XG5cdCAgICAgICAgICAgIHZhbHVlID0ge307XG5cdCAgICAgICAgICAgIGJyZWFrXG5cblx0ICAgICAgICBjYXNlICdbJzpcblx0ICAgICAgICAgICAgdmFsdWUgPSBbXTtcblx0ICAgICAgICAgICAgYnJlYWtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBicmVha1xuXG5cdCAgICBjYXNlICdudWxsJzpcblx0ICAgIGNhc2UgJ2Jvb2xlYW4nOlxuXHQgICAgY2FzZSAnbnVtZXJpYyc6XG5cdCAgICBjYXNlICdzdHJpbmcnOlxuXHQgICAgICAgIHZhbHVlID0gdG9rZW4udmFsdWU7XG5cdCAgICAgICAgYnJlYWtcblxuXHQgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQgICAgLy8gZGVmYXVsdDpcblx0ICAgIC8vICAgICB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgfVxuXG5cdCAgICBpZiAocm9vdCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgcm9vdCA9IHZhbHVlO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgcGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cdCAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyZW50KSkge1xuXHQgICAgICAgICAgICBwYXJlbnQucHVzaCh2YWx1ZSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHBhcmVudCwga2V5LCB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG5cdCAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuXHQgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2JlZm9yZUFycmF5VmFsdWUnO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHBhcnNlU3RhdGUgPSAnYmVmb3JlUHJvcGVydHlOYW1lJztcblx0ICAgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBjdXJyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cdCAgICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2VuZCc7XG5cdCAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG5cdCAgICAgICAgICAgIHBhcnNlU3RhdGUgPSAnYWZ0ZXJBcnJheVZhbHVlJztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2FmdGVyUHJvcGVydHlWYWx1ZSc7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gcG9wICgpIHtcblx0ICAgIHN0YWNrLnBvcCgpO1xuXG5cdCAgICB2YXIgY3VycmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXHQgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuXHQgICAgICAgIHBhcnNlU3RhdGUgPSAnZW5kJztcblx0ICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50KSkge1xuXHQgICAgICAgIHBhcnNlU3RhdGUgPSAnYWZ0ZXJBcnJheVZhbHVlJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcGFyc2VTdGF0ZSA9ICdhZnRlclByb3BlcnR5VmFsdWUnO1xuXHQgICAgfVxuXHR9XG5cblx0Ly8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQvLyBmdW5jdGlvbiBpbnZhbGlkUGFyc2VTdGF0ZSAoKSB7XG5cdC8vICAgICByZXR1cm4gbmV3IEVycm9yKGBKU09ONTogaW52YWxpZCBwYXJzZSBzdGF0ZSAnJHtwYXJzZVN0YXRlfSdgKVxuXHQvLyB9XG5cblx0Ly8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQvLyBmdW5jdGlvbiBpbnZhbGlkTGV4U3RhdGUgKHN0YXRlKSB7XG5cdC8vICAgICByZXR1cm4gbmV3IEVycm9yKGBKU09ONTogaW52YWxpZCBsZXggc3RhdGUgJyR7c3RhdGV9J2ApXG5cdC8vIH1cblxuXHRmdW5jdGlvbiBpbnZhbGlkQ2hhciAoYykge1xuXHQgICAgaWYgKGMgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHJldHVybiBzeW50YXhFcnJvcigoXCJKU09ONTogaW52YWxpZCBlbmQgb2YgaW5wdXQgYXQgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4pKVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gc3ludGF4RXJyb3IoKFwiSlNPTjU6IGludmFsaWQgY2hhcmFjdGVyICdcIiArIChmb3JtYXRDaGFyKGMpKSArIFwiJyBhdCBcIiArIGxpbmUgKyBcIjpcIiArIGNvbHVtbikpXG5cdH1cblxuXHRmdW5jdGlvbiBpbnZhbGlkRU9GICgpIHtcblx0ICAgIHJldHVybiBzeW50YXhFcnJvcigoXCJKU09ONTogaW52YWxpZCBlbmQgb2YgaW5wdXQgYXQgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4pKVxuXHR9XG5cblx0Ly8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQvLyBmdW5jdGlvbiBpbnZhbGlkVG9rZW4gKCkge1xuXHQvLyAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdC8vICAgICAgICAgcmV0dXJuIHN5bnRheEVycm9yKGBKU09ONTogaW52YWxpZCBlbmQgb2YgaW5wdXQgYXQgJHtsaW5lfToke2NvbHVtbn1gKVxuXHQvLyAgICAgfVxuXG5cdC8vICAgICBjb25zdCBjID0gU3RyaW5nLmZyb21Db2RlUG9pbnQodG9rZW4udmFsdWUuY29kZVBvaW50QXQoMCkpXG5cdC8vICAgICByZXR1cm4gc3ludGF4RXJyb3IoYEpTT041OiBpbnZhbGlkIGNoYXJhY3RlciAnJHtmb3JtYXRDaGFyKGMpfScgYXQgJHtsaW5lfToke2NvbHVtbn1gKVxuXHQvLyB9XG5cblx0ZnVuY3Rpb24gaW52YWxpZElkZW50aWZpZXIgKCkge1xuXHQgICAgY29sdW1uIC09IDU7XG5cdCAgICByZXR1cm4gc3ludGF4RXJyb3IoKFwiSlNPTjU6IGludmFsaWQgaWRlbnRpZmllciBjaGFyYWN0ZXIgYXQgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4pKVxuXHR9XG5cblx0ZnVuY3Rpb24gc2VwYXJhdG9yQ2hhciAoYykge1xuXHQgICAgY29uc29sZS53YXJuKChcIkpTT041OiAnXCIgKyAoZm9ybWF0Q2hhcihjKSkgKyBcIicgaW4gc3RyaW5ncyBpcyBub3QgdmFsaWQgRUNNQVNjcmlwdDsgY29uc2lkZXIgZXNjYXBpbmdcIikpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0Q2hhciAoYykge1xuXHQgICAgdmFyIHJlcGxhY2VtZW50cyA9IHtcblx0ICAgICAgICBcIidcIjogXCJcXFxcJ1wiLFxuXHQgICAgICAgICdcIic6ICdcXFxcXCInLFxuXHQgICAgICAgICdcXFxcJzogJ1xcXFxcXFxcJyxcblx0ICAgICAgICAnXFxiJzogJ1xcXFxiJyxcblx0ICAgICAgICAnXFxmJzogJ1xcXFxmJyxcblx0ICAgICAgICAnXFxuJzogJ1xcXFxuJyxcblx0ICAgICAgICAnXFxyJzogJ1xcXFxyJyxcblx0ICAgICAgICAnXFx0JzogJ1xcXFx0Jyxcblx0ICAgICAgICAnXFx2JzogJ1xcXFx2Jyxcblx0ICAgICAgICAnXFwwJzogJ1xcXFwwJyxcblx0ICAgICAgICAnXFx1MjAyOCc6ICdcXFxcdTIwMjgnLFxuXHQgICAgICAgICdcXHUyMDI5JzogJ1xcXFx1MjAyOScsXG5cdCAgICB9O1xuXG5cdCAgICBpZiAocmVwbGFjZW1lbnRzW2NdKSB7XG5cdCAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50c1tjXVxuXHQgICAgfVxuXG5cdCAgICBpZiAoYyA8ICcgJykge1xuXHQgICAgICAgIHZhciBoZXhTdHJpbmcgPSBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuXHQgICAgICAgIHJldHVybiAnXFxcXHgnICsgKCcwMCcgKyBoZXhTdHJpbmcpLnN1YnN0cmluZyhoZXhTdHJpbmcubGVuZ3RoKVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gY1xuXHR9XG5cblx0ZnVuY3Rpb24gc3ludGF4RXJyb3IgKG1lc3NhZ2UpIHtcblx0ICAgIHZhciBlcnIgPSBuZXcgU3ludGF4RXJyb3IobWVzc2FnZSk7XG5cdCAgICBlcnIubGluZU51bWJlciA9IGxpbmU7XG5cdCAgICBlcnIuY29sdW1uTnVtYmVyID0gY29sdW1uO1xuXHQgICAgcmV0dXJuIGVyclxuXHR9XG5cblx0dmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkge1xuXHQgICAgdmFyIHN0YWNrID0gW107XG5cdCAgICB2YXIgaW5kZW50ID0gJyc7XG5cdCAgICB2YXIgcHJvcGVydHlMaXN0O1xuXHQgICAgdmFyIHJlcGxhY2VyRnVuYztcblx0ICAgIHZhciBnYXAgPSAnJztcblx0ICAgIHZhciBxdW90ZTtcblxuXHQgICAgaWYgKFxuXHQgICAgICAgIHJlcGxhY2VyICE9IG51bGwgJiZcblx0ICAgICAgICB0eXBlb2YgcmVwbGFjZXIgPT09ICdvYmplY3QnICYmXG5cdCAgICAgICAgIUFycmF5LmlzQXJyYXkocmVwbGFjZXIpXG5cdCAgICApIHtcblx0ICAgICAgICBzcGFjZSA9IHJlcGxhY2VyLnNwYWNlO1xuXHQgICAgICAgIHF1b3RlID0gcmVwbGFjZXIucXVvdGU7XG5cdCAgICAgICAgcmVwbGFjZXIgPSByZXBsYWNlci5yZXBsYWNlcjtcblx0ICAgIH1cblxuXHQgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHJlcGxhY2VyRnVuYyA9IHJlcGxhY2VyO1xuXHQgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuXHQgICAgICAgIHByb3BlcnR5TGlzdCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcmVwbGFjZXI7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgIHZhciB2ID0gbGlzdFtpXTtcblxuXHQgICAgICAgICAgICB2YXIgaXRlbSA9ICh2b2lkIDApO1xuXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGl0ZW0gPSB2O1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKFxuXHQgICAgICAgICAgICAgICAgdHlwZW9mIHYgPT09ICdudW1iZXInIHx8XG5cdCAgICAgICAgICAgICAgICB2IGluc3RhbmNlb2YgU3RyaW5nIHx8XG5cdCAgICAgICAgICAgICAgICB2IGluc3RhbmNlb2YgTnVtYmVyXG5cdCAgICAgICAgICAgICkge1xuXHQgICAgICAgICAgICAgICAgaXRlbSA9IFN0cmluZyh2KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChpdGVtICE9PSB1bmRlZmluZWQgJiYgcHJvcGVydHlMaXN0LmluZGV4T2YoaXRlbSkgPCAwKSB7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0eUxpc3QucHVzaChpdGVtKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKHNwYWNlIGluc3RhbmNlb2YgTnVtYmVyKSB7XG5cdCAgICAgICAgc3BhY2UgPSBOdW1iZXIoc3BhY2UpO1xuXHQgICAgfSBlbHNlIGlmIChzcGFjZSBpbnN0YW5jZW9mIFN0cmluZykge1xuXHQgICAgICAgIHNwYWNlID0gU3RyaW5nKHNwYWNlKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgICBpZiAoc3BhY2UgPiAwKSB7XG5cdCAgICAgICAgICAgIHNwYWNlID0gTWF0aC5taW4oMTAsIE1hdGguZmxvb3Ioc3BhY2UpKTtcblx0ICAgICAgICAgICAgZ2FwID0gJyAgICAgICAgICAnLnN1YnN0cigwLCBzcGFjZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgZ2FwID0gc3BhY2Uuc3Vic3RyKDAsIDEwKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHNlcmlhbGl6ZVByb3BlcnR5KCcnLCB7Jyc6IHZhbHVlfSlcblxuXHQgICAgZnVuY3Rpb24gc2VyaWFsaXplUHJvcGVydHkgKGtleSwgaG9sZGVyKSB7XG5cdCAgICAgICAgdmFyIHZhbHVlID0gaG9sZGVyW2tleV07XG5cdCAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS50b0pTT041ID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTjUoa2V5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHJlcGxhY2VyRnVuYykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHJlcGxhY2VyRnVuYy5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbikge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG5cdCAgICAgICAgY2FzZSBudWxsOiByZXR1cm4gJ251bGwnXG5cdCAgICAgICAgY2FzZSB0cnVlOiByZXR1cm4gJ3RydWUnXG5cdCAgICAgICAgY2FzZSBmYWxzZTogcmV0dXJuICdmYWxzZSdcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICByZXR1cm4gcXVvdGVTdHJpbmcodmFsdWUsIGZhbHNlKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gc2VyaWFsaXplQXJyYXkodmFsdWUpIDogc2VyaWFsaXplT2JqZWN0KHZhbHVlKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB1bmRlZmluZWRcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gcXVvdGVTdHJpbmcgKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIHF1b3RlcyA9IHtcblx0ICAgICAgICAgICAgXCInXCI6IDAuMSxcblx0ICAgICAgICAgICAgJ1wiJzogMC4yLFxuXHQgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgcmVwbGFjZW1lbnRzID0ge1xuXHQgICAgICAgICAgICBcIidcIjogXCJcXFxcJ1wiLFxuXHQgICAgICAgICAgICAnXCInOiAnXFxcXFwiJyxcblx0ICAgICAgICAgICAgJ1xcXFwnOiAnXFxcXFxcXFwnLFxuXHQgICAgICAgICAgICAnXFxiJzogJ1xcXFxiJyxcblx0ICAgICAgICAgICAgJ1xcZic6ICdcXFxcZicsXG5cdCAgICAgICAgICAgICdcXG4nOiAnXFxcXG4nLFxuXHQgICAgICAgICAgICAnXFxyJzogJ1xcXFxyJyxcblx0ICAgICAgICAgICAgJ1xcdCc6ICdcXFxcdCcsXG5cdCAgICAgICAgICAgICdcXHYnOiAnXFxcXHYnLFxuXHQgICAgICAgICAgICAnXFwwJzogJ1xcXFwwJyxcblx0ICAgICAgICAgICAgJ1xcdTIwMjgnOiAnXFxcXHUyMDI4Jyxcblx0ICAgICAgICAgICAgJ1xcdTIwMjknOiAnXFxcXHUyMDI5Jyxcblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIHByb2R1Y3QgPSAnJztcblxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGMgPSB2YWx1ZVtpXTtcblx0ICAgICAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgICAgIGNhc2UgXCInXCI6XG5cdCAgICAgICAgICAgIGNhc2UgJ1wiJzpcblx0ICAgICAgICAgICAgICAgIHF1b3Rlc1tjXSsrO1xuXHQgICAgICAgICAgICAgICAgcHJvZHVjdCArPSBjO1xuXHQgICAgICAgICAgICAgICAgY29udGludWVcblxuXHQgICAgICAgICAgICBjYXNlICdcXDAnOlxuXHQgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNEaWdpdCh2YWx1ZVtpICsgMV0pKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcHJvZHVjdCArPSAnXFxcXHgwMCc7XG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWVcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudHNbY10pIHtcblx0ICAgICAgICAgICAgICAgIHByb2R1Y3QgKz0gcmVwbGFjZW1lbnRzW2NdO1xuXHQgICAgICAgICAgICAgICAgY29udGludWVcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChjIDwgJyAnKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgaGV4U3RyaW5nID0gYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTtcblx0ICAgICAgICAgICAgICAgIHByb2R1Y3QgKz0gJ1xcXFx4JyArICgnMDAnICsgaGV4U3RyaW5nKS5zdWJzdHJpbmcoaGV4U3RyaW5nLmxlbmd0aCk7XG5cdCAgICAgICAgICAgICAgICBjb250aW51ZVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcHJvZHVjdCArPSBjO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBxdW90ZUNoYXIgPSBxdW90ZSB8fCBPYmplY3Qua2V5cyhxdW90ZXMpLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gKHF1b3Rlc1thXSA8IHF1b3Rlc1tiXSkgPyBhIDogYjsgfSk7XG5cblx0ICAgICAgICBwcm9kdWN0ID0gcHJvZHVjdC5yZXBsYWNlKG5ldyBSZWdFeHAocXVvdGVDaGFyLCAnZycpLCByZXBsYWNlbWVudHNbcXVvdGVDaGFyXSk7XG5cblx0ICAgICAgICByZXR1cm4gcXVvdGVDaGFyICsgcHJvZHVjdCArIHF1b3RlQ2hhclxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBzZXJpYWxpemVPYmplY3QgKHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpID49IDApIHtcblx0ICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdDb252ZXJ0aW5nIGNpcmN1bGFyIHN0cnVjdHVyZSB0byBKU09ONScpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cblx0ICAgICAgICB2YXIgc3RlcGJhY2sgPSBpbmRlbnQ7XG5cdCAgICAgICAgaW5kZW50ID0gaW5kZW50ICsgZ2FwO1xuXG5cdCAgICAgICAgdmFyIGtleXMgPSBwcm9wZXJ0eUxpc3QgfHwgT2JqZWN0LmtleXModmFsdWUpO1xuXHQgICAgICAgIHZhciBwYXJ0aWFsID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBrZXlzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gbGlzdFtpXTtcblxuXHQgICAgICAgICAgICB2YXIgcHJvcGVydHlTdHJpbmcgPSBzZXJpYWxpemVQcm9wZXJ0eShrZXksIHZhbHVlKTtcblx0ICAgICAgICAgICAgaWYgKHByb3BlcnR5U3RyaW5nICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtZW1iZXIgPSBzZXJpYWxpemVLZXkoa2V5KSArICc6Jztcblx0ICAgICAgICAgICAgICAgIGlmIChnYXAgIT09ICcnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbWVtYmVyICs9ICcgJztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIG1lbWJlciArPSBwcm9wZXJ0eVN0cmluZztcblx0ICAgICAgICAgICAgICAgIHBhcnRpYWwucHVzaChtZW1iZXIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGZpbmFsO1xuXHQgICAgICAgIGlmIChwYXJ0aWFsLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICBmaW5hbCA9ICd7fSc7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIHByb3BlcnRpZXM7XG5cdCAgICAgICAgICAgIGlmIChnYXAgPT09ICcnKSB7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gcGFydGlhbC5qb2luKCcsJyk7XG5cdCAgICAgICAgICAgICAgICBmaW5hbCA9ICd7JyArIHByb3BlcnRpZXMgKyAnfSc7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gJyxcXG4nICsgaW5kZW50O1xuXHQgICAgICAgICAgICAgICAgcHJvcGVydGllcyA9IHBhcnRpYWwuam9pbihzZXBhcmF0b3IpO1xuXHQgICAgICAgICAgICAgICAgZmluYWwgPSAne1xcbicgKyBpbmRlbnQgKyBwcm9wZXJ0aWVzICsgJyxcXG4nICsgc3RlcGJhY2sgKyAnfSc7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzdGFjay5wb3AoKTtcblx0ICAgICAgICBpbmRlbnQgPSBzdGVwYmFjaztcblx0ICAgICAgICByZXR1cm4gZmluYWxcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gc2VyaWFsaXplS2V5IChrZXkpIHtcblx0ICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICByZXR1cm4gcXVvdGVTdHJpbmcoa2V5LCB0cnVlKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBmaXJzdENoYXIgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChrZXkuY29kZVBvaW50QXQoMCkpO1xuXHQgICAgICAgIGlmICghdXRpbC5pc0lkU3RhcnRDaGFyKGZpcnN0Q2hhcikpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHF1b3RlU3RyaW5nKGtleSwgdHJ1ZSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBmb3IgKHZhciBpID0gZmlyc3RDaGFyLmxlbmd0aDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoIXV0aWwuaXNJZENvbnRpbnVlQ2hhcihTdHJpbmcuZnJvbUNvZGVQb2ludChrZXkuY29kZVBvaW50QXQoaSkpKSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHF1b3RlU3RyaW5nKGtleSwgdHJ1ZSlcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBrZXlcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gc2VyaWFsaXplQXJyYXkgKHZhbHVlKSB7XG5cdCAgICAgICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpID49IDApIHtcblx0ICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdDb252ZXJ0aW5nIGNpcmN1bGFyIHN0cnVjdHVyZSB0byBKU09ONScpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cblx0ICAgICAgICB2YXIgc3RlcGJhY2sgPSBpbmRlbnQ7XG5cdCAgICAgICAgaW5kZW50ID0gaW5kZW50ICsgZ2FwO1xuXG5cdCAgICAgICAgdmFyIHBhcnRpYWwgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBwcm9wZXJ0eVN0cmluZyA9IHNlcmlhbGl6ZVByb3BlcnR5KFN0cmluZyhpKSwgdmFsdWUpO1xuXHQgICAgICAgICAgICBwYXJ0aWFsLnB1c2goKHByb3BlcnR5U3RyaW5nICE9PSB1bmRlZmluZWQpID8gcHJvcGVydHlTdHJpbmcgOiAnbnVsbCcpO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBmaW5hbDtcblx0ICAgICAgICBpZiAocGFydGlhbC5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgZmluYWwgPSAnW10nO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChnYXAgPT09ICcnKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcHJvcGVydGllcyA9IHBhcnRpYWwuam9pbignLCcpO1xuXHQgICAgICAgICAgICAgICAgZmluYWwgPSAnWycgKyBwcm9wZXJ0aWVzICsgJ10nO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIHNlcGFyYXRvciA9ICcsXFxuJyArIGluZGVudDtcblx0ICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzJDEgPSBwYXJ0aWFsLmpvaW4oc2VwYXJhdG9yKTtcblx0ICAgICAgICAgICAgICAgIGZpbmFsID0gJ1tcXG4nICsgaW5kZW50ICsgcHJvcGVydGllcyQxICsgJyxcXG4nICsgc3RlcGJhY2sgKyAnXSc7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzdGFjay5wb3AoKTtcblx0ICAgICAgICBpbmRlbnQgPSBzdGVwYmFjaztcblx0ICAgICAgICByZXR1cm4gZmluYWxcblx0ICAgIH1cblx0fTtcblxuXHR2YXIgSlNPTjUgPSB7XG5cdCAgICBwYXJzZTogcGFyc2UsXG5cdCAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeSxcblx0fTtcblxuXHR2YXIgbGliID0gSlNPTjU7XG5cblx0dmFyIGVzNSA9IGxpYjtcblxuXHRyZXR1cm4gZXM1O1xuXG59KSkpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCJ2YXIgZGVmZXJyZWQgPSBbXTtcbl9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcblx0aWYoY2h1bmtJZHMpIHtcblx0XHRwcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcblx0XHRkZWZlcnJlZFtpXSA9IFtjaHVua0lkcywgZm4sIHByaW9yaXR5XTtcblx0XHRyZXR1cm47XG5cdH1cblx0dmFyIG5vdEZ1bGZpbGxlZCA9IEluZmluaXR5O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGRlZmVycmVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuXHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgY2h1bmtJZHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcblx0XHRcdFx0Y2h1bmtJZHMuc3BsaWNlKGotLSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcblx0XHRcdFx0aWYocHJpb3JpdHkgPCBub3RGdWxmaWxsZWQpIG5vdEZ1bGZpbGxlZCA9IHByaW9yaXR5O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihmdWxmaWxsZWQpIHtcblx0XHRcdGRlZmVycmVkLnNwbGljZShpLS0sIDEpXG5cdFx0XHR2YXIgciA9IGZuKCk7XG5cdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSByZXN1bHQgPSByO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MzE5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8uaiA9IChjaHVua0lkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID09PSAwKTtcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLk8ocmVzdWx0KTtcbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtjYWN0Ym90XCJdID0gc2VsZltcIndlYnBhY2tDaHVua2NhY3Rib3RcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFs4OTBdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXygzMzQpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iLCIiXSwibmFtZXMiOlsidGFyZ2V0SXNZb3UiLCJkYXRhIiwibWF0Y2hlcyIsIm1lIiwidGFyZ2V0IiwidGFyZ2V0SXNOb3RZb3UiLCJjYXJlc0Fib3V0QU9FIiwicm9sZSIsIkNhbkFkZGxlIiwiam9iIiwiY2FyZXNBYm91dE1hZ2ljYWwiLCJjYXJlc0Fib3V0UGh5c2ljYWwiLCJDYW5GZWludCIsImxhbmd1YWdlcyIsImxhbmdNYXAiLCJlbiIsImRlIiwiZnIiLCJqYSIsImNuIiwia28iLCJpc0xhbmciLCJsYW5nIiwibGFuZ1N0cnMiLCJ1bmRlZmluZWQiLCJpbmNsdWRlcyIsImxhbmdUb0xvY2FsZSIsImJyb3dzZXJMYW5ndWFnZXNUb0xhbmciLCJuYXZpZ2F0b3IiLCJtYXAiLCJsIiwic2xpY2UiLCJmaWx0ZXIiLCJjb21iYXRhbnRNZW1vcnlLZXlzIiwibGF0ZXN0TG9nRGVmaW5pdGlvbnMiLCJHYW1lTG9nIiwidHlwZSIsIm5hbWUiLCJzb3VyY2UiLCJtZXNzYWdlVHlwZSIsImZpZWxkcyIsInRpbWVzdGFtcCIsImNvZGUiLCJsaW5lIiwic3ViRmllbGRzIiwiY2FuQW5vbnltaXplIiwiZmlyc3RPcHRpb25hbEZpZWxkIiwiQ2hhbmdlWm9uZSIsImlkIiwibGFzdEluY2x1ZGUiLCJDaGFuZ2VkUGxheWVyIiwicGxheWVySWRzIiwiQWRkZWRDb21iYXRhbnQiLCJsZXZlbCIsIm93bmVySWQiLCJ3b3JsZElkIiwid29ybGQiLCJucGNOYW1lSWQiLCJucGNCYXNlSWQiLCJjdXJyZW50SHAiLCJocCIsImN1cnJlbnRNcCIsIm1wIiwieCIsInkiLCJ6IiwiaGVhZGluZyIsIlJlbW92ZWRDb21iYXRhbnQiLCJvd25lciIsIlBhcnR5TGlzdCIsInBhcnR5Q291bnQiLCJpZDAiLCJpZDEiLCJpZDIiLCJpZDMiLCJpZDQiLCJpZDUiLCJpZDYiLCJpZDciLCJpZDgiLCJpZDkiLCJpZDEwIiwiaWQxMSIsImlkMTIiLCJpZDEzIiwiaWQxNCIsImlkMTUiLCJpZDE2IiwiaWQxNyIsImlkMTgiLCJpZDE5IiwiaWQyMCIsImlkMjEiLCJpZDIyIiwiaWQyMyIsIlBsYXllclN0YXRzIiwic3RyZW5ndGgiLCJkZXh0ZXJpdHkiLCJ2aXRhbGl0eSIsImludGVsbGlnZW5jZSIsIm1pbmQiLCJwaWV0eSIsImF0dGFja1Bvd2VyIiwiZGlyZWN0SGl0IiwiY3JpdGljYWxIaXQiLCJhdHRhY2tNYWdpY1BvdGVuY3kiLCJoZWFsTWFnaWNQb3RlbmN5IiwiZGV0ZXJtaW5hdGlvbiIsInNraWxsU3BlZWQiLCJzcGVsbFNwZWVkIiwidGVuYWNpdHkiLCJsb2NhbENvbnRlbnRJZCIsIlN0YXJ0c1VzaW5nIiwic291cmNlSWQiLCJhYmlsaXR5IiwidGFyZ2V0SWQiLCJjYXN0VGltZSIsInBvc3NpYmxlUnN2RmllbGRzIiwiYmxhbmtGaWVsZHMiLCJBYmlsaXR5IiwiZmxhZ3MiLCJkYW1hZ2UiLCJ0YXJnZXRDdXJyZW50SHAiLCJ0YXJnZXRNYXhIcCIsInRhcmdldEN1cnJlbnRNcCIsInRhcmdldE1heE1wIiwidGFyZ2V0WCIsInRhcmdldFkiLCJ0YXJnZXRaIiwidGFyZ2V0SGVhZGluZyIsIm1heEhwIiwibWF4TXAiLCJzZXF1ZW5jZSIsInRhcmdldEluZGV4IiwidGFyZ2V0Q291bnQiLCJOZXR3b3JrQU9FQWJpbGl0eSIsIk5ldHdvcmtDYW5jZWxBYmlsaXR5IiwicmVhc29uIiwiTmV0d29ya0RvVCIsIndoaWNoIiwiZWZmZWN0SWQiLCJkYW1hZ2VUeXBlIiwic291cmNlQ3VycmVudEhwIiwic291cmNlTWF4SHAiLCJzb3VyY2VDdXJyZW50TXAiLCJzb3VyY2VNYXhNcCIsInNvdXJjZVgiLCJzb3VyY2VZIiwic291cmNlWiIsInNvdXJjZUhlYWRpbmciLCJXYXNEZWZlYXRlZCIsIkdhaW5zRWZmZWN0IiwiZWZmZWN0IiwiZHVyYXRpb24iLCJjb3VudCIsIkhlYWRNYXJrZXIiLCJOZXR3b3JrUmFpZE1hcmtlciIsIm9wZXJhdGlvbiIsIndheW1hcmsiLCJOZXR3b3JrVGFyZ2V0TWFya2VyIiwidGFyZ2V0TmFtZSIsIkxvc2VzRWZmZWN0IiwiTmV0d29ya0dhdWdlIiwiZGF0YTAiLCJkYXRhMSIsImRhdGEyIiwiZGF0YTMiLCJmaXJzdFVua25vd25GaWVsZCIsIk5ldHdvcmtXb3JsZCIsImlzVW5rbm93biIsIkFjdG9yQ29udHJvbCIsImluc3RhbmNlIiwiY29tbWFuZCIsIk5hbWVUb2dnbGUiLCJ0b2dnbGUiLCJUZXRoZXIiLCJMaW1pdEJyZWFrIiwidmFsdWVIZXgiLCJiYXJzIiwiTmV0d29ya0VmZmVjdFJlc3VsdCIsInNlcXVlbmNlSWQiLCJjdXJyZW50U2hpZWxkIiwiU3RhdHVzRWZmZWN0Iiwiam9iTGV2ZWxEYXRhIiwiZGF0YTQiLCJkYXRhNSIsIk5ldHdvcmtVcGRhdGVIUCIsIk1hcCIsInJlZ2lvbk5hbWUiLCJwbGFjZU5hbWUiLCJwbGFjZU5hbWVTdWIiLCJTeXN0ZW1Mb2dNZXNzYWdlIiwicGFyYW0wIiwicGFyYW0xIiwicGFyYW0yIiwiU3RhdHVzTGlzdDMiLCJQYXJzZXJJbmZvIiwiZ2xvYmFsSW5jbHVkZSIsIlByb2Nlc3NJbmZvIiwiRGVidWciLCJQYWNrZXREdW1wIiwiVmVyc2lvbiIsIkVycm9yIiwiTm9uZSIsIkxpbmVSZWdpc3RyYXRpb24iLCJ2ZXJzaW9uIiwiTWFwRWZmZWN0IiwibG9jYXRpb24iLCJGYXRlRGlyZWN0b3IiLCJjYXRlZ29yeSIsImZhdGVJZCIsInByb2dyZXNzIiwiQ0VEaXJlY3RvciIsInBvcFRpbWUiLCJ0aW1lUmVtYWluaW5nIiwiY2VLZXkiLCJudW1QbGF5ZXJzIiwic3RhdHVzIiwiSW5Db21iYXQiLCJpbkFDVENvbWJhdCIsImluR2FtZUNvbWJhdCIsImlzQUNUQ2hhbmdlZCIsImlzR2FtZUNoYW5nZWQiLCJDb21iYXRhbnRNZW1vcnkiLCJjaGFuZ2UiLCJyZXBlYXRpbmdGaWVsZHMiLCJzdGFydGluZ0luZGV4IiwibGFiZWwiLCJuYW1lcyIsInNvcnRLZXlzIiwicHJpbWFyeUtleSIsInBvc3NpYmxlS2V5cyIsIlJTVkRhdGEiLCJsb2NhbGUiLCJrZXkiLCJ2YWx1ZSIsIlN0YXJ0c1VzaW5nRXh0cmEiLCJBYmlsaXR5RXh0cmEiLCJnbG9iYWxFZmZlY3RDb3VudGVyIiwiZGF0YUZsYWciLCJsb2dEZWZpbml0aW9uc1ZlcnNpb25zIiwiYXNzZXJ0TG9nRGVmaW5pdGlvbnMiLCJjb25zb2xlIiwiYXNzZXJ0IiwiVW5yZWFjaGFibGVDb2RlIiwiUmVnZXhlcyIsInNlcGFyYXRvciIsIm1hdGNoRGVmYXVsdCIsIm1hZ2ljVHJhbnNsYXRpb25TdHJpbmciLCJtYWdpY1N0cmluZ1JlZ2V4Iiwia2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb25Bc0NvbnN0Iiwia2V5c1RoYXRSZXF1aXJlVHJhbnNsYXRpb24iLCJnYW1lTG9nQ29kZXMiLCJlY2hvIiwiZGlhbG9nIiwibWVzc2FnZSIsImRlZmF1bHRQYXJhbXMiLCJpbmNsdWRlIiwibG9nVHlwZSIsIk9iamVjdCIsImtleXMiLCJwdXNoIiwicGFyYW1zIiwicHJvcCIsImluZGV4IiwiZW50cmllcyIsInBhcmFtIiwiZmllbGQiLCJvcHRpb25hbCIsInJlcGVhdGluZyIsInJlcGVhdGluZ0tleXMiLCJpc1JlcGVhdGluZ0ZpZWxkIiwiQXJyYXkiLCJpc0FycmF5IiwiZSIsInBhcnNlSGVscGVyIiwiZnVuY05hbWUiLCJ2YWxpZEZpZWxkcyIsInZhbGlkYXRlUGFyYW1zIiwiY2FwdHVyZSIsInRydWVJZlVuZGVmaW5lZCIsImZpZWxkS2V5cyIsInNvcnQiLCJhIiwiYiIsInBhcnNlSW50IiwibWF4S2V5U3RyIiwidG1wS2V5IiwicG9wIiwibGVuZ3RoIiwiZmllbGROYW1lIiwibWF4S2V5IiwidHJhbnNQYXJhbXMiLCJrIiwibmVlZHNUcmFuc2xhdGlvbnMiLCJOZXRSZWdleGVzIiwiZmxhZ1RyYW5zbGF0aW9uc05lZWRlZCIsInN0ciIsImxhc3RLZXkiLCJrZXlTdHIiLCJtaXNzaW5nRmllbGRzIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlZmF1bHRGaWVsZFZhbHVlIiwidG9TdHJpbmciLCJmaWVsZFZhbHVlIiwicmVwZWF0aW5nQXJyYXkiLCJsZWZ0IiwicmlnaHQiLCJ0b0xvd2VyQ2FzZSIsImxvY2FsZUNvbXBhcmUiLCJ3YXJuIiwibGVmdFZhbHVlIiwicmlnaHRWYWx1ZSIsImFub25SZXBzIiwiZm9yRWFjaCIsInBvc3NpYmxlS2V5IiwicmVwIiwiZmluZCIsImZpZWxkUmVnZXgiLCJ2YWwiLCJzb21lIiwidiIsIm1heWJlQ2FwdHVyZSIsInBhcnNlIiwiYnVpbGRSZWdleCIsImxvZ1ZlcnNpb24iLCJzZXRGbGFnVHJhbnNsYXRpb25zTmVlZGVkIiwiZG9lc05ldFJlZ2V4TmVlZFRyYW5zbGF0aW9uIiwicmVnZXgiLCJleGVjIiwic3RhcnRzVXNpbmciLCJhYmlsaXR5RnVsbCIsImhlYWRNYXJrZXIiLCJhZGRlZENvbWJhdGFudCIsImFkZGVkQ29tYmF0YW50RnVsbCIsInJlbW92aW5nQ29tYmF0YW50IiwiZ2FpbnNFZmZlY3QiLCJzdGF0dXNFZmZlY3RFeHBsaWNpdCIsImxvc2VzRWZmZWN0IiwidGV0aGVyIiwid2FzRGVmZWF0ZWQiLCJuZXR3b3JrRG9UIiwiZ2FtZUxvZyIsImdhbWVOYW1lTG9nIiwic3RhdENoYW5nZSIsImNoYW5nZVpvbmUiLCJuZXR3b3JrNmQiLCJuYW1lVG9nZ2xlIiwic3lzdGVtTG9nTWVzc2FnZSIsIm1hcEVmZmVjdCIsImZhdGVEaXJlY3RvciIsImNlRGlyZWN0b3IiLCJjb21iYXRhbnRNZW1vcnkiLCJzdGFydHNVc2luZ0V4dHJhIiwiYWJpbGl0eUV4dHJhIiwiY29tbW9uTmV0UmVnZXgiLCJ3aXBlIiwiY2FjdGJvdFdpcGVFY2hvIiwidXNlcldpcGVFY2hvIiwiYnVpbGROZXRSZWdleEZvclRyaWdnZXIiLCJjb25zdHJ1Y3RvciIsIm51bWJlclRvT3V0cHV0U3RyaW5nIiwibiIsImFvZSIsImJpZ0FvZSIsImJsZWVkQW9lIiwidGFua0J1c3RlciIsIm1pbmlCdXN0ZXIiLCJ0YW5rQnVzdGVyT25QbGF5ZXIiLCJ0YW5rQnVzdGVyT25Zb3UiLCJ0YW5rQnVzdGVycyIsInRhbmtDbGVhdmUiLCJ0YW5rQnVzdGVyQ2xlYXZlcyIsInRhbmtCdXN0ZXJDbGVhdmVzT25Zb3UiLCJhdm9pZFRhbmtDbGVhdmUiLCJhdm9pZFRhbmtDbGVhdmVzIiwidGFua0NsZWF2ZU9uWW91Iiwic2hhcmVkVGFua2J1c3RlciIsInNoYXJlZFRhbmtidXN0ZXJPbllvdSIsInNoYXJlZFRhbmtidXN0ZXJPblBsYXllciIsInRhbmtTd2FwIiwic3ByZWFkIiwic3RhY2tNYXJrZXIiLCJnZXRUb2dldGhlciIsImhlYWxlckdyb3VwcyIsInN0YWNrT25Zb3UiLCJzdGFja09uUGxheWVyIiwic3RhY2tNaWRkbGUiLCJkb3JpdG9TdGFjayIsInNwcmVhZFRoZW5TdGFjayIsInN0YWNrVGhlblNwcmVhZCIsImRyYXdJbiIsImtub2NrYmFjayIsImtub2NrYmFja09uWW91Iiwia25vY2tiYWNrT25QbGF5ZXIiLCJsb29rVG93YXJkc0Jvc3MiLCJsb29rQXdheSIsImxvb2tBd2F5RnJvbVBsYXllciIsImxvb2tBd2F5RnJvbVRhcmdldCIsImdldEJlaGluZCIsImdvRnJvbnRPclNpZGVzIiwiZ29Gcm9udCIsImdldFVuZGVyIiwiaW4iLCJvdXQiLCJvdXRPZk1lbGVlIiwiaW5UaGVuT3V0Iiwib3V0VGhlbkluIiwiYmFja1RoZW5Gcm9udCIsImZyb250VGhlbkJhY2siLCJnb0ludG9NaWRkbGUiLCJmcm9udCIsImJhY2siLCJnZXRMZWZ0QW5kV2VzdCIsImdldFJpZ2h0QW5kRWFzdCIsImxlZnRUaGVuUmlnaHQiLCJyaWdodFRoZW5MZWZ0IiwiZ29Gcm9udEJhY2siLCJzaWRlcyIsIm1pZGRsZSIsImNsb2Nrd2lzZSIsImNvdW50ZXJjbG9ja3dpc2UiLCJraWxsQWRkcyIsImtpbGxFeHRyYUFkZCIsImF3YXlGcm9tRnJvbnQiLCJzbGVlcFRhcmdldCIsInN0dW5UYXJnZXQiLCJpbnRlcnJ1cHRUYXJnZXQiLCJwcmV5T25Zb3UiLCJwcmV5T25QbGF5ZXIiLCJhd2F5RnJvbUdyb3VwIiwiYXdheUZyb21QbGF5ZXIiLCJtZXRlb3JPbllvdSIsInN0b3BNb3ZpbmciLCJzdG9wRXZlcnl0aGluZyIsIm1vdmVBd2F5IiwibW92ZUFyb3VuZCIsImJyZWFrQ2hhaW5zIiwibW92ZUNoYWluc1RvZ2V0aGVyIiwiZWFydGhzaGFrZXJPbllvdSIsIndha2VVcCIsImNsb3NlVGV0aGVyc1dpdGhQbGF5ZXIiLCJmYXJUZXRoZXJzV2l0aFBsYXllciIsImdldFRvd2VycyIsInVua25vd24iLCJub3J0aCIsInNvdXRoIiwiZWFzdCIsIndlc3QiLCJub3J0aHdlc3QiLCJub3J0aGVhc3QiLCJzb3V0aHdlc3QiLCJzb3V0aGVhc3QiLCJkaXJOIiwiZGlyUyIsImRpckUiLCJkaXJXIiwiZGlyTlciLCJkaXJORSIsImRpclNXIiwiZGlyU0UiLCJkaXJOTkUiLCJkaXJFTkUiLCJkaXJFU0UiLCJkaXJTU0UiLCJkaXJTU1ciLCJkaXJXU1ciLCJkaXJXTlciLCJkaXJOTlciLCJ0YW5rIiwiaGVhbGVyIiwiZHBzIiwibnVtMCIsIm51bTEiLCJudW0yIiwibnVtMyIsIm51bTQiLCJudW01IiwibnVtNiIsIm51bTciLCJudW04IiwibnVtOSIsImluaXRlZCIsIndzVXJsIiwid3MiLCJxdWV1ZSIsInJzZXFDb3VudGVyIiwicmVzcG9uc2VQcm9taXNlcyIsInN1YnNjcmliZXJzIiwic2VuZE1lc3NhZ2UiLCJtc2ciLCJjYiIsInNlbmQiLCJ3aW5kb3ciLCJPdmVybGF5UGx1Z2luQXBpIiwiY2FsbEhhbmRsZXIiLCJwcm9jZXNzRXZlbnQiLCJpbml0Iiwic3VicyIsInN1YiIsImVycm9yIiwiZGlzcGF0Y2hPdmVybGF5RXZlbnQiLCJhZGRPdmVybGF5TGlzdGVuZXIiLCJldmVudCIsImNhbGwiLCJldmVudHMiLCJyZW1vdmVPdmVybGF5TGlzdGVuZXIiLCJsaXN0IiwicG9zIiwiaW5kZXhPZiIsInNwbGljZSIsImNhbGxPdmVybGF5SGFuZGxlckludGVybmFsIiwiX21zZyIsInJzZXEiLCJwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXJzZWQiLCJjYWxsT3ZlcmxheUhhbmRsZXJPdmVycmlkZU1hcCIsImNhbGxPdmVybGF5SGFuZGxlciIsImNhbGxGdW5jIiwic2V0T3ZlcmxheUhhbmRsZXJPdmVycmlkZSIsIm92ZXJyaWRlIiwiVVJMU2VhcmNoUGFyYW1zIiwic2VhcmNoIiwiZ2V0IiwiY29ubmVjdFdzIiwiV2ViU29ja2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxvZyIsInEiLCJwcm9taXNlRnVuY3MiLCJzZXRUaW1lb3V0Iiwid2FpdEZvckFwaSIsInJlYWR5IiwiX19PdmVybGF5Q2FsbGJhY2siLCJpdGVtIiwibG9nRGVmaW5pdGlvbnMiLCJtYXRjaFdpdGhDb2xvbnNEZWZhdWx0IiwiZmllbGRzV2l0aFBvdGVudGlhbENvbG9ucyIsImRlZktleSIsImFiaWxpdHlNZXNzYWdlVHlwZSIsImFiaWxpdHlIZXhDb2RlIiwicHJlZml4IiwidHlwZUFzSGV4IiwidG9VcHBlckNhc2UiLCJkZWZhdWx0SGV4Q29kZSIsImhleENvZGUiLCJwYXJzZUZpZWxkIiwiZmllbGREZWZhdWx0IiwicmVwZWF0aW5nRmllbGRzU2VwYXJhdG9yIiwiZGVmYXVsdFZhbHVlIiwiYW55T2YiLCJuYW1lZENhcHR1cmUiLCJhcmdzIiwiYW55T2ZBcnJheSIsImFycmF5IiwiZWxlbSIsIlJlZ0V4cCIsImpvaW4iLCJmaXJzdEFyZyIsInJlZ2V4cFN0cmluZyIsImtDYWN0Ym90Q2F0ZWdvcmllcyIsIlRpbWVzdGFtcCIsIk5ldFRpbWVzdGFtcCIsIk5ldEZpZWxkIiwiTG9nVHlwZSIsIkFiaWxpdHlDb2RlIiwiT2JqZWN0SWQiLCJOYW1lIiwiRmxvYXQiLCJtb2RpZmllcnMiLCJnbG9iYWwiLCJtdWx0aWxpbmUiLCJyZXBsYWNlIiwibWF0Y2giLCJncm91cCIsInBhcnNlR2xvYmFsIiwiZiIsIk91dHB1dHMiLCJzZXZlcml0eUxpc3QiLCJidWlsdEluUmVzcG9uc2VTdHIiLCJ0cmlnZ2VyRnVuY3Rpb25zIiwidHJpZ2dlclRleHRPdXRwdXRGdW5jdGlvbnMiLCJ0cmlnZ2VyT3V0cHV0RnVuY3Rpb25zIiwic2V2ZXJpdHlNYXAiLCJnZXRUZXh0Iiwic2V2IiwiZGVmYXVsdEluZm9UZXh0IiwiZGVmYXVsdEFsZXJ0VGV4dCIsImRlZmF1bHRBbGFybVRleHQiLCJnZXRUYXJnZXQiLCJnZXRTb3VyY2UiLCJjb21iaW5lRnVuY3MiLCJ0ZXh0MSIsImZ1bmMxIiwidGV4dDIiLCJmdW5jMiIsIm9iaiIsIm91dHB1dCIsImlzUGxheWVySWQiLCJzdGFydHNXaXRoIiwic3RhdGljUmVzcG9uc2UiLCJ0ZXh0IiwiX2RhdGEiLCJfbWF0Y2hlcyIsInJlc3BvbnNlT3V0cHV0U3RyaW5ncyIsIlJlc3BvbnNlcyIsInRhcmdldFNldiIsIm90aGVyU2V2Iiwib3V0cHV0U3RyaW5ncyIsIm5vVGFyZ2V0IiwiYnVzdGVyT25Zb3UiLCJidXN0ZXJPblRhcmdldCIsInRhcmdldEZ1bmMiLCJvdGhlckZ1bmMiLCJwbGF5ZXIiLCJwYXJ0eSIsIm1lbWJlciIsImNvbWJpbmVkIiwidGFua0J1c3RlclN3YXAiLCJidXN0ZXJTZXYiLCJzd2FwU2V2IiwidGFua1N3YXBGdW5jIiwiYnVzdGVyRnVuYyIsImNsZWF2ZU9uWW91IiwiY2xlYXZlTm9UYXJnZXQiLCJhdm9pZENsZWF2ZSIsInNoYXJlZFRhbmtCdXN0ZXIiLCJzaGFyZWRUYW5rYnVzdGVyT25UYXJnZXQiLCJzdGFja01hcmtlck9uIiwic3RhY2tPblRhcmdldCIsImtub2NrYmFja09uIiwia25vY2tiYWNrT25UYXJnZXQiLCJsb29rVG93YXJkcyIsImxvb2tBd2F5RnJvbSIsImxvb2tBd2F5RnJvbVNvdXJjZSIsImdldEluIiwiZ2V0T3V0IiwiZ2V0SW5UaGVuT3V0IiwiZ2V0T3V0VGhlbkluIiwiZ2V0QmFja1RoZW5Gcm9udCIsImdldEZyb250VGhlbkJhY2siLCJnb01pZGRsZSIsImdvUmlnaHQiLCJnb0xlZnQiLCJnb1dlc3QiLCJnb0Vhc3QiLCJnb0xlZnRUaGVuUmlnaHQiLCJnb1JpZ2h0VGhlbkxlZnQiLCJnb1NpZGVzIiwic2xlZXAiLCJzdHVuT3JJbnRlcnJ1cHRJZlBvc3NpYmxlIiwic3R1biIsImludGVycnVwdCIsIkNhblNpbGVuY2UiLCJDYW5TdHVuIiwic3R1bklmUG9zc2libGUiLCJpbnRlcnJ1cHRJZlBvc3NpYmxlIiwicHJleU9uIiwicHJleU9uVGFyZ2V0IiwiYXdheUZyb20iLCJhd2F5RnJvbVRhcmdldCIsImVhcnRoc2hha2VyIiwicmVzcG9uc2VNYXBUeXBlQXNzZXJ0aW9uIiwiX0NvbmRpdGlvbnMiLCJDb25kaXRpb25zIiwiX0NvbnRlbnRUeXBlIiwiQ29udGVudFR5cGUiLCJfTmV0UmVnZXhlcyIsIl9SZWdleGVzIiwiX1Jlc3BvbnNlcyIsIl9PdXRwdXRzIiwiX1V0aWwiLCJEaXJlY3Rpb25zIiwiX0RpcmVjdGlvbnMiLCJVdGlsIiwiX1pvbmVJZCIsIlpvbmVJZCIsIl9ab25lSW5mbyIsIlpvbmVJbmZvIiwiVXNlckNvbmZpZyIsIm9wdGlvblRlbXBsYXRlcyIsInVzZXJGaWxlQ2FsbGJhY2tzIiwic2F2ZWRDb25maWciLCJnZXREZWZhdWx0QmFzZU9wdGlvbnMiLCJQYXJzZXJMYW5ndWFnZSIsIlNob3J0TG9jYWxlIiwiRGlzcGxheUxhbmd1YWdlIiwiVGV4dEFsZXJ0c0VuYWJsZWQiLCJTb3VuZEFsZXJ0c0VuYWJsZWQiLCJTcG9rZW5BbGVydHNFbmFibGVkIiwiR3JvdXBTcG9rZW5BbGVydHNFbmFibGVkIiwiU3lzdGVtSW5mbyIsImNhY3Rib3RWZXJzaW9uIiwib3ZlcmxheVBsdWdpblZlcnNpb24iLCJmZnhpdlBsdWdpblZlcnNpb24iLCJhY3RWZXJzaW9uIiwiZ2FtZVJlZ2lvbiIsImV2YWxVc2VyRmlsZSIsImNvbnRlbnQiLCJvcHRpb25zIiwiT3B0aW9ucyIsImV2YWwiLCJyZWdpc3Rlck9wdGlvbnMiLCJvdmVybGF5TmFtZSIsIm9wdGlvblRlbXBsYXRlIiwidXNlckZpbGVDYWxsYmFjayIsInNvcnRVc2VyRmlsZXMiLCJzcGxpdEtleU1hcCIsInNwbGl0Iiwia2V5QSIsImtleUIiLCJsaXN0QSIsImxpc3RCIiwibWF4TGVuIiwiTWF0aCIsIm1heCIsImlkeCIsImVudHJ5QSIsImVudHJ5QiIsImlzTGFzdEEiLCJpc0xhc3RCIiwiZmlsZUEiLCJmaWxlQiIsImZpbGVuYW1lT25seURpZmYiLCJkaWZmIiwiZmlsdGVyVXNlckZpbGVzIiwicGF0aHMiLCJvcmlnT3ZlcmxheU5hbWUiLCJvcmlnRXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIiwib3JpZ1BhdGgiLCJwYXRoIiwiZW5kc1dpdGgiLCJnZXRVc2VyQ29uZmlnTG9jYXRpb24iLCJjYWxsYmFjayIsImN1cnJlbnRseVJlbG9hZGluZyIsInJlbG9hZE9uY2UiLCJyZWxvYWQiLCJsb2FkVXNlckZpbGVzIiwibG9hZENzcyIsInJlYWRPcHRpb25zIiwib3ZlcmxheSIsImxvYWRVc2VyIiwiYmFzZVBhdGgiLCJkZXRhaWwiLCJ1c2VyTG9jYXRpb24iLCJsb2NhbEZpbGVzIiwibG9jYWxVc2VyRmlsZXMiLCJsYW5ndWFnZSIsInBhcnNlckxhbmd1YWdlIiwiTGFuZ3VhZ2UiLCJzeXN0ZW1Mb2NhbGUiLCJTeXN0ZW1Mb2NhbGUiLCJzaG9ydExvY2FsZSIsImRpc3BsYXlMYW5nIiwiZGlzcGxheUxhbmd1YWdlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRVbmxvY2tUZXh0IiwidGVtcGxhdGUiLCJwcm9jZXNzT3B0aW9ucyIsInByb2Nlc3NFeHRyYU9wdGlvbnMiLCJkZWJ1ZyIsInByaW50VXNlckZpbGUiLCJ3YXJuT25WYXJpYWJsZVJlc2V0TWFwIiwicmFpZGJvc3MiLCJ2YXJpYWJsZVRyYWNrZXIiLCJzb3J0ZWRGaWxlcyIsImpzRmlsZXMiLCJjc3NGaWxlcyIsImpzRmlsZSIsIlNraW4iLCJoYW5kbGVTa2luIiwiY3NzRmlsZSIsInVzZXJDc3NUZXh0IiwiY3JlYXRlRWxlbWVudCIsImNvbnRlbnRzIiwiaW5uZXJUZXh0IiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJocmVmIiwidGhlbiIsInJlYWR5U3RhdGUiLCJza2luTmFtZSIsInNraW5DU1NSZWxhdGl2ZUhyZWYiLCJhcHBlbmRDU1NMaW5rIiwiYXBwZW5kSlNMaW5rIiwic3JjIiwidXNlckpTIiwic2V0QXR0cmlidXRlIiwidXNlckNTUyIsInRlbXBsYXRlT3B0aW9ucyIsIm9wdCIsImRlZmF1bHQiLCJpc0RlZmF1bHQiLCJuZXdWYWx1ZSIsInNldHRlckZ1bmMiLCJzZXRWYWx1ZSIsImZsb29yIiwicGFyc2VGbG9hdCIsInVubG9ja1RleHQiLCJ0ZXh0RWxlbSIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJkaXNwbGF5IiwiYm9keSIsImFwcGVuZCIsImlubmVySFRNTCIsImRvY0NsYXNzTGlzdCIsImlzTG9ja2VkIiwicmVtb3ZlIiwibmFtZVRvSm9iRW51bSIsIk5PTkUiLCJHTEEiLCJQR0wiLCJNUkQiLCJMTkMiLCJBUkMiLCJDTkoiLCJUSE0iLCJDUlAiLCJCU00iLCJBUk0iLCJHU00iLCJMVFciLCJXVlIiLCJBTEMiLCJDVUwiLCJNSU4iLCJCVE4iLCJGU0giLCJQTEQiLCJNTksiLCJXQVIiLCJEUkciLCJCUkQiLCJXSE0iLCJCTE0iLCJBQ04iLCJTTU4iLCJTQ0giLCJST0ciLCJOSU4iLCJNQ0giLCJEUksiLCJBU1QiLCJTQU0iLCJSRE0iLCJCTFUiLCJHTkIiLCJETkMiLCJSUFIiLCJTR0UiLCJhbGxKb2JzIiwiYWxsUm9sZXMiLCJ0YW5rSm9icyIsImhlYWxlckpvYnMiLCJtZWxlZURwc0pvYnMiLCJyYW5nZWREcHNKb2JzIiwiY2FzdGVyRHBzSm9icyIsImRwc0pvYnMiLCJjcmFmdGluZ0pvYnMiLCJnYXRoZXJpbmdKb2JzIiwic3R1bkpvYnMiLCJzaWxlbmNlSm9icyIsInNsZWVwSm9icyIsImZlaW50Sm9icyIsImFkZGxlSm9icyIsImNsZWFuc2VKb2JzIiwiam9iVG9Sb2xlTWFwIiwiYWRkVG9NYXAiLCJqb2JzIiwic2V0Iiwid2F0Y2hDb21iYXRhbnRNYXAiLCJzaG91bGRDYW5jZWxXYXRjaCIsImVudHJ5IiwiY2FuY2VsIiwibWF4RHVyYXRpb24iLCJEYXRlIiwibm93Iiwic3RhcnQiLCJkZWZhdWx0V2F0Y2hDb21iYXRhbnQiLCJmdW5jIiwicmVzIiwicmVqIiwiZGVsYXkiLCJpZHMiLCJwcm9wcyIsImNoZWNrRnVuYyIsInJlc3BvbnNlIiwid2F0Y2hDb21iYXRhbnRPdmVycmlkZSIsImNsZWFyQ29tYmF0YW50c092ZXJyaWRlIiwiZGVmYXVsdENsZWFyQ29tYmF0YW50cyIsIndhdGNoIiwid2F0Y2hDb21iYXRhbnQiLCJvdXRwdXQ4RGlyIiwib3V0cHV0MTZEaXIiLCJvdXRwdXRDYXJkaW5hbERpciIsIm91dHB1dEludGVyY2FyZERpciIsIm91dHB1dFN0cmluZ3MxNkRpciIsIm91dHB1dFN0cmluZ3M4RGlyIiwib3V0cHV0U3RyaW5nc0NhcmRpbmFsRGlyIiwib3V0cHV0U3RyaW5nc0ludGVyY2FyZERpciIsInh5VG8xNkRpck51bSIsImNlbnRlclgiLCJjZW50ZXJZIiwicm91bmQiLCJhdGFuMiIsIlBJIiwieHlUbzhEaXJOdW0iLCJ4eVRvNERpck51bSIsImhkZ1RvOERpck51bSIsImhkZ1RvNERpck51bSIsIm91dHB1dEZyb204RGlyTnVtIiwiZGlyTnVtIiwiY29tYmF0YW50U3RhdGVQb3NUbzhEaXIiLCJjb21iYXRhbnQiLCJQb3NYIiwiUG9zWSIsImNvbWJhdGFudFN0YXRlUG9zVG84RGlyT3V0cHV0IiwiY29tYmF0YW50U3RhdGVIZGdUbzhEaXIiLCJIZWFkaW5nIiwiY29tYmF0YW50U3RhdGVIZGdUbzhEaXJPdXRwdXQiLCJhZGRlZENvbWJhdGFudFBvc1RvOERpciIsImFkZGVkQ29tYmF0YW50UG9zVG84RGlyT3V0cHV0IiwiYWRkZWRDb21iYXRhbnRIZGdUbzhEaXIiLCJhZGRlZENvbWJhdGFudEhkZ1RvOERpck91dHB1dCIsInh5VG84RGlyT3V0cHV0Iiwiam9iRW51bVRvSm9iIiwiam9iVG9Kb2JFbnVtIiwiam9iVG9Sb2xlIiwiZ2V0QWxsUm9sZXMiLCJpc1RhbmtKb2IiLCJpc0hlYWxlckpvYiIsImlzTWVsZWVEcHNKb2IiLCJpc1JhbmdlZERwc0pvYiIsImlzQ2FzdGVyRHBzSm9iIiwiaXNEcHNKb2IiLCJpc0NyYWZ0aW5nSm9iIiwiaXNHYXRoZXJpbmdKb2IiLCJpc0NvbWJhdEpvYiIsImNhblN0dW4iLCJjYW5TaWxlbmNlIiwiY2FuU2xlZXAiLCJjYW5DbGVhbnNlIiwiY2FuRmVpbnQiLCJjYW5BZGRsZSIsImNsZWFyV2F0Y2hDb21iYXRhbnRzIiwic2V0V2F0Y2hDb21iYXRhbnRPdmVycmlkZSIsIndhdGNoRnVuYyIsImNsZWFyRnVuYyIsInNob3J0TmFtZSIsInBsYXllck5pY2tzIiwibmljayIsImFkZFBsYXllckNoYW5nZWRPdmVycmlkZUxpc3RlbmVyIiwicGxheWVyTmFtZSIsImxhc3RQbGF5ZXJDaGFuZ2VkRXZlbnQiLCJsYXN0UGxheWVySm9iIiwib25QbGF5ZXJDaGFuZ2VkIiwibmV3Sm9iIiwiYWRkUmVtb3RlUGxheWVyU2VsZWN0VUkiLCJpbnN0cnVjdGlvblRleHRCeUxhbmciLCJmb3JjZVRUU0J5TGFuZyIsImJ1dHRvblRleHRCeUxhbmciLCJkZWZhdWx0VGV4dEJ5TGFuZyIsImtTdG9yYWdlS2V5Iiwic2F2ZVBsYXllck5hbWUiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwibG9hZFBsYXllck5hbWUiLCJnZXRJdGVtIiwiY29udGFpbmVyIiwiaW5zdHJ1Y3Rpb25FbGVtIiwibGlzdEVsZW0iLCJ0dHNFbGVtIiwidHRzTGFiZWwiLCJodG1sRm9yIiwiYnV0dG9uRWxlbSIsImZvcmNlVFRTIiwiY2hlY2tlZCIsInJhZGlvSW5kZXgiLCJIVE1MSW5wdXRFbGVtZW50IiwiY3VycmVudFBhcmFtcyIsInBhcmFtTWFwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwibGFzdFNlbGVjdGVkUGxheWVyIiwiYnVpbGRMaXN0IiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwicmFkaW9Db3VudCIsImFkZFJhZGlvIiwiZXh0cmFDbGFzcyIsImlucHV0TmFtZSIsImlucHV0RWxlbSIsImxhYmVsRWxlbSIsImRlZmF1bHRUZXh0IiwiZGVmYXVsdEVsZW0iLCJsYXN0IiwicGFydHlQbGF5ZXJzIiwiaW5QYXJ0eSIsInBhcnR5TmFtZXMiLCJhbGxpYW5jZVBsYXllcnMiLCJhbGxpYW5jZU5hbWVzIiwiVGltZXJCYXIiLCJIVE1MRWxlbWVudCIsIm9ic2VydmVkQXR0cmlidXRlcyIsImNyZWF0ZSIsIm8iLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImVsZW1lbnQiLCJlbGFwc2VkIiwiaGlkZWFmdGVyIiwibGVmdHRleHQiLCJjZW50ZXJ0ZXh0IiwicmlnaHR0ZXh0Iiwid2lkdGgiLCJoZWlnaHQiLCJiZyIsImZnIiwic3R5bGVmaWxsIiwidG93YXJkIiwibG9vcCIsImMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJ3IiwicyIsIl9zdGFydCIsIl9kdXJhdGlvbiIsImVsYXBzZWRNcyIsInQiLCJoIiwiaGFzQXR0cmlidXRlIiwicm9vdCIsImF0dGFjaFNoYWRvdyIsIm1vZGUiLCJfY29ubmVjdGVkIiwiX3dpZHRoIiwiX2hlaWdodCIsIl9iZyIsIl9mZyIsIl90b3dhcmRSaWdodCIsIl9maWxsIiwiX2xlZnRUZXh0IiwiX2NlbnRlclRleHQiLCJfcmlnaHRUZXh0IiwiX2hpZGVBZnRlciIsIl9sb29wIiwiX2hpZGVUaW1lciIsInJvb3RFbGVtZW50Iiwic2hhZG93Um9vdCIsImZvcmVncm91bmRFbGVtZW50IiwiYmFja2dyb3VuZEVsZW1lbnQiLCJsZWZ0VGV4dEVsZW1lbnQiLCJjZW50ZXJUZXh0RWxlbWVudCIsInJpZ2h0VGV4dEVsZW1lbnQiLCJjb25uZWN0ZWRDYWxsYmFjayIsImxheW91dCIsInVwZGF0ZVRleHQiLCJzZXR2YWx1ZSIsImFkdmFuY2UiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIl9vbGRWYWx1ZSIsInVwZGF0ZSIsImhpZGUiLCJzaG93IiwiZHJhdyIsImJhY2tncm91bmQiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJ2YXJ5aW5nVGV4dHMiLCJlbGFwc2VkU2VjIiwicmVtYWluU2VjIiwicGVyY2VudCIsIm1pbiIsImRpc3BsYXlSZW1haW4iLCJ0b0ZpeGVkIiwiZGlzcGxheUVsYXBzZWQiLCJ0cmFuc2Zvcm0iLCJhcHBseVN0eWxlcyIsInN0eWxlcyIsImNlbnRlciIsImNzc1RleHQiLCJjbGVhclRpbWVvdXQiLCJiaW5kIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicGFyc2VkTEIiLCJuZXR3b3JrTEIiLCJuZXRSZWdleExCIiwicGFyYW1MQiIsInN5bmNLZXlzIiwic2VhbCIsInVuc2VhbCIsImVuZ2FnZSIsInRleHRLZXlzIiwiRSIsIk4iLCJTIiwiVyIsIk5FIiwiTlciLCJTRSIsIlNXIiwiVGFuayIsIkhlYWxlciIsIkRQUyIsIk51bWJlciIsImNvbW1vblJlcGxhY2VtZW50IiwicmVwbGFjZVN5bmMiLCJyZXBsYWNlVGV4dCIsInBhcnRpYWxDb21tb25UaW1lbGluZVJlcGxhY2VtZW50S2V5cyIsInBhcnRpYWxDb21tb25UcmlnZ2VyUmVwbGFjZW1lbnRLZXlzIiwibG9jYWxlTGluZXMiLCJjb3VudGRvd25TdGFydCIsImNvdW50ZG93bkVuZ2FnZSIsImNvdW50ZG93bkNhbmNlbCIsImFyZWFTZWFsIiwiYXJlYVVuc2VhbCIsImNyYWZ0aW5nU3RhcnQiLCJ0cmlhbENyYWZ0aW5nU3RhcnQiLCJjcmFmdGluZ0ZpbmlzaCIsInRyaWFsQ3JhZnRpbmdGaW5pc2giLCJjcmFmdGluZ0ZhaWwiLCJ0cmlhbENyYWZ0aW5nRmFpbCIsImNyYWZ0aW5nQ2FuY2VsIiwidHJpYWxDcmFmdGluZ0NhbmNlbCIsIlJlZ2V4U2V0IiwibG9jYWxlUmVnZXgiLCJyZWdleGVzIiwiYnVpbGRMb2NhbGVSZWdleGVzIiwibG9jYWxlTmV0UmVnZXgiLCJuZXRSZWdleGVzIiwibG9jYWxlcyIsImJ1aWxkZXIiLCJmcm9tRW50cmllcyIsImxpbmVzIiwiYnVpbGRMb2NhbGVSZWdleCIsInJlZ2V4RW4iLCJyZWdleFNldCIsIkxvY2FsZVJlZ2V4IiwiTG9jYWxlTmV0UmVnZXgiLCJ0cmFuc2xhdGVXaXRoUmVwbGFjZW1lbnRzIiwicmVwbGFjZUtleSIsInJlcGxhY2VMYW5nIiwicmVwbGFjZW1lbnRzIiwid2FzVHJhbnNsYXRlZCIsImlzR2xvYmFsIiwiciIsInJlcHMiLCJyZXBsYWNlbWVudCIsInJlcGwiLCJwYXJ0aWFsS2V5cyIsImlzUGFydGlhbCIsInBhcnRpYWxLZXkiLCJ0ZXN0IiwidHJhbnNsYXRlUmVnZXgiLCJ0cmFuc2xhdGVUZXh0IiwidHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtIiwidHJhbnNsYXRlUmVnZXhCdWlsZFBhcmFtQW5vbiIsImFub25QYXJhbXMiLCJyZXN1bHQiLCJkZWZhdWx0UmFpZGJvc3NOb25Db25maWdPcHRpb25zIiwiUGxheWVyTmlja3MiLCJJbmZvU291bmQiLCJBbGVydFNvdW5kIiwiQWxhcm1Tb3VuZCIsIkxvbmdTb3VuZCIsIlB1bGxTb3VuZCIsIkF1ZGlvQWxsb3dlZCIsIkRpc2FibGVkVHJpZ2dlcnMiLCJQZXJUcmlnZ2VyQXV0b0NvbmZpZyIsIlBlclRyaWdnZXJTZXRBdXRvQ29uZmlnIiwiUGVyVHJpZ2dlck9wdGlvbnMiLCJQZXJab25lVGltZWxpbmVDb25maWciLCJUcmlnZ2VyU2V0Q29uZmlnIiwiVHJpZ2dlcnMiLCJJc1JlbW90ZVJhaWRib3NzIiwiVHJhbnNmb3JtVHRzIiwiZGVmYXVsdFJhaWRib3NzQ29uZmlnT3B0aW9ucyIsIkRlZmF1bHRBbGVydE91dHB1dCIsIkFsZXJ0c0xhbmd1YWdlIiwiVGltZWxpbmVMYW5ndWFnZSIsIlRpbWVsaW5lRW5hYmxlZCIsIkFsZXJ0c0VuYWJsZWQiLCJEZWZhdWx0UGxheWVyTGFiZWwiLCJTaG93VGltZXJCYXJzQXRTZWNvbmRzIiwiS2VlcEV4cGlyZWRUaW1lckJhcnNGb3JTZWNvbmRzIiwiQmFyRXhwaXJlc1Nvb25TZWNvbmRzIiwiTWF4TnVtYmVyT2ZUaW1lckJhcnMiLCJSZXZlcnNlVGltZWxpbmUiLCJEaXNwbGF5QWxhcm1UZXh0Rm9yU2Vjb25kcyIsIkRpc3BsYXlBbGVydFRleHRGb3JTZWNvbmRzIiwiRGlzcGxheUluZm9UZXh0Rm9yU2Vjb25kcyIsIkFsYXJtU291bmRWb2x1bWUiLCJBbGVydFNvdW5kVm9sdW1lIiwiSW5mb1NvdW5kVm9sdW1lIiwiTG9uZ1NvdW5kVm9sdW1lIiwiUHVsbFNvdW5kVm9sdW1lIiwiUnVtYmxlRW5hYmxlZCIsIkluZm9SdW1ibGVEdXJhdGlvbiIsIkluZm9SdW1ibGVXZWFrIiwiSW5mb1J1bWJsZVN0cm9uZyIsIkFsZXJ0UnVtYmxlRHVyYXRpb24iLCJBbGVydFJ1bWJsZVdlYWsiLCJBbGVydFJ1bWJsZVN0cm9uZyIsIkFsYXJtUnVtYmxlRHVyYXRpb24iLCJBbGFybVJ1bWJsZVdlYWsiLCJBbGFybVJ1bWJsZVN0cm9uZyIsIkpTT041IiwiZGVmYXVsdE9wdGlvbnMiLCJpc0xvZ0RlZmluaXRpb25UeXBlcyIsImlzU3RyaW5nQXJyYXkiLCJpc1N0cmluZ09yU3RyaW5nQXJyYXkiLCJpc1RpbWVsaW5lTmV0UGFyYW1zIiwiaW5uZXJWYWx1ZSIsInZhbHVlcyIsImlzVmFsaWROZXRQYXJhbXMiLCJpc09iamVjdCIsImNvbW1lbnQiLCJjb21tZW50TGluZSIsImR1cmF0aW9uQ29tbWFuZCIsImlnbm9yZSIsImp1bXBDb21tYW5kIiwicG9wdXBUZXh0Iiwic291bmRBbGVydCIsInNwZWFrZXIiLCJzeW5jUmVnZXhDb21tYW5kIiwic3luY05ldFJlZ2V4IiwidHRzIiwid2luZG93Q29tbWFuZCIsIlRpbWVsaW5lUGFyc2VyIiwiaWdub3JlcyIsInRleHRzIiwic3luY1N0YXJ0cyIsInN5bmNFbmRzIiwiZm9yY2VKdW1wcyIsImVycm9ycyIsImxhYmVsVG9UaW1lIiwibGFiZWxUb1N5bmMiLCJ0cmlnZ2VycyIsInpvbmVJZCIsInBlclRyaWdnZXJBdXRvQ29uZmlnIiwidGltZWxpbmVDb25maWciLCJJZ25vcmUiLCJ1bmlxdWVJZCIsIkFkZCIsInRpbWUiLCJhY3RpdmVUaW1lIiwic29ydEtleSIsImluaXRpYWxJZCIsInVuaXF1ZWlkIiwidHJpZ2dlciIsImxpbmVOdW1iZXIiLCJ0cmltIiwib3JpZ2luYWxMaW5lIiwiYmVmb3JlU2Vjb25kcyIsInR0c0l0ZW1zIiwic2Vjb25kc0JlZm9yZSIsInBvcHVwVGV4dEl0ZW1zIiwicGFyc2VkTGluZSIsInNlY29uZHMiLCJwcmV2VGltZSIsIkdldFJlcGxhY2VkVGV4dCIsIm1hdGNoRHVyYXRpb25Db21tYW5kIiwibWF0Y2hTeW5jUmVnZXhDb21tYW5kIiwibWF0Y2hTeW5jTmV0UmVnZXgiLCJmb3VuZCIsInN5bmNzIiwiZGVzdGluYXRpb24iLCJzeW5jIiwianVtcCIsIm1hdGNoZWRUZXh0RXZlbnQiLCJtIiwiYXV0b0NvbmZpZyIsImVuZCIsImNvbW1hbmRNYXRjaCIsInN5bmNDb21tYW5kIiwibmV0UmVnZXhUeXBlIiwibmV0UmVnZXgiLCJ0cmFuc2xhdGVkUGFyYW1zIiwiYnVpbGRSZWdleFN5bmMiLCJHZXRSZXBsYWNlZFN5bmMiLCJyZWdleFR5cGUiLCJvcmlnSW5wdXQiLCJwYXJzZWRSZWdleCIsImFyZ01hdGNoIiwianVtcFR5cGUiLCJyZW5hbWUiLCJSZW5hbWUiLCJHZXRNaXNzaW5nVHJhbnNsYXRpb25zVG9JZ25vcmUiLCJUcmFuc2xhdGUiLCJ0aW1lbGluZSIsInRpbWVsaW5lVGV4dCIsInN5bmNFcnJvcnMiLCJ0ZXh0RXJyb3JzIiwibGluZVRvVGV4dCIsImxpbmVUb1N5bmMiLCJ0aW1lbGluZUxpbmVzIiwidHJhbnNsYXRlZExpbmVzIiwidGltZWxpbmVMaW5lIiwibGluZVRleHQiLCJsaW5lU3luYyIsImtCaWciLCJhY3RpdmVUZXh0IiwiVGltZWxpbmVVSSIsIkluaXQiLCJBZGREZWJ1Z0luc3RydWN0aW9ucyIsIlNldFBvcHVwVGV4dEludGVyZmFjZSIsIl9wb3B1cFRleHQiLCJSZXNldCIsIlNldFRpbWVsaW5lIiwidWkiLCJPbkFkZFRpbWVyIiwiX2ZpZ2h0Tm93IiwiX2UiLCJfY2hhbm5lbGluZyIsIk9uUmVtb3ZlVGltZXIiLCJfZm9yY2UiLCJPblNob3dJbmZvVGV4dCIsIl90ZXh0IiwiX2N1cnJlbnRUaW1lIiwiT25TaG93QWxlcnRUZXh0IiwiT25TaG93QWxhcm1UZXh0IiwiT25TcGVha1RUUyIsIk9uVHJpZ2dlciIsIl90cmlnZ2VyIiwiT25TeW5jVGltZSIsIl9ydW5uaW5nIiwiaW5pdGlhbE5leHRFdmVudFN0YXRlIiwibWluRmlnaHROb3ciLCJ0aW1lT2Zmc2V0Iiwic29ydEtleU9mZnNldCIsImp1bXBDb3VudCIsIlRpbWVsaW5lIiwidGltZWJhc2UiLCJuZXh0RXZlbnRTdGF0ZSIsIm5leHRUZXh0IiwibmV4dFN5bmNTdGFydCIsIm5leHRTeW5jRW5kIiwibmV4dEZvcmNlSnVtcCIsInVwZGF0ZVRpbWVyIiwiYWN0aXZlU3luY3MiLCJhY3RpdmVOZXRTeW5jcyIsImFjdGl2ZUV2ZW50cyIsImtlZXBBbGl2ZUV2ZW50cyIsIkxvYWRGaWxlIiwiU3RvcCIsImZpZ2h0Tm93IiwiX0FkdmFuY2VUaW1lVG8iLCJfQ29sbGVjdEFjdGl2ZVN5bmNzIiwiX0NsZWFyVGltZXJzIiwiX0NhbmNlbFVwZGF0ZSIsIlN5bmNUbyIsImN1cnJlbnRUaW1lIiwiX3N5bmMiLCJhY3RpdmVMYXN0Rm9yY2VKdW1wU3luYyIsIm5ld1RpbWViYXNlIiwidmFsdWVPZiIsImFicyIsIl9BZGREdXJhdGlvblRpbWVycyIsIl9DbGVhckV4Y2VwdFJ1bm5pbmdEdXJhdGlvblRpbWVycyIsIl9BZGRVcGNvbWluZ1RpbWVycyIsIl9TY2hlZHVsZVVwZGF0ZSIsImkiLCJzeW5jRW5kIiwiT25Mb2dMaW5lSnVtcCIsIk9uTG9nTGluZSIsIk9uTmV0TG9nTGluZSIsInN5bmNTdGFydCIsImZvcmNlSnVtcCIsImFjdGl2ZUV2ZW50Iiwia2VlcEFsaXZlIiwidGltZW91dCIsImR1cmF0aW9uRXZlbnRzIiwiaXNEdXIiLCJfUmVtb3ZlRXhwaXJlZFRpbWVycyIsIl9PblVwZGF0ZVRpbWVyIiwiZHVyYXRpb25FdmVudCIsInByb3RvdHlwZSIsImFwcGx5IiwidGltZVVudGlsRXZlbnQiLCJfQWRkUGFzc2VkVGV4dHMiLCJuZXh0RXZlbnRTdGFydGluZyIsIm5leHRUZXh0T2NjdXJzIiwibmV4dEV2ZW50RW5kaW5nIiwibmV4dFN5bmNTdGFydGluZyIsIm5leHRTeW5jRW5kaW5nIiwibmV4dEV2ZW50IiwibmV4dEV2ZW50RW5kc0F0Iiwic2hvd05leHRFdmVudEF0IiwiZm9yY2VFbmQiLCJuZXh0VGltZSIsImNlaWwiLCJ1bmNvbmRpdGlvbmFsSnVtcCIsIl9DaGVja1VuY29uZGl0aW9uYWxKdW1wIiwianVtcFNvdXJjZSIsImp1bXBEZXN0Iiwib2Zmc2V0IiwiVGltZWxpbmVDb250cm9sbGVyIiwiYWN0aXZlVGltZWxpbmUiLCJyYWlkYm9zc0RhdGFGaWxlcyIsInRpbWVsaW5lcyIsImZpbGVuYW1lIiwiZmlsZSIsInN1cHByZXNzTmV4dEVuZ2FnZSIsIndpcGVSZWdleCIsIlNldEluQ29tYmF0IiwiaW5Db21iYXQiLCJPbkxvZ0V2ZW50IiwibG9ncyIsIk9uTmV0TG9nIiwicmF3TGluZSIsIlNldEFjdGl2ZVRpbWVsaW5lIiwidGltZWxpbmVGaWxlcyIsInRpbWVsaW5lRmlsZSIsIklzUmVhZHkiLCJUaW1lbGluZUxvYWRlciIsInRpbWVsaW5lQ29udHJvbGxlciIsIlNldFRpbWVsaW5lcyIsIlN0b3BDb21iYXQiLCJ0aW1lbGluZUluc3RydWN0aW9ucyIsImNvbXB1dGVCYWNrZ3JvdW5kRnJvbSIsImRpdiIsImNsYXNzZXMiLCJjbHMiLCJjb2xvciIsImdldENvbXB1dGVkU3R5bGUiLCJIVE1MVGltZWxpbmVVSSIsImJhckNvbG9yIiwiYmFyRXhwaXJlc1Nvb25Db2xvciIsInRpbWVybGlzdCIsImFjdGl2ZUJhcnMiLCJkZWJ1Z0VsZW1lbnQiLCJkZWJ1Z0ZpZ2h0VGltZXIiLCJncmlkVGVtcGxhdGVSb3dzIiwiaW5zdHJ1Y3Rpb25zIiwiaGVscGVyIiwicm93cyIsImhlbHBlckJhciIsImNoYW5uZWxpbmciLCJiYXIiLCJhY3RpdmVCYXIiLCJwYXJlbnREaXYiLCJwYXJlbnROb2RlIiwic29vblRpbWVvdXQiLCJvcmRlciIsImZvcmNlIiwicmVtb3ZlQmFyIiwiYW5pbWF0aW9uTmFtZSIsIkluZm8iLCJBbGVydCIsIkFsYXJtIiwiVFRTIiwiVHJpZ2dlciIsInJ1bm5pbmciLCJlbXB0eVJvbGVUb1BhcnR5TmFtZXMiLCJjcmFmdGVyIiwiZ2F0aGVyZXIiLCJub25lIiwicm9sZUxvY2FsaXplZCIsImpvYkxvY2FsaXplZEFiYnIiLCJqb2JMb2NhbGl6ZWRGdWxsIiwiUGFydHlUcmFja2VyIiwiZGV0YWlscyIsInBhcnR5TmFtZXNfIiwicGFydHlJZHNfIiwiYWxsaWFuY2VOYW1lc18iLCJhbGxpYW5jZUlkc18iLCJuYW1lVG9Sb2xlXyIsImlkVG9OYW1lXyIsInJvbGVUb1BhcnR5TmFtZXNfIiwib25QYXJ0eUNoYW5nZWQiLCJyZXNldCIsImpvYk5hbWUiLCJwYXJ0eUlkcyIsInRhbmtOYW1lcyIsImhlYWxlck5hbWVzIiwiZHBzTmFtZXMiLCJpc1JvbGUiLCJpc1RhbmsiLCJpc0hlYWxlciIsImlzRFBTIiwiaW5BbGxpYW5jZSIsIm90aGVyVGFuayIsIm90aGVySGVhbGVyIiwicGFydHlJbmRleCIsIm5hbWVGcm9tSWQiLCJwYXJ0eU1lbWJlciIsInJldCIsImpvYkFiYnIiLCJqb2JGdWxsIiwicm9sZU5hbWUiLCJyZXRWYWwiLCJBdXRvcGxheUhlbHBlciIsImlzQnV0dG9uQ3JlYXRlZCIsImdldENvbnRleHQiLCJjb250ZXh0IiwiQXVkaW9Db250ZXh0IiwiQ2hlY2tJZkFscmVhZHlSdW5uaW5nIiwic3RhdGUiLCJQcm9tcHQiLCJidXR0b24iLCJvbmNsaWNrIiwicmVzdW1lIiwib25zdGF0ZWNoYW5nZSIsIkNoZWNrQW5kUHJvbXB0IiwiVFRTSXRlbSIsInZvaWNlIiwiU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlIiwicGxheSIsInNwZWVjaFN5bnRoZXNpcyIsInNwZWFrIiwiQnJvd3NlclRUU0VuZ2luZSIsImluaXRpYWxpemVBdHRlbXB0cyIsImNhY3Rib3RMYW5nIiwiZ2V0Vm9pY2VzIiwib252b2ljZXNjaGFuZ2VkIiwiaW5pdGlhbGl6ZVZvaWNlIiwic3BlZWNoVm9pY2UiLCJjYWN0Ym90TGFuZ1RvU3BlZWNoTGFuZyIsInNwZWVjaExhbmciLCJyZXBsYWNlQWxsIiwidHRzSXRlbSIsImlzUmFpZGJvc3NMb29zZVRpbWVsaW5lVHJpZ2dlciIsImlzTmV0UmVnZXhUcmlnZ2VyIiwiaXNSZWdleFRyaWdnZXIiLCJyYWlkYm9zc0luc3RydWN0aW9ucyIsInRyaWdnZXJVcHBlckNhc2UiLCJvblRyaWdnZXJFeGNlcHRpb24iLCJzdGFjayIsInNvdW5kcyIsInNvdW5kU3RycyIsInRleHRNYXAiLCJpbmZvIiwidXBwZXJUZXh0IiwidXBwZXJTb3VuZCIsInVwcGVyU291bmRWb2x1bWUiLCJydW1ibGVEdXJhdGlvbiIsInJ1bWJsZVdlYWsiLCJydW1ibGVTdHJvbmciLCJhbGVydCIsImFsYXJtIiwiT3JkZXJlZFRyaWdnZXJMaXN0IiwiaWRUb0luZGV4Iiwib2xkVHJpZ2dlciIsInRyaWdnZXJGaWxlIiwib2xkRmlsZSIsIm5ld0ZpbGUiLCJhc0xpc3QiLCJUcmlnZ2VyT3V0cHV0UHJveHkiLCJvdmVycmlkZVN0cmluZ3MiLCJ1bmtub3duVmFsdWUiLCJjb25maWciLCJPdXRwdXRTdHJpbmdzIiwiUHJveHkiLCJwcm9wZXJ0eSIsIlN0cmluZyIsImdldFJlcGxhY2VtZW50IiwicmVzcG9uc2VTdHJpbmciLCJldmFsdWF0ZU91dHB1dFBhcmFtIiwiaXNOZXN0ZWRBcnJheSIsInRvU3RyaW5nRnVuYyIsInRvU3RyaW5nVmFsIiwiX2Z1bGxNYXRjaCIsInBhcnRzIiwibWFrZU91dHB1dCIsImRlZmF1bHRPdXRwdXQiLCJ3aXBlQ2FjdGJvdEVjaG8iLCJ3aXBlRW5kRWNobyIsIndpcGVGYWRlSW4iLCJpc1dpcGUiLCJQb3B1cFRleHQiLCJuZXRUcmlnZ2VycyIsInRpbWVycyIsInRyaWdnZXJTdXBwcmVzcyIsImN1cnJlbnRUcmlnZ2VySUQiLCJyZXNldFdoZW5PdXRPZkNvbWJhdCIsImtNYXhSb3dzT2ZUZXh0IiwidHJpZ2dlclNldHMiLCJ0cmlnZ2VyU2V0c0J5SWQiLCJ0cmlnZ2VyU2V0Q29uZmlnIiwiem9uZU5hbWUiLCJkYXRhSW5pdGlhbGl6ZXJzIiwidGltZWxpbmVMb2FkZXIiLCJwYXJ0eVRyYWNrZXIiLCJQcm9jZXNzRGF0YUZpbGVzIiwiaW5mb1RleHQiLCJhbGVydFRleHQiLCJhbGFybVRleHQiLCJwYXJzZXJMYW5nIiwidHRzRW5naW5lIiwidHRzU2F5IiwiZ2V0RGF0YU9iamVjdCIsIkhvb2tPdmVybGF5cyIsIk9uUGxheWVyQ2hhbmdlIiwiUGxheWVyTmFtZU92ZXJyaWRlIiwiT25DaGFuZ2Vab25lIiwiT25Mb2ciLCJPbkpvYkNoYW5nZSIsImN1cnJlbnRIUCIsImZpbGVzIiwianNvbiIsInByb2Nlc3NlZFNldCIsInRyaWdnZXJTZXQiLCJ6b25lSUQiLCJSZWxvYWRUaW1lbGluZXMiLCJ0aW1lbGluZVN0eWxlcyIsIm9yZGVyZWRUcmlnZ2VycyIsImFkZFRpbWVsaW5lIiwib2JqVmFsIiwibGFuZ1N1ZmZpeCIsImNoYXJBdCIsInJlZ2V4UGFyc2VyTGFuZyIsIm5ldFJlZ2V4UGFyc2VyTGFuZyIsImhhdmVab25lUmVnZXgiLCJoYXZlWm9uZUlkIiwib3JpZ1pvbmVSZWdleCIsInpvbmVSZWdleCIsIk1hdGNoQWxsIiwicGFyc2VyTGFuZ1JlZ2V4IiwidHJpZ2dlclNldEF1dG9Db25maWciLCJsb2FkVGhpc1NldCIsImxvYWRDb25maWdzIiwibG9hZFNldCIsImxvYWRTZXRDb25maWciLCJzZXRGaWxlbmFtZSIsImluaXREYXRhIiwidHIiLCJQcm9jZXNzVHJpZ2dlciIsInRyaWdnZXJPYmplY3QiLCJkZWZhdWx0UmVnZXgiLCJsb2NhbFJlZ2V4IiwidHJhbnMiLCJ0aW1lbGluZVJlcGxhY2UiLCJkZWZhdWx0TmV0UmVnZXgiLCJsb2NhbE5ldFJlZ2V4IiwicmUiLCJvdmVycmlkZVRpbWVsaW5lRmlsZSIsImRpciIsImxhc3RJbmRleE9mIiwidGltZWxpbmVUcmlnZ2VycyIsImlzVGltZWxpbmVUcmlnZ2VyIiwiZmlsdGVyRW5hYmxlZCIsImRpc2FibGVkIiwiYWxsVHJpZ2dlcnMiLCJTdG9wVGltZXJzIiwiaGFuZGxlIiwiT25UcmlnZ2VySW50ZXJuYWwiLCJfb25UcmlnZ2VySW50ZXJuYWxDaGVja1N1cHByZXNzZWQiLCJncm91cHMiLCJ0cmlnZ2VySGVscGVyIiwiX29uVHJpZ2dlckludGVybmFsR2V0SGVscGVyIiwiX29uVHJpZ2dlckludGVybmFsQ29uZGl0aW9uIiwiX29uVHJpZ2dlckludGVybmFsUHJlUnVuIiwiZGVsYXlQcm9taXNlIiwiX29uVHJpZ2dlckludGVybmFsRGVsYXlTZWNvbmRzIiwiX29uVHJpZ2dlckludGVybmFsRHVyYXRpb25TZWNvbmRzIiwiX29uVHJpZ2dlckludGVybmFsU3VwcHJlc3NTZWNvbmRzIiwidHJpZ2dlclBvc3REZWxheSIsInByb21pc2UiLCJfb25UcmlnZ2VySW50ZXJuYWxQcm9taXNlIiwidHJpZ2dlclBvc3RQcm9taXNlIiwiX29uVHJpZ2dlckludGVybmFsU291bmQiLCJfb25UcmlnZ2VySW50ZXJuYWxTb3VuZFZvbHVtZSIsIl9vblRyaWdnZXJJbnRlcm5hbFJlc3BvbnNlIiwiX29uVHJpZ2dlckludGVybmFsQWxhcm1UZXh0IiwiX29uVHJpZ2dlckludGVybmFsQWxlcnRUZXh0IiwiX29uVHJpZ2dlckludGVybmFsSW5mb1RleHQiLCJfb25UcmlnZ2VySW50ZXJuYWxSdW1ibGUiLCJfb25UcmlnZ2VySW50ZXJuYWxUVFMiLCJfb25UcmlnZ2VySW50ZXJuYWxQbGF5QXVkaW8iLCJfb25UcmlnZ2VySW50ZXJuYWxSdW4iLCJzdXBwcmVzc2VkIiwidHJpZ2dlck9wdGlvbnMiLCJ0cmlnZ2VyQXV0b0NvbmZpZyIsInVzZXJTdXBwcmVzc2VkT3V0cHV0IiwidGV4dEFsZXJ0c0VuYWJsZWQiLCJzb3VuZEFsZXJ0c0VuYWJsZWQiLCJzcG9rZW5BbGVydHNFbmFibGVkIiwiZ3JvdXBTcG9rZW5BbGVydHNFbmFibGVkIiwidmFsdWVPckZ1bmN0aW9uIiwiX29uVHJpZ2dlckludGVybmFsSGVscGVyRGVmYXVsdHMiLCJ3aGVuIiwic3VwcHJlc3MiLCJjb25kaXRpb24iLCJDb25kaXRpb24iLCJjb25kaXRpb25GdW5jUmV0dXJuIiwiVGV4dEFsZXJ0IiwiU291bmRBbGVydCIsIlNwZWVjaEFsZXJ0IiwiR3JvdXBTcGVlY2hBbGVydCIsInByZVJ1biIsImRlbGF5U2Vjb25kcyIsImFkanVzdCIsIkRlbGF5QWRqdXN0IiwiYWRqdXN0ZWREZWxheSIsInRyaWdnZXJJRCIsInZhbHVlRHVyYXRpb24iLCJkdXJhdGlvblNlY29uZHMiLCJmcm9tQ29uZmlnIiwiRHVyYXRpb24iLCJmcm9tVHJpZ2dlciIsInN1cHByZXNzU2Vjb25kcyIsInNvdW5kIiwic291bmRVcmwiLCJzb3VuZFZvbHVtZSIsInRyaWdnZXJTb3VuZFZvbCIsIl9hZGRUZXh0Rm9yIiwiZ2V0R2FtZXBhZHMiLCJncCIsImdhbWVwYWQiLCJ2aWJyYXRpb25BY3R1YXRvciIsInBsYXlFZmZlY3QiLCJzdGFydERlbGF5IiwicnVtYmxlRHVyYXRpb25NcyIsIndlYWtNYWduaXR1ZGUiLCJzdHJvbmdNYWduaXR1ZGUiLCJ0dHNUZXh0IiwiVFRTVGV4dCIsInJlc3AiLCJkZWZhdWx0VFRTVGV4dCIsIm5hbWVkU291bmQiLCJuYW1lZFNvdW5kVm9sdW1lIiwic291bmRWb2wiLCJTb3VuZE92ZXJyaWRlIiwiVm9sdW1lT3ZlcnJpZGUiLCJhcnJvd1JlcGxhY2VtZW50IiwiX3BsYXlBdWRpb0ZpbGUiLCJydW4iLCJfY3JlYXRlVGV4dEZvciIsInRleHRUeXBlIiwibG93ZXJUZXh0S2V5IiwidGV4dEVsZW1lbnRDbGFzcyIsImhvbGRlciIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJfbWFrZVRleHRFbGVtZW50IiwiY2hpbGRyZW4iLCJjb250YWlucyIsInVwcGVyVGV4dEtleSIsInRleHRPYmoiLCJfdHJpZ2dlckhlbHBlciIsImNsYXNzTmFtZSIsInVybCIsInZvbHVtZSIsImF1ZGlvIiwiQXVkaW8iLCJwcmVzZXJ2ZUhQIiwiU2hvcnROYW1lIiwiUGFyc2VMb2NhbGVGbG9hdCIsIkNhblNsZWVwIiwiQ2FuQ2xlYW5zZSIsInRyaWdnZXJEYXRhIiwiaW5pdE9iaiIsIlBvcHVwVGV4dEdlbmVyYXRvciIsInJhaWRib3NzRmlsZURhdGEiLCJyYWlkYm9zc09wdGlvbnMiLCJrT3B0aW9uS2V5cyIsImRlbGF5QWRqdXN0Iiwia1RyaWdnZXJPcHRpb25zIiwidGV4dEFuZFNvdW5kIiwidHRzQW5kVGV4dCIsInR0c09ubHkiLCJ0ZXh0T25seSIsInRyaWdnZXJTb3VuZE9wdGlvbnMiLCJrRGV0YWlsS2V5cyIsImRlYnVnT25seSIsImdlbmVyYXRlZE1hbnVhbGx5Iiwia1RpbWVsaW5lVGFibGVIZWFkZXJzIiwic2hvdWxkRGlzcGxheVRleHQiLCJvdmVycmlkZVRleHQiLCJkZXRhaWxLZXlzIiwia01pc2NUcmFuc2xhdGlvbnMiLCJ2YWx1ZURlZmF1bHQiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJ3YXJuaW5nIiwibWlzc2luZ0lkIiwib3ZlcnJpZGRlbkJ5RmlsZSIsInZpZXdUcmlnZ2VyU291cmNlIiwiZWRpdFRpbWVsaW5lIiwidGltZWxpbmVMaXN0aW5nIiwiYWRkQ3VzdG9tVGltZWxpbmVFbnRyaWVzIiwiYWRkTW9yZVJvd3MiLCJjdXN0b21FbnRyeVRpbWUiLCJjdXN0b21FbnRyeVRleHQiLCJjdXN0b21FbnRyeUR1cmF0aW9uIiwiY3VzdG9tRW50cnlSZW1vdmUiLCJ2YWxpZER1cmF0aW9uT3JVbmRlZmluZWQiLCJ2YWxFbnRyeSIsImlzTmFOIiwidmFsaWREZWxheUFkanVzdE9yVW5kZWZpbmVkIiwiY2FuQmVDb25maWd1cmVkIiwidHJpZyIsImlzTWlzc2luZ0lkIiwiYWRkVHJpZ2dlckRldGFpbCIsImxhYmVsVGV4dCIsImRldGFpbFRleHQiLCJkZXRhaWxDbHMiLCJzZXRPcHRpb25zRnJvbU91dHB1dFZhbHVlIiwiRG9Ob3RoaW5nRnVuY1Byb3h5Iiwib3V0cHV0U3RyaW5nc0NhbGxiYWNrIiwiX3RhcmdldCIsIl9uYW1lIiwibWFrZUxpbmsiLCJsYW5nT3JFbiIsIlJhaWRib3NzQ29uZmlndXJhdG9yIiwiY2FjdGJvdENvbmZpZ3VyYXRvciIsImJhc2UiLCJhbGVydHNMYW5nIiwiZ2V0T3B0aW9uIiwidGltZWxpbmVMYW5nIiwiYnVpbGRVSSIsInJhaWRib3NzRmlsZXMiLCJ1c2VyT3B0aW9ucyIsImZpbGVNYXAiLCJwcm9jZXNzUmFpZGJvc3NGaWxlcyIsImV4cGFuc2lvbkRpdnMiLCJleHBhbnNpb24iLCJzZWN0aW9uIiwiaGFzVHJpZ2dlcnMiLCJoYXNUaW1lbGluZSIsImhhc1RyaWdnZXJTZXRDb25maWciLCJleHBhbnNpb25EaXYiLCJleHBhbnNpb25Db250YWluZXIiLCJleHBhbnNpb25IZWFkZXIiLCJ0cmlnZ2VyQ29udGFpbmVyIiwiaGVhZGVyRGl2IiwidGl0bGUiLCJwYXJ0IiwicGFydERpdiIsInRyaWdnZXJTZXRBbGVydE91dHB1dCIsImRlZmF1bHRUcmlnZ2VyU2V0QWxlcnRPdXRwdXQiLCJnZXRTdHJpbmdPcHRpb24iLCJkZWZhdWx0QWxlcnRPdXRwdXQiLCJidWlsZENvbmZpZ0VudHJ5IiwiZGV2ZWxvcGVyT3B0aW9ucyIsImJ1aWxkVGltZWxpbmVVSUNvbnRhaW5lciIsInRyaWdJZCIsImhhc091dHB1dEZ1bmMiLCJ0cmlnZ2VyRGl2IiwidHJpZ2dlcklkIiwidHJpZ0NvbW1lbnQiLCJ0cmlnZ2VyQ29tbWVudERpdiIsInRyaWdnZXJEZXRhaWxzIiwiYnVpbGRUcmlnZ2VyT3B0aW9ucyIsInRyYW5zbGF0ZSIsImJhc2VUZXh0IiwiZGV0YWlsU3RyaW5nS2V5IiwiZGV0YWlsS2V5IiwidHJpZ091dHB1dCIsImNvbmZpZ091dHB1dCIsInRyaWdGdW5jIiwib3B0aW9uS2V5IiwiaW5wdXQiLCJzdGVwIiwicGxhY2Vob2xkZXIiLCJzZXRGdW5jIiwic2V0T3B0aW9uIiwib25jaGFuZ2UiLCJvbmlucHV0Iiwib3V0cHV0U3RyaW5nIiwicDAiLCJwMSIsInAyIiwiYmFzZVVybCIsInVybEZpbGVwYXRoIiwiZXNjYXBlZFRyaWdnZXJJZCIsInVyaUNvbXBvbmVudCIsImVuY29kZVVSSUNvbXBvbmVudCIsInVybFN0cmluZyIsInBhcmVudCIsImhhc0V2ZXJCZWVuRXhwYW5kZWQiLCJ0aW1lbGluZVRleHRGcm9tU2V0IiwiYnVpbGRUaW1lbGluZUxpc3RpbmdVSSIsImJ1aWxkVGltZWxpbmVBZGRVSSIsImJ1aWxkVGltZWxpbmVUZXh0VUkiLCJibGFua0RhdGEiLCJoZWFkZXIiLCJzY3JvbGxlciIsInRpbWVsaW5lQ29udGVudHMiLCJ0cmFuc2xhdGVkIiwiYWRkSWQiLCJoZWFkZXJUaW1lIiwiaGVhZGVyVGV4dCIsImhlYWRlckR1cmF0aW9uIiwiZGVmYXVsdFJvdyIsInJvd3NPck9iaiIsImdldEpzb25PcHRpb24iLCJzdG9yZVJvd3MiLCJzZXRKc29uT3B0aW9uIiwiYWRkUm93IiwidGltZUlucHV0IiwidGV4dElucHV0IiwiZHVyYXRpb25JbnB1dCIsInJvdyIsInVuaXFFdmVudHMiLCJjaGVja0lucHV0IiwiZW5hYmxlSWQiLCJnZXRCb29sZWFuT3B0aW9uIiwidGV4dElkIiwicHJvY2Vzc1RyaWdnZXIiLCJmYWtlT3V0cHV0UHJveHkiLCJhc3NpZ24iLCJiYXNlRmFrZURhdGEiLCJjb25maWdPcHRpb25zIiwicGFydGlhbEZha2VEYXRhRW50cmllcyIsImZha2VEYXRhRW50cmllcyIsImZpcnN0RGF0YSIsImtGYWtlTWF0Y2hlcyIsIm5wY0lkIiwib3V0cHV0S2V5cyIsImV2YWxUcmlnZ2VyIiwicmVzdWx0U3RyIiwiZ2V0UmVnZXgiLCJnZXROZXRSZWdleCIsInRpbWVsaW5lUmVnZXgiLCJ0cmlnZ2VyUmVnZXgiLCJ0cmlnZ2VyTmV0UmVnZXgiLCJ0cmlnZ2VyRmlsZXMiLCJ0cmlnZ2VyU2V0T3JTdHJpbmciLCJwcm9jZXNzRmlsZXMiLCJ0cmlnZ2VySWR4IiwicHJldmlvdXNUcmlnZ2VyV2l0aElkIiwicmF3VHJpZ2dlcnMiLCJpc1VzZXJUcmlnZ2VyU2V0IiwiZmxhdHRlblRpbWVsaW5lIiwidHJpZ2dlckFyciIsImJhc2VUcmlnIiwicHJldmlvdXMiLCJsYWJlbERpdiIsInVwZGF0ZUxhYmVsIiwic2VsZWN0VmFsdWUiLCJzZWxlY3RlZCIsImxhc3RJbmRleCIsInVzZXJGaWxlSGFuZGxlciIsImJhc2VPcHRpb25zIiwiYmFzZVRyaWdnZXJTZXQiLCJwcm9jZXNzUGVyVHJpZ2dlckF1dG9Db25maWciLCJvcHRpb25OYW1lIiwib3V0cHV0T2JqcyIsImRlbGF5QWRqdXN0U2Vjb25kcyIsInByb2Nlc3NQZXJUcmlnZ2VyU2V0QXV0b0NvbmZpZyIsInBlclRyaWdnZXJTZXRBdXRvQ29uZmlnIiwicHJvY2Vzc1BlclpvbmVUaW1lbGluZUNvbmZpZyIsInBlclpvbmVUaW1lbGluZUNvbmZpZyIsInpvbmVLZXkiLCJ6b25lRW50cnkiLCJlbmFibGVFbnRyeSIsInJlcGxhY2VFbnRyeSIsImFkZEVudHJ5IiwiTmFOIiwiZHVyYXRpb25Pck5hTiIsInByb2Nlc3NUcmlnZ2VyU2V0Q29uZmlnIiwib3V0cHV0VHJpZ2dlclNldENvbmZpZyIsInRyaWdnZXJTZXRJZCIsImNvbmZpZ0RpY3QiLCJidWlsZEV4dHJhVUkiLCJodG1sIiwib3ZlcmxheVdzUGFyYW0iLCJ3c1BhcmFtIiwiaXNMb2NhbCIsInBsYXllck5hbWVQYXJhbSIsInR0c1BhcmFtIiwiZm9yY2VFbmFibGUiLCJhbGVydHNQYXJhbSIsInRpbWVsaW5lUGFyYW0iLCJhdWRpb1BhcmFtIiwidGltZWxpbmVVSSJdLCJzb3VyY2VSb290IjoiIn0=