// This file was autogenerated from running ts-node util/sync_files.ts.
// DO NOT EDIT THIS FILE DIRECTLY.

import NetRegexes from '../../../../../resources/netregexes';
import ZoneId from '../../../../../resources/zone_id';
import { OopsyData } from '../../../../../types/data';
import { NetMatches } from '../../../../../types/net_matches';
import {
  OopsyFunc,
  OopsyMistake,
  OopsyMistakeType,
  OopsyTriggerSet,
} from '../../../../../types/oopsy';
import { LocaleText } from '../../../../../types/trigger';
import { GetShareMistakeText, GetSoloMistakeText, playerDamageFields } from '../../../oopsy_common';

export interface Data extends OopsyData {
  hasRiteOfPassage: { [player: string]: boolean };
}

// TODO: we probably could use an oopsy utility library (and Data should be `any` here).
const stackMistake = (
  type: OopsyMistakeType,
  expected: number,
  abilityText?: LocaleText,
): OopsyFunc<Data, NetMatches['Ability'], OopsyMistake | undefined> => {
  return (_data, matches) => {
    const actual = parseFloat(matches.targetCount);
    if (actual === expected || actual === 0)
      return;
    const ability = abilityText ?? matches.ability;
    const text = actual === 1 ? GetSoloMistakeText(ability) : GetShareMistakeText(ability, actual);
    return { type: type, blame: matches.target, text: text };
  };
};

const triggerSet: OopsyTriggerSet<Data> = {
  zoneId: ZoneId.AnotherSildihnSubterraneSavage,
  initData: () => {
    return {
      hasRiteOfPassage: {},
    };
  },
  damageWarn: {
    'ASSS Aqueduct Kaluk Right Sweep': '797B', // right 200 degree cleave
    'ASSS Aqueduct Kaluk Left Sweep': '797C', // left 200 degree cleave
    'ASSS Aqueduct Kaluk Creeping Ivy': '797D', // frontal conal
    'ASSS Aqueduct Belladonna Atropine Spore': '7978', // large donut
    'ASSS Aqueduct Sapria Bloody Caress': '7977', // wide frontal conal
    'ASSS Aqueduct Udumbara Honeyed Right': '7974', // right cleave
    'ASSS Aqueduct Udumbara Honeyed Left': '7973', // left cleave
    'ASSS Aqueduct Dryad Acorn Bomb': '7970', // targeted circle
    'ASSS Aqueduct Dryad Arboreal Storm': '796F', // centered circle
    'ASSS Aqueduct Oqdan Uproot': '7972', // targeted circle
    'ASSS Aqueduct Oqdan Gelid Gale': '7971', // targeted circle

    'ASSS Silkie Chilling Duster': '7786', // cardinal cross ice
    'ASSS Silkie Bracing Duster': '7787', // donut wind
    'ASSS Silkie Fizzling Duster 1': '7788', // intercardinal cross lightning
    'ASSS Silkie Fizzling Duster 2': '7780', // intercardinal cross lightning
    'ASSS Silkie Soapsud Static': '77ED', // Fizzling Duster forked lightning spread
    'ASSS Silkie Squeaky Clean 1': '7776', // 225 degree mouse swing, left or right
    'ASSS Silkie Squeaky Clean 2': '7777', // 225 degree mouse swing, left or right
    'ASSS Silkie Squeaky Clean 3': '7778', // 225 degree mouse swing, left or right
    'ASSS Silkie Squeaky Clean 4': '7779', // 225 degree mouse swing, left or right
    'ASSS Silkie Silken Puff Chilling Duster': '778B', // cardinal cross from puff
    'ASSS Silkie Silken Puff Bracing Duster': '778C', // donut from puff
    'ASSS Silkie Silken Puff Fizzling Duster': '778D', // intercardinal cross from puuff
    'ASSS Silkie Silken Puff Puff and Tumble 1': '7793', // initial puff
    'ASSS Silkie Silken Puff Puff and Tumble 2': '7794', // puff destination
    'ASSS Silkie Eastern Ewer Brim Over': '7791', // initial Ewer circle
    'ASSS Silkie Eastern Ewer Rinse': '7792', // moving Ewers

    'ASSS Sil\'dihn Dullahan Blighted Gloom': '797E', // very large centered circle
    'ASSS Aqueduct Armor Dominion Slash': '7982', // frontal conal on a random player

    'ASSS Gladiator Rush of Might Front': '779D', // initial 180 cleave in front
    'ASSS Gladiator Rush of Might Back': '779E', // followup 180 cleave behind
    'ASSS Gladiator Ring of Might Out 1': '779F', // ring 1 out
    'ASSS Gladiator Ring of Might Out 2': '77A0', // ring 2 out
    'ASSS Gladiator Ring of Might Out 3': '77A1', // ring 3 out
    'ASSS Gladiator Ring of Might In 1': '77A2', // ring 1 in
    'ASSS Gladiator Ring of Might In 2': '77A3', // ring 2 in
    'ASSS Gladiator Ring of Might In 3': '77A4', // ring 3 in
    'ASSS Gladiator Lingering Echo': '77B9', // Curse of the Fallen akh rhai
    'ASSS Gladiator Regret Rack and Ruin': '77A6', // checkerboard line aoes
    'ASSS Gladiator Sundered Remains': '77AA', // shiva circles

    'ASSS Shadowcaster Ball of Fire Burn': '76BB', // circular explosion from fireballs
    'ASSS Shadowcaster Arcane Font Blazing Benifice': '76C1', // line aoe from portal
    'ASSS Shadowcaster Cast Shadow 1': '76BD', // first hit of Cast Shadow
    'ASSS Shadowcaster Cast Shadow 2': '76BE', // second hit of Cast Shadow
    'ASSS Shadowcaster Pure Fire': '76BF', // baited puddles
  },
  damageFail: {
    'ASSS Silkie Silken Puff Buffeted Puffs': '77EC', // puffs too close together
    'ASSS Gladiator Massive Explosion': '77AD', // not taking a tower
    'ASSS Gladiator Chains of Resentment': '77A9', // not breaking chains fast enough
    'ASSS Shadowcaster Trespasser\'s Pyre': '76BC', // hitting Infirm Ward lasers
    'ASSS Shadowcaster Big Burst': '76CC', // failing Cryptic Flames
  },
  gainsEffectWarn: {
    'ASSS Silkie Deep Freeze': '4E6', // not moving after Soap's Up
  },
  gainsEffectFail: {
    'ASSS Silkie Bleeding': 'C05', // standing outside Silkie Arena
    'ASSS Shadowcaster Burns': 'BF9', // standing outside Shadowcaster arena
  },
  shareWarn: {
    'ASSS Gladiator Echo of the Fallen': '77B7', // Curse of the Fallen spread
    'ASSS Gladiator Nothing beside Remains': '77BC', // spread during Hateful Visage
  },
  shareFail: {
    'ASSS Aqueduct Belladonna Deracinator': '797A', // tank buster cleave(?)
    'ASSS Gladiator Mighty Smite': '77B4', // tank buster cleave(?)
    'ASSS Gladiator Scream of the Fallen': '77BA', // defamations during towers
    'ASSS Gladiator Explosion': '77AC', // towers
    'ASSS Shadowcaster Firesteel Strike': '76C6', // jumps before Blessed Beacon cleaves
    'ASSS Shadowcaster Firesteel Fracture': '76C4', // tank buster cleave
    'ASSS Shadowcaster Infirn Brand Infirm Wave': '76CD', // 90 degree large cleaves on closest people
  },
  soloFail: {
    'ASSS Silkie Slippery Soap': '7783', // line stack damage
    'ASSS Gladiator Scultor\'s Passion': '79F4', // line stack damage
    'ASSS Gladiator Thunderous Echo': '77B8', // Curse of the Fallen share
  },
  triggers: [
    {
      // Gaze attack
      id: 'ASSS Aqueduct Belladonna Frond Affront',
      type: 'Ability',
      netRegex: NetRegexes.ability({ id: '7979', ...playerDamageFields }),
      // Always hits target, but if correctly resolved will deal 0 damage
      condition: (data, matches) => data.DamageFromMatches(matches) > 0,
      mistake: (_data, matches) => {
        return {
          type: 'warn',
          blame: matches.target,
          reportId: matches.targetId,
          text: matches.ability,
        };
      },
    },
    {
      // Golden and Silver flames do damage if not cleansing a debuff
      // The same abilities are used for both versions.
      id: 'ASSS Gladiator Hateful Visage Flame',
      type: 'Ability',
      // 77B1 = Golden Flame
      // 77B2 = Silver Flame
      netRegex: NetRegexes.ability({ id: ['77B1', '77B2'], ...playerDamageFields }),
      condition: (data, matches) => data.DamageFromMatches(matches) > 0,
      mistake: (_data, matches) => {
        return {
          type: 'warn',
          blame: matches.target,
          reportId: matches.targetId,
          text: matches.ability,
        };
      },
    },
    {
      id: 'ASSS Shadowcaster Blessed Beacon',
      type: 'Ability',
      // TODO: this could be invuln'd
      netRegex: NetRegexes.ability({ id: ['76C8', '76C9'] }),
      mistake: stackMistake('fail', 2),
    },
    {
      // This will kill the players if they don't take a portal.
      id: 'ASSS Shadowcaster Call of the Portal',
      type: 'GainsEffect',
      netRegex: NetRegexes.gainsEffect({ effectId: 'CCC' }),
      delaySeconds: (_data, matches) => parseFloat(matches.duration) - 0.5,
      deathReason: (_data, matches) => {
        return {
          id: matches.targetId,
          name: matches.target,
          reportId: matches.targetId,
          text: matches.effect,
        };
      },
    },
    {
      id: 'ASSS Shadowcaster Rite of Passage Gain',
      type: 'GainsEffect',
      netRegex: NetRegexes.gainsEffect({ effectId: 'CCD' }),
      run: (data, matches) => data.hasRiteOfPassage[matches.target] = true,
    },
    {
      id: 'ASSS Shadowcaster Rite of Passage Lose',
      type: 'LosesEffect',
      netRegex: NetRegexes.losesEffect({ effectId: 'CCD' }),
      run: (data, matches) => data.hasRiteOfPassage[matches.target] = false,
    },
    {
      id: 'ASSS Shadowcaster Stun',
      type: 'GainsEffect',
      netRegex: NetRegexes.gainsEffect({ effectId: 'A60' }),
      // Stuns are a good way to indicate who broke a line incorrectly.
      // However, everybody gets a stun during the teleport section.
      condition: (data, matches) => !data.hasRiteOfPassage[matches.target],
      mistake: (_data, matches) => {
        return {
          type: 'warn',
          blame: matches.target,
          reportId: matches.targetId,
          text: matches.effect,
        };
      },
    },
  ],
};

export default triggerSet;
